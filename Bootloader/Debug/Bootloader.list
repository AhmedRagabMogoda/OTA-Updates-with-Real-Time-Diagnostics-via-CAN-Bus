
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001924  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001a30  08001a30  00002a30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a5c  08001a5c  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a5c  08001a5c  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a5c  08001a5c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a5c  08001a5c  00002a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a60  08001a60  00002a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001a64  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000010  08001a70  00003010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08001a70  000034e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1e7  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002831  00000000  00000000  0001121c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00005289  00000000  00000000  00013a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  00018cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6e  00000000  00000000  000197f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017bff  00000000  00000000  0001a25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa08  00000000  00000000  00031e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a630  00000000  00000000  00041865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cbe95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b1c  00000000  00000000  000cbed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000cd9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a18 	.word	0x08001a18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001a18 	.word	0x08001a18

0800014c <WriteMetadata>:
    }
}

/** Write current metadata to reserved flash page **/
void WriteMetadata(void)
{
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	b086      	sub	sp, #24
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t PageError;

    /* Unlock flash */
    HAL_FLASH_Unlock();
 8000150:	f000 fea2 	bl	8000e98 <HAL_FLASH_Unlock>

    /** Erase metadata page **/
    EraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000154:	2400      	movs	r4, #0
    EraseInit.PageAddress = FLASH_METADATA_ADDR;
    EraseInit.NbPages     = 1;
 8000156:	2301      	movs	r3, #1
    HAL_FLASHEx_Erase(&EraseInit, &PageError);

    /** Program metadata words **/
    uint32_t Address = FLASH_METADATA_ADDR;
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address,       MetaData.magic);
 8000158:	4d12      	ldr	r5, [pc, #72]	@ (80001a4 <WriteMetadata+0x58>)
    EraseInit.NbPages     = 1;
 800015a:	4e13      	ldr	r6, [pc, #76]	@ (80001a8 <WriteMetadata+0x5c>)
    HAL_FLASHEx_Erase(&EraseInit, &PageError);
 800015c:	a901      	add	r1, sp, #4
 800015e:	a802      	add	r0, sp, #8
    EraseInit.NbPages     = 1;
 8000160:	e9cd 6304 	strd	r6, r3, [sp, #16]
    EraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000164:	9402      	str	r4, [sp, #8]
    HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8000166:	f000 ff41 	bl	8000fec <HAL_FLASHEx_Erase>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address,       MetaData.magic);
 800016a:	4623      	mov	r3, r4
 800016c:	4631      	mov	r1, r6
 800016e:	682a      	ldr	r2, [r5, #0]
 8000170:	2002      	movs	r0, #2
 8000172:	f000 fed7 	bl	8000f24 <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 4U,  MetaData.active_app);
 8000176:	4623      	mov	r3, r4
 8000178:	686a      	ldr	r2, [r5, #4]
 800017a:	490c      	ldr	r1, [pc, #48]	@ (80001ac <WriteMetadata+0x60>)
 800017c:	2002      	movs	r0, #2
 800017e:	f000 fed1 	bl	8000f24 <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 8U,  MetaData.version);
 8000182:	4623      	mov	r3, r4
 8000184:	68aa      	ldr	r2, [r5, #8]
 8000186:	490a      	ldr	r1, [pc, #40]	@ (80001b0 <WriteMetadata+0x64>)
 8000188:	2002      	movs	r0, #2
 800018a:	f000 fecb 	bl	8000f24 <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 12U, MetaData.pending);
 800018e:	4623      	mov	r3, r4
 8000190:	68ea      	ldr	r2, [r5, #12]
 8000192:	4908      	ldr	r1, [pc, #32]	@ (80001b4 <WriteMetadata+0x68>)
 8000194:	2002      	movs	r0, #2
 8000196:	f000 fec5 	bl	8000f24 <HAL_FLASH_Program>

    /* Lock flash */
    HAL_FLASH_Lock();
 800019a:	f000 fe8f 	bl	8000ebc <HAL_FLASH_Lock>
}
 800019e:	b006      	add	sp, #24
 80001a0:	bd70      	pop	{r4, r5, r6, pc}
 80001a2:	bf00      	nop
 80001a4:	20000440 	.word	0x20000440
 80001a8:	0800f000 	.word	0x0800f000
 80001ac:	0800f004 	.word	0x0800f004
 80001b0:	0800f008 	.word	0x0800f008
 80001b4:	0800f00c 	.word	0x0800f00c

080001b8 <ReadMetadata>:
    if (pMetaDataAdd->magic != METADATA_MAGIC)
 80001b8:	4b0b      	ldr	r3, [pc, #44]	@ (80001e8 <ReadMetadata+0x30>)
{
 80001ba:	b410      	push	{r4}
    if (pMetaDataAdd->magic != METADATA_MAGIC)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4c0b      	ldr	r4, [pc, #44]	@ (80001ec <ReadMetadata+0x34>)
 80001c0:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 80001c4:	d00a      	beq.n	80001dc <ReadMetadata+0x24>
    	MetaData.active_app = 1U;
 80001c6:	2301      	movs	r3, #1
 80001c8:	f04f 32a5 	mov.w	r2, #2779096485	@ 0xa5a5a5a5
 80001cc:	e9c4 2300 	strd	r2, r3, [r4]
    	MetaData.version = 0U;
 80001d0:	2300      	movs	r3, #0
    	MetaData.pending = 0U;
 80001d2:	e9c4 3302 	strd	r3, r3, [r4, #8]
}
 80001d6:	bc10      	pop	{r4}
        WriteMetadata();
 80001d8:	f7ff bfb8 	b.w	800014c <WriteMetadata>
        memcpy(&MetaData, pMetaDataAdd, sizeof(metadata_t));
 80001dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80001e2:	bc10      	pop	{r4}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	0800f000 	.word	0x0800f000
 80001ec:	20000440 	.word	0x20000440

080001f0 <JumpToApp>:
	void (*App_ResetHandler)(void);

	uint32_t ResetHandlerAddress;

	/* Configuration MSP of the user App by Reading value from base address */
	uint32_t Local_u32MSPVal = *((volatile uint32_t*)Address);
 80001f0:	6803      	ldr	r3, [r0, #0]
	__asm volatile("MSR MSP,%0"::"r"(Local_u32MSPVal));
 80001f2:	f383 8808 	msr	MSP, r3

	ResetHandlerAddress = *((volatile uint32_t*)(Address + 4));
 80001f6:	6843      	ldr	r3, [r0, #4]

	/* Vector Table Relocation */
	//SCB->VTOR = Address;

	/* Jump to the user App Reset Handler */
	App_ResetHandler();
 80001f8:	4718      	bx	r3

080001fa <EraseAppRegion>:
uint8_t EraseAppRegion(uint32_t PageAddr)
{
	uint8_t LocalStatus = 0;
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t PageError;
    EraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80001fa:	2300      	movs	r3, #0
{
 80001fc:	b510      	push	{r4, lr}
 80001fe:	b086      	sub	sp, #24
    EraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000200:	9302      	str	r3, [sp, #8]
    EraseInit.PageAddress = PageAddr;
    EraseInit.NbPages     = APP_NUM_PAGE;
 8000202:	231a      	movs	r3, #26
    EraseInit.PageAddress = PageAddr;
 8000204:	9004      	str	r0, [sp, #16]
    EraseInit.NbPages     = APP_NUM_PAGE;
 8000206:	9305      	str	r3, [sp, #20]

    /* Unlock flash */
    HAL_FLASH_Unlock();
 8000208:	f000 fe46 	bl	8000e98 <HAL_FLASH_Unlock>

    if(HAL_FLASHEx_Erase(&EraseInit,&PageError)!=HAL_OK)
 800020c:	a901      	add	r1, sp, #4
 800020e:	a802      	add	r0, sp, #8
 8000210:	f000 feec 	bl	8000fec <HAL_FLASHEx_Erase>
 8000214:	4604      	mov	r4, r0
    {
    	LocalStatus = -1;
    }

    /* Lock flash */
    HAL_FLASH_Lock();
 8000216:	f000 fe51 	bl	8000ebc <HAL_FLASH_Lock>
    if(HAL_FLASHEx_Erase(&EraseInit,&PageError)!=HAL_OK)
 800021a:	1e20      	subs	r0, r4, #0
 800021c:	bf18      	it	ne
 800021e:	2001      	movne	r0, #1
 8000220:	4240      	negs	r0, r0

    return LocalStatus;
}
 8000222:	b2c0      	uxtb	r0, r0
 8000224:	b006      	add	sp, #24
 8000226:	bd10      	pop	{r4, pc}

08000228 <WriteChunkToFlash>:

uint8_t  WriteChunkToFlash(uint32_t Address,const uint8_t*Buffer)
{
 8000228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800022c:	460e      	mov	r6, r1
 800022e:	4607      	mov	r7, r0
	uint32_t Count;

    /* Unlock flash */
    HAL_FLASH_Unlock();

    for (Count =0; Count < FLASH_PAGE_SIZE; Count += 2)
 8000230:	2400      	movs	r4, #0
    HAL_FLASH_Unlock();
 8000232:	f000 fe31 	bl	8000e98 <HAL_FLASH_Unlock>
    {
        uint16_t Data = Buffer[Count] | (Buffer[Count+1] << 8);
 8000236:	f106 0801 	add.w	r8, r6, #1
 800023a:	5d33      	ldrb	r3, [r6, r4]
 800023c:	f818 2004 	ldrb.w	r2, [r8, r4]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data)!=HAL_OK)
 8000240:	2001      	movs	r0, #1
 8000242:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8000246:	1939      	adds	r1, r7, r4
 8000248:	2300      	movs	r3, #0
 800024a:	f000 fe6b 	bl	8000f24 <HAL_FLASH_Program>
 800024e:	4605      	mov	r5, r0
 8000250:	b940      	cbnz	r0, 8000264 <WriteChunkToFlash+0x3c>
    for (Count =0; Count < FLASH_PAGE_SIZE; Count += 2)
 8000252:	3402      	adds	r4, #2
 8000254:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 8000258:	d1ef      	bne.n	800023a <WriteChunkToFlash+0x12>
        }
        Address +=2;
    }

    /* Lock flash */
    HAL_FLASH_Lock();
 800025a:	f000 fe2f 	bl	8000ebc <HAL_FLASH_Lock>

    return LocalStatus;
}
 800025e:	4628      	mov	r0, r5
 8000260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        	LocalStatus = -1;
 8000264:	25ff      	movs	r5, #255	@ 0xff
 8000266:	e7f8      	b.n	800025a <WriteChunkToFlash+0x32>

08000268 <SendAck>:

void SendAck(uint16_t Code)
{
    CAN_TxHeaderTypeDef TxHeader = {0};
 8000268:	2214      	movs	r2, #20
{
 800026a:	b510      	push	{r4, lr}
 800026c:	b08a      	sub	sp, #40	@ 0x28
 800026e:	4604      	mov	r4, r0
    CAN_TxHeaderTypeDef TxHeader = {0};
 8000270:	2100      	movs	r1, #0
 8000272:	eb0d 0002 	add.w	r0, sp, r2
 8000276:	f001 fba3 	bl	80019c0 <memset>
    uint8_t Data[8] = {0};
 800027a:	2300      	movs	r3, #0
 800027c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    uint32_t TxMailbox;

    /** Set CAN header for ACK message **/
    TxHeader.StdId = UPDATE_ACK_ID;
 8000280:	f240 2301 	movw	r3, #513	@ 0x201
 8000284:	9304      	str	r3, [sp, #16]
    TxHeader.IDE   = CAN_ID_STD;
    TxHeader.RTR   = CAN_RTR_DATA;
    TxHeader.DLC   = 2;  /** Sending 2 bytes: LSB + MSB of Code **/
 8000286:	2302      	movs	r3, #2
    /** Split the 16-bit code into 2 bytes (Little Endian) **/
    Data[0] = (uint8_t)(Code & 0xFF);        /** LSB **/
    Data[1] = (uint8_t)((Code >> 8) & 0xFF); /** MSB **/

    /** Send CAN message **/
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, Data, &TxMailbox);
 8000288:	aa02      	add	r2, sp, #8
    TxHeader.DLC   = 2;  /** Sending 2 bytes: LSB + MSB of Code **/
 800028a:	9308      	str	r3, [sp, #32]
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, Data, &TxMailbox);
 800028c:	a904      	add	r1, sp, #16
 800028e:	ab01      	add	r3, sp, #4
 8000290:	4803      	ldr	r0, [pc, #12]	@ (80002a0 <SendAck+0x38>)
    Data[0] = (uint8_t)(Code & 0xFF);        /** LSB **/
 8000292:	f8ad 4008 	strh.w	r4, [sp, #8]
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, Data, &TxMailbox);
 8000296:	f000 fb9f 	bl	80009d8 <HAL_CAN_AddTxMessage>
}
 800029a:	b00a      	add	sp, #40	@ 0x28
 800029c:	bd10      	pop	{r4, pc}
 800029e:	bf00      	nop
 80002a0:	20000450 	.word	0x20000450

080002a4 <StartFirmwareReception>:
    DestAddGlobal = (MetaData.active_app==1U)?FLASH_APP2_START:FLASH_APP1_START;
 80002a4:	4b09      	ldr	r3, [pc, #36]	@ (80002cc <StartFirmwareReception+0x28>)
 80002a6:	4a0a      	ldr	r2, [pc, #40]	@ (80002d0 <StartFirmwareReception+0x2c>)
 80002a8:	6859      	ldr	r1, [r3, #4]
 80002aa:	4b0a      	ldr	r3, [pc, #40]	@ (80002d4 <StartFirmwareReception+0x30>)
    SendAck(START_UPDATE);
 80002ac:	20ab      	movs	r0, #171	@ 0xab
    DestAddGlobal = (MetaData.active_app==1U)?FLASH_APP2_START:FLASH_APP1_START;
 80002ae:	2901      	cmp	r1, #1
 80002b0:	bf08      	it	eq
 80002b2:	4613      	moveq	r3, r2
 80002b4:	4a08      	ldr	r2, [pc, #32]	@ (80002d8 <StartFirmwareReception+0x34>)
 80002b6:	6013      	str	r3, [r2, #0]
    SizeReceived   = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	4a08      	ldr	r2, [pc, #32]	@ (80002dc <StartFirmwareReception+0x38>)
 80002bc:	7013      	strb	r3, [r2, #0]
    ChunkIndex     = 0;
 80002be:	4a08      	ldr	r2, [pc, #32]	@ (80002e0 <StartFirmwareReception+0x3c>)
 80002c0:	6013      	str	r3, [r2, #0]
    ChunkOffset    = 0;
 80002c2:	4a08      	ldr	r2, [pc, #32]	@ (80002e4 <StartFirmwareReception+0x40>)
 80002c4:	6013      	str	r3, [r2, #0]
    SendAck(START_UPDATE);
 80002c6:	f7ff bfcf 	b.w	8000268 <SendAck>
 80002ca:	bf00      	nop
 80002cc:	20000440 	.word	0x20000440
 80002d0:	08008800 	.word	0x08008800
 80002d4:	08002000 	.word	0x08002000
 80002d8:	20000030 	.word	0x20000030
 80002dc:	2000002c 	.word	0x2000002c
 80002e0:	20000038 	.word	0x20000038
 80002e4:	2000003c 	.word	0x2000003c

080002e8 <HandleFrame>:
{
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (SizeReceived == 0)
 80002ea:	4c32      	ldr	r4, [pc, #200]	@ (80003b4 <HandleFrame+0xcc>)
 80002ec:	7823      	ldrb	r3, [r4, #0]
 80002ee:	b18b      	cbz	r3, 8000314 <HandleFrame+0x2c>
 80002f0:	2200      	movs	r2, #0
        for (Count = 0 ; Count < RxHeader->DLC && ChunkOffset < FLASH_PAGE_SIZE ; Count++)
 80002f2:	4613      	mov	r3, r2
 80002f4:	4c30      	ldr	r4, [pc, #192]	@ (80003b8 <HandleFrame+0xd0>)
 80002f6:	4d31      	ldr	r5, [pc, #196]	@ (80003bc <HandleFrame+0xd4>)
 80002f8:	6827      	ldr	r7, [r4, #0]
 80002fa:	443d      	add	r5, r7
 80002fc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8000300:	19de      	adds	r6, r3, r7
 8000302:	459c      	cmp	ip, r3
 8000304:	d821      	bhi.n	800034a <HandleFrame+0x62>
 8000306:	b102      	cbz	r2, 800030a <HandleFrame+0x22>
 8000308:	6026      	str	r6, [r4, #0]
        if (ChunkOffset >= FLASH_PAGE_SIZE)
 800030a:	6823      	ldr	r3, [r4, #0]
 800030c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000310:	d221      	bcs.n	8000356 <HandleFrame+0x6e>
}
 8000312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TotalChunks = Data[0];
 8000314:	780b      	ldrb	r3, [r1, #0]
 8000316:	4a2a      	ldr	r2, [pc, #168]	@ (80003c0 <HandleFrame+0xd8>)
 8000318:	6013      	str	r3, [r2, #0]
        if (TotalChunks==0 || TotalChunks > APP_NUM_PAGE)
 800031a:	3b01      	subs	r3, #1
 800031c:	2b19      	cmp	r3, #25
 800031e:	d904      	bls.n	800032a <HandleFrame+0x42>
            SendAck(CODE_ERROR);
 8000320:	20ff      	movs	r0, #255	@ 0xff
}
 8000322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        		SendAck(CODE_NEXT);
 8000326:	f7ff bf9f 	b.w	8000268 <SendAck>
        	if (EraseAppRegion(DestAddGlobal)!=0)
 800032a:	4b26      	ldr	r3, [pc, #152]	@ (80003c4 <HandleFrame+0xdc>)
 800032c:	6818      	ldr	r0, [r3, #0]
 800032e:	f7ff ff64 	bl	80001fa <EraseAppRegion>
 8000332:	2800      	cmp	r0, #0
 8000334:	d1f4      	bne.n	8000320 <HandleFrame+0x38>
        		SizeReceived = 1;
 8000336:	2301      	movs	r3, #1
 8000338:	7023      	strb	r3, [r4, #0]
        		SendAck(CODE_NEXT);
 800033a:	20a5      	movs	r0, #165	@ 0xa5
 800033c:	e7f1      	b.n	8000322 <HandleFrame+0x3a>
            ChunkBuffer[ChunkOffset++] = Data[Count];
 800033e:	5cca      	ldrb	r2, [r1, r3]
        for (Count = 0 ; Count < RxHeader->DLC && ChunkOffset < FLASH_PAGE_SIZE ; Count++)
 8000340:	3301      	adds	r3, #1
            ChunkBuffer[ChunkOffset++] = Data[Count];
 8000342:	f805 2b01 	strb.w	r2, [r5], #1
        for (Count = 0 ; Count < RxHeader->DLC && ChunkOffset < FLASH_PAGE_SIZE ; Count++)
 8000346:	2201      	movs	r2, #1
 8000348:	e7d8      	b.n	80002fc <HandleFrame+0x14>
 800034a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800034e:	d3f6      	bcc.n	800033e <HandleFrame+0x56>
 8000350:	2a00      	cmp	r2, #0
 8000352:	d0da      	beq.n	800030a <HandleFrame+0x22>
 8000354:	6026      	str	r6, [r4, #0]
            uint32_t Address = DestAddGlobal + (ChunkIndex * FLASH_PAGE_SIZE);
 8000356:	4d1c      	ldr	r5, [pc, #112]	@ (80003c8 <HandleFrame+0xe0>)
 8000358:	4b1a      	ldr	r3, [pc, #104]	@ (80003c4 <HandleFrame+0xdc>)
 800035a:	6828      	ldr	r0, [r5, #0]
 800035c:	681b      	ldr	r3, [r3, #0]
            if (WriteChunkToFlash(Address,ChunkBuffer)==0)
 800035e:	4917      	ldr	r1, [pc, #92]	@ (80003bc <HandleFrame+0xd4>)
 8000360:	eb03 2080 	add.w	r0, r3, r0, lsl #10
 8000364:	f7ff ff60 	bl	8000228 <WriteChunkToFlash>
 8000368:	2800      	cmp	r0, #0
 800036a:	d1d9      	bne.n	8000320 <HandleFrame+0x38>
                if (ChunkIndex < TotalChunks)
 800036c:	4a14      	ldr	r2, [pc, #80]	@ (80003c0 <HandleFrame+0xd8>)
                ChunkIndex++;
 800036e:	682b      	ldr	r3, [r5, #0]
                if (ChunkIndex < TotalChunks)
 8000370:	6812      	ldr	r2, [r2, #0]
                ChunkIndex++;
 8000372:	3301      	adds	r3, #1
                if (ChunkIndex < TotalChunks)
 8000374:	4293      	cmp	r3, r2
                ChunkIndex++;
 8000376:	602b      	str	r3, [r5, #0]
                ChunkOffset=0;
 8000378:	6020      	str	r0, [r4, #0]
                if (ChunkIndex < TotalChunks)
 800037a:	d3de      	bcc.n	800033a <HandleFrame+0x52>
                    MetaData.active_app = (MetaData.active_app==1U)?2U:1U;
 800037c:	4c13      	ldr	r4, [pc, #76]	@ (80003cc <HandleFrame+0xe4>)
 800037e:	6863      	ldr	r3, [r4, #4]
 8000380:	2b01      	cmp	r3, #1
 8000382:	bf14      	ite	ne
 8000384:	2301      	movne	r3, #1
 8000386:	2302      	moveq	r3, #2
 8000388:	6063      	str	r3, [r4, #4]
                    MetaData.version++;
 800038a:	68a3      	ldr	r3, [r4, #8]
 800038c:	3301      	adds	r3, #1
                    MetaData.pending=0U;
 800038e:	e9c4 3002 	strd	r3, r0, [r4, #8]
                    WriteMetadata();
 8000392:	f7ff fedb 	bl	800014c <WriteMetadata>
                    SendAck(CODE_DONE);
 8000396:	205a      	movs	r0, #90	@ 0x5a
 8000398:	f7ff ff66 	bl	8000268 <SendAck>
                    JumpToApp((MetaData.active_app==1U)?FLASH_APP1_START:FLASH_APP2_START);
 800039c:	6860      	ldr	r0, [r4, #4]
 800039e:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <HandleFrame+0xe8>)
 80003a0:	4a0c      	ldr	r2, [pc, #48]	@ (80003d4 <HandleFrame+0xec>)
 80003a2:	2801      	cmp	r0, #1
 80003a4:	bf14      	ite	ne
 80003a6:	4610      	movne	r0, r2
 80003a8:	4618      	moveq	r0, r3
}
 80003aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    JumpToApp((MetaData.active_app==1U)?FLASH_APP1_START:FLASH_APP2_START);
 80003ae:	f7ff bf1f 	b.w	80001f0 <JumpToApp>
 80003b2:	bf00      	nop
 80003b4:	2000002c 	.word	0x2000002c
 80003b8:	2000003c 	.word	0x2000003c
 80003bc:	20000040 	.word	0x20000040
 80003c0:	20000034 	.word	0x20000034
 80003c4:	20000030 	.word	0x20000030
 80003c8:	20000038 	.word	0x20000038
 80003cc:	20000440 	.word	0x20000440
 80003d0:	08002000 	.word	0x08002000
 80003d4:	08008800 	.word	0x08008800

080003d8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* CAN RX interrupt: dispatch based on message ID */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80003d8:	b500      	push	{lr}
 80003da:	b08b      	sub	sp, #44	@ 0x2c
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t Data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Data);
 80003dc:	ab01      	add	r3, sp, #4
 80003de:	2100      	movs	r1, #0
 80003e0:	aa03      	add	r2, sp, #12
 80003e2:	f000 fb42 	bl	8000a6a <HAL_CAN_GetRxMessage>

    if (RxHeader.StdId == UPDATE_FRAME_ID)
 80003e6:	9b03      	ldr	r3, [sp, #12]
 80003e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80003ec:	d103      	bne.n	80003f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
    {
    	HandleFrame(&RxHeader,Data);
 80003ee:	a901      	add	r1, sp, #4
 80003f0:	a803      	add	r0, sp, #12
 80003f2:	f7ff ff79 	bl	80002e8 <HandleFrame>
    }
}
 80003f6:	b00b      	add	sp, #44	@ 0x2c
 80003f8:	f85d fb04 	ldr.w	pc, [sp], #4

080003fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003fc:	b510      	push	{r4, lr}
 80003fe:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000400:	2220      	movs	r2, #32
 8000402:	2100      	movs	r1, #0
 8000404:	a807      	add	r0, sp, #28
 8000406:	f001 fadb 	bl	80019c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040a:	2214      	movs	r2, #20
 800040c:	2100      	movs	r1, #0
 800040e:	a801      	add	r0, sp, #4
 8000410:	f001 fad6 	bl	80019c0 <memset>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000414:	2310      	movs	r3, #16
 8000416:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000418:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800041e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000422:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000424:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000426:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000428:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	f000 ff0b 	bl	8001244 <HAL_RCC_OscConfig>
 800042e:	b108      	cbz	r0, 8000434 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000432:	e7fe      	b.n	8000432 <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000434:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000436:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800043a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000440:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000444:	4621      	mov	r1, r4
 8000446:	a801      	add	r0, sp, #4
 8000448:	f001 f8be 	bl	80015c8 <HAL_RCC_ClockConfig>
 800044c:	b108      	cbz	r0, 8000452 <SystemClock_Config+0x56>
 800044e:	b672      	cpsid	i
  while (1)
 8000450:	e7fe      	b.n	8000450 <SystemClock_Config+0x54>
}
 8000452:	b010      	add	sp, #64	@ 0x40
 8000454:	bd10      	pop	{r4, pc}
	...

08000458 <CAN_Filter_Config>:
{
 8000458:	b570      	push	{r4, r5, r6, lr}
 800045a:	b094      	sub	sp, #80	@ 0x50
  CAN_FilterTypeDef sFilterConfig0 = {0};
 800045c:	2218      	movs	r2, #24
 800045e:	2100      	movs	r1, #0
 8000460:	a801      	add	r0, sp, #4
 8000462:	f001 faad 	bl	80019c0 <memset>
  sFilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 8000466:	2401      	movs	r4, #1
  sFilterConfig0.FilterIdHigh = (UPDATE_FRAME_ID << 5);
 8000468:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  sFilterConfig0.FilterMaskIdHigh = 0xFFFF;  /* Match all bits of ID */
 800046c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
  sFilterConfig0.SlaveStartFilterBank = 14;
 8000470:	250e      	movs	r5, #14
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig0) != HAL_OK)
 8000472:	4669      	mov	r1, sp
 8000474:	4810      	ldr	r0, [pc, #64]	@ (80004b8 <CAN_Filter_Config+0x60>)
  sFilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 8000476:	9407      	str	r4, [sp, #28]
  sFilterConfig0.FilterIdHigh = (UPDATE_FRAME_ID << 5);
 8000478:	9300      	str	r3, [sp, #0]
  sFilterConfig0.FilterMaskIdHigh = 0xFFFF;  /* Match all bits of ID */
 800047a:	9602      	str	r6, [sp, #8]
  sFilterConfig0.FilterActivation = ENABLE;
 800047c:	9408      	str	r4, [sp, #32]
  sFilterConfig0.SlaveStartFilterBank = 14;
 800047e:	9509      	str	r5, [sp, #36]	@ 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig0) != HAL_OK)
 8000480:	f000 fa0f 	bl	80008a2 <HAL_CAN_ConfigFilter>
 8000484:	4601      	mov	r1, r0
 8000486:	b108      	cbz	r0, 800048c <CAN_Filter_Config+0x34>
 8000488:	b672      	cpsid	i
  while (1)
 800048a:	e7fe      	b.n	800048a <CAN_Filter_Config+0x32>
  CAN_FilterTypeDef sFilterConfig1 = {0};
 800048c:	2218      	movs	r2, #24
 800048e:	a80b      	add	r0, sp, #44	@ 0x2c
 8000490:	f001 fa96 	bl	80019c0 <memset>
  sFilterConfig1.FilterIdHigh = (UPDATE_ACK_ID << 5);
 8000494:	f244 0320 	movw	r3, #16416	@ 0x4020
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig1) != HAL_OK)
 8000498:	4807      	ldr	r0, [pc, #28]	@ (80004b8 <CAN_Filter_Config+0x60>)
 800049a:	a90a      	add	r1, sp, #40	@ 0x28
  sFilterConfig1.SlaveStartFilterBank = 14;
 800049c:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
  sFilterConfig1.FilterBank = 1;
 80004a0:	940f      	str	r4, [sp, #60]	@ 0x3c
  sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 80004a2:	9411      	str	r4, [sp, #68]	@ 0x44
  sFilterConfig1.FilterIdHigh = (UPDATE_ACK_ID << 5);
 80004a4:	930a      	str	r3, [sp, #40]	@ 0x28
  sFilterConfig1.FilterMaskIdHigh = 0xFFFF;  /* Match all bits of ID */
 80004a6:	960c      	str	r6, [sp, #48]	@ 0x30
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig1) != HAL_OK)
 80004a8:	f000 f9fb 	bl	80008a2 <HAL_CAN_ConfigFilter>
 80004ac:	b108      	cbz	r0, 80004b2 <CAN_Filter_Config+0x5a>
 80004ae:	b672      	cpsid	i
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <CAN_Filter_Config+0x58>
}
 80004b2:	b014      	add	sp, #80	@ 0x50
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	bf00      	nop
 80004b8:	20000450 	.word	0x20000450

080004bc <main>:
{
 80004bc:	b513      	push	{r0, r1, r4, lr}
  HAL_Init();
 80004be:	f000 f951 	bl	8000764 <HAL_Init>
  SystemClock_Config();
 80004c2:	f7ff ff9b 	bl	80003fc <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b22      	ldr	r3, [pc, #136]	@ (8000550 <main+0x94>)
  hcan.Instance = CAN1;
 80004c8:	4c22      	ldr	r4, [pc, #136]	@ (8000554 <main+0x98>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	699a      	ldr	r2, [r3, #24]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004cc:	f44f 2140 	mov.w	r1, #786432	@ 0xc0000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d0:	f042 0204 	orr.w	r2, r2, #4
 80004d4:	619a      	str	r2, [r3, #24]
 80004d6:	699b      	ldr	r3, [r3, #24]
  hcan.Init.Prescaler = 4;
 80004d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000558 <main+0x9c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	f003 0304 	and.w	r3, r3, #4
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	9b01      	ldr	r3, [sp, #4]
  hcan.Init.Prescaler = 4;
 80004e2:	2304      	movs	r3, #4
 80004e4:	e9c4 2300 	strd	r2, r3, [r4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004e8:	2300      	movs	r3, #0
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004ee:	4620      	mov	r0, r4
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004f0:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004f4:	e9c4 1204 	strd	r1, r2, [r4, #16]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004f8:	61a3      	str	r3, [r4, #24]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004fa:	83a3      	strh	r3, [r4, #28]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004fc:	f000 f956 	bl	80007ac <HAL_CAN_Init>
 8000500:	b108      	cbz	r0, 8000506 <main+0x4a>
 8000502:	b672      	cpsid	i
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x48>
  CAN_Filter_Config();
 8000506:	f7ff ffa7 	bl	8000458 <CAN_Filter_Config>
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 800050a:	4620      	mov	r0, r4
 800050c:	f000 fa39 	bl	8000982 <HAL_CAN_Start>
 8000510:	b108      	cbz	r0, 8000516 <main+0x5a>
 8000512:	b672      	cpsid	i
  while (1)
 8000514:	e7fe      	b.n	8000514 <main+0x58>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000516:	2102      	movs	r1, #2
 8000518:	4620      	mov	r0, r4
 800051a:	f000 fb22 	bl	8000b62 <HAL_CAN_ActivateNotification>
 800051e:	b108      	cbz	r0, 8000524 <main+0x68>
 8000520:	b672      	cpsid	i
  while (1)
 8000522:	e7fe      	b.n	8000522 <main+0x66>
  ReadMetadata();
 8000524:	f7ff fe48 	bl	80001b8 <ReadMetadata>
  if (MetaData.pending == 1U)
 8000528:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <main+0xa0>)
 800052a:	68da      	ldr	r2, [r3, #12]
 800052c:	2a01      	cmp	r2, #1
 800052e:	d102      	bne.n	8000536 <main+0x7a>
      StartFirmwareReception();
 8000530:	f7ff feb8 	bl	80002a4 <StartFirmwareReception>
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x78>
	  if (MetaData.active_app == 1U)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d103      	bne.n	8000544 <main+0x88>
		  JumpToApp(App);
 800053c:	4808      	ldr	r0, [pc, #32]	@ (8000560 <main+0xa4>)
 800053e:	f7ff fe57 	bl	80001f0 <JumpToApp>
 8000542:	e7f7      	b.n	8000534 <main+0x78>
	  else if (MetaData.active_app == 2U)
 8000544:	2b02      	cmp	r3, #2
 8000546:	d1f5      	bne.n	8000534 <main+0x78>
		  JumpToApp(App);
 8000548:	4806      	ldr	r0, [pc, #24]	@ (8000564 <main+0xa8>)
 800054a:	f7ff fe51 	bl	80001f0 <JumpToApp>
 800054e:	e7f1      	b.n	8000534 <main+0x78>
 8000550:	40021000 	.word	0x40021000
 8000554:	20000450 	.word	0x20000450
 8000558:	40006400 	.word	0x40006400
 800055c:	20000440 	.word	0x20000440
 8000560:	08002000 	.word	0x08002000
 8000564:	08008800 	.word	0x08008800

08000568 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8000568:	6802      	ldr	r2, [r0, #0]
 800056a:	4b03      	ldr	r3, [pc, #12]	@ (8000578 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800056c:	429a      	cmp	r2, r3
 800056e:	d101      	bne.n	8000574 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000570:	f000 b90a 	b.w	8000788 <HAL_IncTick>
}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40012c00 	.word	0x40012c00

0800057c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800057c:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <HAL_MspInit+0x3c>)
{
 800057e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000580:	699a      	ldr	r2, [r3, #24]
 8000582:	f042 0201 	orr.w	r2, r2, #1
 8000586:	619a      	str	r2, [r3, #24]
 8000588:	699a      	ldr	r2, [r3, #24]
 800058a:	f002 0201 	and.w	r2, r2, #1
 800058e:	9200      	str	r2, [sp, #0]
 8000590:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	69da      	ldr	r2, [r3, #28]
 8000594:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000598:	61da      	str	r2, [r3, #28]
 800059a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059c:	4a07      	ldr	r2, [pc, #28]	@ (80005bc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005a6:	6853      	ldr	r3, [r2, #4]
 80005a8:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	b002      	add	sp, #8
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40010000 	.word	0x40010000

080005c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005c0:	b510      	push	{r4, lr}
 80005c2:	4604      	mov	r4, r0
 80005c4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	2210      	movs	r2, #16
 80005c8:	2100      	movs	r1, #0
 80005ca:	a802      	add	r0, sp, #8
 80005cc:	f001 f9f8 	bl	80019c0 <memset>
  if(hcan->Instance==CAN1)
 80005d0:	6822      	ldr	r2, [r4, #0]
 80005d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <HAL_CAN_MspInit+0x88>)
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d135      	bne.n	8000644 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005d8:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
 80005dc:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	481b      	ldr	r0, [pc, #108]	@ (800064c <HAL_CAN_MspInit+0x8c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005e0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80005e4:	61da      	str	r2, [r3, #28]
 80005e6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ea:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	699a      	ldr	r2, [r3, #24]
 80005f4:	f042 0204 	orr.w	r2, r2, #4
 80005f8:	619a      	str	r2, [r3, #24]
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000604:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000608:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060a:	f000 fd43 	bl	8001094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000612:	2302      	movs	r3, #2
 8000614:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000618:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	480c      	ldr	r0, [pc, #48]	@ (800064c <HAL_CAN_MspInit+0x8c>)
 800061c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	f000 fd38 	bl	8001094 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 7, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2107      	movs	r1, #7
 8000628:	2013      	movs	r0, #19
 800062a:	f000 fbcf 	bl	8000dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800062e:	2013      	movs	r0, #19
 8000630:	f000 fbfc 	bl	8000e2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 7, 0);
 8000634:	2014      	movs	r0, #20
 8000636:	2200      	movs	r2, #0
 8000638:	2107      	movs	r1, #7
 800063a:	f000 fbc7 	bl	8000dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800063e:	2014      	movs	r0, #20
 8000640:	f000 fbf4 	bl	8000e2c <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000644:	b006      	add	sp, #24
 8000646:	bd10      	pop	{r4, pc}
 8000648:	40006400 	.word	0x40006400
 800064c:	40010800 	.word	0x40010800

08000650 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <HAL_InitTick+0x7c>)
{
 8000652:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000654:	699a      	ldr	r2, [r3, #24]
{
 8000656:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000658:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800065c:	619a      	str	r2, [r3, #24]
 800065e:	699b      	ldr	r3, [r3, #24]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000660:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000662:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000666:	9302      	str	r3, [sp, #8]
{
 8000668:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800066a:	a803      	add	r0, sp, #12

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800066c:	4d18      	ldr	r5, [pc, #96]	@ (80006d0 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800066e:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000670:	f001 f856 	bl	8001720 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000674:	f001 f844 	bl	8001700 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8000678:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <HAL_InitTick+0x84>)
 800067a:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800067c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000680:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000682:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <HAL_InitTick+0x88>)
 8000684:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8000688:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800068a:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 800068c:	6068      	str	r0, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 800068e:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 8000690:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000692:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000694:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 8000696:	f001 f965 	bl	8001964 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800069a:	4604      	mov	r4, r0
 800069c:	b980      	cbnz	r0, 80006c0 <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800069e:	4628      	mov	r0, r5
 80006a0:	f001 f85e 	bl	8001760 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80006a4:	4604      	mov	r4, r0
 80006a6:	b958      	cbnz	r0, 80006c0 <HAL_InitTick+0x70>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006a8:	2019      	movs	r0, #25
 80006aa:	f000 fbbf 	bl	8000e2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ae:	2e0f      	cmp	r6, #15
 80006b0:	d809      	bhi.n	80006c6 <HAL_InitTick+0x76>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80006b2:	4622      	mov	r2, r4
 80006b4:	4631      	mov	r1, r6
 80006b6:	2019      	movs	r0, #25
 80006b8:	f000 fb88 	bl	8000dcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006bc:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <HAL_InitTick+0x8c>)
 80006be:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80006c0:	4620      	mov	r0, r4
 80006c2:	b008      	add	sp, #32
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 80006c6:	2401      	movs	r4, #1
 80006c8:	e7fa      	b.n	80006c0 <HAL_InitTick+0x70>
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000
 80006d0:	20000478 	.word	0x20000478
 80006d4:	40012c00 	.word	0x40012c00
 80006d8:	000f4240 	.word	0x000f4240
 80006dc:	20000008 	.word	0x20000008

080006e0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler>

080006e2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <HardFault_Handler>

080006e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <MemManage_Handler>

080006e6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler>

080006e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler>

080006ea <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ea:	4770      	bx	lr

080006ec <USB_HP_CAN1_TX_IRQHandler>:
void USB_HP_CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006ec:	4801      	ldr	r0, [pc, #4]	@ (80006f4 <USB_HP_CAN1_TX_IRQHandler+0x8>)
 80006ee:	f000 ba55 	b.w	8000b9c <HAL_CAN_IRQHandler>
 80006f2:	bf00      	nop
 80006f4:	20000450 	.word	0x20000450

080006f8 <USB_LP_CAN1_RX0_IRQHandler>:
}

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
 80006f8:	f7ff bff8 	b.w	80006ec <USB_HP_CAN1_TX_IRQHandler>

080006fc <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006fc:	4801      	ldr	r0, [pc, #4]	@ (8000704 <TIM1_UP_IRQHandler+0x8>)
 80006fe:	f001 b85d 	b.w	80017bc <HAL_TIM_IRQHandler>
 8000702:	bf00      	nop
 8000704:	20000478 	.word	0x20000478

08000708 <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8000708:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800070c:	4b01      	ldr	r3, [pc, #4]	@ (8000714 <SystemInit+0xc>)
 800070e:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000718:	f7ff fff6 	bl	8000708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800071c:	480b      	ldr	r0, [pc, #44]	@ (800074c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800071e:	490c      	ldr	r1, [pc, #48]	@ (8000750 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000720:	4a0c      	ldr	r2, [pc, #48]	@ (8000754 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a09      	ldr	r2, [pc, #36]	@ (8000758 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000734:	4c09      	ldr	r4, [pc, #36]	@ (800075c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000742:	f001 f945 	bl	80019d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000746:	f7ff feb9 	bl	80004bc <main>
  bx lr
 800074a:	4770      	bx	lr
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000754:	08001a64 	.word	0x08001a64
  ldr r2, =_sbss
 8000758:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800075c:	200004e8 	.word	0x200004e8

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>
	...

08000764 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000764:	4a07      	ldr	r2, [pc, #28]	@ (8000784 <HAL_Init+0x20>)
{
 8000766:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000768:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	f043 0310 	orr.w	r3, r3, #16
 8000770:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000772:	f000 fb19 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000776:	200f      	movs	r0, #15
 8000778:	f7ff ff6a 	bl	8000650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800077c:	f7ff fefe 	bl	800057c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000780:	2000      	movs	r0, #0
 8000782:	bd08      	pop	{r3, pc}
 8000784:	40022000 	.word	0x40022000

08000788 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000788:	4a03      	ldr	r2, [pc, #12]	@ (8000798 <HAL_IncTick+0x10>)
 800078a:	4b04      	ldr	r3, [pc, #16]	@ (800079c <HAL_IncTick+0x14>)
 800078c:	6811      	ldr	r1, [r2, #0]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	440b      	add	r3, r1
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	200004c0 	.word	0x200004c0
 800079c:	20000004 	.word	0x20000004

080007a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007a0:	4b01      	ldr	r3, [pc, #4]	@ (80007a8 <HAL_GetTick+0x8>)
 80007a2:	6818      	ldr	r0, [r3, #0]
}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	200004c0 	.word	0x200004c0

080007ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007ac:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007ae:	4604      	mov	r4, r0
 80007b0:	2800      	cmp	r0, #0
 80007b2:	d06e      	beq.n	8000892 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007b4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80007b8:	b90b      	cbnz	r3, 80007be <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007ba:	f7ff ff01 	bl	80005c0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007be:	6822      	ldr	r2, [r4, #0]
 80007c0:	6813      	ldr	r3, [r2, #0]
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007c8:	f7ff ffea 	bl	80007a0 <HAL_GetTick>
 80007cc:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	07d1      	lsls	r1, r2, #31
 80007d4:	d551      	bpl.n	800087a <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	f022 0202 	bic.w	r2, r2, #2
 80007dc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007de:	f7ff ffdf 	bl	80007a0 <HAL_GetTick>
 80007e2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007e4:	6823      	ldr	r3, [r4, #0]
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	0792      	lsls	r2, r2, #30
 80007ea:	d454      	bmi.n	8000896 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007ec:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007ee:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007f0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	bf0c      	ite	eq
 80007f6:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007fa:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 80007fe:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000800:	7e62      	ldrb	r2, [r4, #25]
 8000802:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	bf0c      	ite	eq
 8000808:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800080c:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 8000810:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000812:	7ea2      	ldrb	r2, [r4, #26]
 8000814:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	bf0c      	ite	eq
 800081a:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800081e:	f022 0220 	bicne.w	r2, r2, #32
 8000822:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000824:	7ee2      	ldrb	r2, [r4, #27]
 8000826:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	bf0c      	ite	eq
 800082c:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000830:	f042 0210 	orrne.w	r2, r2, #16
 8000834:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000836:	7f22      	ldrb	r2, [r4, #28]
 8000838:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	bf0c      	ite	eq
 800083e:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000842:	f022 0208 	bicne.w	r2, r2, #8
 8000846:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000848:	7f62      	ldrb	r2, [r4, #29]
 800084a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	bf0c      	ite	eq
 8000850:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000854:	f022 0204 	bicne.w	r2, r2, #4
 8000858:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800085a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800085e:	430a      	orrs	r2, r1
 8000860:	6921      	ldr	r1, [r4, #16]
 8000862:	430a      	orrs	r2, r1
 8000864:	6961      	ldr	r1, [r4, #20]
 8000866:	430a      	orrs	r2, r1
 8000868:	6861      	ldr	r1, [r4, #4]
 800086a:	3901      	subs	r1, #1
 800086c:	430a      	orrs	r2, r1
 800086e:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000870:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000872:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000874:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000878:	e00c      	b.n	8000894 <HAL_CAN_Init+0xe8>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800087a:	f7ff ff91 	bl	80007a0 <HAL_GetTick>
 800087e:	1b40      	subs	r0, r0, r5
 8000880:	280a      	cmp	r0, #10
 8000882:	d9a4      	bls.n	80007ce <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000884:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800088a:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800088c:	2305      	movs	r3, #5
 800088e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000892:	2001      	movs	r0, #1
}
 8000894:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000896:	f7ff ff83 	bl	80007a0 <HAL_GetTick>
 800089a:	1b40      	subs	r0, r0, r5
 800089c:	280a      	cmp	r0, #10
 800089e:	d9a1      	bls.n	80007e4 <HAL_CAN_Init+0x38>
 80008a0:	e7f0      	b.n	8000884 <HAL_CAN_Init+0xd8>

080008a2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80008a2:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80008a4:	f890 2020 	ldrb.w	r2, [r0, #32]
  CAN_TypeDef *can_ip = hcan->Instance;
 80008a8:	6803      	ldr	r3, [r0, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80008aa:	3a01      	subs	r2, #1
 80008ac:	2a01      	cmp	r2, #1
 80008ae:	d862      	bhi.n	8000976 <HAL_CAN_ConfigFilter+0xd4>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80008b0:	2001      	movs	r0, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80008b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80008b6:	f042 0201 	orr.w	r2, r2, #1
 80008ba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80008be:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80008c0:	f8d3 521c 	ldr.w	r5, [r3, #540]	@ 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80008c4:	f002 041f 	and.w	r4, r2, #31
 80008c8:	40a0      	lsls	r0, r4
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80008ca:	ea25 0500 	bic.w	r5, r5, r0
 80008ce:	f8c3 521c 	str.w	r5, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80008d2:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80008d4:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80008d6:	bb95      	cbnz	r5, 800093e <HAL_CAN_ConfigFilter+0x9c>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80008d8:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008dc:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80008de:	4025      	ands	r5, r4
 80008e0:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008e4:	888d      	ldrh	r5, [r1, #4]
 80008e6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008ea:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008ee:	f8c2 5240 	str.w	r5, [r2, #576]	@ 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008f2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80008f4:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008f6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008fa:	f8c2 5244 	str.w	r5, [r2, #580]	@ 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80008fe:	698a      	ldr	r2, [r1, #24]
 8000900:	bb7a      	cbnz	r2, 8000962 <HAL_CAN_ConfigFilter+0xc0>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000902:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000906:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000908:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800090c:	690a      	ldr	r2, [r1, #16]
 800090e:	bb62      	cbnz	r2, 800096a <HAL_CAN_ConfigFilter+0xc8>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000910:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000914:	4014      	ands	r4, r2
 8000916:	f8c3 4214 	str.w	r4, [r3, #532]	@ 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800091a:	6a0a      	ldr	r2, [r1, #32]
 800091c:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800091e:	bf04      	itt	eq
 8000920:	f8d3 221c 	ldreq.w	r2, [r3, #540]	@ 0x21c
 8000924:	4302      	orreq	r2, r0

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8000926:	f04f 0000 	mov.w	r0, #0
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800092a:	bf08      	it	eq
 800092c:	f8c3 221c 	streq.w	r2, [r3, #540]	@ 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000930:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000934:	f022 0201 	bic.w	r2, r2, #1
 8000938:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800093c:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800093e:	2d01      	cmp	r5, #1
 8000940:	d1dd      	bne.n	80008fe <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000942:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000946:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000948:	4305      	orrs	r5, r0
 800094a:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800094e:	888d      	ldrh	r5, [r1, #4]
 8000950:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000954:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000958:	f8c2 5240 	str.w	r5, [r2, #576]	@ 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800095c:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800095e:	898d      	ldrh	r5, [r1, #12]
 8000960:	e7c9      	b.n	80008f6 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000962:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000966:	4302      	orrs	r2, r0
 8000968:	e7ce      	b.n	8000908 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800096a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800096e:	4302      	orrs	r2, r0
 8000970:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000974:	e7d1      	b.n	800091a <HAL_CAN_ConfigFilter+0x78>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000976:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800097c:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 800097e:	2001      	movs	r0, #1
 8000980:	e7dc      	b.n	800093c <HAL_CAN_ConfigFilter+0x9a>

08000982 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000982:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000984:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8000988:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 800098a:	2b01      	cmp	r3, #1
 800098c:	d11f      	bne.n	80009ce <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800098e:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000990:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000992:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000996:	6813      	ldr	r3, [r2, #0]
 8000998:	f023 0301 	bic.w	r3, r3, #1
 800099c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800099e:	f7ff feff 	bl	80007a0 <HAL_GetTick>
 80009a2:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	6858      	ldr	r0, [r3, #4]
 80009a8:	f010 0001 	ands.w	r0, r0, #1
 80009ac:	d101      	bne.n	80009b2 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009ae:	6260      	str	r0, [r4, #36]	@ 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 80009b0:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009b2:	f7ff fef5 	bl	80007a0 <HAL_GetTick>
 80009b6:	1b40      	subs	r0, r0, r5
 80009b8:	280a      	cmp	r0, #10
 80009ba:	d9f3      	bls.n	80009a4 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80009be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c2:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80009c4:	2305      	movs	r3, #5
 80009c6:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80009ca:	2001      	movs	r0, #1
 80009cc:	e7f0      	b.n	80009b0 <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80009ce:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80009d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80009d4:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 80009d6:	e7f8      	b.n	80009ca <HAL_CAN_Start+0x48>

080009d8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80009d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80009da:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80009de:	6804      	ldr	r4, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80009e0:	3d01      	subs	r5, #1
 80009e2:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80009e4:	68a6      	ldr	r6, [r4, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80009e6:	d83c      	bhi.n	8000a62 <HAL_CAN_AddTxMessage+0x8a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80009e8:	f016 5fe0 	tst.w	r6, #469762048	@ 0x1c000000
 80009ec:	d033      	beq.n	8000a56 <HAL_CAN_AddTxMessage+0x7e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80009ee:	2501      	movs	r5, #1
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80009f0:	f3c6 6001 	ubfx	r0, r6, #24, #2
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80009f4:	4085      	lsls	r5, r0
 80009f6:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80009f8:	e9d1 5702 	ldrd	r5, r7, [r1, #8]
 80009fc:	f100 0318 	add.w	r3, r0, #24
 8000a00:	bb15      	cbnz	r5, 8000a48 <HAL_CAN_AddTxMessage+0x70>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a02:	680d      	ldr	r5, [r1, #0]
 8000a04:	011b      	lsls	r3, r3, #4
 8000a06:	ea47 5745 	orr.w	r7, r7, r5, lsl #21
 8000a0a:	50e7      	str	r7, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a0c:	eb04 1300 	add.w	r3, r4, r0, lsl #4
 8000a10:	0105      	lsls	r5, r0, #4

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);

      /* Return function status */
      return HAL_OK;
 8000a12:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a14:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000a16:	442c      	add	r4, r5
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a18:	f8c3 6184 	str.w	r6, [r3, #388]	@ 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000a1c:	7d09      	ldrb	r1, [r1, #20]
 8000a1e:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000a20:	bf02      	ittt	eq
 8000a22:	f8d3 1184 	ldreq.w	r1, [r3, #388]	@ 0x184
 8000a26:	f441 7180 	orreq.w	r1, r1, #256	@ 0x100
 8000a2a:	f8c3 1184 	streq.w	r1, [r3, #388]	@ 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000a2e:	6851      	ldr	r1, [r2, #4]
 8000a30:	f8c4 118c 	str.w	r1, [r4, #396]	@ 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000a34:	6812      	ldr	r2, [r2, #0]
 8000a36:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000a3a:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8000a3e:	f042 0201 	orr.w	r2, r2, #1
 8000a42:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a48:	684e      	ldr	r6, [r1, #4]
                                                           pHeader->IDE |
 8000a4a:	433d      	orrs	r5, r7
 8000a4c:	ea45 05c6 	orr.w	r5, r5, r6, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a50:	011b      	lsls	r3, r3, #4
 8000a52:	50e5      	str	r5, [r4, r3]
 8000a54:	e7da      	b.n	8000a0c <HAL_CAN_AddTxMessage+0x34>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a56:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000a58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a5c:	6243      	str	r3, [r0, #36]	@ 0x24
      return HAL_ERROR;
 8000a5e:	2001      	movs	r0, #1
 8000a60:	e7f1      	b.n	8000a46 <HAL_CAN_AddTxMessage+0x6e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a62:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a68:	e7f8      	b.n	8000a5c <HAL_CAN_AddTxMessage+0x84>

08000a6a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a6c:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a70:	3c01      	subs	r4, #1
 8000a72:	2c01      	cmp	r4, #1
 8000a74:	d871      	bhi.n	8000b5a <HAL_CAN_GetRxMessage+0xf0>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000a76:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000a78:	b941      	cbnz	r1, 8000a8c <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000a7a:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000a7c:	07a4      	lsls	r4, r4, #30
 8000a7e:	d107      	bne.n	8000a90 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a80:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000a82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a86:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 8000a88:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000a8c:	6934      	ldr	r4, [r6, #16]
 8000a8e:	e7f5      	b.n	8000a7c <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000a90:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8000a94:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 8000a98:	010c      	lsls	r4, r1, #4
 8000a9a:	f007 0704 	and.w	r7, r7, #4
 8000a9e:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d150      	bne.n	8000b46 <HAL_CAN_GetRxMessage+0xdc>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000aa4:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 8000aa8:	0d7f      	lsrs	r7, r7, #21
 8000aaa:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000aac:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000ab0:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000ab2:	f007 0702 	and.w	r7, r7, #2
 8000ab6:	60d7      	str	r7, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000ab8:	f8d5 71b4 	ldr.w	r7, [r5, #436]	@ 0x1b4
 8000abc:	073f      	lsls	r7, r7, #28
      pHeader->DLC = 8U;
 8000abe:	bf4e      	itee	mi
 8000ac0:	2708      	movmi	r7, #8
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ac2:	f8d5 71b4 	ldrpl.w	r7, [r5, #436]	@ 0x1b4
 8000ac6:	f007 070f 	andpl.w	r7, r7, #15
 8000aca:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000acc:	f8d5 71b4 	ldr.w	r7, [r5, #436]	@ 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ad0:	f8d5 51b4 	ldr.w	r5, [r5, #436]	@ 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ad4:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ad8:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ada:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000adc:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000ade:	f8d6 21b8 	ldr.w	r2, [r6, #440]	@ 0x1b8
 8000ae2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000ae4:	6802      	ldr	r2, [r0, #0]
 8000ae6:	4422      	add	r2, r4
 8000ae8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8000aec:	0a12      	lsrs	r2, r2, #8
 8000aee:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000af0:	6802      	ldr	r2, [r0, #0]
 8000af2:	4422      	add	r2, r4
 8000af4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8000af8:	0c12      	lsrs	r2, r2, #16
 8000afa:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000afc:	6802      	ldr	r2, [r0, #0]
 8000afe:	4422      	add	r2, r4
 8000b00:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8000b04:	0e12      	lsrs	r2, r2, #24
 8000b06:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000b08:	6802      	ldr	r2, [r0, #0]
 8000b0a:	4422      	add	r2, r4
 8000b0c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8000b10:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000b12:	6802      	ldr	r2, [r0, #0]
 8000b14:	4422      	add	r2, r4
 8000b16:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8000b1a:	0a12      	lsrs	r2, r2, #8
 8000b1c:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000b1e:	6802      	ldr	r2, [r0, #0]
 8000b20:	4422      	add	r2, r4
 8000b22:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8000b26:	0c12      	lsrs	r2, r2, #16
 8000b28:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000b2a:	6802      	ldr	r2, [r0, #0]
 8000b2c:	4422      	add	r2, r4
 8000b2e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8000b32:	0e12      	lsrs	r2, r2, #24
 8000b34:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b36:	6803      	ldr	r3, [r0, #0]
 8000b38:	b951      	cbnz	r1, 8000b50 <HAL_CAN_GetRxMessage+0xe6>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	f042 0220 	orr.w	r2, r2, #32
 8000b40:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000b42:	2000      	movs	r0, #0
 8000b44:	e7a1      	b.n	8000a8a <HAL_CAN_GetRxMessage+0x20>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000b46:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 8000b4a:	08ff      	lsrs	r7, r7, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000b4c:	6057      	str	r7, [r2, #4]
 8000b4e:	e7ad      	b.n	8000aac <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000b50:	691a      	ldr	r2, [r3, #16]
 8000b52:	f042 0220 	orr.w	r2, r2, #32
 8000b56:	611a      	str	r2, [r3, #16]
 8000b58:	e7f3      	b.n	8000b42 <HAL_CAN_GetRxMessage+0xd8>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b5a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b60:	e791      	b.n	8000a86 <HAL_CAN_GetRxMessage+0x1c>

08000b62 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b62:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b66:	3b01      	subs	r3, #1
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d805      	bhi.n	8000b78 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000b6c:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8000b6e:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000b70:	6953      	ldr	r3, [r2, #20]
 8000b72:	4319      	orrs	r1, r3
 8000b74:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000b76:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b78:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000b7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b7e:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8000b80:	2001      	movs	r0, #1
  }
}
 8000b82:	4770      	bx	lr

08000b84 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 8000b84:	4770      	bx	lr

08000b86 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 8000b86:	4770      	bx	lr

08000b88 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 8000b88:	4770      	bx	lr

08000b8a <HAL_CAN_TxMailbox0AbortCallback>:
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
 8000b8a:	4770      	bx	lr

08000b8c <HAL_CAN_TxMailbox1AbortCallback>:
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
 8000b8c:	4770      	bx	lr

08000b8e <HAL_CAN_TxMailbox2AbortCallback>:
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
 8000b8e:	4770      	bx	lr

08000b90 <HAL_CAN_RxFifo0FullCallback>:
  * @brief  Rx FIFO 0 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 8000b90:	4770      	bx	lr

08000b92 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 8000b92:	4770      	bx	lr

08000b94 <HAL_CAN_RxFifo1FullCallback>:
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
 8000b94:	4770      	bx	lr

08000b96 <HAL_CAN_SleepCallback>:
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
 8000b96:	4770      	bx	lr

08000b98 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
 8000b98:	4770      	bx	lr

08000b9a <HAL_CAN_ErrorCallback>:
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
 8000b9a:	4770      	bx	lr

08000b9c <HAL_CAN_IRQHandler>:
{
 8000b9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ba0:	6803      	ldr	r3, [r0, #0]
{
 8000ba2:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ba4:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000ba6:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000baa:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000bae:	f8d3 8008 	ldr.w	r8, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000bb2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000bb6:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000bba:	699f      	ldr	r7, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000bbc:	d027      	beq.n	8000c0e <HAL_CAN_IRQHandler+0x72>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000bbe:	f018 0f01 	tst.w	r8, #1
 8000bc2:	d007      	beq.n	8000bd4 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000bc4:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000bc6:	f018 0f02 	tst.w	r8, #2
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000bca:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000bcc:	f000 80a6 	beq.w	8000d1c <HAL_CAN_IRQHandler+0x180>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000bd0:	f7ff ffd8 	bl	8000b84 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000bd4:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000bd6:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8000bda:	d00a      	beq.n	8000bf2 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000bdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000be0:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000be2:	f418 7f00 	tst.w	r8, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000be6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000be8:	f000 80a7 	beq.w	8000d3a <HAL_CAN_IRQHandler+0x19e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000bec:	4628      	mov	r0, r5
 8000bee:	f7ff ffca 	bl	8000b86 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000bf2:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
 8000bf6:	d00a      	beq.n	8000c0e <HAL_CAN_IRQHandler+0x72>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000bf8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bfc:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000bfe:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000c02:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000c04:	f000 80a9 	beq.w	8000d5a <HAL_CAN_IRQHandler+0x1be>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000c08:	4628      	mov	r0, r5
 8000c0a:	f7ff ffbd 	bl	8000b88 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000c0e:	0730      	lsls	r0, r6, #28
 8000c10:	d507      	bpl.n	8000c22 <HAL_CAN_IRQHandler+0x86>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000c12:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c16:	bf1f      	itttt	ne
 8000c18:	2210      	movne	r2, #16
 8000c1a:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000c1c:	f444 7400 	orrne.w	r4, r4, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c20:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000c22:	0771      	lsls	r1, r6, #29
 8000c24:	d508      	bpl.n	8000c38 <HAL_CAN_IRQHandler+0x9c>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000c26:	f01b 0f08 	tst.w	fp, #8
 8000c2a:	d005      	beq.n	8000c38 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000c30:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000c32:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000c34:	f7ff ffac 	bl	8000b90 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c38:	07b2      	lsls	r2, r6, #30
 8000c3a:	d506      	bpl.n	8000c4a <HAL_CAN_IRQHandler+0xae>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000c3c:	682b      	ldr	r3, [r5, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	079b      	lsls	r3, r3, #30
 8000c42:	d002      	beq.n	8000c4a <HAL_CAN_IRQHandler+0xae>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000c44:	4628      	mov	r0, r5
 8000c46:	f7ff fbc7 	bl	80003d8 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c4a:	0670      	lsls	r0, r6, #25
 8000c4c:	d507      	bpl.n	8000c5e <HAL_CAN_IRQHandler+0xc2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c4e:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c52:	bf1f      	itttt	ne
 8000c54:	2210      	movne	r2, #16
 8000c56:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000c58:	f444 6480 	orrne.w	r4, r4, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c5c:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000c5e:	06b1      	lsls	r1, r6, #26
 8000c60:	d508      	bpl.n	8000c74 <HAL_CAN_IRQHandler+0xd8>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000c62:	f01a 0f08 	tst.w	sl, #8
 8000c66:	d005      	beq.n	8000c74 <HAL_CAN_IRQHandler+0xd8>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000c68:	2208      	movs	r2, #8
 8000c6a:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000c6c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000c6e:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000c70:	f7ff ff90 	bl	8000b94 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000c74:	06f2      	lsls	r2, r6, #27
 8000c76:	d506      	bpl.n	8000c86 <HAL_CAN_IRQHandler+0xea>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000c78:	682b      	ldr	r3, [r5, #0]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	079b      	lsls	r3, r3, #30
 8000c7e:	d002      	beq.n	8000c86 <HAL_CAN_IRQHandler+0xea>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000c80:	4628      	mov	r0, r5
 8000c82:	f7ff ff86 	bl	8000b92 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000c86:	03b0      	lsls	r0, r6, #14
 8000c88:	d508      	bpl.n	8000c9c <HAL_CAN_IRQHandler+0x100>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000c8a:	f019 0f10 	tst.w	r9, #16
 8000c8e:	d005      	beq.n	8000c9c <HAL_CAN_IRQHandler+0x100>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000c90:	2210      	movs	r2, #16
 8000c92:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 8000c94:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000c96:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000c98:	f7ff ff7d 	bl	8000b96 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000c9c:	03f1      	lsls	r1, r6, #15
 8000c9e:	d508      	bpl.n	8000cb2 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ca0:	f019 0f08 	tst.w	r9, #8
 8000ca4:	d005      	beq.n	8000cb2 <HAL_CAN_IRQHandler+0x116>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000caa:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000cac:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000cae:	f7ff ff73 	bl	8000b98 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000cb2:	0432      	lsls	r2, r6, #16
 8000cb4:	d529      	bpl.n	8000d0a <HAL_CAN_IRQHandler+0x16e>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000cb6:	f019 0f04 	tst.w	r9, #4
 8000cba:	682a      	ldr	r2, [r5, #0]
 8000cbc:	d023      	beq.n	8000d06 <HAL_CAN_IRQHandler+0x16a>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000cbe:	05f3      	lsls	r3, r6, #23
 8000cc0:	d503      	bpl.n	8000cca <HAL_CAN_IRQHandler+0x12e>
 8000cc2:	07f8      	lsls	r0, r7, #31
        errorcode |= HAL_CAN_ERROR_EWG;
 8000cc4:	bf48      	it	mi
 8000cc6:	f044 0401 	orrmi.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000cca:	05b1      	lsls	r1, r6, #22
 8000ccc:	d503      	bpl.n	8000cd6 <HAL_CAN_IRQHandler+0x13a>
 8000cce:	07bb      	lsls	r3, r7, #30
        errorcode |= HAL_CAN_ERROR_EPV;
 8000cd0:	bf48      	it	mi
 8000cd2:	f044 0402 	orrmi.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000cd6:	0570      	lsls	r0, r6, #21
 8000cd8:	d503      	bpl.n	8000ce2 <HAL_CAN_IRQHandler+0x146>
 8000cda:	0779      	lsls	r1, r7, #29
        errorcode |= HAL_CAN_ERROR_BOF;
 8000cdc:	bf48      	it	mi
 8000cde:	f044 0404 	orrmi.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000ce2:	0533      	lsls	r3, r6, #20
 8000ce4:	d50f      	bpl.n	8000d06 <HAL_CAN_IRQHandler+0x16a>
 8000ce6:	f017 0370 	ands.w	r3, r7, #112	@ 0x70
 8000cea:	d00c      	beq.n	8000d06 <HAL_CAN_IRQHandler+0x16a>
        switch (esrflags & CAN_ESR_LEC)
 8000cec:	2b40      	cmp	r3, #64	@ 0x40
 8000cee:	d054      	beq.n	8000d9a <HAL_CAN_IRQHandler+0x1fe>
 8000cf0:	d843      	bhi.n	8000d7a <HAL_CAN_IRQHandler+0x1de>
 8000cf2:	2b20      	cmp	r3, #32
 8000cf4:	d04b      	beq.n	8000d8e <HAL_CAN_IRQHandler+0x1f2>
 8000cf6:	2b30      	cmp	r3, #48	@ 0x30
 8000cf8:	d04c      	beq.n	8000d94 <HAL_CAN_IRQHandler+0x1f8>
 8000cfa:	2b10      	cmp	r3, #16
 8000cfc:	d044      	beq.n	8000d88 <HAL_CAN_IRQHandler+0x1ec>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000cfe:	6993      	ldr	r3, [r2, #24]
 8000d00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000d04:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000d06:	2304      	movs	r3, #4
 8000d08:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000d0a:	b12c      	cbz	r4, 8000d18 <HAL_CAN_IRQHandler+0x17c>
    hcan->ErrorCode |= errorcode;
 8000d0c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000d0e:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8000d10:	4323      	orrs	r3, r4
 8000d12:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000d14:	f7ff ff41 	bl	8000b9a <HAL_CAN_ErrorCallback>
}
 8000d18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000d1c:	f018 0f04 	tst.w	r8, #4
 8000d20:	d105      	bne.n	8000d2e <HAL_CAN_IRQHandler+0x192>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000d22:	f018 0f08 	tst.w	r8, #8
 8000d26:	d105      	bne.n	8000d34 <HAL_CAN_IRQHandler+0x198>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000d28:	f7ff ff2f 	bl	8000b8a <HAL_CAN_TxMailbox0AbortCallback>
 8000d2c:	e752      	b.n	8000bd4 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000d2e:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8000d32:	e750      	b.n	8000bd6 <HAL_CAN_IRQHandler+0x3a>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000d34:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8000d38:	e74d      	b.n	8000bd6 <HAL_CAN_IRQHandler+0x3a>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000d3a:	f418 6f80 	tst.w	r8, #1024	@ 0x400
 8000d3e:	d002      	beq.n	8000d46 <HAL_CAN_IRQHandler+0x1aa>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000d40:	f444 5400 	orr.w	r4, r4, #8192	@ 0x2000
 8000d44:	e755      	b.n	8000bf2 <HAL_CAN_IRQHandler+0x56>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000d46:	f418 6f00 	tst.w	r8, #2048	@ 0x800
 8000d4a:	d002      	beq.n	8000d52 <HAL_CAN_IRQHandler+0x1b6>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000d4c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000d50:	e74f      	b.n	8000bf2 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000d52:	4628      	mov	r0, r5
 8000d54:	f7ff ff1a 	bl	8000b8c <HAL_CAN_TxMailbox1AbortCallback>
 8000d58:	e74b      	b.n	8000bf2 <HAL_CAN_IRQHandler+0x56>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000d5a:	f418 2f80 	tst.w	r8, #262144	@ 0x40000
 8000d5e:	d002      	beq.n	8000d66 <HAL_CAN_IRQHandler+0x1ca>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000d60:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 8000d64:	e753      	b.n	8000c0e <HAL_CAN_IRQHandler+0x72>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000d66:	f418 2f00 	tst.w	r8, #524288	@ 0x80000
 8000d6a:	d002      	beq.n	8000d72 <HAL_CAN_IRQHandler+0x1d6>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000d6c:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 8000d70:	e74d      	b.n	8000c0e <HAL_CAN_IRQHandler+0x72>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000d72:	4628      	mov	r0, r5
 8000d74:	f7ff ff0b 	bl	8000b8e <HAL_CAN_TxMailbox2AbortCallback>
 8000d78:	e749      	b.n	8000c0e <HAL_CAN_IRQHandler+0x72>
        switch (esrflags & CAN_ESR_LEC)
 8000d7a:	2b50      	cmp	r3, #80	@ 0x50
 8000d7c:	d010      	beq.n	8000da0 <HAL_CAN_IRQHandler+0x204>
 8000d7e:	2b60      	cmp	r3, #96	@ 0x60
 8000d80:	d1bd      	bne.n	8000cfe <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000d82:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
            break;
 8000d86:	e7ba      	b.n	8000cfe <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_STF;
 8000d88:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000d8c:	e7b7      	b.n	8000cfe <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000d8e:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000d92:	e7b4      	b.n	8000cfe <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000d94:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000d98:	e7b1      	b.n	8000cfe <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_BR;
 8000d9a:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
            break;
 8000d9e:	e7ae      	b.n	8000cfe <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_BD;
 8000da0:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
            break;
 8000da4:	e7ab      	b.n	8000cfe <HAL_CAN_IRQHandler+0x162>
	...

08000da8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4907      	ldr	r1, [pc, #28]	@ (8000dc8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000daa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000db6:	0412      	lsls	r2, r2, #16
 8000db8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000dc4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dce:	b530      	push	{r4, r5, lr}
 8000dd0:	68dc      	ldr	r4, [r3, #12]
 8000dd2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	bf28      	it	cs
 8000de0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de8:	bf94      	ite	ls
 8000dea:	2400      	movls	r4, #0
 8000dec:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dee:	fa05 f303 	lsl.w	r3, r5, r3
 8000df2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df6:	40a5      	lsls	r5, r4
 8000df8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000dfe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	bfac      	ite	ge
 8000e06:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	4a07      	ldrlt	r2, [pc, #28]	@ (8000e28 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	bfab      	itete	ge
 8000e14:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e22:	bd30      	pop	{r4, r5, pc}
 8000e24:	e000ed00 	.word	0xe000ed00
 8000e28:	e000ed14 	.word	0xe000ed14

08000e2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	2800      	cmp	r0, #0
 8000e2e:	db07      	blt.n	8000e40 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e30:	2301      	movs	r3, #1
 8000e32:	0941      	lsrs	r1, r0, #5
 8000e34:	4a03      	ldr	r2, [pc, #12]	@ (8000e44 <HAL_NVIC_EnableIRQ+0x18>)
 8000e36:	f000 001f 	and.w	r0, r0, #31
 8000e3a:	4083      	lsls	r3, r0
 8000e3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e48:	4a11      	ldr	r2, [pc, #68]	@ (8000e90 <FLASH_SetErrorCode+0x48>)
 8000e4a:	68d3      	ldr	r3, [r2, #12]
 8000e4c:	f013 0310 	ands.w	r3, r3, #16
 8000e50:	d005      	beq.n	8000e5e <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e52:	4910      	ldr	r1, [pc, #64]	@ (8000e94 <FLASH_SetErrorCode+0x4c>)
 8000e54:	69cb      	ldr	r3, [r1, #28]
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000e5c:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e5e:	68d2      	ldr	r2, [r2, #12]
 8000e60:	0750      	lsls	r0, r2, #29
 8000e62:	d506      	bpl.n	8000e72 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e64:	490b      	ldr	r1, [pc, #44]	@ (8000e94 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000e66:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e6a:	69ca      	ldr	r2, [r1, #28]
 8000e6c:	f042 0201 	orr.w	r2, r2, #1
 8000e70:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000e72:	4a07      	ldr	r2, [pc, #28]	@ (8000e90 <FLASH_SetErrorCode+0x48>)
 8000e74:	69d1      	ldr	r1, [r2, #28]
 8000e76:	07c9      	lsls	r1, r1, #31
 8000e78:	d508      	bpl.n	8000e8c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000e7a:	4806      	ldr	r0, [pc, #24]	@ (8000e94 <FLASH_SetErrorCode+0x4c>)
 8000e7c:	69c1      	ldr	r1, [r0, #28]
 8000e7e:	f041 0104 	orr.w	r1, r1, #4
 8000e82:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000e84:	69d1      	ldr	r1, [r2, #28]
 8000e86:	f021 0101 	bic.w	r1, r1, #1
 8000e8a:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e8c:	60d3      	str	r3, [r2, #12]
}  
 8000e8e:	4770      	bx	lr
 8000e90:	40022000 	.word	0x40022000
 8000e94:	200004c8 	.word	0x200004c8

08000e98 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_FLASH_Unlock+0x1c>)
 8000e9a:	6918      	ldr	r0, [r3, #16]
 8000e9c:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8000ea0:	d007      	beq.n	8000eb2 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000ea2:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <HAL_FLASH_Unlock+0x20>)
 8000ea4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ea6:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8000eaa:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000eac:	6918      	ldr	r0, [r3, #16]
 8000eae:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000eb2:	4770      	bx	lr
 8000eb4:	40022000 	.word	0x40022000
 8000eb8:	45670123 	.word	0x45670123

08000ebc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000ebc:	4a03      	ldr	r2, [pc, #12]	@ (8000ecc <HAL_FLASH_Lock+0x10>)
}
 8000ebe:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000ec0:	6913      	ldr	r3, [r2, #16]
 8000ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec6:	6113      	str	r3, [r2, #16]
}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40022000 	.word	0x40022000

08000ed0 <FLASH_WaitForLastOperation>:
{
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff fc64 	bl	80007a0 <HAL_GetTick>
 8000ed8:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000eda:	4c11      	ldr	r4, [pc, #68]	@ (8000f20 <FLASH_WaitForLastOperation+0x50>)
 8000edc:	68e3      	ldr	r3, [r4, #12]
 8000ede:	07d8      	lsls	r0, r3, #31
 8000ee0:	d412      	bmi.n	8000f08 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000ee2:	68e3      	ldr	r3, [r4, #12]
 8000ee4:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000ee6:	bf44      	itt	mi
 8000ee8:	2320      	movmi	r3, #32
 8000eea:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000eec:	68e3      	ldr	r3, [r4, #12]
 8000eee:	06da      	lsls	r2, r3, #27
 8000ef0:	d406      	bmi.n	8000f00 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000ef2:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ef4:	07db      	lsls	r3, r3, #31
 8000ef6:	d403      	bmi.n	8000f00 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ef8:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000efa:	f010 0004 	ands.w	r0, r0, #4
 8000efe:	d007      	beq.n	8000f10 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 8000f00:	f7ff ffa2 	bl	8000e48 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f04:	2001      	movs	r0, #1
 8000f06:	e003      	b.n	8000f10 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8000f08:	1c6b      	adds	r3, r5, #1
 8000f0a:	d0e7      	beq.n	8000edc <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f0c:	b90d      	cbnz	r5, 8000f12 <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 8000f0e:	2003      	movs	r0, #3
}
 8000f10:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f12:	f7ff fc45 	bl	80007a0 <HAL_GetTick>
 8000f16:	1b80      	subs	r0, r0, r6
 8000f18:	42a8      	cmp	r0, r5
 8000f1a:	d9df      	bls.n	8000edc <FLASH_WaitForLastOperation+0xc>
 8000f1c:	e7f7      	b.n	8000f0e <FLASH_WaitForLastOperation+0x3e>
 8000f1e:	bf00      	nop
 8000f20:	40022000 	.word	0x40022000

08000f24 <HAL_FLASH_Program>:
{
 8000f24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8000f28:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8000fc0 <HAL_FLASH_Program+0x9c>
{
 8000f2c:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8000f2e:	f89a 3018 	ldrb.w	r3, [sl, #24]
{
 8000f32:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000f34:	2b01      	cmp	r3, #1
{
 8000f36:	4688      	mov	r8, r1
 8000f38:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8000f3a:	d03f      	beq.n	8000fbc <HAL_FLASH_Program+0x98>
 8000f3c:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f3e:	f24c 3050 	movw	r0, #50000	@ 0xc350
  __HAL_LOCK(&pFlash);
 8000f42:	f88a 3018 	strb.w	r3, [sl, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f46:	f7ff ffc3 	bl	8000ed0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000f4a:	bb90      	cbnz	r0, 8000fb2 <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f4c:	2d01      	cmp	r5, #1
 8000f4e:	d003      	beq.n	8000f58 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 8000f50:	2d02      	cmp	r5, #2
 8000f52:	bf14      	ite	ne
 8000f54:	2504      	movne	r5, #4
 8000f56:	2502      	moveq	r5, #2
      nbiterations = 4U;
 8000f58:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f5a:	4633      	mov	r3, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f5c:	f8df b064 	ldr.w	fp, [pc, #100]	@ 8000fc4 <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f60:	0134      	lsls	r4, r6, #4
 8000f62:	f1c4 0120 	rsb	r1, r4, #32
 8000f66:	f1a4 0220 	sub.w	r2, r4, #32
 8000f6a:	fa07 f101 	lsl.w	r1, r7, r1
 8000f6e:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f72:	f8ca 301c 	str.w	r3, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f76:	430c      	orrs	r4, r1
 8000f78:	fa27 f202 	lsr.w	r2, r7, r2
 8000f7c:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f7e:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f82:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f84:	f042 0201 	orr.w	r2, r2, #1
 8000f88:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f8c:	f24c 3050 	movw	r0, #50000	@ 0xc350
  *(__IO uint16_t*)Address = Data;
 8000f90:	f828 4016 	strh.w	r4, [r8, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f94:	f7ff ff9c 	bl	8000ed0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000f98:	f8db 2010 	ldr.w	r2, [fp, #16]
 8000f9c:	f022 0201 	bic.w	r2, r2, #1
 8000fa0:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 8000fa4:	b928      	cbnz	r0, 8000fb2 <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 8000fa6:	3601      	adds	r6, #1
 8000fa8:	b2f2      	uxtb	r2, r6
 8000faa:	4295      	cmp	r5, r2
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	d8d6      	bhi.n	8000f60 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f88a 3018 	strb.w	r3, [sl, #24]
}
 8000fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	e7fb      	b.n	8000fb8 <HAL_FLASH_Program+0x94>
 8000fc0:	200004c8 	.word	0x200004c8
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <FLASH_PageErase+0x1c>)
 8000fcc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <FLASH_PageErase+0x20>)
 8000fd0:	691a      	ldr	r2, [r3, #16]
 8000fd2:	f042 0202 	orr.w	r2, r2, #2
 8000fd6:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000fd8:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fe0:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000fe2:	4770      	bx	lr
 8000fe4:	200004c8 	.word	0x200004c8
 8000fe8:	40022000 	.word	0x40022000

08000fec <HAL_FLASHEx_Erase>:
{
 8000fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000ff0:	4f26      	ldr	r7, [pc, #152]	@ (800108c <HAL_FLASHEx_Erase+0xa0>)
{
 8000ff2:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000ff4:	7e3b      	ldrb	r3, [r7, #24]
{
 8000ff6:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d044      	beq.n	8001086 <HAL_FLASHEx_Erase+0x9a>
 8000ffc:	2401      	movs	r4, #1
 8000ffe:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001000:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001002:	f24c 3050 	movw	r0, #50000	@ 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001006:	2b02      	cmp	r3, #2
 8001008:	d11a      	bne.n	8001040 <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800100a:	f7ff ff61 	bl	8000ed0 <FLASH_WaitForLastOperation>
 800100e:	b120      	cbz	r0, 800101a <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001010:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8001012:	2300      	movs	r3, #0
 8001014:	763b      	strb	r3, [r7, #24]
}
 8001016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800101a:	4c1d      	ldr	r4, [pc, #116]	@ (8001090 <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800101c:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800101e:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001020:	f24c 3050 	movw	r0, #50000	@ 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800102a:	6923      	ldr	r3, [r4, #16]
 800102c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001030:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001032:	f7ff ff4d 	bl	8000ed0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001036:	6923      	ldr	r3, [r4, #16]
 8001038:	f023 0304 	bic.w	r3, r3, #4
 800103c:	6123      	str	r3, [r4, #16]
 800103e:	e7e8      	b.n	8001012 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001040:	f7ff ff46 	bl	8000ed0 <FLASH_WaitForLastOperation>
 8001044:	2800      	cmp	r0, #0
 8001046:	d1e3      	bne.n	8001010 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001050:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8001052:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001054:	4c0e      	ldr	r4, [pc, #56]	@ (8001090 <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001056:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800105a:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 800105e:	42b3      	cmp	r3, r6
 8001060:	d9d7      	bls.n	8001012 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8001062:	4630      	mov	r0, r6
 8001064:	f7ff ffb0 	bl	8000fc8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001068:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800106c:	f7ff ff30 	bl	8000ed0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001070:	6923      	ldr	r3, [r4, #16]
 8001072:	f023 0302 	bic.w	r3, r3, #2
 8001076:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8001078:	b110      	cbz	r0, 8001080 <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 800107a:	f8c8 6000 	str.w	r6, [r8]
            break;
 800107e:	e7c8      	b.n	8001012 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8001080:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001084:	e7e7      	b.n	8001056 <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 8001086:	2002      	movs	r0, #2
 8001088:	e7c5      	b.n	8001016 <HAL_FLASHEx_Erase+0x2a>
 800108a:	bf00      	nop
 800108c:	200004c8 	.word	0x200004c8
 8001090:	40022000 	.word	0x40022000

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001098:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800109a:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800109c:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8001228 <HAL_GPIO_Init+0x194>
 80010a0:	4b62      	ldr	r3, [pc, #392]	@ (800122c <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 80010a2:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8001230 <HAL_GPIO_Init+0x19c>
 80010a6:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8001234 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010aa:	680a      	ldr	r2, [r1, #0]
 80010ac:	fa32 f506 	lsrs.w	r5, r2, r6
 80010b0:	d102      	bne.n	80010b8 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 80010b2:	b003      	add	sp, #12
 80010b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80010b8:	2701      	movs	r7, #1
 80010ba:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010bc:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 80010c0:	ea37 0202 	bics.w	r2, r7, r2
 80010c4:	d17a      	bne.n	80011bc <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 80010c6:	684a      	ldr	r2, [r1, #4]
 80010c8:	2a03      	cmp	r2, #3
 80010ca:	d807      	bhi.n	80010dc <HAL_GPIO_Init+0x48>
 80010cc:	3a01      	subs	r2, #1
 80010ce:	2a02      	cmp	r2, #2
 80010d0:	f200 8083 	bhi.w	80011da <HAL_GPIO_Init+0x146>
 80010d4:	e8df f002 	tbb	[pc, r2]
 80010d8:	9792      	.short	0x9792
 80010da:	9d          	.byte	0x9d
 80010db:	00          	.byte	0x00
 80010dc:	2a12      	cmp	r2, #18
 80010de:	f000 8095 	beq.w	800120c <HAL_GPIO_Init+0x178>
 80010e2:	d86d      	bhi.n	80011c0 <HAL_GPIO_Init+0x12c>
 80010e4:	2a11      	cmp	r2, #17
 80010e6:	f000 808b 	beq.w	8001200 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010ea:	2dff      	cmp	r5, #255	@ 0xff
 80010ec:	bf98      	it	ls
 80010ee:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010f0:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010f4:	bf88      	it	hi
 80010f6:	f100 0904 	addhi.w	r9, r0, #4
 80010fa:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010fe:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001102:	bf88      	it	hi
 8001104:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001106:	fa0b fa02 	lsl.w	sl, fp, r2
 800110a:	ea27 070a 	bic.w	r7, r7, sl
 800110e:	fa04 f202 	lsl.w	r2, r4, r2
 8001112:	4317      	orrs	r7, r2
 8001114:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001118:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800111c:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8001120:	d04c      	beq.n	80011bc <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001122:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001126:	f026 0703 	bic.w	r7, r6, #3
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	f8cc 2018 	str.w	r2, [ip, #24]
 8001132:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001136:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800113a:	f002 0201 	and.w	r2, r2, #1
 800113e:	9201      	str	r2, [sp, #4]
 8001140:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001144:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001148:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800114a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800114e:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001150:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001154:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001158:	4a37      	ldr	r2, [pc, #220]	@ (8001238 <HAL_GPIO_Init+0x1a4>)
 800115a:	4290      	cmp	r0, r2
 800115c:	d05d      	beq.n	800121a <HAL_GPIO_Init+0x186>
 800115e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001162:	4290      	cmp	r0, r2
 8001164:	d05b      	beq.n	800121e <HAL_GPIO_Init+0x18a>
 8001166:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800116a:	4290      	cmp	r0, r2
 800116c:	d059      	beq.n	8001222 <HAL_GPIO_Init+0x18e>
 800116e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001172:	4290      	cmp	r0, r2
 8001174:	bf14      	ite	ne
 8001176:	2204      	movne	r2, #4
 8001178:	2203      	moveq	r2, #3
 800117a:	fa02 f20a 	lsl.w	r2, r2, sl
 800117e:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8001182:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001184:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001186:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800118a:	bf14      	ite	ne
 800118c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800118e:	43aa      	biceq	r2, r5
 8001190:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001192:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001194:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001198:	bf14      	ite	ne
 800119a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800119c:	43aa      	biceq	r2, r5
 800119e:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80011a0:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a2:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80011a6:	bf14      	ite	ne
 80011a8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011aa:	43aa      	biceq	r2, r5
 80011ac:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80011ae:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b0:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80011b4:	bf14      	ite	ne
 80011b6:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011b8:	43aa      	biceq	r2, r5
 80011ba:	601a      	str	r2, [r3, #0]
	position++;
 80011bc:	3601      	adds	r6, #1
 80011be:	e774      	b.n	80010aa <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80011c0:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 800123c <HAL_GPIO_Init+0x1a8>
 80011c4:	454a      	cmp	r2, r9
 80011c6:	d008      	beq.n	80011da <HAL_GPIO_Init+0x146>
 80011c8:	d810      	bhi.n	80011ec <HAL_GPIO_Init+0x158>
 80011ca:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80011ce:	454a      	cmp	r2, r9
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x146>
 80011d2:	4572      	cmp	r2, lr
 80011d4:	d001      	beq.n	80011da <HAL_GPIO_Init+0x146>
 80011d6:	4542      	cmp	r2, r8
 80011d8:	d187      	bne.n	80010ea <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011da:	688a      	ldr	r2, [r1, #8]
 80011dc:	b1da      	cbz	r2, 8001216 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011de:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e0:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 80011e4:	bf0c      	ite	eq
 80011e6:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 80011e8:	6147      	strne	r7, [r0, #20]
 80011ea:	e77e      	b.n	80010ea <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 80011ec:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8001240 <HAL_GPIO_Init+0x1ac>
 80011f0:	454a      	cmp	r2, r9
 80011f2:	d0f2      	beq.n	80011da <HAL_GPIO_Init+0x146>
 80011f4:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 80011f8:	454a      	cmp	r2, r9
 80011fa:	e7ed      	b.n	80011d8 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011fc:	68cc      	ldr	r4, [r1, #12]
          break;
 80011fe:	e774      	b.n	80010ea <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001200:	68cc      	ldr	r4, [r1, #12]
 8001202:	3404      	adds	r4, #4
          break;
 8001204:	e771      	b.n	80010ea <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001206:	68cc      	ldr	r4, [r1, #12]
 8001208:	3408      	adds	r4, #8
          break;
 800120a:	e76e      	b.n	80010ea <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800120c:	68cc      	ldr	r4, [r1, #12]
 800120e:	340c      	adds	r4, #12
          break;
 8001210:	e76b      	b.n	80010ea <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8001212:	2400      	movs	r4, #0
 8001214:	e769      	b.n	80010ea <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001216:	2404      	movs	r4, #4
 8001218:	e767      	b.n	80010ea <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800121a:	2200      	movs	r2, #0
 800121c:	e7ad      	b.n	800117a <HAL_GPIO_Init+0xe6>
 800121e:	2201      	movs	r2, #1
 8001220:	e7ab      	b.n	800117a <HAL_GPIO_Init+0xe6>
 8001222:	2202      	movs	r2, #2
 8001224:	e7a9      	b.n	800117a <HAL_GPIO_Init+0xe6>
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	40010400 	.word	0x40010400
 8001230:	10210000 	.word	0x10210000
 8001234:	10110000 	.word	0x10110000
 8001238:	40010800 	.word	0x40010800
 800123c:	10220000 	.word	0x10220000
 8001240:	10310000 	.word	0x10310000

08001244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001248:	4605      	mov	r5, r0
 800124a:	b338      	cbz	r0, 800129c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124c:	6803      	ldr	r3, [r0, #0]
 800124e:	07db      	lsls	r3, r3, #31
 8001250:	d410      	bmi.n	8001274 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001252:	682b      	ldr	r3, [r5, #0]
 8001254:	079f      	lsls	r7, r3, #30
 8001256:	d45e      	bmi.n	8001316 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	0719      	lsls	r1, r3, #28
 800125c:	f100 8095 	bmi.w	800138a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	075a      	lsls	r2, r3, #29
 8001264:	f100 80c1 	bmi.w	80013ea <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001268:	69eb      	ldr	r3, [r5, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f040 812c 	bne.w	80014c8 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001270:	2000      	movs	r0, #0
 8001272:	e029      	b.n	80012c8 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001274:	4c90      	ldr	r4, [pc, #576]	@ (80014b8 <HAL_RCC_OscConfig+0x274>)
 8001276:	6863      	ldr	r3, [r4, #4]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b04      	cmp	r3, #4
 800127e:	d007      	beq.n	8001290 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001280:	6863      	ldr	r3, [r4, #4]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b08      	cmp	r3, #8
 8001288:	d10a      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
 800128a:	6863      	ldr	r3, [r4, #4]
 800128c:	03de      	lsls	r6, r3, #15
 800128e:	d507      	bpl.n	80012a0 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	039c      	lsls	r4, r3, #14
 8001294:	d5dd      	bpl.n	8001252 <HAL_RCC_OscConfig+0xe>
 8001296:	686b      	ldr	r3, [r5, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1da      	bne.n	8001252 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800129c:	2001      	movs	r0, #1
 800129e:	e013      	b.n	80012c8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a0:	686b      	ldr	r3, [r5, #4]
 80012a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a6:	d112      	bne.n	80012ce <HAL_RCC_OscConfig+0x8a>
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012b0:	f7ff fa76 	bl	80007a0 <HAL_GetTick>
 80012b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	0398      	lsls	r0, r3, #14
 80012ba:	d4ca      	bmi.n	8001252 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fa70 	bl	80007a0 <HAL_GetTick>
 80012c0:	1b80      	subs	r0, r0, r6
 80012c2:	2864      	cmp	r0, #100	@ 0x64
 80012c4:	d9f7      	bls.n	80012b6 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80012c6:	2003      	movs	r0, #3
}
 80012c8:	b002      	add	sp, #8
 80012ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ce:	b99b      	cbnz	r3, 80012f8 <HAL_RCC_OscConfig+0xb4>
 80012d0:	6823      	ldr	r3, [r4, #0]
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012d6:	6023      	str	r3, [r4, #0]
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012de:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012e0:	f7ff fa5e 	bl	80007a0 <HAL_GetTick>
 80012e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	0399      	lsls	r1, r3, #14
 80012ea:	d5b2      	bpl.n	8001252 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fa58 	bl	80007a0 <HAL_GetTick>
 80012f0:	1b80      	subs	r0, r0, r6
 80012f2:	2864      	cmp	r0, #100	@ 0x64
 80012f4:	d9f7      	bls.n	80012e6 <HAL_RCC_OscConfig+0xa2>
 80012f6:	e7e6      	b.n	80012c6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	d103      	bne.n	8001308 <HAL_RCC_OscConfig+0xc4>
 8001300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001304:	6023      	str	r3, [r4, #0]
 8001306:	e7cf      	b.n	80012a8 <HAL_RCC_OscConfig+0x64>
 8001308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800130c:	6023      	str	r3, [r4, #0]
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001314:	e7cb      	b.n	80012ae <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001316:	4c68      	ldr	r4, [pc, #416]	@ (80014b8 <HAL_RCC_OscConfig+0x274>)
 8001318:	6863      	ldr	r3, [r4, #4]
 800131a:	f013 0f0c 	tst.w	r3, #12
 800131e:	d007      	beq.n	8001330 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001320:	6863      	ldr	r3, [r4, #4]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b08      	cmp	r3, #8
 8001328:	d110      	bne.n	800134c <HAL_RCC_OscConfig+0x108>
 800132a:	6863      	ldr	r3, [r4, #4]
 800132c:	03da      	lsls	r2, r3, #15
 800132e:	d40d      	bmi.n	800134c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	079b      	lsls	r3, r3, #30
 8001334:	d502      	bpl.n	800133c <HAL_RCC_OscConfig+0xf8>
 8001336:	692b      	ldr	r3, [r5, #16]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d1af      	bne.n	800129c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	696a      	ldr	r2, [r5, #20]
 8001340:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001344:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001348:	6023      	str	r3, [r4, #0]
 800134a:	e785      	b.n	8001258 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800134c:	692a      	ldr	r2, [r5, #16]
 800134e:	4b5b      	ldr	r3, [pc, #364]	@ (80014bc <HAL_RCC_OscConfig+0x278>)
 8001350:	b16a      	cbz	r2, 800136e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001356:	f7ff fa23 	bl	80007a0 <HAL_GetTick>
 800135a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	079f      	lsls	r7, r3, #30
 8001360:	d4ec      	bmi.n	800133c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001362:	f7ff fa1d 	bl	80007a0 <HAL_GetTick>
 8001366:	1b80      	subs	r0, r0, r6
 8001368:	2802      	cmp	r0, #2
 800136a:	d9f7      	bls.n	800135c <HAL_RCC_OscConfig+0x118>
 800136c:	e7ab      	b.n	80012c6 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800136e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001370:	f7ff fa16 	bl	80007a0 <HAL_GetTick>
 8001374:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	0798      	lsls	r0, r3, #30
 800137a:	f57f af6d 	bpl.w	8001258 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fa0f 	bl	80007a0 <HAL_GetTick>
 8001382:	1b80      	subs	r0, r0, r6
 8001384:	2802      	cmp	r0, #2
 8001386:	d9f6      	bls.n	8001376 <HAL_RCC_OscConfig+0x132>
 8001388:	e79d      	b.n	80012c6 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138a:	69aa      	ldr	r2, [r5, #24]
 800138c:	4e4a      	ldr	r6, [pc, #296]	@ (80014b8 <HAL_RCC_OscConfig+0x274>)
 800138e:	4b4b      	ldr	r3, [pc, #300]	@ (80014bc <HAL_RCC_OscConfig+0x278>)
 8001390:	b1e2      	cbz	r2, 80013cc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001392:	2201      	movs	r2, #1
 8001394:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001398:	f7ff fa02 	bl	80007a0 <HAL_GetTick>
 800139c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80013a0:	079b      	lsls	r3, r3, #30
 80013a2:	d50d      	bpl.n	80013c0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013a4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80013a8:	4b45      	ldr	r3, [pc, #276]	@ (80014c0 <HAL_RCC_OscConfig+0x27c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80013b0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80013b2:	bf00      	nop
  }
  while (Delay --);
 80013b4:	9b01      	ldr	r3, [sp, #4]
 80013b6:	1e5a      	subs	r2, r3, #1
 80013b8:	9201      	str	r2, [sp, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f9      	bne.n	80013b2 <HAL_RCC_OscConfig+0x16e>
 80013be:	e74f      	b.n	8001260 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff f9ee 	bl	80007a0 <HAL_GetTick>
 80013c4:	1b00      	subs	r0, r0, r4
 80013c6:	2802      	cmp	r0, #2
 80013c8:	d9e9      	bls.n	800139e <HAL_RCC_OscConfig+0x15a>
 80013ca:	e77c      	b.n	80012c6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80013cc:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80013d0:	f7ff f9e6 	bl	80007a0 <HAL_GetTick>
 80013d4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80013d8:	079f      	lsls	r7, r3, #30
 80013da:	f57f af41 	bpl.w	8001260 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff f9df 	bl	80007a0 <HAL_GetTick>
 80013e2:	1b00      	subs	r0, r0, r4
 80013e4:	2802      	cmp	r0, #2
 80013e6:	d9f6      	bls.n	80013d6 <HAL_RCC_OscConfig+0x192>
 80013e8:	e76d      	b.n	80012c6 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ea:	4c33      	ldr	r4, [pc, #204]	@ (80014b8 <HAL_RCC_OscConfig+0x274>)
 80013ec:	69e3      	ldr	r3, [r4, #28]
 80013ee:	00d8      	lsls	r0, r3, #3
 80013f0:	d424      	bmi.n	800143c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80013f2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f4:	69e3      	ldr	r3, [r4, #28]
 80013f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	61e3      	str	r3, [r4, #28]
 80013fc:	69e3      	ldr	r3, [r4, #28]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001406:	4e2f      	ldr	r6, [pc, #188]	@ (80014c4 <HAL_RCC_OscConfig+0x280>)
 8001408:	6833      	ldr	r3, [r6, #0]
 800140a:	05d9      	lsls	r1, r3, #23
 800140c:	d518      	bpl.n	8001440 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140e:	68eb      	ldr	r3, [r5, #12]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d126      	bne.n	8001462 <HAL_RCC_OscConfig+0x21e>
 8001414:	6a23      	ldr	r3, [r4, #32]
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800141c:	f7ff f9c0 	bl	80007a0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001424:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001426:	6a23      	ldr	r3, [r4, #32]
 8001428:	079b      	lsls	r3, r3, #30
 800142a:	d53f      	bpl.n	80014ac <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800142c:	2f00      	cmp	r7, #0
 800142e:	f43f af1b 	beq.w	8001268 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001432:	69e3      	ldr	r3, [r4, #28]
 8001434:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001438:	61e3      	str	r3, [r4, #28]
 800143a:	e715      	b.n	8001268 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800143c:	2700      	movs	r7, #0
 800143e:	e7e2      	b.n	8001406 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001440:	6833      	ldr	r3, [r6, #0]
 8001442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001446:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001448:	f7ff f9aa 	bl	80007a0 <HAL_GetTick>
 800144c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	6833      	ldr	r3, [r6, #0]
 8001450:	05da      	lsls	r2, r3, #23
 8001452:	d4dc      	bmi.n	800140e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001454:	f7ff f9a4 	bl	80007a0 <HAL_GetTick>
 8001458:	eba0 0008 	sub.w	r0, r0, r8
 800145c:	2864      	cmp	r0, #100	@ 0x64
 800145e:	d9f6      	bls.n	800144e <HAL_RCC_OscConfig+0x20a>
 8001460:	e731      	b.n	80012c6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001462:	b9ab      	cbnz	r3, 8001490 <HAL_RCC_OscConfig+0x24c>
 8001464:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001466:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	6223      	str	r3, [r4, #32]
 8001470:	6a23      	ldr	r3, [r4, #32]
 8001472:	f023 0304 	bic.w	r3, r3, #4
 8001476:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001478:	f7ff f992 	bl	80007a0 <HAL_GetTick>
 800147c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147e:	6a23      	ldr	r3, [r4, #32]
 8001480:	0798      	lsls	r0, r3, #30
 8001482:	d5d3      	bpl.n	800142c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff f98c 	bl	80007a0 <HAL_GetTick>
 8001488:	1b80      	subs	r0, r0, r6
 800148a:	4540      	cmp	r0, r8
 800148c:	d9f7      	bls.n	800147e <HAL_RCC_OscConfig+0x23a>
 800148e:	e71a      	b.n	80012c6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001490:	2b05      	cmp	r3, #5
 8001492:	6a23      	ldr	r3, [r4, #32]
 8001494:	d103      	bne.n	800149e <HAL_RCC_OscConfig+0x25a>
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	6223      	str	r3, [r4, #32]
 800149c:	e7ba      	b.n	8001414 <HAL_RCC_OscConfig+0x1d0>
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	6223      	str	r3, [r4, #32]
 80014a4:	6a23      	ldr	r3, [r4, #32]
 80014a6:	f023 0304 	bic.w	r3, r3, #4
 80014aa:	e7b6      	b.n	800141a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ac:	f7ff f978 	bl	80007a0 <HAL_GetTick>
 80014b0:	1b80      	subs	r0, r0, r6
 80014b2:	4540      	cmp	r0, r8
 80014b4:	d9b7      	bls.n	8001426 <HAL_RCC_OscConfig+0x1e2>
 80014b6:	e706      	b.n	80012c6 <HAL_RCC_OscConfig+0x82>
 80014b8:	40021000 	.word	0x40021000
 80014bc:	42420000 	.word	0x42420000
 80014c0:	20000000 	.word	0x20000000
 80014c4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c8:	4c2a      	ldr	r4, [pc, #168]	@ (8001574 <HAL_RCC_OscConfig+0x330>)
 80014ca:	6862      	ldr	r2, [r4, #4]
 80014cc:	f002 020c 	and.w	r2, r2, #12
 80014d0:	2a08      	cmp	r2, #8
 80014d2:	d03e      	beq.n	8001552 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d4:	2200      	movs	r2, #0
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 80014da:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014dc:	d12c      	bne.n	8001538 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80014de:	f7ff f95f 	bl	80007a0 <HAL_GetTick>
 80014e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	0199      	lsls	r1, r3, #6
 80014e8:	d420      	bmi.n	800152c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014ea:	6a2b      	ldr	r3, [r5, #32]
 80014ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014f0:	d105      	bne.n	80014fe <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014f2:	6862      	ldr	r2, [r4, #4]
 80014f4:	68a9      	ldr	r1, [r5, #8]
 80014f6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80014fa:	430a      	orrs	r2, r1
 80014fc:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014fe:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001500:	6862      	ldr	r2, [r4, #4]
 8001502:	430b      	orrs	r3, r1
 8001504:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8001508:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800150a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800150c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800150e:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <HAL_RCC_OscConfig+0x334>)
 8001510:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001512:	f7ff f945 	bl	80007a0 <HAL_GetTick>
 8001516:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	019a      	lsls	r2, r3, #6
 800151c:	f53f aea8 	bmi.w	8001270 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001520:	f7ff f93e 	bl	80007a0 <HAL_GetTick>
 8001524:	1b40      	subs	r0, r0, r5
 8001526:	2802      	cmp	r0, #2
 8001528:	d9f6      	bls.n	8001518 <HAL_RCC_OscConfig+0x2d4>
 800152a:	e6cc      	b.n	80012c6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff f938 	bl	80007a0 <HAL_GetTick>
 8001530:	1b80      	subs	r0, r0, r6
 8001532:	2802      	cmp	r0, #2
 8001534:	d9d6      	bls.n	80014e4 <HAL_RCC_OscConfig+0x2a0>
 8001536:	e6c6      	b.n	80012c6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001538:	f7ff f932 	bl	80007a0 <HAL_GetTick>
 800153c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	019b      	lsls	r3, r3, #6
 8001542:	f57f ae95 	bpl.w	8001270 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001546:	f7ff f92b 	bl	80007a0 <HAL_GetTick>
 800154a:	1b40      	subs	r0, r0, r5
 800154c:	2802      	cmp	r0, #2
 800154e:	d9f6      	bls.n	800153e <HAL_RCC_OscConfig+0x2fa>
 8001550:	e6b9      	b.n	80012c6 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001552:	2b01      	cmp	r3, #1
 8001554:	f43f aea2 	beq.w	800129c <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8001558:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800155a:	6a2b      	ldr	r3, [r5, #32]
 800155c:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8001560:	429a      	cmp	r2, r3
 8001562:	f47f ae9b 	bne.w	800129c <HAL_RCC_OscConfig+0x58>
 8001566:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001568:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156c:	1ac0      	subs	r0, r0, r3
 800156e:	bf18      	it	ne
 8001570:	2001      	movne	r0, #1
 8001572:	e6a9      	b.n	80012c8 <HAL_RCC_OscConfig+0x84>
 8001574:	40021000 	.word	0x40021000
 8001578:	42420000 	.word	0x42420000

0800157c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800157c:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x38>)
 800157e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001580:	f003 010c 	and.w	r1, r3, #12
 8001584:	2908      	cmp	r1, #8
 8001586:	d112      	bne.n	80015ae <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001588:	480b      	ldr	r0, [pc, #44]	@ (80015b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 800158a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800158e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001590:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001592:	d509      	bpl.n	80015a8 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001594:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001596:	4a09      	ldr	r2, [pc, #36]	@ (80015bc <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001598:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800159c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800159e:	4a08      	ldr	r2, [pc, #32]	@ (80015c0 <HAL_RCC_GetSysClockFreq+0x44>)
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80015a6:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_RCC_GetSysClockFreq+0x48>)
 80015aa:	4358      	muls	r0, r3
 80015ac:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80015ae:	4803      	ldr	r0, [pc, #12]	@ (80015bc <HAL_RCC_GetSysClockFreq+0x40>)
}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000
 80015b8:	08001a4a 	.word	0x08001a4a
 80015bc:	007a1200 	.word	0x007a1200
 80015c0:	08001a48 	.word	0x08001a48
 80015c4:	003d0900 	.word	0x003d0900

080015c8 <HAL_RCC_ClockConfig>:
{
 80015c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015cc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80015ce:	4604      	mov	r4, r0
 80015d0:	b910      	cbnz	r0, 80015d8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80015d2:	2001      	movs	r0, #1
}
 80015d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015d8:	4a44      	ldr	r2, [pc, #272]	@ (80016ec <HAL_RCC_ClockConfig+0x124>)
 80015da:	6813      	ldr	r3, [r2, #0]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	428b      	cmp	r3, r1
 80015e2:	d328      	bcc.n	8001636 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e4:	6821      	ldr	r1, [r4, #0]
 80015e6:	078e      	lsls	r6, r1, #30
 80015e8:	d430      	bmi.n	800164c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ea:	07ca      	lsls	r2, r1, #31
 80015ec:	d443      	bmi.n	8001676 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ee:	4a3f      	ldr	r2, [pc, #252]	@ (80016ec <HAL_RCC_ClockConfig+0x124>)
 80015f0:	6813      	ldr	r3, [r2, #0]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	42ab      	cmp	r3, r5
 80015f8:	d865      	bhi.n	80016c6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fa:	6822      	ldr	r2, [r4, #0]
 80015fc:	4d3c      	ldr	r5, [pc, #240]	@ (80016f0 <HAL_RCC_ClockConfig+0x128>)
 80015fe:	f012 0f04 	tst.w	r2, #4
 8001602:	d16c      	bne.n	80016de <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001604:	0713      	lsls	r3, r2, #28
 8001606:	d506      	bpl.n	8001616 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001608:	686b      	ldr	r3, [r5, #4]
 800160a:	6922      	ldr	r2, [r4, #16]
 800160c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001610:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001614:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001616:	f7ff ffb1 	bl	800157c <HAL_RCC_GetSysClockFreq>
 800161a:	686b      	ldr	r3, [r5, #4]
 800161c:	4a35      	ldr	r2, [pc, #212]	@ (80016f4 <HAL_RCC_ClockConfig+0x12c>)
 800161e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001622:	5cd3      	ldrb	r3, [r2, r3]
 8001624:	40d8      	lsrs	r0, r3
 8001626:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <HAL_RCC_ClockConfig+0x130>)
 8001628:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800162a:	4b34      	ldr	r3, [pc, #208]	@ (80016fc <HAL_RCC_ClockConfig+0x134>)
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	f7ff f80f 	bl	8000650 <HAL_InitTick>
  return HAL_OK;
 8001632:	2000      	movs	r0, #0
 8001634:	e7ce      	b.n	80015d4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	6813      	ldr	r3, [r2, #0]
 8001638:	f023 0307 	bic.w	r3, r3, #7
 800163c:	430b      	orrs	r3, r1
 800163e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001640:	6813      	ldr	r3, [r2, #0]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	428b      	cmp	r3, r1
 8001648:	d1c3      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xa>
 800164a:	e7cb      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164c:	4b28      	ldr	r3, [pc, #160]	@ (80016f0 <HAL_RCC_ClockConfig+0x128>)
 800164e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001652:	bf1e      	ittt	ne
 8001654:	685a      	ldrne	r2, [r3, #4]
 8001656:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 800165a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800165e:	bf42      	ittt	mi
 8001660:	685a      	ldrmi	r2, [r3, #4]
 8001662:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001666:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	68a0      	ldr	r0, [r4, #8]
 800166c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001670:	4302      	orrs	r2, r0
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	e7b9      	b.n	80015ea <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001676:	6862      	ldr	r2, [r4, #4]
 8001678:	4e1d      	ldr	r6, [pc, #116]	@ (80016f0 <HAL_RCC_ClockConfig+0x128>)
 800167a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167e:	d11a      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001680:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	d0a5      	beq.n	80015d2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001686:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001688:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168c:	f023 0303 	bic.w	r3, r3, #3
 8001690:	4313      	orrs	r3, r2
 8001692:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001694:	f7ff f884 	bl	80007a0 <HAL_GetTick>
 8001698:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	6873      	ldr	r3, [r6, #4]
 800169c:	6862      	ldr	r2, [r4, #4]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016a6:	d0a2      	beq.n	80015ee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff f87a 	bl	80007a0 <HAL_GetTick>
 80016ac:	1bc0      	subs	r0, r0, r7
 80016ae:	4540      	cmp	r0, r8
 80016b0:	d9f3      	bls.n	800169a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80016b2:	2003      	movs	r0, #3
 80016b4:	e78e      	b.n	80015d4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b6:	2a02      	cmp	r2, #2
 80016b8:	d102      	bne.n	80016c0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ba:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80016be:	e7e1      	b.n	8001684 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	f013 0f02 	tst.w	r3, #2
 80016c4:	e7de      	b.n	8001684 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	6813      	ldr	r3, [r2, #0]
 80016c8:	f023 0307 	bic.w	r3, r3, #7
 80016cc:	432b      	orrs	r3, r5
 80016ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d0:	6813      	ldr	r3, [r2, #0]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	42ab      	cmp	r3, r5
 80016d8:	f47f af7b 	bne.w	80015d2 <HAL_RCC_ClockConfig+0xa>
 80016dc:	e78d      	b.n	80015fa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016de:	686b      	ldr	r3, [r5, #4]
 80016e0:	68e1      	ldr	r1, [r4, #12]
 80016e2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80016e6:	430b      	orrs	r3, r1
 80016e8:	606b      	str	r3, [r5, #4]
 80016ea:	e78b      	b.n	8001604 <HAL_RCC_ClockConfig+0x3c>
 80016ec:	40022000 	.word	0x40022000
 80016f0:	40021000 	.word	0x40021000
 80016f4:	08001a38 	.word	0x08001a38
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000008 	.word	0x20000008

08001700 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001700:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001702:	4a05      	ldr	r2, [pc, #20]	@ (8001718 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800170a:	5cd3      	ldrb	r3, [r2, r3]
 800170c:	4a03      	ldr	r2, [pc, #12]	@ (800171c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800170e:	6810      	ldr	r0, [r2, #0]
}
 8001710:	40d8      	lsrs	r0, r3
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000
 8001718:	08001a30 	.word	0x08001a30
 800171c:	20000000 	.word	0x20000000

08001720 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001720:	230f      	movs	r3, #15
 8001722:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001724:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <HAL_RCC_GetClockConfig+0x34>)
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	f002 0203 	and.w	r2, r2, #3
 800172c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8001734:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800173c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	08db      	lsrs	r3, r3, #3
 8001742:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001746:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001748:	4b03      	ldr	r3, [pc, #12]	@ (8001758 <HAL_RCC_GetClockConfig+0x38>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	600b      	str	r3, [r1, #0]
}
 8001752:	4770      	bx	lr
 8001754:	40021000 	.word	0x40021000
 8001758:	40022000 	.word	0x40022000

0800175c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800175c:	4770      	bx	lr
	...

08001760 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001760:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001764:	2b01      	cmp	r3, #1
 8001766:	d120      	bne.n	80017aa <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001768:	2302      	movs	r3, #2
 800176a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800176e:	6803      	ldr	r3, [r0, #0]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	f042 0201 	orr.w	r2, r2, #1
 8001776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001778:	4a0d      	ldr	r2, [pc, #52]	@ (80017b0 <HAL_TIM_Base_Start_IT+0x50>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00a      	beq.n	8001794 <HAL_TIM_Base_Start_IT+0x34>
 800177e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001782:	d007      	beq.n	8001794 <HAL_TIM_Base_Start_IT+0x34>
 8001784:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001788:	4293      	cmp	r3, r2
 800178a:	d003      	beq.n	8001794 <HAL_TIM_Base_Start_IT+0x34>
 800178c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001790:	4293      	cmp	r3, r2
 8001792:	d104      	bne.n	800179e <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800179a:	2a06      	cmp	r2, #6
 800179c:	d003      	beq.n	80017a6 <HAL_TIM_Base_Start_IT+0x46>
    {
      __HAL_TIM_ENABLE(htim);
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	f042 0201 	orr.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80017a6:	2000      	movs	r0, #0
 80017a8:	4770      	bx	lr
    return HAL_ERROR;
 80017aa:	2001      	movs	r0, #1
}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40012c00 	.word	0x40012c00

080017b4 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80017b4:	4770      	bx	lr

080017b6 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80017b6:	4770      	bx	lr

080017b8 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80017b8:	4770      	bx	lr

080017ba <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80017ba:	4770      	bx	lr

080017bc <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80017bc:	6803      	ldr	r3, [r0, #0]
{
 80017be:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80017c0:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80017c2:	691e      	ldr	r6, [r3, #16]
{
 80017c4:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80017c6:	07b1      	lsls	r1, r6, #30
 80017c8:	d50d      	bpl.n	80017e6 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80017ca:	07aa      	lsls	r2, r5, #30
 80017cc:	d50b      	bpl.n	80017e6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80017ce:	f06f 0202 	mvn.w	r2, #2
 80017d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017d4:	2201      	movs	r2, #1
 80017d6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	079b      	lsls	r3, r3, #30
 80017dc:	d069      	beq.n	80018b2 <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 80017de:	f7ff ffea 	bl	80017b6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e2:	2300      	movs	r3, #0
 80017e4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80017e6:	0771      	lsls	r1, r6, #29
 80017e8:	d510      	bpl.n	800180c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80017ea:	076a      	lsls	r2, r5, #29
 80017ec:	d50e      	bpl.n	800180c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017ee:	f06f 0204 	mvn.w	r2, #4
 80017f2:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 80017f4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017f8:	2202      	movs	r2, #2
 80017fa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001802:	d05c      	beq.n	80018be <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8001804:	f7ff ffd7 	bl	80017b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001808:	2300      	movs	r3, #0
 800180a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800180c:	0733      	lsls	r3, r6, #28
 800180e:	d50f      	bpl.n	8001830 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001810:	0728      	lsls	r0, r5, #28
 8001812:	d50d      	bpl.n	8001830 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001814:	f06f 0208 	mvn.w	r2, #8
 8001818:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 800181a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800181c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800181e:	2204      	movs	r2, #4
 8001820:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	0799      	lsls	r1, r3, #30
 8001826:	d050      	beq.n	80018ca <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001828:	f7ff ffc5 	bl	80017b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800182c:	2300      	movs	r3, #0
 800182e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001830:	06f2      	lsls	r2, r6, #27
 8001832:	d510      	bpl.n	8001856 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001834:	06eb      	lsls	r3, r5, #27
 8001836:	d50e      	bpl.n	8001856 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001838:	f06f 0210 	mvn.w	r2, #16
 800183c:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 800183e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001842:	2208      	movs	r2, #8
 8001844:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800184c:	d043      	beq.n	80018d6 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800184e:	f7ff ffb2 	bl	80017b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001852:	2300      	movs	r3, #0
 8001854:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001856:	07f0      	lsls	r0, r6, #31
 8001858:	d508      	bpl.n	800186c <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800185a:	07e9      	lsls	r1, r5, #31
 800185c:	d506      	bpl.n	800186c <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800185e:	f06f 0201 	mvn.w	r2, #1
 8001862:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001864:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001866:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001868:	f7fe fe7e 	bl	8000568 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800186c:	0632      	lsls	r2, r6, #24
 800186e:	d508      	bpl.n	8001882 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001870:	062b      	lsls	r3, r5, #24
 8001872:	d506      	bpl.n	8001882 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001874:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001878:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 800187a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800187c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800187e:	f000 f89e 	bl	80019be <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001882:	0670      	lsls	r0, r6, #25
 8001884:	d508      	bpl.n	8001898 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001886:	0669      	lsls	r1, r5, #25
 8001888:	d506      	bpl.n	8001898 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800188a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800188e:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 8001890:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001892:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001894:	f7ff ff91 	bl	80017ba <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001898:	06b2      	lsls	r2, r6, #26
 800189a:	d522      	bpl.n	80018e2 <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800189c:	06ab      	lsls	r3, r5, #26
 800189e:	d520      	bpl.n	80018e2 <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018a0:	f06f 0220 	mvn.w	r2, #32
 80018a4:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 80018a6:	4620      	mov	r0, r4
}
 80018a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80018ae:	f000 b885 	b.w	80019bc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b2:	f7ff ff7f 	bl	80017b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b6:	4620      	mov	r0, r4
 80018b8:	f7ff ff7e 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80018bc:	e791      	b.n	80017e2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018be:	f7ff ff79 	bl	80017b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7ff ff78 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80018c8:	e79e      	b.n	8001808 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ca:	f7ff ff73 	bl	80017b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ce:	4620      	mov	r0, r4
 80018d0:	f7ff ff72 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80018d4:	e7aa      	b.n	800182c <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d6:	f7ff ff6d 	bl	80017b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018da:	4620      	mov	r0, r4
 80018dc:	f7ff ff6c 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80018e0:	e7b7      	b.n	8001852 <HAL_TIM_IRQHandler+0x96>
}
 80018e2:	bd70      	pop	{r4, r5, r6, pc}

080018e4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001960 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 80018e6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018e8:	4290      	cmp	r0, r2
 80018ea:	d00a      	beq.n	8001902 <TIM_Base_SetConfig+0x1e>
 80018ec:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80018f0:	d007      	beq.n	8001902 <TIM_Base_SetConfig+0x1e>
 80018f2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80018f6:	4290      	cmp	r0, r2
 80018f8:	d003      	beq.n	8001902 <TIM_Base_SetConfig+0x1e>
 80018fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018fe:	4290      	cmp	r0, r2
 8001900:	d115      	bne.n	800192e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001902:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001908:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800190a:	4a15      	ldr	r2, [pc, #84]	@ (8001960 <TIM_Base_SetConfig+0x7c>)
 800190c:	4290      	cmp	r0, r2
 800190e:	d00a      	beq.n	8001926 <TIM_Base_SetConfig+0x42>
 8001910:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001914:	d007      	beq.n	8001926 <TIM_Base_SetConfig+0x42>
 8001916:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800191a:	4290      	cmp	r0, r2
 800191c:	d003      	beq.n	8001926 <TIM_Base_SetConfig+0x42>
 800191e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001922:	4290      	cmp	r0, r2
 8001924:	d103      	bne.n	800192e <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001926:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800192c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800192e:	694a      	ldr	r2, [r1, #20]
 8001930:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001934:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001936:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001938:	688b      	ldr	r3, [r1, #8]
 800193a:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800193c:	680b      	ldr	r3, [r1, #0]
 800193e:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001940:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <TIM_Base_SetConfig+0x7c>)
 8001942:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001944:	bf04      	itt	eq
 8001946:	690b      	ldreq	r3, [r1, #16]
 8001948:	6303      	streq	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800194a:	2301      	movs	r3, #1
 800194c:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800194e:	6903      	ldr	r3, [r0, #16]
 8001950:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001952:	bf42      	ittt	mi
 8001954:	6903      	ldrmi	r3, [r0, #16]
 8001956:	f023 0301 	bicmi.w	r3, r3, #1
 800195a:	6103      	strmi	r3, [r0, #16]
  }
}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40012c00 	.word	0x40012c00

08001964 <HAL_TIM_Base_Init>:
{
 8001964:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001966:	4604      	mov	r4, r0
 8001968:	b330      	cbz	r0, 80019b8 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800196a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800196e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001972:	b91b      	cbnz	r3, 800197c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001974:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001978:	f7ff fef0 	bl	800175c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800197c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800197e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001980:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001984:	1d21      	adds	r1, r4, #4
 8001986:	f7ff ffad 	bl	80018e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800198a:	2301      	movs	r3, #1
  return HAL_OK;
 800198c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800198e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001992:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001996:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800199a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800199e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80019a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80019aa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80019ae:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80019b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80019b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019b8:	2001      	movs	r0, #1
 80019ba:	e7fc      	b.n	80019b6 <HAL_TIM_Base_Init+0x52>

080019bc <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80019bc:	4770      	bx	lr

080019be <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80019be:	4770      	bx	lr

080019c0 <memset>:
 80019c0:	4603      	mov	r3, r0
 80019c2:	4402      	add	r2, r0
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d100      	bne.n	80019ca <memset+0xa>
 80019c8:	4770      	bx	lr
 80019ca:	f803 1b01 	strb.w	r1, [r3], #1
 80019ce:	e7f9      	b.n	80019c4 <memset+0x4>

080019d0 <__libc_init_array>:
 80019d0:	b570      	push	{r4, r5, r6, lr}
 80019d2:	2600      	movs	r6, #0
 80019d4:	4d0c      	ldr	r5, [pc, #48]	@ (8001a08 <__libc_init_array+0x38>)
 80019d6:	4c0d      	ldr	r4, [pc, #52]	@ (8001a0c <__libc_init_array+0x3c>)
 80019d8:	1b64      	subs	r4, r4, r5
 80019da:	10a4      	asrs	r4, r4, #2
 80019dc:	42a6      	cmp	r6, r4
 80019de:	d109      	bne.n	80019f4 <__libc_init_array+0x24>
 80019e0:	f000 f81a 	bl	8001a18 <_init>
 80019e4:	2600      	movs	r6, #0
 80019e6:	4d0a      	ldr	r5, [pc, #40]	@ (8001a10 <__libc_init_array+0x40>)
 80019e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a14 <__libc_init_array+0x44>)
 80019ea:	1b64      	subs	r4, r4, r5
 80019ec:	10a4      	asrs	r4, r4, #2
 80019ee:	42a6      	cmp	r6, r4
 80019f0:	d105      	bne.n	80019fe <__libc_init_array+0x2e>
 80019f2:	bd70      	pop	{r4, r5, r6, pc}
 80019f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80019f8:	4798      	blx	r3
 80019fa:	3601      	adds	r6, #1
 80019fc:	e7ee      	b.n	80019dc <__libc_init_array+0xc>
 80019fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a02:	4798      	blx	r3
 8001a04:	3601      	adds	r6, #1
 8001a06:	e7f2      	b.n	80019ee <__libc_init_array+0x1e>
 8001a08:	08001a5c 	.word	0x08001a5c
 8001a0c:	08001a5c 	.word	0x08001a5c
 8001a10:	08001a5c 	.word	0x08001a5c
 8001a14:	08001a60 	.word	0x08001a60

08001a18 <_init>:
 8001a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a1a:	bf00      	nop
 8001a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a1e:	bc08      	pop	{r3}
 8001a20:	469e      	mov	lr, r3
 8001a22:	4770      	bx	lr

08001a24 <_fini>:
 8001a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a26:	bf00      	nop
 8001a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a2a:	bc08      	pop	{r3}
 8001a2c:	469e      	mov	lr, r3
 8001a2e:	4770      	bx	lr
