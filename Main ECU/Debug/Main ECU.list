
Main ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08002000  08002000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049fc  08002110  08002110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006b0c  08006b0c  00005b0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b94  08006b94  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  08006b94  08006b94  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b94  08006b94  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b94  08006b94  00005b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b98  08006b98  00005b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006b9c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002adc  20000018  08006bb0  00006018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002af4  08006bb0  00006af4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020411  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005914  00000000  00000000  0002644e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000c0e2  00000000  00000000  0002bd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  00037e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159d  00000000  00000000  000393f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b7d6  00000000  00000000  0003a995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026353  00000000  00000000  0005616b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098b7a  00000000  00000000  0007c4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00115038  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038ec  00000000  00000000  0011507c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00118968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08002110 <__do_global_dtors_aux>:
 8002110:	b510      	push	{r4, lr}
 8002112:	4c05      	ldr	r4, [pc, #20]	@ (8002128 <__do_global_dtors_aux+0x18>)
 8002114:	7823      	ldrb	r3, [r4, #0]
 8002116:	b933      	cbnz	r3, 8002126 <__do_global_dtors_aux+0x16>
 8002118:	4b04      	ldr	r3, [pc, #16]	@ (800212c <__do_global_dtors_aux+0x1c>)
 800211a:	b113      	cbz	r3, 8002122 <__do_global_dtors_aux+0x12>
 800211c:	4804      	ldr	r0, [pc, #16]	@ (8002130 <__do_global_dtors_aux+0x20>)
 800211e:	f3af 8000 	nop.w
 8002122:	2301      	movs	r3, #1
 8002124:	7023      	strb	r3, [r4, #0]
 8002126:	bd10      	pop	{r4, pc}
 8002128:	20000018 	.word	0x20000018
 800212c:	00000000 	.word	0x00000000
 8002130:	08006af4 	.word	0x08006af4

08002134 <frame_dummy>:
 8002134:	b508      	push	{r3, lr}
 8002136:	4b03      	ldr	r3, [pc, #12]	@ (8002144 <frame_dummy+0x10>)
 8002138:	b11b      	cbz	r3, 8002142 <frame_dummy+0xe>
 800213a:	4903      	ldr	r1, [pc, #12]	@ (8002148 <frame_dummy+0x14>)
 800213c:	4803      	ldr	r0, [pc, #12]	@ (800214c <frame_dummy+0x18>)
 800213e:	f3af 8000 	nop.w
 8002142:	bd08      	pop	{r3, pc}
 8002144:	00000000 	.word	0x00000000
 8002148:	2000001c 	.word	0x2000001c
 800214c:	08006af4 	.word	0x08006af4

08002150 <__aeabi_frsub>:
 8002150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8002154:	e002      	b.n	800215c <__addsf3>
 8002156:	bf00      	nop

08002158 <__aeabi_fsub>:
 8002158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800215c <__addsf3>:
 800215c:	0042      	lsls	r2, r0, #1
 800215e:	bf1f      	itttt	ne
 8002160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8002164:	ea92 0f03 	teqne	r2, r3
 8002168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800216c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002170:	d06a      	beq.n	8002248 <__addsf3+0xec>
 8002172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8002176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800217a:	bfc1      	itttt	gt
 800217c:	18d2      	addgt	r2, r2, r3
 800217e:	4041      	eorgt	r1, r0
 8002180:	4048      	eorgt	r0, r1
 8002182:	4041      	eorgt	r1, r0
 8002184:	bfb8      	it	lt
 8002186:	425b      	neglt	r3, r3
 8002188:	2b19      	cmp	r3, #25
 800218a:	bf88      	it	hi
 800218c:	4770      	bxhi	lr
 800218e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8002192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8002196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800219a:	bf18      	it	ne
 800219c:	4240      	negne	r0, r0
 800219e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80021a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80021a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80021aa:	bf18      	it	ne
 80021ac:	4249      	negne	r1, r1
 80021ae:	ea92 0f03 	teq	r2, r3
 80021b2:	d03f      	beq.n	8002234 <__addsf3+0xd8>
 80021b4:	f1a2 0201 	sub.w	r2, r2, #1
 80021b8:	fa41 fc03 	asr.w	ip, r1, r3
 80021bc:	eb10 000c 	adds.w	r0, r0, ip
 80021c0:	f1c3 0320 	rsb	r3, r3, #32
 80021c4:	fa01 f103 	lsl.w	r1, r1, r3
 80021c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80021cc:	d502      	bpl.n	80021d4 <__addsf3+0x78>
 80021ce:	4249      	negs	r1, r1
 80021d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80021d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80021d8:	d313      	bcc.n	8002202 <__addsf3+0xa6>
 80021da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80021de:	d306      	bcc.n	80021ee <__addsf3+0x92>
 80021e0:	0840      	lsrs	r0, r0, #1
 80021e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80021e6:	f102 0201 	add.w	r2, r2, #1
 80021ea:	2afe      	cmp	r2, #254	@ 0xfe
 80021ec:	d251      	bcs.n	8002292 <__addsf3+0x136>
 80021ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80021f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80021f6:	bf08      	it	eq
 80021f8:	f020 0001 	biceq.w	r0, r0, #1
 80021fc:	ea40 0003 	orr.w	r0, r0, r3
 8002200:	4770      	bx	lr
 8002202:	0049      	lsls	r1, r1, #1
 8002204:	eb40 0000 	adc.w	r0, r0, r0
 8002208:	3a01      	subs	r2, #1
 800220a:	bf28      	it	cs
 800220c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8002210:	d2ed      	bcs.n	80021ee <__addsf3+0x92>
 8002212:	fab0 fc80 	clz	ip, r0
 8002216:	f1ac 0c08 	sub.w	ip, ip, #8
 800221a:	ebb2 020c 	subs.w	r2, r2, ip
 800221e:	fa00 f00c 	lsl.w	r0, r0, ip
 8002222:	bfaa      	itet	ge
 8002224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8002228:	4252      	neglt	r2, r2
 800222a:	4318      	orrge	r0, r3
 800222c:	bfbc      	itt	lt
 800222e:	40d0      	lsrlt	r0, r2
 8002230:	4318      	orrlt	r0, r3
 8002232:	4770      	bx	lr
 8002234:	f092 0f00 	teq	r2, #0
 8002238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800223c:	bf06      	itte	eq
 800223e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8002242:	3201      	addeq	r2, #1
 8002244:	3b01      	subne	r3, #1
 8002246:	e7b5      	b.n	80021b4 <__addsf3+0x58>
 8002248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800224c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8002250:	bf18      	it	ne
 8002252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002256:	d021      	beq.n	800229c <__addsf3+0x140>
 8002258:	ea92 0f03 	teq	r2, r3
 800225c:	d004      	beq.n	8002268 <__addsf3+0x10c>
 800225e:	f092 0f00 	teq	r2, #0
 8002262:	bf08      	it	eq
 8002264:	4608      	moveq	r0, r1
 8002266:	4770      	bx	lr
 8002268:	ea90 0f01 	teq	r0, r1
 800226c:	bf1c      	itt	ne
 800226e:	2000      	movne	r0, #0
 8002270:	4770      	bxne	lr
 8002272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8002276:	d104      	bne.n	8002282 <__addsf3+0x126>
 8002278:	0040      	lsls	r0, r0, #1
 800227a:	bf28      	it	cs
 800227c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8002280:	4770      	bx	lr
 8002282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8002286:	bf3c      	itt	cc
 8002288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800228c:	4770      	bxcc	lr
 800228e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8002292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8002296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800229a:	4770      	bx	lr
 800229c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80022a0:	bf16      	itet	ne
 80022a2:	4608      	movne	r0, r1
 80022a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80022a8:	4601      	movne	r1, r0
 80022aa:	0242      	lsls	r2, r0, #9
 80022ac:	bf06      	itte	eq
 80022ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80022b2:	ea90 0f01 	teqeq	r0, r1
 80022b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80022ba:	4770      	bx	lr

080022bc <__aeabi_ui2f>:
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	e004      	b.n	80022cc <__aeabi_i2f+0x8>
 80022c2:	bf00      	nop

080022c4 <__aeabi_i2f>:
 80022c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80022c8:	bf48      	it	mi
 80022ca:	4240      	negmi	r0, r0
 80022cc:	ea5f 0c00 	movs.w	ip, r0
 80022d0:	bf08      	it	eq
 80022d2:	4770      	bxeq	lr
 80022d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80022d8:	4601      	mov	r1, r0
 80022da:	f04f 0000 	mov.w	r0, #0
 80022de:	e01c      	b.n	800231a <__aeabi_l2f+0x2a>

080022e0 <__aeabi_ul2f>:
 80022e0:	ea50 0201 	orrs.w	r2, r0, r1
 80022e4:	bf08      	it	eq
 80022e6:	4770      	bxeq	lr
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e00a      	b.n	8002304 <__aeabi_l2f+0x14>
 80022ee:	bf00      	nop

080022f0 <__aeabi_l2f>:
 80022f0:	ea50 0201 	orrs.w	r2, r0, r1
 80022f4:	bf08      	it	eq
 80022f6:	4770      	bxeq	lr
 80022f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80022fc:	d502      	bpl.n	8002304 <__aeabi_l2f+0x14>
 80022fe:	4240      	negs	r0, r0
 8002300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002304:	ea5f 0c01 	movs.w	ip, r1
 8002308:	bf02      	ittt	eq
 800230a:	4684      	moveq	ip, r0
 800230c:	4601      	moveq	r1, r0
 800230e:	2000      	moveq	r0, #0
 8002310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8002314:	bf08      	it	eq
 8002316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800231a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800231e:	fabc f28c 	clz	r2, ip
 8002322:	3a08      	subs	r2, #8
 8002324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8002328:	db10      	blt.n	800234c <__aeabi_l2f+0x5c>
 800232a:	fa01 fc02 	lsl.w	ip, r1, r2
 800232e:	4463      	add	r3, ip
 8002330:	fa00 fc02 	lsl.w	ip, r0, r2
 8002334:	f1c2 0220 	rsb	r2, r2, #32
 8002338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800233c:	fa20 f202 	lsr.w	r2, r0, r2
 8002340:	eb43 0002 	adc.w	r0, r3, r2
 8002344:	bf08      	it	eq
 8002346:	f020 0001 	biceq.w	r0, r0, #1
 800234a:	4770      	bx	lr
 800234c:	f102 0220 	add.w	r2, r2, #32
 8002350:	fa01 fc02 	lsl.w	ip, r1, r2
 8002354:	f1c2 0220 	rsb	r2, r2, #32
 8002358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800235c:	fa21 f202 	lsr.w	r2, r1, r2
 8002360:	eb43 0002 	adc.w	r0, r3, r2
 8002364:	bf08      	it	eq
 8002366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800236a:	4770      	bx	lr

0800236c <__gesf2>:
 800236c:	f04f 3cff 	mov.w	ip, #4294967295
 8002370:	e006      	b.n	8002380 <__cmpsf2+0x4>
 8002372:	bf00      	nop

08002374 <__lesf2>:
 8002374:	f04f 0c01 	mov.w	ip, #1
 8002378:	e002      	b.n	8002380 <__cmpsf2+0x4>
 800237a:	bf00      	nop

0800237c <__cmpsf2>:
 800237c:	f04f 0c01 	mov.w	ip, #1
 8002380:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002384:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8002388:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800238c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8002390:	bf18      	it	ne
 8002392:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002396:	d011      	beq.n	80023bc <__cmpsf2+0x40>
 8002398:	b001      	add	sp, #4
 800239a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800239e:	bf18      	it	ne
 80023a0:	ea90 0f01 	teqne	r0, r1
 80023a4:	bf58      	it	pl
 80023a6:	ebb2 0003 	subspl.w	r0, r2, r3
 80023aa:	bf88      	it	hi
 80023ac:	17c8      	asrhi	r0, r1, #31
 80023ae:	bf38      	it	cc
 80023b0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80023b4:	bf18      	it	ne
 80023b6:	f040 0001 	orrne.w	r0, r0, #1
 80023ba:	4770      	bx	lr
 80023bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80023c0:	d102      	bne.n	80023c8 <__cmpsf2+0x4c>
 80023c2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80023c6:	d105      	bne.n	80023d4 <__cmpsf2+0x58>
 80023c8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80023cc:	d1e4      	bne.n	8002398 <__cmpsf2+0x1c>
 80023ce:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80023d2:	d0e1      	beq.n	8002398 <__cmpsf2+0x1c>
 80023d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop

080023dc <__aeabi_cfrcmple>:
 80023dc:	4684      	mov	ip, r0
 80023de:	4608      	mov	r0, r1
 80023e0:	4661      	mov	r1, ip
 80023e2:	e7ff      	b.n	80023e4 <__aeabi_cfcmpeq>

080023e4 <__aeabi_cfcmpeq>:
 80023e4:	b50f      	push	{r0, r1, r2, r3, lr}
 80023e6:	f7ff ffc9 	bl	800237c <__cmpsf2>
 80023ea:	2800      	cmp	r0, #0
 80023ec:	bf48      	it	mi
 80023ee:	f110 0f00 	cmnmi.w	r0, #0
 80023f2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080023f4 <__aeabi_fcmpeq>:
 80023f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80023f8:	f7ff fff4 	bl	80023e4 <__aeabi_cfcmpeq>
 80023fc:	bf0c      	ite	eq
 80023fe:	2001      	moveq	r0, #1
 8002400:	2000      	movne	r0, #0
 8002402:	f85d fb08 	ldr.w	pc, [sp], #8
 8002406:	bf00      	nop

08002408 <__aeabi_fcmplt>:
 8002408:	f84d ed08 	str.w	lr, [sp, #-8]!
 800240c:	f7ff ffea 	bl	80023e4 <__aeabi_cfcmpeq>
 8002410:	bf34      	ite	cc
 8002412:	2001      	movcc	r0, #1
 8002414:	2000      	movcs	r0, #0
 8002416:	f85d fb08 	ldr.w	pc, [sp], #8
 800241a:	bf00      	nop

0800241c <__aeabi_fcmple>:
 800241c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002420:	f7ff ffe0 	bl	80023e4 <__aeabi_cfcmpeq>
 8002424:	bf94      	ite	ls
 8002426:	2001      	movls	r0, #1
 8002428:	2000      	movhi	r0, #0
 800242a:	f85d fb08 	ldr.w	pc, [sp], #8
 800242e:	bf00      	nop

08002430 <__aeabi_fcmpge>:
 8002430:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002434:	f7ff ffd2 	bl	80023dc <__aeabi_cfrcmple>
 8002438:	bf94      	ite	ls
 800243a:	2001      	movls	r0, #1
 800243c:	2000      	movhi	r0, #0
 800243e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002442:	bf00      	nop

08002444 <__aeabi_fcmpgt>:
 8002444:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002448:	f7ff ffc8 	bl	80023dc <__aeabi_cfrcmple>
 800244c:	bf34      	ite	cc
 800244e:	2001      	movcc	r0, #1
 8002450:	2000      	movcs	r0, #0
 8002452:	f85d fb08 	ldr.w	pc, [sp], #8
 8002456:	bf00      	nop

08002458 <__aeabi_f2uiz>:
 8002458:	0042      	lsls	r2, r0, #1
 800245a:	d20e      	bcs.n	800247a <__aeabi_f2uiz+0x22>
 800245c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8002460:	d30b      	bcc.n	800247a <__aeabi_f2uiz+0x22>
 8002462:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8002466:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800246a:	d409      	bmi.n	8002480 <__aeabi_f2uiz+0x28>
 800246c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8002470:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002474:	fa23 f002 	lsr.w	r0, r3, r2
 8002478:	4770      	bx	lr
 800247a:	f04f 0000 	mov.w	r0, #0
 800247e:	4770      	bx	lr
 8002480:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8002484:	d101      	bne.n	800248a <__aeabi_f2uiz+0x32>
 8002486:	0242      	lsls	r2, r0, #9
 8002488:	d102      	bne.n	8002490 <__aeabi_f2uiz+0x38>
 800248a:	f04f 30ff 	mov.w	r0, #4294967295
 800248e:	4770      	bx	lr
 8002490:	f04f 0000 	mov.w	r0, #0
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop

08002498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002498:	b530      	push	{r4, r5, lr}
 800249a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800249c:	2220      	movs	r2, #32
 800249e:	2100      	movs	r1, #0
 80024a0:	a80b      	add	r0, sp, #44	@ 0x2c
 80024a2:	f004 faed 	bl	8006a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024a6:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a8:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024aa:	2100      	movs	r1, #0
 80024ac:	eb0d 0002 	add.w	r0, sp, r2
 80024b0:	f004 fae6 	bl	8006a80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b4:	462a      	mov	r2, r5
 80024b6:	2100      	movs	r1, #0
 80024b8:	a801      	add	r0, sp, #4
 80024ba:	f004 fae1 	bl	8006a80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024be:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80024c0:	230a      	movs	r3, #10
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024c2:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80024c6:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024c8:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80024ca:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ce:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80024d0:	9410      	str	r4, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d2:	9511      	str	r5, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80024d4:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d6:	f001 fa4d 	bl	8003974 <HAL_RCC_OscConfig>
 80024da:	b108      	cbz	r0, 80024e0 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024de:	e7fe      	b.n	80024de <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024e2:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ea:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ec:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024f0:	4629      	mov	r1, r5
 80024f2:	a805      	add	r0, sp, #20
 80024f4:	f001 fc00 	bl	8003cf8 <HAL_RCC_ClockConfig>
 80024f8:	b108      	cbz	r0, 80024fe <SystemClock_Config+0x66>
 80024fa:	b672      	cpsid	i
  while (1)
 80024fc:	e7fe      	b.n	80024fc <SystemClock_Config+0x64>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80024fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002502:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002504:	9401      	str	r4, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002506:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002508:	f001 fcd0 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 800250c:	b108      	cbz	r0, 8002512 <SystemClock_Config+0x7a>
 800250e:	b672      	cpsid	i
  while (1)
 8002510:	e7fe      	b.n	8002510 <SystemClock_Config+0x78>
}
 8002512:	b015      	add	sp, #84	@ 0x54
 8002514:	bd30      	pop	{r4, r5, pc}
	...

08002518 <CAN_Filter_Config>:
{
 8002518:	b570      	push	{r4, r5, r6, lr}
    filter.FilterIdHigh   = (uint16_t)(UDS_REQUEST_ID << 5);       /* high 16 bits of 32-bit ID */
 800251a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
    filter.FilterMode           = CAN_FILTERMODE_IDLIST;
 800251e:	2400      	movs	r4, #0
{
 8002520:	b08a      	sub	sp, #40	@ 0x28
    filter.FilterMode           = CAN_FILTERMODE_IDLIST;
 8002522:	2601      	movs	r6, #1
    filter.FilterIdLow    =  0x0000;                         /* low 16 bits */
 8002524:	e9cd 3400 	strd	r3, r4, [sp]
    filter.FilterMaskIdHigh = 0xFFFF;                        /* unused in IDLIST */
 8002528:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    HAL_CAN_ConfigFilter(&hcan, &filter);
 800252c:	4d15      	ldr	r5, [pc, #84]	@ (8002584 <CAN_Filter_Config+0x6c>)
 800252e:	4669      	mov	r1, sp
 8002530:	4628      	mov	r0, r5
    filter.FilterMaskIdLow    = 0xFFFF;
 8002532:	e9cd 3302 	strd	r3, r3, [sp, #8]
    filter.FilterMode           = CAN_FILTERMODE_IDLIST;
 8002536:	e9cd 4605 	strd	r4, r6, [sp, #20]
    filter.FilterScale          = CAN_FILTERSCALE_32BIT;
 800253a:	9607      	str	r6, [sp, #28]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800253c:	9404      	str	r4, [sp, #16]
    filter.FilterActivation     = ENABLE;
 800253e:	9608      	str	r6, [sp, #32]
    HAL_CAN_ConfigFilter(&hcan, &filter);
 8002540:	f000 fccd 	bl	8002ede <HAL_CAN_ConfigFilter>
    filter.FilterIdHigh   = (uint16_t)(SENSOR_DIST_ID << 5);
 8002544:	f246 0320 	movw	r3, #24608	@ 0x6020
    HAL_CAN_ConfigFilter(&hcan, &filter);
 8002548:	4669      	mov	r1, sp
 800254a:	4628      	mov	r0, r5
    filter.FilterIdLow    =  0x0000;
 800254c:	e9cd 3400 	strd	r3, r4, [sp]
    filter.FilterBank = 1;
 8002550:	9605      	str	r6, [sp, #20]
    HAL_CAN_ConfigFilter(&hcan, &filter);
 8002552:	f000 fcc4 	bl	8002ede <HAL_CAN_ConfigFilter>
    filter.FilterBank = 2;
 8002556:	2302      	movs	r3, #2
 8002558:	9305      	str	r3, [sp, #20]
    filter.FilterIdHigh   = (uint16_t)(SENSOR_TEMP_ID << 5);
 800255a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
    HAL_CAN_ConfigFilter(&hcan, &filter);
 800255e:	4669      	mov	r1, sp
 8002560:	4628      	mov	r0, r5
    filter.FilterIdLow    =  0x0000;
 8002562:	e9cd 3400 	strd	r3, r4, [sp]
    HAL_CAN_ConfigFilter(&hcan, &filter);
 8002566:	f000 fcba 	bl	8002ede <HAL_CAN_ConfigFilter>
    filter.FilterBank = 3;
 800256a:	2303      	movs	r3, #3
 800256c:	9305      	str	r3, [sp, #20]
    filter.FilterIdHigh   = (uint16_t)(SPEED_ID << 5);
 800256e:	f248 0320 	movw	r3, #32800	@ 0x8020
    HAL_CAN_ConfigFilter(&hcan, &filter);
 8002572:	4669      	mov	r1, sp
 8002574:	4628      	mov	r0, r5
    filter.FilterIdLow    =  0x0000;
 8002576:	e9cd 3400 	strd	r3, r4, [sp]
    HAL_CAN_ConfigFilter(&hcan, &filter);
 800257a:	f000 fcb0 	bl	8002ede <HAL_CAN_ConfigFilter>
}
 800257e:	b00a      	add	sp, #40	@ 0x28
 8002580:	bd70      	pop	{r4, r5, r6, pc}
 8002582:	bf00      	nop
 8002584:	20000090 	.word	0x20000090

08002588 <main>:
{
 8002588:	b500      	push	{lr}
 800258a:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 800258c:	f000 fc08 	bl	8002da0 <HAL_Init>
  SystemClock_Config();
 8002590:	f7ff ff82 	bl	8002498 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	2210      	movs	r2, #16
 8002596:	2100      	movs	r1, #0
 8002598:	eb0d 0002 	add.w	r0, sp, r2
 800259c:	f004 fa70 	bl	8006a80 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a0:	4b42      	ldr	r3, [pc, #264]	@ (80026ac <main+0x124>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80025a2:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80025a6:	4842      	ldr	r0, [pc, #264]	@ (80026b0 <main+0x128>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a8:	f042 0204 	orr.w	r2, r2, #4
 80025ac:	619a      	str	r2, [r3, #24]
 80025ae:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b2:	f002 0204 	and.w	r2, r2, #4
 80025b6:	9202      	str	r2, [sp, #8]
 80025b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025bc:	2420      	movs	r4, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025be:	f042 0208 	orr.w	r2, r2, #8
 80025c2:	619a      	str	r2, [r3, #24]
 80025c4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80025c6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	9303      	str	r3, [sp, #12]
 80025ce:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	2602      	movs	r6, #2
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80025d2:	f001 f9bb 	bl	800394c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d8:	4835      	ldr	r0, [pc, #212]	@ (80026b0 <main+0x128>)
 80025da:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025dc:	e9cd 4304 	strd	r4, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	e9cd 5606 	strd	r5, r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e4:	f001 f8da 	bl	800379c <HAL_GPIO_Init>
  hcan.Init.Prescaler = 4;
 80025e8:	2304      	movs	r3, #4
  hcan.Instance = CAN1;
 80025ea:	4c32      	ldr	r4, [pc, #200]	@ (80026b4 <main+0x12c>)
  hcan.Init.Prescaler = 4;
 80025ec:	f8df c0c8 	ldr.w	ip, [pc, #200]	@ 80026b8 <main+0x130>
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80025f0:	f44f 2e40 	mov.w	lr, #786432	@ 0xc0000
  hcan.Init.Prescaler = 4;
 80025f4:	e9c4 c300 	strd	ip, r3, [r4]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80025f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80025fc:	4620      	mov	r0, r4
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025fe:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002602:	e9c4 e304 	strd	lr, r3, [r4, #16]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002606:	61a5      	str	r5, [r4, #24]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002608:	83a5      	strh	r5, [r4, #28]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800260a:	f000 fbed 	bl	8002de8 <HAL_CAN_Init>
 800260e:	b108      	cbz	r0, 8002614 <main+0x8c>
 8002610:	b672      	cpsid	i
  while (1)
 8002612:	e7fe      	b.n	8002612 <main+0x8a>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002614:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance = RTC;
 8002618:	4d28      	ldr	r5, [pc, #160]	@ (80026bc <main+0x134>)
  RTC_TimeTypeDef sTime = {0};
 800261a:	f8ad 0004 	strh.w	r0, [sp, #4]
 800261e:	f88d 0006 	strb.w	r0, [sp, #6]
  RTC_DateTypeDef DateToUpdate = {0};
 8002622:	9004      	str	r0, [sp, #16]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002624:	4826      	ldr	r0, [pc, #152]	@ (80026c0 <main+0x138>)
 8002626:	e9c5 0300 	strd	r0, r3, [r5]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800262a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800262e:	4628      	mov	r0, r5
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002630:	60ab      	str	r3, [r5, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002632:	f001 ff6b 	bl	800450c <HAL_RTC_Init>
 8002636:	4602      	mov	r2, r0
 8002638:	b108      	cbz	r0, 800263e <main+0xb6>
 800263a:	b672      	cpsid	i
  while (1)
 800263c:	e7fe      	b.n	800263c <main+0xb4>
  sTime.Hours = 0;
 800263e:	f8ad 0004 	strh.w	r0, [sp, #4]
  sTime.Seconds = 0;
 8002642:	f88d 0006 	strb.w	r0, [sp, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002646:	a901      	add	r1, sp, #4
 8002648:	4628      	mov	r0, r5
 800264a:	f001 fdbb 	bl	80041c4 <HAL_RTC_SetTime>
 800264e:	4602      	mov	r2, r0
 8002650:	b108      	cbz	r0, 8002656 <main+0xce>
 8002652:	b672      	cpsid	i
  while (1)
 8002654:	e7fe      	b.n	8002654 <main+0xcc>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002656:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <main+0x13c>)
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8002658:	4628      	mov	r0, r5
 800265a:	a904      	add	r1, sp, #16
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800265c:	9304      	str	r3, [sp, #16]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800265e:	f001 feb7 	bl	80043d0 <HAL_RTC_SetDate>
 8002662:	4603      	mov	r3, r0
 8002664:	b108      	cbz	r0, 800266a <main+0xe2>
 8002666:	b672      	cpsid	i
  while (1)
 8002668:	e7fe      	b.n	8002668 <main+0xe0>
  huart2.Init.BaudRate = 115200;
 800266a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
  huart2.Instance = USART2;
 800266e:	4816      	ldr	r0, [pc, #88]	@ (80026c8 <main+0x140>)
  huart2.Init.BaudRate = 115200;
 8002670:	4916      	ldr	r1, [pc, #88]	@ (80026cc <main+0x144>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002672:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002676:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800267a:	220c      	movs	r2, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 800267c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002682:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002684:	f002 f922 	bl	80048cc <HAL_UART_Init>
 8002688:	b108      	cbz	r0, 800268e <main+0x106>
 800268a:	b672      	cpsid	i
  while (1)
 800268c:	e7fe      	b.n	800268c <main+0x104>
  CAN_Filter_Config();
 800268e:	f7ff ff43 	bl	8002518 <CAN_Filter_Config>
  HAL_CAN_Start(&hcan);
 8002692:	4620      	mov	r0, r4
 8002694:	f000 fc93 	bl	8002fbe <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002698:	4631      	mov	r1, r6
 800269a:	4620      	mov	r0, r4
 800269c:	f000 fd7f 	bl	800319e <HAL_CAN_ActivateNotification>
  FreeRTOS_Init();
 80026a0:	f002 fd40 	bl	8005124 <FreeRTOS_Init>
  Start_Scheduler();
 80026a4:	f002 fd4d 	bl	8005142 <Start_Scheduler>
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <main+0x120>
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40010c00 	.word	0x40010c00
 80026b4:	20000090 	.word	0x20000090
 80026b8:	40006400 	.word	0x40006400
 80026bc:	2000007c 	.word	0x2000007c
 80026c0:	40002800 	.word	0x40002800
 80026c4:	00010101 	.word	0x00010101
 80026c8:	20000034 	.word	0x20000034
 80026cc:	40004400 	.word	0x40004400

080026d0 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 80026d0:	6802      	ldr	r2, [r0, #0]
 80026d2:	4b03      	ldr	r3, [pc, #12]	@ (80026e0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d101      	bne.n	80026dc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80026d8:	f000 bb74 	b.w	8002dc4 <HAL_IncTick>
}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40012c00 	.word	0x40012c00

080026e4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <HAL_MspInit+0x3c>)
{
 80026e6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	619a      	str	r2, [r3, #24]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	f002 0201 	and.w	r2, r2, #1
 80026f6:	9200      	str	r2, [sp, #0]
 80026f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002700:	61da      	str	r2, [r3, #28]
 8002702:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002704:	4a07      	ldr	r2, [pc, #28]	@ (8002724 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800270e:	6853      	ldr	r3, [r2, #4]
 8002710:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002714:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002718:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271a:	b002      	add	sp, #8
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	40010000 	.word	0x40010000

08002728 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002728:	b510      	push	{r4, lr}
 800272a:	4604      	mov	r4, r0
 800272c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272e:	2210      	movs	r2, #16
 8002730:	2100      	movs	r1, #0
 8002732:	a802      	add	r0, sp, #8
 8002734:	f004 f9a4 	bl	8006a80 <memset>
  if(hcan->Instance==CAN1)
 8002738:	6822      	ldr	r2, [r4, #0]
 800273a:	4b1d      	ldr	r3, [pc, #116]	@ (80027b0 <HAL_CAN_MspInit+0x88>)
 800273c:	429a      	cmp	r2, r3
 800273e:	d135      	bne.n	80027ac <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002740:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
 8002744:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002746:	481b      	ldr	r0, [pc, #108]	@ (80027b4 <HAL_CAN_MspInit+0x8c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002748:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800274c:	61da      	str	r2, [r3, #28]
 800274e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002750:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002752:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8002756:	9200      	str	r2, [sp, #0]
 8002758:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275a:	699a      	ldr	r2, [r3, #24]
 800275c:	f042 0204 	orr.w	r2, r2, #4
 8002760:	619a      	str	r2, [r3, #24]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800276c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002770:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002772:	f001 f813 	bl	800379c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800277a:	2302      	movs	r3, #2
 800277c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002780:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	480c      	ldr	r0, [pc, #48]	@ (80027b4 <HAL_CAN_MspInit+0x8c>)
 8002784:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002786:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002788:	f001 f808 	bl	800379c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 7, 0);
 800278c:	2200      	movs	r2, #0
 800278e:	2107      	movs	r1, #7
 8002790:	2013      	movs	r0, #19
 8002792:	f000 fe39 	bl	8003408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8002796:	2013      	movs	r0, #19
 8002798:	f000 fe66 	bl	8003468 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 7, 0);
 800279c:	2014      	movs	r0, #20
 800279e:	2200      	movs	r2, #0
 80027a0:	2107      	movs	r1, #7
 80027a2:	f000 fe31 	bl	8003408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80027a6:	2014      	movs	r0, #20
 80027a8:	f000 fe5e 	bl	8003468 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80027ac:	b006      	add	sp, #24
 80027ae:	bd10      	pop	{r4, pc}
 80027b0:	40006400 	.word	0x40006400
 80027b4:	40010800 	.word	0x40010800

080027b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80027b8:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 80027ba:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <HAL_RTC_MspInit+0x30>)
 80027bc:	6802      	ldr	r2, [r0, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d10f      	bne.n	80027e2 <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80027c2:	f001 f8d1 	bl	8003968 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80027c6:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <HAL_RTC_MspInit+0x34>)
 80027c8:	69da      	ldr	r2, [r3, #28]
 80027ca:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80027ce:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027d0:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 80027dc:	4b04      	ldr	r3, [pc, #16]	@ (80027f0 <HAL_RTC_MspInit+0x38>)
 80027de:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80027e2:	b003      	add	sp, #12
 80027e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80027e8:	40002800 	.word	0x40002800
 80027ec:	40021000 	.word	0x40021000
 80027f0:	42420000 	.word	0x42420000

080027f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f4:	b530      	push	{r4, r5, lr}
 80027f6:	4604      	mov	r4, r0
 80027f8:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fa:	2210      	movs	r2, #16
 80027fc:	2100      	movs	r1, #0
 80027fe:	a802      	add	r0, sp, #8
 8002800:	f004 f93e 	bl	8006a80 <memset>
  if(huart->Instance==USART2)
 8002804:	6822      	ldr	r2, [r4, #0]
 8002806:	4b1a      	ldr	r3, [pc, #104]	@ (8002870 <HAL_UART_MspInit+0x7c>)
 8002808:	429a      	cmp	r2, r3
 800280a:	d12f      	bne.n	800286c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800280c:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 8002810:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002812:	2508      	movs	r5, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8002814:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002818:	61da      	str	r2, [r3, #28]
 800281a:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800281c:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 800281e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002822:	9200      	str	r2, [sp, #0]
 8002824:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002826:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	4812      	ldr	r0, [pc, #72]	@ (8002874 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	f042 0204 	orr.w	r2, r2, #4
 800282e:	619a      	str	r2, [r3, #24]
 8002830:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002842:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002846:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f000 ffa8 	bl	800379c <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284c:	4809      	ldr	r0, [pc, #36]	@ (8002874 <HAL_UART_MspInit+0x80>)
 800284e:	eb0d 0105 	add.w	r1, sp, r5
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002852:	e9cd 5402 	strd	r5, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002858:	f000 ffa0 	bl	800379c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 800285c:	2026      	movs	r0, #38	@ 0x26
 800285e:	4622      	mov	r2, r4
 8002860:	4629      	mov	r1, r5
 8002862:	f000 fdd1 	bl	8003408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002866:	2026      	movs	r0, #38	@ 0x26
 8002868:	f000 fdfe 	bl	8003468 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800286c:	b007      	add	sp, #28
 800286e:	bd30      	pop	{r4, r5, pc}
 8002870:	40004400 	.word	0x40004400
 8002874:	40010800 	.word	0x40010800

08002878 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002878:	4b1e      	ldr	r3, [pc, #120]	@ (80028f4 <HAL_InitTick+0x7c>)
{
 800287a:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 800287c:	699a      	ldr	r2, [r3, #24]
{
 800287e:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002880:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002884:	619a      	str	r2, [r3, #24]
 8002886:	699b      	ldr	r3, [r3, #24]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002888:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 800288a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800288e:	9302      	str	r3, [sp, #8]
{
 8002890:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002892:	a803      	add	r0, sp, #12

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002894:	4d18      	ldr	r5, [pc, #96]	@ (80028f8 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002896:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002898:	f001 faea 	bl	8003e70 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800289c:	f001 fad8 	bl	8003e50 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80028a0:	4b16      	ldr	r3, [pc, #88]	@ (80028fc <HAL_InitTick+0x84>)
 80028a2:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80028a4:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80028a8:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028aa:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <HAL_InitTick+0x88>)
 80028ac:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80028b0:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028b2:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80028b4:	6068      	str	r0, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 80028b6:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 80028b8:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ba:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028bc:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 80028be:	f001 ff6f 	bl	80047a0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80028c2:	4604      	mov	r4, r0
 80028c4:	b980      	cbnz	r0, 80028e8 <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80028c6:	4628      	mov	r0, r5
 80028c8:	f001 fe68 	bl	800459c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80028cc:	4604      	mov	r4, r0
 80028ce:	b958      	cbnz	r0, 80028e8 <HAL_InitTick+0x70>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80028d0:	2019      	movs	r0, #25
 80028d2:	f000 fdc9 	bl	8003468 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d6:	2e0f      	cmp	r6, #15
 80028d8:	d809      	bhi.n	80028ee <HAL_InitTick+0x76>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80028da:	4622      	mov	r2, r4
 80028dc:	4631      	mov	r1, r6
 80028de:	2019      	movs	r0, #25
 80028e0:	f000 fd92 	bl	8003408 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028e4:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <HAL_InitTick+0x8c>)
 80028e6:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80028e8:	4620      	mov	r0, r4
 80028ea:	b008      	add	sp, #32
 80028ec:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 80028ee:	2401      	movs	r4, #1
 80028f0:	e7fa      	b.n	80028e8 <HAL_InitTick+0x70>
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000
 80028f8:	200000b8 	.word	0x200000b8
 80028fc:	40012c00 	.word	0x40012c00
 8002900:	000f4240 	.word	0x000f4240
 8002904:	20000008 	.word	0x20000008

08002908 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002908:	e7fe      	b.n	8002908 <NMI_Handler>

0800290a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290a:	e7fe      	b.n	800290a <HardFault_Handler>

0800290c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800290c:	e7fe      	b.n	800290c <MemManage_Handler>

0800290e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800290e:	e7fe      	b.n	800290e <BusFault_Handler>

08002910 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <UsageFault_Handler>

08002912 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002912:	4770      	bx	lr

08002914 <USB_HP_CAN1_TX_IRQHandler>:
void USB_HP_CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002914:	4801      	ldr	r0, [pc, #4]	@ (800291c <USB_HP_CAN1_TX_IRQHandler+0x8>)
 8002916:	f000 bc5f 	b.w	80031d8 <HAL_CAN_IRQHandler>
 800291a:	bf00      	nop
 800291c:	20000090 	.word	0x20000090

08002920 <USB_LP_CAN1_RX0_IRQHandler>:
}

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
 8002920:	f7ff bff8 	b.w	8002914 <USB_HP_CAN1_TX_IRQHandler>

08002924 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002924:	4801      	ldr	r0, [pc, #4]	@ (800292c <TIM1_UP_IRQHandler+0x8>)
 8002926:	f001 be67 	b.w	80045f8 <HAL_TIM_IRQHandler>
 800292a:	bf00      	nop
 800292c:	200000b8 	.word	0x200000b8

08002930 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002930:	4801      	ldr	r0, [pc, #4]	@ (8002938 <USART2_IRQHandler+0x8>)
 8002932:	f002 b879 	b.w	8004a28 <HAL_UART_IRQHandler>
 8002936:	bf00      	nop
 8002938:	20000034 	.word	0x20000034

0800293c <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 800293c:	4b01      	ldr	r3, [pc, #4]	@ (8002944 <SystemInit+0x8>)
 800293e:	4a02      	ldr	r2, [pc, #8]	@ (8002948 <SystemInit+0xc>)
 8002940:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00
 8002948:	08002000 	.word	0x08002000

0800294c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800294c:	f7ff fff6 	bl	800293c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002950:	480b      	ldr	r0, [pc, #44]	@ (8002980 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002952:	490c      	ldr	r1, [pc, #48]	@ (8002984 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002954:	4a0c      	ldr	r2, [pc, #48]	@ (8002988 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002958:	e002      	b.n	8002960 <LoopCopyDataInit>

0800295a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800295c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800295e:	3304      	adds	r3, #4

08002960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002964:	d3f9      	bcc.n	800295a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002966:	4a09      	ldr	r2, [pc, #36]	@ (800298c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002968:	4c09      	ldr	r4, [pc, #36]	@ (8002990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800296a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800296c:	e001      	b.n	8002972 <LoopFillZerobss>

0800296e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800296e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002970:	3204      	adds	r2, #4

08002972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002974:	d3fb      	bcc.n	800296e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002976:	f004 f88b 	bl	8006a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800297a:	f7ff fe05 	bl	8002588 <main>
  bx lr
 800297e:	4770      	bx	lr
  ldr r0, =_sdata
 8002980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002984:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002988:	08006b9c 	.word	0x08006b9c
  ldr r2, =_sbss
 800298c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002990:	20002af4 	.word	0x20002af4

08002994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002994:	e7fe      	b.n	8002994 <ADC1_2_IRQHandler>
	...

08002998 <ReadDTCListFromFlash>:
 * Read stored DTC entries into RAM buffer. Returns count.
 */
uint8_t ReadDTCListFromFlash(DTC_Entry_t *DTC_List, uint8_t MaxCount)
{
    uint32_t Address = FLASH_DTC_PAGE_ADDR;
    uint8_t Count = (uint8_t)(*(uint32_t*)Address & 0xFFU);
 8002998:	4a0e      	ldr	r2, [pc, #56]	@ (80029d4 <ReadDTCListFromFlash+0x3c>)
{
 800299a:	4603      	mov	r3, r0
 800299c:	f892 0400 	ldrb.w	r0, [r2, #1024]	@ 0x400
 80029a0:	b510      	push	{r4, lr}
 80029a2:	4288      	cmp	r0, r1
 80029a4:	bf28      	it	cs
 80029a6:	4608      	movcs	r0, r1
    Address += 4;
    if (Count > MaxCount) Count = MaxCount;

    uint8_t Counter;
    for (Counter = 0; Counter < Count; Counter++)
 80029a8:	2100      	movs	r1, #0
    Address += 4;
 80029aa:	f202 4204 	addw	r2, r2, #1028	@ 0x404
    for (Counter = 0; Counter < Count; Counter++)
 80029ae:	b2cc      	uxtb	r4, r1
 80029b0:	42a0      	cmp	r0, r4
 80029b2:	f103 030c 	add.w	r3, r3, #12
 80029b6:	d800      	bhi.n	80029ba <ReadDTCListFromFlash+0x22>
        DTC_List[Counter].datastamp = *(uint32_t*)Address;
        Address += 4;
    }

    return Count;
}
 80029b8:	bd10      	pop	{r4, pc}
        DTC_List[Counter].code = *(uint32_t*)Address;
 80029ba:	6814      	ldr	r4, [r2, #0]
 80029bc:	3101      	adds	r1, #1
 80029be:	f843 4c0c 	str.w	r4, [r3, #-12]
        DTC_List[Counter].timestamp = *(uint32_t*)Address;
 80029c2:	6854      	ldr	r4, [r2, #4]
        Address += 4;
 80029c4:	320c      	adds	r2, #12
        DTC_List[Counter].timestamp = *(uint32_t*)Address;
 80029c6:	f843 4c08 	str.w	r4, [r3, #-8]
        DTC_List[Counter].datastamp = *(uint32_t*)Address;
 80029ca:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80029ce:	f843 4c04 	str.w	r4, [r3, #-4]
    for (Counter = 0; Counter < Count; Counter++)
 80029d2:	e7ec      	b.n	80029ae <ReadDTCListFromFlash+0x16>
 80029d4:	0800f000 	.word	0x0800f000

080029d8 <ClearDTCListFlash>:

/**
 * Clear all stored DTC entries: erase the flash page and write zero count
 */
void ClearDTCListFlash(void)
{
 80029d8:	b510      	push	{r4, lr}
 80029da:	b086      	sub	sp, #24
    FLASH_EraseInitTypeDef EraseInit = {0};
 80029dc:	2210      	movs	r2, #16
 80029de:	2100      	movs	r1, #0
 80029e0:	a802      	add	r0, sp, #8
 80029e2:	f004 f84d 	bl	8006a80 <memset>
    uint32_t PageError;

    HAL_FLASH_Unlock();
 80029e6:	f000 fddb 	bl	80035a0 <HAL_FLASH_Unlock>

    /* Erase the DTC page */
    EraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80029ea:	2300      	movs	r3, #0
 80029ec:	9302      	str	r3, [sp, #8]
    EraseInit.PageAddress = FLASH_DTC_PAGE_ADDR;
    EraseInit.NbPages     = 1;
 80029ee:	2301      	movs	r3, #1
 80029f0:	4c08      	ldr	r4, [pc, #32]	@ (8002a14 <ClearDTCListFlash+0x3c>)
    HAL_FLASHEx_Erase(&EraseInit, &PageError);
 80029f2:	a901      	add	r1, sp, #4
 80029f4:	a802      	add	r0, sp, #8
    EraseInit.NbPages     = 1;
 80029f6:	e9cd 4304 	strd	r4, r3, [sp, #16]
    HAL_FLASHEx_Erase(&EraseInit, &PageError);
 80029fa:	f000 fe7b 	bl	80036f4 <HAL_FLASHEx_Erase>

    /* Write zero count */
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_DTC_PAGE_ADDR, 0U);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2300      	movs	r3, #0
 8002a02:	4621      	mov	r1, r4
 8002a04:	2002      	movs	r0, #2
 8002a06:	f000 fe11 	bl	800362c <HAL_FLASH_Program>

    HAL_FLASH_Lock();
 8002a0a:	f000 fddb 	bl	80035c4 <HAL_FLASH_Lock>
}
 8002a0e:	b006      	add	sp, #24
 8002a10:	bd10      	pop	{r4, pc}
 8002a12:	bf00      	nop
 8002a14:	0800f400 	.word	0x0800f400

08002a18 <WriteDTCListToFlash>:

/**
 * Write the current DTC list: reads existing entries, appends new, rewrites flash.
 */
void WriteDTCListToFlash(uint32_t NewDTC)
{
 8002a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a1a:	b0a5      	sub	sp, #148	@ 0x94
 8002a1c:	4606      	mov	r6, r0
    DTC_Entry_t Entries[MAX_DTC_CODES];
    uint8_t Count = ReadDTCListFromFlash(Entries, MAX_DTC_CODES);
 8002a1e:	210a      	movs	r1, #10
 8002a20:	a806      	add	r0, sp, #24
 8002a22:	f7ff ffb9 	bl	8002998 <ReadDTCListFromFlash>

    if (Count < MAX_DTC_CODES)
 8002a26:	2809      	cmp	r0, #9
    uint8_t Count = ReadDTCListFromFlash(Entries, MAX_DTC_CODES);
 8002a28:	4604      	mov	r4, r0
    if (Count < MAX_DTC_CODES)
 8002a2a:	d845      	bhi.n	8002ab8 <WriteDTCListToFlash+0xa0>
    {
        /* Append new entry */
        Entries[Count].code      = NewDTC;
 8002a2c:	250c      	movs	r5, #12
 8002a2e:	ab24      	add	r3, sp, #144	@ 0x90
 8002a30:	fb05 3500 	mla	r5, r5, r0, r3
 8002a34:	f845 6c78 	str.w	r6, [r5, #-120]
        Entries[Count].timestamp = RTC_GetTime();
 8002a38:	f000 f844 	bl	8002ac4 <RTC_GetTime>
 8002a3c:	f845 0c74 	str.w	r0, [r5, #-116]
        Entries[Count].datastamp = RTC_GetDate();
 8002a40:	f000 f856 	bl	8002af0 <RTC_GetDate>
        Count++;

        /* Erase and rewrite */

        FLASH_EraseInitTypeDef EraseInit = {0};
 8002a44:	2210      	movs	r2, #16
 8002a46:	2100      	movs	r1, #0
        Entries[Count].datastamp = RTC_GetDate();
 8002a48:	f845 0c70 	str.w	r0, [r5, #-112]
        FLASH_EraseInitTypeDef EraseInit = {0};
 8002a4c:	a802      	add	r0, sp, #8
 8002a4e:	f004 f817 	bl	8006a80 <memset>
        uint32_t PageError;

        HAL_FLASH_Unlock();
        EraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002a52:	2600      	movs	r6, #0
        HAL_FLASH_Unlock();
 8002a54:	f000 fda4 	bl	80035a0 <HAL_FLASH_Unlock>
        EraseInit.PageAddress = FLASH_DTC_PAGE_ADDR;
        EraseInit.NbPages     = 1;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	4d18      	ldr	r5, [pc, #96]	@ (8002abc <WriteDTCListToFlash+0xa4>)
        Count++;
 8002a5c:	3401      	adds	r4, #1
        HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8002a5e:	a901      	add	r1, sp, #4
        Count++;
 8002a60:	b2e4      	uxtb	r4, r4
        HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8002a62:	a802      	add	r0, sp, #8
        EraseInit.NbPages     = 1;
 8002a64:	e9cd 5304 	strd	r5, r3, [sp, #16]
        EraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002a68:	9602      	str	r6, [sp, #8]
        HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8002a6a:	f000 fe43 	bl	80036f4 <HAL_FLASHEx_Erase>

        uint32_t Address = FLASH_DTC_PAGE_ADDR;
        /* Write count */
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Count);
 8002a6e:	4629      	mov	r1, r5
 8002a70:	4622      	mov	r2, r4
 8002a72:	4633      	mov	r3, r6
 8002a74:	2002      	movs	r0, #2
 8002a76:	f000 fdd9 	bl	800362c <HAL_FLASH_Program>
        Address += 4;
 8002a7a:	4f11      	ldr	r7, [pc, #68]	@ (8002ac0 <WriteDTCListToFlash+0xa8>)
 8002a7c:	ad06      	add	r5, sp, #24

        /* Write each entry */
        uint8_t Counter;
        for (Counter = 0; Counter < Count; Counter++)
        {
            HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Entries[Counter].code);
 8002a7e:	4639      	mov	r1, r7
 8002a80:	682a      	ldr	r2, [r5, #0]
 8002a82:	2300      	movs	r3, #0
 8002a84:	2002      	movs	r0, #2
 8002a86:	f000 fdd1 	bl	800362c <HAL_FLASH_Program>
            Address += 4;
            HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Entries[Counter].timestamp);
 8002a8a:	686a      	ldr	r2, [r5, #4]
 8002a8c:	1d39      	adds	r1, r7, #4
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2002      	movs	r0, #2
 8002a92:	f000 fdcb 	bl	800362c <HAL_FLASH_Program>
        for (Counter = 0; Counter < Count; Counter++)
 8002a96:	3601      	adds	r6, #1
            Address += 4;
            HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Entries[Counter].datastamp);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	68aa      	ldr	r2, [r5, #8]
 8002a9c:	f107 0108 	add.w	r1, r7, #8
 8002aa0:	2002      	movs	r0, #2
 8002aa2:	f000 fdc3 	bl	800362c <HAL_FLASH_Program>
        for (Counter = 0; Counter < Count; Counter++)
 8002aa6:	b2f3      	uxtb	r3, r6
 8002aa8:	429c      	cmp	r4, r3
            Address += 4;
 8002aaa:	f107 070c 	add.w	r7, r7, #12
        for (Counter = 0; Counter < Count; Counter++)
 8002aae:	f105 050c 	add.w	r5, r5, #12
 8002ab2:	d8e4      	bhi.n	8002a7e <WriteDTCListToFlash+0x66>
        }

        HAL_FLASH_Lock();
 8002ab4:	f000 fd86 	bl	80035c4 <HAL_FLASH_Lock>
    }
}
 8002ab8:	b025      	add	sp, #148	@ 0x94
 8002aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002abc:	0800f400 	.word	0x0800f400
 8002ac0:	0800f404 	.word	0x0800f404

08002ac4 <RTC_GetTime>:
 *         [24]    AM/PM flag (0=AM,1=PM)
 *         [31:25] Reserved
 * @return packed 32-bit time word
 */
uint32_t RTC_GetTime(void)
{
 8002ac4:	b507      	push	{r0, r1, r2, lr}
	RTC_TimeTypeDef Local_RTCTime;
	uint32_t Time = 0;

    HAL_RTC_GetTime(&hrtc, &Local_RTCTime, RTC_FORMAT_BIN);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	a901      	add	r1, sp, #4
 8002aca:	4808      	ldr	r0, [pc, #32]	@ (8002aec <RTC_GetTime+0x28>)
 8002acc:	f001 fbcc 	bl	8004268 <HAL_RTC_GetTime>

    Time |= (uint32_t)(Local_RTCTime.Seconds & 0xFF);
    Time |= (uint32_t)(Local_RTCTime.Minutes & 0xFF) << 8;
    Time |= (uint32_t)(Local_RTCTime.Hours   & 0xFF) << 16;
 8002ad0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    Time |= (uint32_t)(Local_RTCTime.Minutes & 0xFF) << 8;
 8002ad4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    Time |= (uint32_t)(Local_RTCTime.Seconds & 0xFF);
 8002ad8:	f89d 0006 	ldrb.w	r0, [sp, #6]
    Time |= (uint32_t)(Local_RTCTime.Hours   & 0xFF) << 16;
 8002adc:	041b      	lsls	r3, r3, #16
 8002ade:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    return Time;
}
 8002ae2:	4318      	orrs	r0, r3
 8002ae4:	b003      	add	sp, #12
 8002ae6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002aea:	bf00      	nop
 8002aec:	2000007c 	.word	0x2000007c

08002af0 <RTC_GetDate>:
 *         [15:8]  Month (1-12)
 *         [31:16] Year  (full year, e.g., 2025)
 * @return packed 32-bit date word
 */
uint32_t RTC_GetDate(void)
{
 8002af0:	b507      	push	{r0, r1, r2, lr}
    RTC_DateTypeDef Local_RTCDate;
    uint32_t Date = 0;
    uint32_t year = 0;

    HAL_RTC_GetDate(&hrtc, &Local_RTCDate, RTC_FORMAT_BIN);
 8002af2:	2200      	movs	r2, #0
 8002af4:	a901      	add	r1, sp, #4
 8002af6:	4808      	ldr	r0, [pc, #32]	@ (8002b18 <RTC_GetDate+0x28>)
 8002af8:	f001 fcc0 	bl	800447c <HAL_RTC_GetDate>

    year = (uint32_t)(Local_RTCDate.Year + 2000);
    Date |= (uint32_t)(Local_RTCDate.Date & 0xFF);
 8002afc:	f8bd 3005 	ldrh.w	r3, [sp, #5]
    year = (uint32_t)(Local_RTCDate.Year + 2000);
 8002b00:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002b04:	ba5b      	rev16	r3, r3
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
    Date |= (uint32_t)(Local_RTCDate.Month & 0xFF) << 8;
    Date |= year << 16;
    return Date;
}
 8002b0c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002b10:	b003      	add	sp, #12
 8002b12:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b16:	bf00      	nop
 8002b18:	2000007c 	.word	0x2000007c

08002b1c <SendResponse>:

/**
 * SendResponse
 */
void SendResponse(uint8_t *Data, uint8_t DLC)
{
 8002b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b1e:	460c      	mov	r4, r1
    CanTxMessage_t Msg;
    uint8_t Count;
    Msg.StdId = UDS_RESPONSE_ID;
 8002b20:	f44f 63fd 	mov.w	r3, #2024	@ 0x7e8
    Msg.DLC   = DLC;

    for (Count = 0; Count < DLC; Count++) Msg.Data[Count] = Data[Count];
 8002b24:	460a      	mov	r2, r1
    Msg.DLC   = DLC;
 8002b26:	f88d 1004 	strb.w	r1, [sp, #4]
    for (Count = 0; Count < DLC; Count++) Msg.Data[Count] = Data[Count];
 8002b2a:	4601      	mov	r1, r0
 8002b2c:	f10d 0005 	add.w	r0, sp, #5
    Msg.StdId = UDS_RESPONSE_ID;
 8002b30:	9300      	str	r3, [sp, #0]
    for (Count = 0; Count < DLC; Count++) Msg.Data[Count] = Data[Count];
 8002b32:	f003 ffd1 	bl	8006ad8 <memcpy>
    for (Count = DLC; Count < 8; Count++) Msg.Data[Count] = 0;
 8002b36:	2c08      	cmp	r4, #8
 8002b38:	f1c4 0208 	rsb	r2, r4, #8
 8002b3c:	f104 0005 	add.w	r0, r4, #5
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	bf88      	it	hi
 8002b48:	2200      	movhi	r2, #0
 8002b4a:	4468      	add	r0, sp
 8002b4c:	f003 ff98 	bl	8006a80 <memset>
    xQueueSend(xCanTxQueue, &Msg, portMAX_DELAY);
 8002b50:	4804      	ldr	r0, [pc, #16]	@ (8002b64 <SendResponse+0x48>)
 8002b52:	2300      	movs	r3, #0
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	4669      	mov	r1, sp
 8002b5a:	6800      	ldr	r0, [r0, #0]
 8002b5c:	f002 fcdc 	bl	8005518 <xQueueGenericSend>
}
 8002b60:	b004      	add	sp, #16
 8002b62:	bd10      	pop	{r4, pc}
 8002b64:	2000012c 	.word	0x2000012c

08002b68 <SendNegative>:
/**
 * SendNegative
 */
void SendNegative(uint8_t SID, uint8_t NRC)
{
    uint8_t Resp[3] = {0x7F, SID, NRC};
 8002b68:	237f      	movs	r3, #127	@ 0x7f
{
 8002b6a:	b507      	push	{r0, r1, r2, lr}
    uint8_t Resp[3] = {0x7F, SID, NRC};
 8002b6c:	f88d 0005 	strb.w	r0, [sp, #5]
 8002b70:	f88d 1006 	strb.w	r1, [sp, #6]
    SendResponse(Resp, 3);
 8002b74:	a801      	add	r0, sp, #4
 8002b76:	2103      	movs	r1, #3
    uint8_t Resp[3] = {0x7F, SID, NRC};
 8002b78:	f88d 3004 	strb.w	r3, [sp, #4]
    SendResponse(Resp, 3);
 8002b7c:	f7ff ffce 	bl	8002b1c <SendResponse>
}
 8002b80:	b003      	add	sp, #12
 8002b82:	f85d fb04 	ldr.w	pc, [sp], #4

08002b86 <SendPositive>:

/**
 * SendPositive
 */
void SendPositive(uint8_t SID, uint8_t Sub)
{
 8002b86:	b507      	push	{r0, r1, r2, lr}
    uint8_t Resp[2] = {(uint8_t)(SID + 0x40), Sub};
 8002b88:	3040      	adds	r0, #64	@ 0x40
 8002b8a:	f88d 0004 	strb.w	r0, [sp, #4]
 8002b8e:	f88d 1005 	strb.w	r1, [sp, #5]
    SendResponse(Resp, 2);
 8002b92:	a801      	add	r0, sp, #4
 8002b94:	2102      	movs	r1, #2
 8002b96:	f7ff ffc1 	bl	8002b1c <SendResponse>
}
 8002b9a:	b003      	add	sp, #12
 8002b9c:	f85d fb04 	ldr.w	pc, [sp], #4

08002ba0 <ProcessSessionControl>:
/**
 * ProcessSessionControl
 */
void ProcessSessionControl(uint8_t Sub)
{
    if (Sub <= SESSION_SENSOR)
 8002ba0:	2801      	cmp	r0, #1
{
 8002ba2:	4601      	mov	r1, r0
    if (Sub <= SESSION_SENSOR)
 8002ba4:	d804      	bhi.n	8002bb0 <ProcessSessionControl+0x10>
    {
        /* Allowed sessions in default or sensor mode */
        CurrentSession = Sub;
 8002ba6:	4b09      	ldr	r3, [pc, #36]	@ (8002bcc <ProcessSessionControl+0x2c>)
        SendPositive(SID_DIAG_SESSION_CTRL, Sub);
 8002ba8:	2010      	movs	r0, #16
        CurrentSession = Sub;
 8002baa:	7019      	strb	r1, [r3, #0]
        SendPositive(SID_DIAG_SESSION_CTRL, Sub);
 8002bac:	f7ff bfeb 	b.w	8002b86 <SendPositive>
    }
    else if (Sub == SESSION_CONTROL || Sub == SESSION_PROGRAMMING)
 8002bb0:	1e83      	subs	r3, r0, #2
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d807      	bhi.n	8002bc6 <ProcessSessionControl+0x26>
    {
    	if(SecurityUnlocked == 1)
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <ProcessSessionControl+0x30>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d0f3      	beq.n	8002ba6 <ProcessSessionControl+0x6>
            SendPositive(SID_DIAG_SESSION_CTRL, Sub);
    	}
    	else
    	{
            /* Control/programming require security */
            SendNegative(SID_DIAG_SESSION_CTRL, NRC_SECURITY_REQUIRED);
 8002bbe:	2131      	movs	r1, #49	@ 0x31
    	}
    }
    else
    {
        /* Unsupported session ID */
        SendNegative(SID_DIAG_SESSION_CTRL, NRC_SERVICE_NOT_SUPP);
 8002bc0:	2010      	movs	r0, #16
 8002bc2:	f7ff bfd1 	b.w	8002b68 <SendNegative>
 8002bc6:	2111      	movs	r1, #17
 8002bc8:	e7fa      	b.n	8002bc0 <ProcessSessionControl+0x20>
 8002bca:	bf00      	nop
 8002bcc:	20000101 	.word	0x20000101
 8002bd0:	20000100 	.word	0x20000100

08002bd4 <ProcessSecurityAccess>:

/**
 * ProcessSecurityAccess
 */
void ProcessSecurityAccess(uint8_t Sub, uint8_t *Data, uint8_t DLC)
{
 8002bd4:	460b      	mov	r3, r1
    if (Sub == 0x00 && DLC >= 4)
 8002bd6:	4601      	mov	r1, r0
 8002bd8:	b980      	cbnz	r0, 8002bfc <ProcessSecurityAccess+0x28>
 8002bda:	2a03      	cmp	r2, #3
 8002bdc:	d90e      	bls.n	8002bfc <ProcessSecurityAccess+0x28>
    {
        /* Extract 16-bit password from bytes 2 and 3 */
        uint16_t Password = (Data[2] << 8) | Data[3];
        if (Password == DIAG_PASSWORD)
 8002bde:	885a      	ldrh	r2, [r3, #2]
 8002be0:	f243 4312 	movw	r3, #13330	@ 0x3412
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d105      	bne.n	8002bf4 <ProcessSecurityAccess+0x20>
        {
            SecurityUnlocked = 1;
 8002be8:	2201      	movs	r2, #1
 8002bea:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <ProcessSecurityAccess+0x2c>)
            SendPositive(SID_SECURITY_ACCESS, Sub);
 8002bec:	2027      	movs	r0, #39	@ 0x27
            SecurityUnlocked = 1;
 8002bee:	701a      	strb	r2, [r3, #0]
            SendPositive(SID_SECURITY_ACCESS, Sub);
 8002bf0:	f7ff bfc9 	b.w	8002b86 <SendPositive>
        }
        else
        {
            SendNegative(SID_SECURITY_ACCESS, NRC_SECURITY_DENIED);
 8002bf4:	2135      	movs	r1, #53	@ 0x35
        }
    }
    else
    {
        /* Service not supported for other sub-functions */
        SendNegative(SID_SECURITY_ACCESS, NRC_SERVICE_NOT_SUPP);
 8002bf6:	2027      	movs	r0, #39	@ 0x27
 8002bf8:	f7ff bfb6 	b.w	8002b68 <SendNegative>
 8002bfc:	2111      	movs	r1, #17
 8002bfe:	e7fa      	b.n	8002bf6 <ProcessSecurityAccess+0x22>
 8002c00:	20000100 	.word	0x20000100

08002c04 <ProcessReadDataById>:

/**
 * ProcessReadDataByIdr
 */
void ProcessReadDataById(uint8_t Sub, uint8_t *Data)
{
 8002c04:	b507      	push	{r0, r1, r2, lr}
    if (CurrentSession == SESSION_DEFAULT || CurrentSession == SESSION_SENSOR)
 8002c06:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <ProcessReadDataById+0x54>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d81d      	bhi.n	8002c4a <ProcessReadDataById+0x46>
        /* Extract 16-bit DID from bytes 2 and 3 */
        uint16_t ID = (Data[2] << 8) | Data[3];
        uint8_t Response[6];

        /* Build positive response header */
        Response[0] = SID_READ_DATA_BY_ID + 0x40;
 8002c0e:	2262      	movs	r2, #98	@ 0x62
 8002c10:	f88d 2000 	strb.w	r2, [sp]
        Response[1] = Sub;

        if (ID == 0xF190)
 8002c14:	f249 02f1 	movw	r2, #37105	@ 0x90f1
 8002c18:	884b      	ldrh	r3, [r1, #2]
        Response[1] = Sub;
 8002c1a:	f88d 0001 	strb.w	r0, [sp, #1]
        if (ID == 0xF190)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10d      	bne.n	8002c3e <ProcessReadDataById+0x3a>
        {
            /* Report latest temperature as two bytes */
            uint16_t Temp = (uint16_t)LatestTemp;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <ProcessReadDataById+0x58>)
            SendResponse(Response, 4);
        }
        else if (ID == 0xF191)
        {
            /* Report latest distance as two bytes */
            uint16_t Dist = (uint16_t)LatestDist;
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	f7ff fc17 	bl	8002458 <__aeabi_f2uiz>
            Response[2] = (uint8_t)(Dist >> 8);
 8002c2a:	ba40      	rev16	r0, r0
 8002c2c:	f8ad 0002 	strh.w	r0, [sp, #2]
            Response[3] = (uint8_t)(Dist & 0xFF);
            SendResponse(Response, 4);
 8002c30:	2104      	movs	r1, #4
 8002c32:	4668      	mov	r0, sp
 8002c34:	f7ff ff72 	bl	8002b1c <SendResponse>
    else
    {
        /* Not allowed in current session */
        SendNegative(SID_READ_DATA_BY_ID, NRC_SERVICE_NOT_SUPP);
    }
}
 8002c38:	b003      	add	sp, #12
 8002c3a:	f85d fb04 	ldr.w	pc, [sp], #4
        else if (ID == 0xF191)
 8002c3e:	f249 12f1 	movw	r2, #37361	@ 0x91f1
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <ProcessReadDataById+0x46>
            uint16_t Dist = (uint16_t)LatestDist;
 8002c46:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <ProcessReadDataById+0x5c>)
 8002c48:	e7ec      	b.n	8002c24 <ProcessReadDataById+0x20>
        SendNegative(SID_READ_DATA_BY_ID, NRC_SERVICE_NOT_SUPP);
 8002c4a:	2111      	movs	r1, #17
 8002c4c:	2022      	movs	r0, #34	@ 0x22
}
 8002c4e:	b003      	add	sp, #12
 8002c50:	f85d eb04 	ldr.w	lr, [sp], #4
        SendNegative(SID_READ_DATA_BY_ID, NRC_SERVICE_NOT_SUPP);
 8002c54:	f7ff bf88 	b.w	8002b68 <SendNegative>
 8002c58:	20000101 	.word	0x20000101
 8002c5c:	20000134 	.word	0x20000134
 8002c60:	20000130 	.word	0x20000130

08002c64 <ProcessReadDTC>:

/**
 * ProcessReadDTC
 */
void ProcessReadDTC(uint8_t Sub)
{
 8002c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (CurrentSession == SESSION_CONTROL && SecurityUnlocked)
 8002c68:	4b2e      	ldr	r3, [pc, #184]	@ (8002d24 <ProcessReadDTC+0xc0>)
{
 8002c6a:	4604      	mov	r4, r0
    if (CurrentSession == SESSION_CONTROL && SecurityUnlocked)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
{
 8002c6e:	b0a5      	sub	sp, #148	@ 0x94
    if (CurrentSession == SESSION_CONTROL && SecurityUnlocked)
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d150      	bne.n	8002d16 <ProcessReadDTC+0xb2>
 8002c74:	4b2c      	ldr	r3, [pc, #176]	@ (8002d28 <ProcessReadDTC+0xc4>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d04c      	beq.n	8002d16 <ProcessReadDTC+0xb2>
    {
        DTC_Entry_t Entries[MAX_DTC_CODES];
        uint8_t Count = ReadDTCListFromFlash(Entries, MAX_DTC_CODES);
 8002c7c:	210a      	movs	r1, #10
 8002c7e:	a806      	add	r0, sp, #24
 8002c80:	f7ff fe8a 	bl	8002998 <ReadDTCListFromFlash>

        /* First send number-of-DTCs response */
        uint8_t Response[3] = {SID_READ_DTC + 0x40, Sub, Count};
 8002c84:	2359      	movs	r3, #89	@ 0x59
 8002c86:	f88d 0002 	strb.w	r0, [sp, #2]
        uint8_t Count = ReadDTCListFromFlash(Entries, MAX_DTC_CODES);
 8002c8a:	4606      	mov	r6, r0
        SendResponse(Response, 3);
 8002c8c:	2103      	movs	r1, #3
 8002c8e:	4668      	mov	r0, sp
        uint8_t Response[3] = {SID_READ_DTC + 0x40, Sub, Count};
 8002c90:	f88d 4001 	strb.w	r4, [sp, #1]
 8002c94:	f88d 3000 	strb.w	r3, [sp]

        /* Now send each DTC entry in two sequenced frames */
        for (uint8_t Local_Count = 0; Local_Count < Count; Local_Count++)
 8002c98:	2700      	movs	r7, #0
        SendResponse(Response, 3);
 8002c9a:	f7ff ff3f 	bl	8002b1c <SendResponse>
            /* ---- split into two 8-byte frames ---- */
            uint8_t Index = 0;
            /* Frame 1: sequence = 1, then first 7 bytes of DTCMsg */
            {
                uint8_t Frame1[8];
                Frame1[0] = 1;  /* sequence number */
 8002c9e:	f04f 0901 	mov.w	r9, #1
 8002ca2:	ac06      	add	r4, sp, #24
        for (uint8_t Local_Count = 0; Local_Count < Count; Local_Count++)
 8002ca4:	b2fb      	uxtb	r3, r7
 8002ca6:	429e      	cmp	r6, r3
 8002ca8:	d802      	bhi.n	8002cb0 <ProcessReadDTC+0x4c>
    }
    else
    {
        SendNegative(SID_READ_DTC, NRC_SERVICE_NOT_SUPP);
    }
}
 8002caa:	b025      	add	sp, #148	@ 0x94
 8002cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            DTCMsg[3] = (uint8_t)Entries[Local_Count].code;
 8002cb0:	6823      	ldr	r3, [r4, #0]
            uint32_t Time = Entries[Local_Count].timestamp;
 8002cb2:	6865      	ldr	r5, [r4, #4]
 8002cb4:	ba1b      	rev	r3, r3
            DTCMsg[0] = (uint8_t)(Entries[Local_Count].code >> 24);
 8002cb6:	9303      	str	r3, [sp, #12]
            DTCMsg[5] = (uint8_t)(Time >> 8);
 8002cb8:	aa01      	add	r2, sp, #4
            DTCMsg[6] = (uint8_t)(Time >> 16);
 8002cba:	0c2b      	lsrs	r3, r5, #16
 8002cbc:	f88d 3012 	strb.w	r3, [sp, #18]
 8002cc0:	4610      	mov	r0, r2
                for (Index = 0; Index < 7; Index++)
 8002cc2:	2300      	movs	r3, #0
            uint32_t Date = Entries[Local_Count].datastamp;
 8002cc4:	f8d4 8008 	ldr.w	r8, [r4, #8]
            DTCMsg[4] = (uint8_t)(Time);
 8002cc8:	f8ad 5010 	strh.w	r5, [sp, #16]
            DTCMsg[10] = (uint8_t)(Date >> 16);
 8002ccc:	f3c8 4b07 	ubfx	fp, r8, #16, #8
            DTCMsg[7] = (uint8_t)(Time >> 24);
 8002cd0:	0e2d      	lsrs	r5, r5, #24
            DTCMsg[11] = (uint8_t)(Date >> 24);
 8002cd2:	ea4f 6a18 	mov.w	sl, r8, lsr #24
                Frame1[0] = 1;  /* sequence number */
 8002cd6:	f88d 9004 	strb.w	r9, [sp, #4]
                for (Index = 0; Index < 7; Index++)
 8002cda:	a903      	add	r1, sp, #12
 8002cdc:	3301      	adds	r3, #1
                    Frame1[Index+1] = DTCMsg[Index];
 8002cde:	f811 cb01 	ldrb.w	ip, [r1], #1
                for (Index = 0; Index < 7; Index++)
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b07      	cmp	r3, #7
                    Frame1[Index+1] = DTCMsg[Index];
 8002ce6:	f802 cf01 	strb.w	ip, [r2, #1]!
                for (Index = 0; Index < 7; Index++)
 8002cea:	d1f7      	bne.n	8002cdc <ProcessReadDTC+0x78>
                SendResponse(Frame1, 8);
 8002cec:	2108      	movs	r1, #8
 8002cee:	f7ff ff15 	bl	8002b1c <SendResponse>
                Frame2[0] = 2;  /* sequence number */
 8002cf2:	2302      	movs	r3, #2
                SendResponse(Frame2, 6);
 8002cf4:	2106      	movs	r1, #6
 8002cf6:	a801      	add	r0, sp, #4
                Frame2[0] = 2;  /* sequence number */
 8002cf8:	f88d 3004 	strb.w	r3, [sp, #4]
                    Frame2[(Index - 7) + 1] = DTCMsg[Index];
 8002cfc:	f88d 5005 	strb.w	r5, [sp, #5]
 8002d00:	f8ad 8006 	strh.w	r8, [sp, #6]
 8002d04:	f88d b008 	strb.w	fp, [sp, #8]
 8002d08:	f88d a009 	strb.w	sl, [sp, #9]
                SendResponse(Frame2, 6);
 8002d0c:	3701      	adds	r7, #1
 8002d0e:	f7ff ff05 	bl	8002b1c <SendResponse>
        for (uint8_t Local_Count = 0; Local_Count < Count; Local_Count++)
 8002d12:	340c      	adds	r4, #12
 8002d14:	e7c6      	b.n	8002ca4 <ProcessReadDTC+0x40>
        SendNegative(SID_READ_DTC, NRC_SERVICE_NOT_SUPP);
 8002d16:	2111      	movs	r1, #17
 8002d18:	2019      	movs	r0, #25
}
 8002d1a:	b025      	add	sp, #148	@ 0x94
 8002d1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SendNegative(SID_READ_DTC, NRC_SERVICE_NOT_SUPP);
 8002d20:	f7ff bf22 	b.w	8002b68 <SendNegative>
 8002d24:	20000101 	.word	0x20000101
 8002d28:	20000100 	.word	0x20000100

08002d2c <ProcessClearDTC>:

/**
 * ProcessClearDTC
 */
void ProcessClearDTC(uint8_t Sub)
{
 8002d2c:	b510      	push	{r4, lr}
    if (CurrentSession == SESSION_CONTROL && SecurityUnlocked)
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d5c <ProcessClearDTC+0x30>)
{
 8002d30:	4604      	mov	r4, r0
    if (CurrentSession == SESSION_CONTROL && SecurityUnlocked)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d10a      	bne.n	8002d4e <ProcessClearDTC+0x22>
 8002d38:	4b09      	ldr	r3, [pc, #36]	@ (8002d60 <ProcessClearDTC+0x34>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	b13b      	cbz	r3, 8002d4e <ProcessClearDTC+0x22>
    {
        /* Erase flash and send positive ack */
        ClearDTCListFlash();
 8002d3e:	f7ff fe4b 	bl	80029d8 <ClearDTCListFlash>
        SendPositive(SID_CLEAR_DTC, Sub);
 8002d42:	4621      	mov	r1, r4
    else
    {
        /* Not allowed */
        SendNegative(SID_CLEAR_DTC, NRC_SERVICE_NOT_SUPP);
    }
}
 8002d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SendPositive(SID_CLEAR_DTC, Sub);
 8002d48:	2014      	movs	r0, #20
 8002d4a:	f7ff bf1c 	b.w	8002b86 <SendPositive>
        SendNegative(SID_CLEAR_DTC, NRC_SERVICE_NOT_SUPP);
 8002d4e:	2111      	movs	r1, #17
}
 8002d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SendNegative(SID_CLEAR_DTC, NRC_SERVICE_NOT_SUPP);
 8002d54:	2014      	movs	r0, #20
 8002d56:	f7ff bf07 	b.w	8002b68 <SendNegative>
 8002d5a:	bf00      	nop
 8002d5c:	20000101 	.word	0x20000101
 8002d60:	20000100 	.word	0x20000100

08002d64 <ProcessRequestDownload>:

/**
 * ProcessRequestDownload
 */
void ProcessRequestDownload(uint8_t Sub, uint8_t* Msg)
{
 8002d64:	b507      	push	{r0, r1, r2, lr}
    if (CurrentSession == SESSION_PROGRAMMING && SecurityUnlocked)
 8002d66:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <ProcessRequestDownload+0x30>)
{
 8002d68:	9101      	str	r1, [sp, #4]
    if (CurrentSession == SESSION_PROGRAMMING && SecurityUnlocked)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d10c      	bne.n	8002d8a <ProcessRequestDownload+0x26>
 8002d70:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <ProcessRequestDownload+0x34>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	b14b      	cbz	r3, 8002d8a <ProcessRequestDownload+0x26>
    {
        /* Enqueue OTA start command and reset MCU */
        xQueueSend(xOtaQueue, &Msg, 0);
 8002d76:	2300      	movs	r3, #0
 8002d78:	4808      	ldr	r0, [pc, #32]	@ (8002d9c <ProcessRequestDownload+0x38>)
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	6800      	ldr	r0, [r0, #0]
 8002d7e:	a901      	add	r1, sp, #4
 8002d80:	f002 fbca 	bl	8005518 <xQueueGenericSend>
    else
    {
        /* Bootloader entry not allowed */
        SendNegative(SID_REQUEST_DOWNLOAD, NRC_SERVICE_NOT_SUPP);
    }
}
 8002d84:	b003      	add	sp, #12
 8002d86:	f85d fb04 	ldr.w	pc, [sp], #4
        SendNegative(SID_REQUEST_DOWNLOAD, NRC_SERVICE_NOT_SUPP);
 8002d8a:	2111      	movs	r1, #17
 8002d8c:	2034      	movs	r0, #52	@ 0x34
 8002d8e:	f7ff feeb 	bl	8002b68 <SendNegative>
}
 8002d92:	e7f7      	b.n	8002d84 <ProcessRequestDownload+0x20>
 8002d94:	20000101 	.word	0x20000101
 8002d98:	20000100 	.word	0x20000100
 8002d9c:	20000140 	.word	0x20000140

08002da0 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da0:	4a07      	ldr	r2, [pc, #28]	@ (8002dc0 <HAL_Init+0x20>)
{
 8002da2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da4:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da8:	f043 0310 	orr.w	r3, r3, #16
 8002dac:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dae:	f000 fb19 	bl	80033e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002db2:	200f      	movs	r0, #15
 8002db4:	f7ff fd60 	bl	8002878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002db8:	f7ff fc94 	bl	80026e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	bd08      	pop	{r3, pc}
 8002dc0:	40022000 	.word	0x40022000

08002dc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002dc4:	4a03      	ldr	r2, [pc, #12]	@ (8002dd4 <HAL_IncTick+0x10>)
 8002dc6:	4b04      	ldr	r3, [pc, #16]	@ (8002dd8 <HAL_IncTick+0x14>)
 8002dc8:	6811      	ldr	r1, [r2, #0]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	440b      	add	r3, r1
 8002dce:	6013      	str	r3, [r2, #0]
}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000104 	.word	0x20000104
 8002dd8:	20000004 	.word	0x20000004

08002ddc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ddc:	4b01      	ldr	r3, [pc, #4]	@ (8002de4 <HAL_GetTick+0x8>)
 8002dde:	6818      	ldr	r0, [r3, #0]
}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000104 	.word	0x20000104

08002de8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002de8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002dea:	4604      	mov	r4, r0
 8002dec:	2800      	cmp	r0, #0
 8002dee:	d06e      	beq.n	8002ece <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002df0:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002df4:	b90b      	cbnz	r3, 8002dfa <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002df6:	f7ff fc97 	bl	8002728 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002dfa:	6822      	ldr	r2, [r4, #0]
 8002dfc:	6813      	ldr	r3, [r2, #0]
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e04:	f7ff ffea 	bl	8002ddc <HAL_GetTick>
 8002e08:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	07d1      	lsls	r1, r2, #31
 8002e10:	d551      	bpl.n	8002eb6 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	f022 0202 	bic.w	r2, r2, #2
 8002e18:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e1a:	f7ff ffdf 	bl	8002ddc <HAL_GetTick>
 8002e1e:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	0792      	lsls	r2, r2, #30
 8002e26:	d454      	bmi.n	8002ed2 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e28:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e2a:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e2c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	bf0c      	ite	eq
 8002e32:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e36:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 8002e3a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e3c:	7e62      	ldrb	r2, [r4, #25]
 8002e3e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	bf0c      	ite	eq
 8002e44:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e48:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 8002e4c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e4e:	7ea2      	ldrb	r2, [r4, #26]
 8002e50:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	bf0c      	ite	eq
 8002e56:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e5a:	f022 0220 	bicne.w	r2, r2, #32
 8002e5e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e60:	7ee2      	ldrb	r2, [r4, #27]
 8002e62:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	bf0c      	ite	eq
 8002e68:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e6c:	f042 0210 	orrne.w	r2, r2, #16
 8002e70:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e72:	7f22      	ldrb	r2, [r4, #28]
 8002e74:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	bf0c      	ite	eq
 8002e7a:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e7e:	f022 0208 	bicne.w	r2, r2, #8
 8002e82:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e84:	7f62      	ldrb	r2, [r4, #29]
 8002e86:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	bf0c      	ite	eq
 8002e8c:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e90:	f022 0204 	bicne.w	r2, r2, #4
 8002e94:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e96:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	6921      	ldr	r1, [r4, #16]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	6961      	ldr	r1, [r4, #20]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	6861      	ldr	r1, [r4, #4]
 8002ea6:	3901      	subs	r1, #1
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002eac:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002eae:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8002eb0:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8002eb4:	e00c      	b.n	8002ed0 <HAL_CAN_Init+0xe8>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eb6:	f7ff ff91 	bl	8002ddc <HAL_GetTick>
 8002eba:	1b40      	subs	r0, r0, r5
 8002ebc:	280a      	cmp	r0, #10
 8002ebe:	d9a4      	bls.n	8002e0a <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ec0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec6:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ec8:	2305      	movs	r3, #5
 8002eca:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8002ece:	2001      	movs	r0, #1
}
 8002ed0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ed2:	f7ff ff83 	bl	8002ddc <HAL_GetTick>
 8002ed6:	1b40      	subs	r0, r0, r5
 8002ed8:	280a      	cmp	r0, #10
 8002eda:	d9a1      	bls.n	8002e20 <HAL_CAN_Init+0x38>
 8002edc:	e7f0      	b.n	8002ec0 <HAL_CAN_Init+0xd8>

08002ede <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002ede:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ee0:	f890 2020 	ldrb.w	r2, [r0, #32]
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ee4:	6803      	ldr	r3, [r0, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ee6:	3a01      	subs	r2, #1
 8002ee8:	2a01      	cmp	r2, #1
 8002eea:	d862      	bhi.n	8002fb2 <HAL_CAN_ConfigFilter+0xd4>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002eec:	2001      	movs	r0, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002eee:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002efa:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002efc:	f8d3 521c 	ldr.w	r5, [r3, #540]	@ 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002f00:	f002 041f 	and.w	r4, r2, #31
 8002f04:	40a0      	lsls	r0, r4
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002f06:	ea25 0500 	bic.w	r5, r5, r0
 8002f0a:	f8c3 521c 	str.w	r5, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002f0e:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002f10:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002f12:	bb95      	cbnz	r5, 8002f7a <HAL_CAN_ConfigFilter+0x9c>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002f14:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f18:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002f1a:	4025      	ands	r5, r4
 8002f1c:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f20:	888d      	ldrh	r5, [r1, #4]
 8002f22:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f26:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f2a:	f8c2 5240 	str.w	r5, [r2, #576]	@ 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f2e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002f30:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f32:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f36:	f8c2 5244 	str.w	r5, [r2, #580]	@ 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f3a:	698a      	ldr	r2, [r1, #24]
 8002f3c:	bb7a      	cbnz	r2, 8002f9e <HAL_CAN_ConfigFilter+0xc0>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002f42:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f44:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f48:	690a      	ldr	r2, [r1, #16]
 8002f4a:	bb62      	cbnz	r2, 8002fa6 <HAL_CAN_ConfigFilter+0xc8>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002f50:	4014      	ands	r4, r2
 8002f52:	f8c3 4214 	str.w	r4, [r3, #532]	@ 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f56:	6a0a      	ldr	r2, [r1, #32]
 8002f58:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f5a:	bf04      	itt	eq
 8002f5c:	f8d3 221c 	ldreq.w	r2, [r3, #540]	@ 0x21c
 8002f60:	4302      	orreq	r2, r0

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8002f62:	f04f 0000 	mov.w	r0, #0
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f66:	bf08      	it	eq
 8002f68:	f8c3 221c 	streq.w	r2, [r3, #540]	@ 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f6c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8002f78:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002f7a:	2d01      	cmp	r5, #1
 8002f7c:	d1dd      	bne.n	8002f3a <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f7e:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f82:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f84:	4305      	orrs	r5, r0
 8002f86:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f8a:	888d      	ldrh	r5, [r1, #4]
 8002f8c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f90:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f94:	f8c2 5240 	str.w	r5, [r2, #576]	@ 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f98:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002f9a:	898d      	ldrh	r5, [r1, #12]
 8002f9c:	e7c9      	b.n	8002f32 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002fa2:	4302      	orrs	r2, r0
 8002fa4:	e7ce      	b.n	8002f44 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002fa6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002faa:	4302      	orrs	r2, r0
 8002fac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002fb0:	e7d1      	b.n	8002f56 <HAL_CAN_ConfigFilter+0x78>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fb2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fb8:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8002fba:	2001      	movs	r0, #1
 8002fbc:	e7dc      	b.n	8002f78 <HAL_CAN_ConfigFilter+0x9a>

08002fbe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002fbe:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002fc0:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8002fc4:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d11f      	bne.n	800300a <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002fca:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fcc:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002fce:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fd2:	6813      	ldr	r3, [r2, #0]
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fda:	f7ff feff 	bl	8002ddc <HAL_GetTick>
 8002fde:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	6858      	ldr	r0, [r3, #4]
 8002fe4:	f010 0001 	ands.w	r0, r0, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fea:	6260      	str	r0, [r4, #36]	@ 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8002fec:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fee:	f7ff fef5 	bl	8002ddc <HAL_GetTick>
 8002ff2:	1b40      	subs	r0, r0, r5
 8002ff4:	280a      	cmp	r0, #10
 8002ff6:	d9f3      	bls.n	8002fe0 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ff8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ffe:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8003000:	2305      	movs	r3, #5
 8003002:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8003006:	2001      	movs	r0, #1
 8003008:	e7f0      	b.n	8002fec <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800300a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800300c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003010:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8003012:	e7f8      	b.n	8003006 <HAL_CAN_Start+0x48>

08003014 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003014:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003016:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800301a:	6804      	ldr	r4, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800301c:	3d01      	subs	r5, #1
 800301e:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003020:	68a6      	ldr	r6, [r4, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8003022:	d83c      	bhi.n	800309e <HAL_CAN_AddTxMessage+0x8a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003024:	f016 5fe0 	tst.w	r6, #469762048	@ 0x1c000000
 8003028:	d033      	beq.n	8003092 <HAL_CAN_AddTxMessage+0x7e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800302a:	2501      	movs	r5, #1
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800302c:	f3c6 6001 	ubfx	r0, r6, #24, #2
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003030:	4085      	lsls	r5, r0
 8003032:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003034:	e9d1 5702 	ldrd	r5, r7, [r1, #8]
 8003038:	f100 0318 	add.w	r3, r0, #24
 800303c:	bb15      	cbnz	r5, 8003084 <HAL_CAN_AddTxMessage+0x70>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800303e:	680d      	ldr	r5, [r1, #0]
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	ea47 5745 	orr.w	r7, r7, r5, lsl #21
 8003046:	50e7      	str	r7, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003048:	eb04 1300 	add.w	r3, r4, r0, lsl #4
 800304c:	0105      	lsls	r5, r0, #4

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);

      /* Return function status */
      return HAL_OK;
 800304e:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003050:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003052:	442c      	add	r4, r5
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003054:	f8c3 6184 	str.w	r6, [r3, #388]	@ 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003058:	7d09      	ldrb	r1, [r1, #20]
 800305a:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800305c:	bf02      	ittt	eq
 800305e:	f8d3 1184 	ldreq.w	r1, [r3, #388]	@ 0x184
 8003062:	f441 7180 	orreq.w	r1, r1, #256	@ 0x100
 8003066:	f8c3 1184 	streq.w	r1, [r3, #388]	@ 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800306a:	6851      	ldr	r1, [r2, #4]
 800306c:	f8c4 118c 	str.w	r1, [r4, #396]	@ 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003076:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8003082:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003084:	684e      	ldr	r6, [r1, #4]
                                                           pHeader->IDE |
 8003086:	433d      	orrs	r5, r7
 8003088:	ea45 05c6 	orr.w	r5, r5, r6, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	50e5      	str	r5, [r4, r3]
 8003090:	e7da      	b.n	8003048 <HAL_CAN_AddTxMessage+0x34>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003092:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003094:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003098:	6243      	str	r3, [r0, #36]	@ 0x24
      return HAL_ERROR;
 800309a:	2001      	movs	r0, #1
 800309c:	e7f1      	b.n	8003082 <HAL_CAN_AddTxMessage+0x6e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800309e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80030a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030a4:	e7f8      	b.n	8003098 <HAL_CAN_AddTxMessage+0x84>

080030a6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80030a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80030a8:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80030ac:	3c01      	subs	r4, #1
 80030ae:	2c01      	cmp	r4, #1
 80030b0:	d871      	bhi.n	8003196 <HAL_CAN_GetRxMessage+0xf0>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80030b2:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030b4:	b941      	cbnz	r1, 80030c8 <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80030b6:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80030b8:	07a4      	lsls	r4, r4, #30
 80030ba:	d107      	bne.n	80030cc <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80030be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030c2:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 80030c4:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80030c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80030c8:	6934      	ldr	r4, [r6, #16]
 80030ca:	e7f5      	b.n	80030b8 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80030cc:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 80030d0:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 80030d4:	010c      	lsls	r4, r1, #4
 80030d6:	f007 0704 	and.w	r7, r7, #4
 80030da:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80030dc:	2f00      	cmp	r7, #0
 80030de:	d150      	bne.n	8003182 <HAL_CAN_GetRxMessage+0xdc>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80030e0:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 80030e4:	0d7f      	lsrs	r7, r7, #21
 80030e6:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80030e8:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80030ec:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80030ee:	f007 0702 	and.w	r7, r7, #2
 80030f2:	60d7      	str	r7, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80030f4:	f8d5 71b4 	ldr.w	r7, [r5, #436]	@ 0x1b4
 80030f8:	073f      	lsls	r7, r7, #28
      pHeader->DLC = 8U;
 80030fa:	bf4e      	itee	mi
 80030fc:	2708      	movmi	r7, #8
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80030fe:	f8d5 71b4 	ldrpl.w	r7, [r5, #436]	@ 0x1b4
 8003102:	f007 070f 	andpl.w	r7, r7, #15
 8003106:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003108:	f8d5 71b4 	ldr.w	r7, [r5, #436]	@ 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800310c:	f8d5 51b4 	ldr.w	r5, [r5, #436]	@ 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003110:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003114:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003116:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003118:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800311a:	f8d6 21b8 	ldr.w	r2, [r6, #440]	@ 0x1b8
 800311e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003120:	6802      	ldr	r2, [r0, #0]
 8003122:	4422      	add	r2, r4
 8003124:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8003128:	0a12      	lsrs	r2, r2, #8
 800312a:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800312c:	6802      	ldr	r2, [r0, #0]
 800312e:	4422      	add	r2, r4
 8003130:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8003134:	0c12      	lsrs	r2, r2, #16
 8003136:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003138:	6802      	ldr	r2, [r0, #0]
 800313a:	4422      	add	r2, r4
 800313c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8003140:	0e12      	lsrs	r2, r2, #24
 8003142:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003144:	6802      	ldr	r2, [r0, #0]
 8003146:	4422      	add	r2, r4
 8003148:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800314c:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800314e:	6802      	ldr	r2, [r0, #0]
 8003150:	4422      	add	r2, r4
 8003152:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8003156:	0a12      	lsrs	r2, r2, #8
 8003158:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800315a:	6802      	ldr	r2, [r0, #0]
 800315c:	4422      	add	r2, r4
 800315e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8003162:	0c12      	lsrs	r2, r2, #16
 8003164:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003166:	6802      	ldr	r2, [r0, #0]
 8003168:	4422      	add	r2, r4
 800316a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800316e:	0e12      	lsrs	r2, r2, #24
 8003170:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003172:	6803      	ldr	r3, [r0, #0]
 8003174:	b951      	cbnz	r1, 800318c <HAL_CAN_GetRxMessage+0xe6>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	f042 0220 	orr.w	r2, r2, #32
 800317c:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 800317e:	2000      	movs	r0, #0
 8003180:	e7a1      	b.n	80030c6 <HAL_CAN_GetRxMessage+0x20>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003182:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 8003186:	08ff      	lsrs	r7, r7, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003188:	6057      	str	r7, [r2, #4]
 800318a:	e7ad      	b.n	80030e8 <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	f042 0220 	orr.w	r2, r2, #32
 8003192:	611a      	str	r2, [r3, #16]
 8003194:	e7f3      	b.n	800317e <HAL_CAN_GetRxMessage+0xd8>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003196:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800319c:	e791      	b.n	80030c2 <HAL_CAN_GetRxMessage+0x1c>

0800319e <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800319e:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80031a2:	3b01      	subs	r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d805      	bhi.n	80031b4 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80031a8:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 80031aa:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80031ac:	6953      	ldr	r3, [r2, #20]
 80031ae:	4319      	orrs	r1, r3
 80031b0:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80031b2:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031b4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80031b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031ba:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 80031bc:	2001      	movs	r0, #1
  }
}
 80031be:	4770      	bx	lr

080031c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 80031c0:	4770      	bx	lr

080031c2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 80031c2:	4770      	bx	lr

080031c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 80031c4:	4770      	bx	lr

080031c6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
 80031c6:	4770      	bx	lr

080031c8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
 80031c8:	4770      	bx	lr

080031ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
 80031ca:	4770      	bx	lr

080031cc <HAL_CAN_RxFifo0FullCallback>:
  * @brief  Rx FIFO 0 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 80031cc:	4770      	bx	lr

080031ce <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 80031ce:	4770      	bx	lr

080031d0 <HAL_CAN_RxFifo1FullCallback>:
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
 80031d0:	4770      	bx	lr

080031d2 <HAL_CAN_SleepCallback>:
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
 80031d2:	4770      	bx	lr

080031d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
 80031d4:	4770      	bx	lr

080031d6 <HAL_CAN_ErrorCallback>:
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
 80031d6:	4770      	bx	lr

080031d8 <HAL_CAN_IRQHandler>:
{
 80031d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80031dc:	6803      	ldr	r3, [r0, #0]
{
 80031de:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80031e0:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80031e2:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80031e6:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80031ea:	f8d3 8008 	ldr.w	r8, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80031ee:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80031f2:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80031f6:	699f      	ldr	r7, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80031f8:	d027      	beq.n	800324a <HAL_CAN_IRQHandler+0x72>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80031fa:	f018 0f01 	tst.w	r8, #1
 80031fe:	d007      	beq.n	8003210 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003200:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003202:	f018 0f02 	tst.w	r8, #2
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003206:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003208:	f000 80a6 	beq.w	8003358 <HAL_CAN_IRQHandler+0x180>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800320c:	f7ff ffd8 	bl	80031c0 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003210:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003212:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8003216:	d00a      	beq.n	800322e <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003218:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800321c:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800321e:	f418 7f00 	tst.w	r8, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003222:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003224:	f000 80a7 	beq.w	8003376 <HAL_CAN_IRQHandler+0x19e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003228:	4628      	mov	r0, r5
 800322a:	f7ff ffca 	bl	80031c2 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800322e:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
 8003232:	d00a      	beq.n	800324a <HAL_CAN_IRQHandler+0x72>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003234:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003238:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800323a:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800323e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003240:	f000 80a9 	beq.w	8003396 <HAL_CAN_IRQHandler+0x1be>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003244:	4628      	mov	r0, r5
 8003246:	f7ff ffbd 	bl	80031c4 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800324a:	0730      	lsls	r0, r6, #28
 800324c:	d507      	bpl.n	800325e <HAL_CAN_IRQHandler+0x86>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800324e:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003252:	bf1f      	itttt	ne
 8003254:	2210      	movne	r2, #16
 8003256:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003258:	f444 7400 	orrne.w	r4, r4, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800325c:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800325e:	0771      	lsls	r1, r6, #29
 8003260:	d508      	bpl.n	8003274 <HAL_CAN_IRQHandler+0x9c>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003262:	f01b 0f08 	tst.w	fp, #8
 8003266:	d005      	beq.n	8003274 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003268:	2208      	movs	r2, #8
 800326a:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800326c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800326e:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003270:	f7ff ffac 	bl	80031cc <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003274:	07b2      	lsls	r2, r6, #30
 8003276:	d506      	bpl.n	8003286 <HAL_CAN_IRQHandler+0xae>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003278:	682b      	ldr	r3, [r5, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	079b      	lsls	r3, r3, #30
 800327e:	d002      	beq.n	8003286 <HAL_CAN_IRQHandler+0xae>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003280:	4628      	mov	r0, r5
 8003282:	f001 fd91 	bl	8004da8 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003286:	0670      	lsls	r0, r6, #25
 8003288:	d507      	bpl.n	800329a <HAL_CAN_IRQHandler+0xc2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800328a:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800328e:	bf1f      	itttt	ne
 8003290:	2210      	movne	r2, #16
 8003292:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003294:	f444 6480 	orrne.w	r4, r4, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003298:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800329a:	06b1      	lsls	r1, r6, #26
 800329c:	d508      	bpl.n	80032b0 <HAL_CAN_IRQHandler+0xd8>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800329e:	f01a 0f08 	tst.w	sl, #8
 80032a2:	d005      	beq.n	80032b0 <HAL_CAN_IRQHandler+0xd8>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80032a4:	2208      	movs	r2, #8
 80032a6:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80032a8:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80032aa:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80032ac:	f7ff ff90 	bl	80031d0 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80032b0:	06f2      	lsls	r2, r6, #27
 80032b2:	d506      	bpl.n	80032c2 <HAL_CAN_IRQHandler+0xea>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	079b      	lsls	r3, r3, #30
 80032ba:	d002      	beq.n	80032c2 <HAL_CAN_IRQHandler+0xea>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80032bc:	4628      	mov	r0, r5
 80032be:	f7ff ff86 	bl	80031ce <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80032c2:	03b0      	lsls	r0, r6, #14
 80032c4:	d508      	bpl.n	80032d8 <HAL_CAN_IRQHandler+0x100>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80032c6:	f019 0f10 	tst.w	r9, #16
 80032ca:	d005      	beq.n	80032d8 <HAL_CAN_IRQHandler+0x100>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80032cc:	2210      	movs	r2, #16
 80032ce:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 80032d0:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80032d2:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80032d4:	f7ff ff7d 	bl	80031d2 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80032d8:	03f1      	lsls	r1, r6, #15
 80032da:	d508      	bpl.n	80032ee <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80032dc:	f019 0f08 	tst.w	r9, #8
 80032e0:	d005      	beq.n	80032ee <HAL_CAN_IRQHandler+0x116>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80032e2:	2208      	movs	r2, #8
 80032e4:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80032e6:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80032e8:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80032ea:	f7ff ff73 	bl	80031d4 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80032ee:	0432      	lsls	r2, r6, #16
 80032f0:	d529      	bpl.n	8003346 <HAL_CAN_IRQHandler+0x16e>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80032f2:	f019 0f04 	tst.w	r9, #4
 80032f6:	682a      	ldr	r2, [r5, #0]
 80032f8:	d023      	beq.n	8003342 <HAL_CAN_IRQHandler+0x16a>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80032fa:	05f3      	lsls	r3, r6, #23
 80032fc:	d503      	bpl.n	8003306 <HAL_CAN_IRQHandler+0x12e>
 80032fe:	07f8      	lsls	r0, r7, #31
        errorcode |= HAL_CAN_ERROR_EWG;
 8003300:	bf48      	it	mi
 8003302:	f044 0401 	orrmi.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003306:	05b1      	lsls	r1, r6, #22
 8003308:	d503      	bpl.n	8003312 <HAL_CAN_IRQHandler+0x13a>
 800330a:	07bb      	lsls	r3, r7, #30
        errorcode |= HAL_CAN_ERROR_EPV;
 800330c:	bf48      	it	mi
 800330e:	f044 0402 	orrmi.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003312:	0570      	lsls	r0, r6, #21
 8003314:	d503      	bpl.n	800331e <HAL_CAN_IRQHandler+0x146>
 8003316:	0779      	lsls	r1, r7, #29
        errorcode |= HAL_CAN_ERROR_BOF;
 8003318:	bf48      	it	mi
 800331a:	f044 0404 	orrmi.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800331e:	0533      	lsls	r3, r6, #20
 8003320:	d50f      	bpl.n	8003342 <HAL_CAN_IRQHandler+0x16a>
 8003322:	f017 0370 	ands.w	r3, r7, #112	@ 0x70
 8003326:	d00c      	beq.n	8003342 <HAL_CAN_IRQHandler+0x16a>
        switch (esrflags & CAN_ESR_LEC)
 8003328:	2b40      	cmp	r3, #64	@ 0x40
 800332a:	d054      	beq.n	80033d6 <HAL_CAN_IRQHandler+0x1fe>
 800332c:	d843      	bhi.n	80033b6 <HAL_CAN_IRQHandler+0x1de>
 800332e:	2b20      	cmp	r3, #32
 8003330:	d04b      	beq.n	80033ca <HAL_CAN_IRQHandler+0x1f2>
 8003332:	2b30      	cmp	r3, #48	@ 0x30
 8003334:	d04c      	beq.n	80033d0 <HAL_CAN_IRQHandler+0x1f8>
 8003336:	2b10      	cmp	r3, #16
 8003338:	d044      	beq.n	80033c4 <HAL_CAN_IRQHandler+0x1ec>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800333a:	6993      	ldr	r3, [r2, #24]
 800333c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003340:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003342:	2304      	movs	r3, #4
 8003344:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003346:	b12c      	cbz	r4, 8003354 <HAL_CAN_IRQHandler+0x17c>
    hcan->ErrorCode |= errorcode;
 8003348:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 800334a:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 800334c:	4323      	orrs	r3, r4
 800334e:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8003350:	f7ff ff41 	bl	80031d6 <HAL_CAN_ErrorCallback>
}
 8003354:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003358:	f018 0f04 	tst.w	r8, #4
 800335c:	d105      	bne.n	800336a <HAL_CAN_IRQHandler+0x192>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800335e:	f018 0f08 	tst.w	r8, #8
 8003362:	d105      	bne.n	8003370 <HAL_CAN_IRQHandler+0x198>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003364:	f7ff ff2f 	bl	80031c6 <HAL_CAN_TxMailbox0AbortCallback>
 8003368:	e752      	b.n	8003210 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800336a:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800336e:	e750      	b.n	8003212 <HAL_CAN_IRQHandler+0x3a>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003370:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8003374:	e74d      	b.n	8003212 <HAL_CAN_IRQHandler+0x3a>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003376:	f418 6f80 	tst.w	r8, #1024	@ 0x400
 800337a:	d002      	beq.n	8003382 <HAL_CAN_IRQHandler+0x1aa>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800337c:	f444 5400 	orr.w	r4, r4, #8192	@ 0x2000
 8003380:	e755      	b.n	800322e <HAL_CAN_IRQHandler+0x56>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003382:	f418 6f00 	tst.w	r8, #2048	@ 0x800
 8003386:	d002      	beq.n	800338e <HAL_CAN_IRQHandler+0x1b6>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003388:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800338c:	e74f      	b.n	800322e <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800338e:	4628      	mov	r0, r5
 8003390:	f7ff ff1a 	bl	80031c8 <HAL_CAN_TxMailbox1AbortCallback>
 8003394:	e74b      	b.n	800322e <HAL_CAN_IRQHandler+0x56>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003396:	f418 2f80 	tst.w	r8, #262144	@ 0x40000
 800339a:	d002      	beq.n	80033a2 <HAL_CAN_IRQHandler+0x1ca>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800339c:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 80033a0:	e753      	b.n	800324a <HAL_CAN_IRQHandler+0x72>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80033a2:	f418 2f00 	tst.w	r8, #524288	@ 0x80000
 80033a6:	d002      	beq.n	80033ae <HAL_CAN_IRQHandler+0x1d6>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80033a8:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 80033ac:	e74d      	b.n	800324a <HAL_CAN_IRQHandler+0x72>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80033ae:	4628      	mov	r0, r5
 80033b0:	f7ff ff0b 	bl	80031ca <HAL_CAN_TxMailbox2AbortCallback>
 80033b4:	e749      	b.n	800324a <HAL_CAN_IRQHandler+0x72>
        switch (esrflags & CAN_ESR_LEC)
 80033b6:	2b50      	cmp	r3, #80	@ 0x50
 80033b8:	d010      	beq.n	80033dc <HAL_CAN_IRQHandler+0x204>
 80033ba:	2b60      	cmp	r3, #96	@ 0x60
 80033bc:	d1bd      	bne.n	800333a <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_CRC;
 80033be:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
            break;
 80033c2:	e7ba      	b.n	800333a <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_STF;
 80033c4:	f044 0408 	orr.w	r4, r4, #8
            break;
 80033c8:	e7b7      	b.n	800333a <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_FOR;
 80033ca:	f044 0410 	orr.w	r4, r4, #16
            break;
 80033ce:	e7b4      	b.n	800333a <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_ACK;
 80033d0:	f044 0420 	orr.w	r4, r4, #32
            break;
 80033d4:	e7b1      	b.n	800333a <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_BR;
 80033d6:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
            break;
 80033da:	e7ae      	b.n	800333a <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_BD;
 80033dc:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
            break;
 80033e0:	e7ab      	b.n	800333a <HAL_CAN_IRQHandler+0x162>
	...

080033e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e4:	4907      	ldr	r1, [pc, #28]	@ (8003404 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033e6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033f2:	0412      	lsls	r2, r2, #16
 80033f4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003400:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003408:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800340a:	b530      	push	{r4, r5, lr}
 800340c:	68dc      	ldr	r4, [r3, #12]
 800340e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003412:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003416:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003418:	2b04      	cmp	r3, #4
 800341a:	bf28      	it	cs
 800341c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003420:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003424:	bf94      	ite	ls
 8003426:	2400      	movls	r4, #0
 8003428:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800342a:	fa05 f303 	lsl.w	r3, r5, r3
 800342e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003432:	40a5      	lsls	r5, r4
 8003434:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800343a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003440:	bfac      	ite	ge
 8003442:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003446:	4a07      	ldrlt	r2, [pc, #28]	@ (8003464 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003448:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800344c:	b2db      	uxtb	r3, r3
 800344e:	bfab      	itete	ge
 8003450:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003454:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003458:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800345e:	bd30      	pop	{r4, r5, pc}
 8003460:	e000ed00 	.word	0xe000ed00
 8003464:	e000ed14 	.word	0xe000ed14

08003468 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003468:	2800      	cmp	r0, #0
 800346a:	db07      	blt.n	800347c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346c:	2301      	movs	r3, #1
 800346e:	0941      	lsrs	r1, r0, #5
 8003470:	4a03      	ldr	r2, [pc, #12]	@ (8003480 <HAL_NVIC_EnableIRQ+0x18>)
 8003472:	f000 001f 	and.w	r0, r0, #31
 8003476:	4083      	lsls	r3, r0
 8003478:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	e000e100 	.word	0xe000e100

08003484 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003484:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 8003488:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800348a:	2a02      	cmp	r2, #2
 800348c:	d006      	beq.n	800349c <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800348e:	2204      	movs	r2, #4
 8003490:	6382      	str	r2, [r0, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8003492:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 800349a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800349c:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800349e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a0:	6811      	ldr	r1, [r2, #0]
 80034a2:	f021 010e 	bic.w	r1, r1, #14
 80034a6:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80034a8:	6811      	ldr	r1, [r2, #0]
 80034aa:	f021 0101 	bic.w	r1, r1, #1
 80034ae:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034b0:	2101      	movs	r1, #1
 80034b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034b4:	fa01 f202 	lsl.w	r2, r1, r2
 80034b8:	6042      	str	r2, [r0, #4]
  return status; 
 80034ba:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80034bc:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 80034c0:	e7e8      	b.n	8003494 <HAL_DMA_Abort+0x10>
	...

080034c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034c4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034c6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d003      	beq.n	80034d6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ce:	2304      	movs	r3, #4
 80034d0:	6383      	str	r3, [r0, #56]	@ 0x38
        
    status = HAL_ERROR;
 80034d2:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80034d4:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d6:	6803      	ldr	r3, [r0, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	f022 020e 	bic.w	r2, r2, #14
 80034de:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80034e8:	4a17      	ldr	r2, [pc, #92]	@ (8003548 <HAL_DMA_Abort_IT+0x84>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d01f      	beq.n	800352e <HAL_DMA_Abort_IT+0x6a>
 80034ee:	3214      	adds	r2, #20
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d01e      	beq.n	8003532 <HAL_DMA_Abort_IT+0x6e>
 80034f4:	3214      	adds	r2, #20
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01d      	beq.n	8003536 <HAL_DMA_Abort_IT+0x72>
 80034fa:	3214      	adds	r2, #20
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d01d      	beq.n	800353c <HAL_DMA_Abort_IT+0x78>
 8003500:	3214      	adds	r2, #20
 8003502:	4293      	cmp	r3, r2
 8003504:	d01d      	beq.n	8003542 <HAL_DMA_Abort_IT+0x7e>
 8003506:	3214      	adds	r2, #20
 8003508:	4293      	cmp	r3, r2
 800350a:	bf14      	ite	ne
 800350c:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8003510:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8003514:	4a0d      	ldr	r2, [pc, #52]	@ (800354c <HAL_DMA_Abort_IT+0x88>)
 8003516:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003518:	2301      	movs	r3, #1
 800351a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 800351e:	2300      	movs	r3, #0
 8003520:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8003524:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003526:	b103      	cbz	r3, 800352a <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8003528:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800352a:	2000      	movs	r0, #0
 800352c:	e7d2      	b.n	80034d4 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800352e:	2301      	movs	r3, #1
 8003530:	e7f0      	b.n	8003514 <HAL_DMA_Abort_IT+0x50>
 8003532:	2310      	movs	r3, #16
 8003534:	e7ee      	b.n	8003514 <HAL_DMA_Abort_IT+0x50>
 8003536:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800353a:	e7eb      	b.n	8003514 <HAL_DMA_Abort_IT+0x50>
 800353c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003540:	e7e8      	b.n	8003514 <HAL_DMA_Abort_IT+0x50>
 8003542:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003546:	e7e5      	b.n	8003514 <HAL_DMA_Abort_IT+0x50>
 8003548:	40020008 	.word	0x40020008
 800354c:	40020000 	.word	0x40020000

08003550 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003550:	4a11      	ldr	r2, [pc, #68]	@ (8003598 <FLASH_SetErrorCode+0x48>)
 8003552:	68d3      	ldr	r3, [r2, #12]
 8003554:	f013 0310 	ands.w	r3, r3, #16
 8003558:	d005      	beq.n	8003566 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800355a:	4910      	ldr	r1, [pc, #64]	@ (800359c <FLASH_SetErrorCode+0x4c>)
 800355c:	69cb      	ldr	r3, [r1, #28]
 800355e:	f043 0302 	orr.w	r3, r3, #2
 8003562:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003564:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003566:	68d2      	ldr	r2, [r2, #12]
 8003568:	0750      	lsls	r0, r2, #29
 800356a:	d506      	bpl.n	800357a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800356c:	490b      	ldr	r1, [pc, #44]	@ (800359c <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800356e:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003572:	69ca      	ldr	r2, [r1, #28]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800357a:	4a07      	ldr	r2, [pc, #28]	@ (8003598 <FLASH_SetErrorCode+0x48>)
 800357c:	69d1      	ldr	r1, [r2, #28]
 800357e:	07c9      	lsls	r1, r1, #31
 8003580:	d508      	bpl.n	8003594 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003582:	4806      	ldr	r0, [pc, #24]	@ (800359c <FLASH_SetErrorCode+0x4c>)
 8003584:	69c1      	ldr	r1, [r0, #28]
 8003586:	f041 0104 	orr.w	r1, r1, #4
 800358a:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800358c:	69d1      	ldr	r1, [r2, #28]
 800358e:	f021 0101 	bic.w	r1, r1, #1
 8003592:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003594:	60d3      	str	r3, [r2, #12]
}  
 8003596:	4770      	bx	lr
 8003598:	40022000 	.word	0x40022000
 800359c:	20000108 	.word	0x20000108

080035a0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80035a0:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <HAL_FLASH_Unlock+0x1c>)
 80035a2:	6918      	ldr	r0, [r3, #16]
 80035a4:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 80035a8:	d007      	beq.n	80035ba <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80035aa:	4a05      	ldr	r2, [pc, #20]	@ (80035c0 <HAL_FLASH_Unlock+0x20>)
 80035ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80035ae:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 80035b2:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80035b4:	6918      	ldr	r0, [r3, #16]
 80035b6:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 80035ba:	4770      	bx	lr
 80035bc:	40022000 	.word	0x40022000
 80035c0:	45670123 	.word	0x45670123

080035c4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80035c4:	4a03      	ldr	r2, [pc, #12]	@ (80035d4 <HAL_FLASH_Lock+0x10>)
}
 80035c6:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80035c8:	6913      	ldr	r3, [r2, #16]
 80035ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035ce:	6113      	str	r3, [r2, #16]
}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40022000 	.word	0x40022000

080035d8 <FLASH_WaitForLastOperation>:
{
 80035d8:	b570      	push	{r4, r5, r6, lr}
 80035da:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80035dc:	f7ff fbfe 	bl	8002ddc <HAL_GetTick>
 80035e0:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80035e2:	4c11      	ldr	r4, [pc, #68]	@ (8003628 <FLASH_WaitForLastOperation+0x50>)
 80035e4:	68e3      	ldr	r3, [r4, #12]
 80035e6:	07d8      	lsls	r0, r3, #31
 80035e8:	d412      	bmi.n	8003610 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80035ea:	68e3      	ldr	r3, [r4, #12]
 80035ec:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80035ee:	bf44      	itt	mi
 80035f0:	2320      	movmi	r3, #32
 80035f2:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80035f4:	68e3      	ldr	r3, [r4, #12]
 80035f6:	06da      	lsls	r2, r3, #27
 80035f8:	d406      	bmi.n	8003608 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80035fa:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80035fc:	07db      	lsls	r3, r3, #31
 80035fe:	d403      	bmi.n	8003608 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003600:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003602:	f010 0004 	ands.w	r0, r0, #4
 8003606:	d007      	beq.n	8003618 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 8003608:	f7ff ffa2 	bl	8003550 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800360c:	2001      	movs	r0, #1
 800360e:	e003      	b.n	8003618 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8003610:	1c6b      	adds	r3, r5, #1
 8003612:	d0e7      	beq.n	80035e4 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003614:	b90d      	cbnz	r5, 800361a <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 8003616:	2003      	movs	r0, #3
}
 8003618:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800361a:	f7ff fbdf 	bl	8002ddc <HAL_GetTick>
 800361e:	1b80      	subs	r0, r0, r6
 8003620:	42a8      	cmp	r0, r5
 8003622:	d9df      	bls.n	80035e4 <FLASH_WaitForLastOperation+0xc>
 8003624:	e7f7      	b.n	8003616 <FLASH_WaitForLastOperation+0x3e>
 8003626:	bf00      	nop
 8003628:	40022000 	.word	0x40022000

0800362c <HAL_FLASH_Program>:
{
 800362c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8003630:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80036c8 <HAL_FLASH_Program+0x9c>
{
 8003634:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8003636:	f89a 3018 	ldrb.w	r3, [sl, #24]
{
 800363a:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 800363c:	2b01      	cmp	r3, #1
{
 800363e:	4688      	mov	r8, r1
 8003640:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8003642:	d03f      	beq.n	80036c4 <HAL_FLASH_Program+0x98>
 8003644:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003646:	f24c 3050 	movw	r0, #50000	@ 0xc350
  __HAL_LOCK(&pFlash);
 800364a:	f88a 3018 	strb.w	r3, [sl, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800364e:	f7ff ffc3 	bl	80035d8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8003652:	bb90      	cbnz	r0, 80036ba <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003654:	2d01      	cmp	r5, #1
 8003656:	d003      	beq.n	8003660 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 8003658:	2d02      	cmp	r5, #2
 800365a:	bf14      	ite	ne
 800365c:	2504      	movne	r5, #4
 800365e:	2502      	moveq	r5, #2
      nbiterations = 4U;
 8003660:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003662:	4633      	mov	r3, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003664:	f8df b064 	ldr.w	fp, [pc, #100]	@ 80036cc <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003668:	0134      	lsls	r4, r6, #4
 800366a:	f1c4 0120 	rsb	r1, r4, #32
 800366e:	f1a4 0220 	sub.w	r2, r4, #32
 8003672:	fa07 f101 	lsl.w	r1, r7, r1
 8003676:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800367a:	f8ca 301c 	str.w	r3, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800367e:	430c      	orrs	r4, r1
 8003680:	fa27 f202 	lsr.w	r2, r7, r2
 8003684:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003686:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800368a:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003694:	f24c 3050 	movw	r0, #50000	@ 0xc350
  *(__IO uint16_t*)Address = Data;
 8003698:	f828 4016 	strh.w	r4, [r8, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800369c:	f7ff ff9c 	bl	80035d8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80036a0:	f8db 2010 	ldr.w	r2, [fp, #16]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 80036ac:	b928      	cbnz	r0, 80036ba <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 80036ae:	3601      	adds	r6, #1
 80036b0:	b2f2      	uxtb	r2, r6
 80036b2:	4295      	cmp	r5, r2
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	d8d6      	bhi.n	8003668 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 80036ba:	2300      	movs	r3, #0
 80036bc:	f88a 3018 	strb.w	r3, [sl, #24]
}
 80036c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80036c4:	2002      	movs	r0, #2
 80036c6:	e7fb      	b.n	80036c0 <HAL_FLASH_Program+0x94>
 80036c8:	20000108 	.word	0x20000108
 80036cc:	40022000 	.word	0x40022000

080036d0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036d0:	2200      	movs	r2, #0
 80036d2:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <FLASH_PageErase+0x1c>)
 80036d4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80036d6:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <FLASH_PageErase+0x20>)
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	f042 0202 	orr.w	r2, r2, #2
 80036de:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80036e0:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036e8:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80036ea:	4770      	bx	lr
 80036ec:	20000108 	.word	0x20000108
 80036f0:	40022000 	.word	0x40022000

080036f4 <HAL_FLASHEx_Erase>:
{
 80036f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80036f8:	4f26      	ldr	r7, [pc, #152]	@ (8003794 <HAL_FLASHEx_Erase+0xa0>)
{
 80036fa:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80036fc:	7e3b      	ldrb	r3, [r7, #24]
{
 80036fe:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8003700:	2b01      	cmp	r3, #1
 8003702:	d044      	beq.n	800378e <HAL_FLASHEx_Erase+0x9a>
 8003704:	2401      	movs	r4, #1
 8003706:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003708:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800370a:	f24c 3050 	movw	r0, #50000	@ 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800370e:	2b02      	cmp	r3, #2
 8003710:	d11a      	bne.n	8003748 <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003712:	f7ff ff61 	bl	80035d8 <FLASH_WaitForLastOperation>
 8003716:	b120      	cbz	r0, 8003722 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8003718:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800371a:	2300      	movs	r3, #0
 800371c:	763b      	strb	r3, [r7, #24]
}
 800371e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003722:	4c1d      	ldr	r4, [pc, #116]	@ (8003798 <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003724:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003726:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003728:	f24c 3050 	movw	r0, #50000	@ 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003732:	6923      	ldr	r3, [r4, #16]
 8003734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003738:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800373a:	f7ff ff4d 	bl	80035d8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800373e:	6923      	ldr	r3, [r4, #16]
 8003740:	f023 0304 	bic.w	r3, r3, #4
 8003744:	6123      	str	r3, [r4, #16]
 8003746:	e7e8      	b.n	800371a <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003748:	f7ff ff46 	bl	80035d8 <FLASH_WaitForLastOperation>
 800374c:	2800      	cmp	r0, #0
 800374e:	d1e3      	bne.n	8003718 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003758:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 800375a:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800375c:	4c0e      	ldr	r4, [pc, #56]	@ (8003798 <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800375e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8003762:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 8003766:	42b3      	cmp	r3, r6
 8003768:	d9d7      	bls.n	800371a <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 800376a:	4630      	mov	r0, r6
 800376c:	f7ff ffb0 	bl	80036d0 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003770:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003774:	f7ff ff30 	bl	80035d8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003778:	6923      	ldr	r3, [r4, #16]
 800377a:	f023 0302 	bic.w	r3, r3, #2
 800377e:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8003780:	b110      	cbz	r0, 8003788 <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 8003782:	f8c8 6000 	str.w	r6, [r8]
            break;
 8003786:	e7c8      	b.n	800371a <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8003788:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800378c:	e7e7      	b.n	800375e <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 800378e:	2002      	movs	r0, #2
 8003790:	e7c5      	b.n	800371e <HAL_FLASHEx_Erase+0x2a>
 8003792:	bf00      	nop
 8003794:	20000108 	.word	0x20000108
 8003798:	40022000 	.word	0x40022000

0800379c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800379c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037a0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80037a2:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037a4:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8003930 <HAL_GPIO_Init+0x194>
 80037a8:	4b62      	ldr	r3, [pc, #392]	@ (8003934 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 80037aa:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8003938 <HAL_GPIO_Init+0x19c>
 80037ae:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 800393c <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037b2:	680a      	ldr	r2, [r1, #0]
 80037b4:	fa32 f506 	lsrs.w	r5, r2, r6
 80037b8:	d102      	bne.n	80037c0 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 80037ba:	b003      	add	sp, #12
 80037bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80037c0:	2701      	movs	r7, #1
 80037c2:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037c4:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 80037c8:	ea37 0202 	bics.w	r2, r7, r2
 80037cc:	d17a      	bne.n	80038c4 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 80037ce:	684a      	ldr	r2, [r1, #4]
 80037d0:	2a03      	cmp	r2, #3
 80037d2:	d807      	bhi.n	80037e4 <HAL_GPIO_Init+0x48>
 80037d4:	3a01      	subs	r2, #1
 80037d6:	2a02      	cmp	r2, #2
 80037d8:	f200 8083 	bhi.w	80038e2 <HAL_GPIO_Init+0x146>
 80037dc:	e8df f002 	tbb	[pc, r2]
 80037e0:	9792      	.short	0x9792
 80037e2:	9d          	.byte	0x9d
 80037e3:	00          	.byte	0x00
 80037e4:	2a12      	cmp	r2, #18
 80037e6:	f000 8095 	beq.w	8003914 <HAL_GPIO_Init+0x178>
 80037ea:	d86d      	bhi.n	80038c8 <HAL_GPIO_Init+0x12c>
 80037ec:	2a11      	cmp	r2, #17
 80037ee:	f000 808b 	beq.w	8003908 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037f2:	2dff      	cmp	r5, #255	@ 0xff
 80037f4:	bf98      	it	ls
 80037f6:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037f8:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037fc:	bf88      	it	hi
 80037fe:	f100 0904 	addhi.w	r9, r0, #4
 8003802:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003806:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800380a:	bf88      	it	hi
 800380c:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800380e:	fa0b fa02 	lsl.w	sl, fp, r2
 8003812:	ea27 070a 	bic.w	r7, r7, sl
 8003816:	fa04 f202 	lsl.w	r2, r4, r2
 800381a:	4317      	orrs	r7, r2
 800381c:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003820:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8003824:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8003828:	d04c      	beq.n	80038c4 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800382a:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800382e:	f026 0703 	bic.w	r7, r6, #3
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	f8cc 2018 	str.w	r2, [ip, #24]
 800383a:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800383e:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8003842:	f002 0201 	and.w	r2, r2, #1
 8003846:	9201      	str	r2, [sp, #4]
 8003848:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800384c:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003850:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003852:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8003856:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003858:	fa0b fb0a 	lsl.w	fp, fp, sl
 800385c:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003860:	4a37      	ldr	r2, [pc, #220]	@ (8003940 <HAL_GPIO_Init+0x1a4>)
 8003862:	4290      	cmp	r0, r2
 8003864:	d05d      	beq.n	8003922 <HAL_GPIO_Init+0x186>
 8003866:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800386a:	4290      	cmp	r0, r2
 800386c:	d05b      	beq.n	8003926 <HAL_GPIO_Init+0x18a>
 800386e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003872:	4290      	cmp	r0, r2
 8003874:	d059      	beq.n	800392a <HAL_GPIO_Init+0x18e>
 8003876:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800387a:	4290      	cmp	r0, r2
 800387c:	bf14      	ite	ne
 800387e:	2204      	movne	r2, #4
 8003880:	2203      	moveq	r2, #3
 8003882:	fa02 f20a 	lsl.w	r2, r2, sl
 8003886:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 800388a:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800388c:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800388e:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003892:	bf14      	ite	ne
 8003894:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003896:	43aa      	biceq	r2, r5
 8003898:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800389a:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800389c:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80038a0:	bf14      	ite	ne
 80038a2:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038a4:	43aa      	biceq	r2, r5
 80038a6:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80038a8:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038aa:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80038ae:	bf14      	ite	ne
 80038b0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038b2:	43aa      	biceq	r2, r5
 80038b4:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80038b6:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038b8:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80038bc:	bf14      	ite	ne
 80038be:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038c0:	43aa      	biceq	r2, r5
 80038c2:	601a      	str	r2, [r3, #0]
	position++;
 80038c4:	3601      	adds	r6, #1
 80038c6:	e774      	b.n	80037b2 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80038c8:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8003944 <HAL_GPIO_Init+0x1a8>
 80038cc:	454a      	cmp	r2, r9
 80038ce:	d008      	beq.n	80038e2 <HAL_GPIO_Init+0x146>
 80038d0:	d810      	bhi.n	80038f4 <HAL_GPIO_Init+0x158>
 80038d2:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80038d6:	454a      	cmp	r2, r9
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_Init+0x146>
 80038da:	4572      	cmp	r2, lr
 80038dc:	d001      	beq.n	80038e2 <HAL_GPIO_Init+0x146>
 80038de:	4542      	cmp	r2, r8
 80038e0:	d187      	bne.n	80037f2 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038e2:	688a      	ldr	r2, [r1, #8]
 80038e4:	b1da      	cbz	r2, 800391e <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038e6:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038e8:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 80038ec:	bf0c      	ite	eq
 80038ee:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 80038f0:	6147      	strne	r7, [r0, #20]
 80038f2:	e77e      	b.n	80037f2 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 80038f4:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8003948 <HAL_GPIO_Init+0x1ac>
 80038f8:	454a      	cmp	r2, r9
 80038fa:	d0f2      	beq.n	80038e2 <HAL_GPIO_Init+0x146>
 80038fc:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8003900:	454a      	cmp	r2, r9
 8003902:	e7ed      	b.n	80038e0 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003904:	68cc      	ldr	r4, [r1, #12]
          break;
 8003906:	e774      	b.n	80037f2 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003908:	68cc      	ldr	r4, [r1, #12]
 800390a:	3404      	adds	r4, #4
          break;
 800390c:	e771      	b.n	80037f2 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800390e:	68cc      	ldr	r4, [r1, #12]
 8003910:	3408      	adds	r4, #8
          break;
 8003912:	e76e      	b.n	80037f2 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003914:	68cc      	ldr	r4, [r1, #12]
 8003916:	340c      	adds	r4, #12
          break;
 8003918:	e76b      	b.n	80037f2 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800391a:	2400      	movs	r4, #0
 800391c:	e769      	b.n	80037f2 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800391e:	2404      	movs	r4, #4
 8003920:	e767      	b.n	80037f2 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003922:	2200      	movs	r2, #0
 8003924:	e7ad      	b.n	8003882 <HAL_GPIO_Init+0xe6>
 8003926:	2201      	movs	r2, #1
 8003928:	e7ab      	b.n	8003882 <HAL_GPIO_Init+0xe6>
 800392a:	2202      	movs	r2, #2
 800392c:	e7a9      	b.n	8003882 <HAL_GPIO_Init+0xe6>
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	40010400 	.word	0x40010400
 8003938:	10210000 	.word	0x10210000
 800393c:	10110000 	.word	0x10110000
 8003940:	40010800 	.word	0x40010800
 8003944:	10220000 	.word	0x10220000
 8003948:	10310000 	.word	0x10310000

0800394c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800394c:	b10a      	cbz	r2, 8003952 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800394e:	6101      	str	r1, [r0, #16]
  }
}
 8003950:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003952:	0409      	lsls	r1, r1, #16
 8003954:	e7fb      	b.n	800394e <HAL_GPIO_WritePin+0x2>

08003956 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003956:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003958:	ea01 0203 	and.w	r2, r1, r3
 800395c:	ea21 0103 	bic.w	r1, r1, r3
 8003960:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003964:	6101      	str	r1, [r0, #16]
}
 8003966:	4770      	bx	lr

08003968 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003968:	2201      	movs	r2, #1
 800396a:	4b01      	ldr	r3, [pc, #4]	@ (8003970 <HAL_PWR_EnableBkUpAccess+0x8>)
 800396c:	621a      	str	r2, [r3, #32]
}
 800396e:	4770      	bx	lr
 8003970:	420e0000 	.word	0x420e0000

08003974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003974:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003978:	4605      	mov	r5, r0
 800397a:	b338      	cbz	r0, 80039cc <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397c:	6803      	ldr	r3, [r0, #0]
 800397e:	07db      	lsls	r3, r3, #31
 8003980:	d410      	bmi.n	80039a4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003982:	682b      	ldr	r3, [r5, #0]
 8003984:	079f      	lsls	r7, r3, #30
 8003986:	d45e      	bmi.n	8003a46 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003988:	682b      	ldr	r3, [r5, #0]
 800398a:	0719      	lsls	r1, r3, #28
 800398c:	f100 8095 	bmi.w	8003aba <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	075a      	lsls	r2, r3, #29
 8003994:	f100 80c1 	bmi.w	8003b1a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003998:	69eb      	ldr	r3, [r5, #28]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f040 812c 	bne.w	8003bf8 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80039a0:	2000      	movs	r0, #0
 80039a2:	e029      	b.n	80039f8 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039a4:	4c90      	ldr	r4, [pc, #576]	@ (8003be8 <HAL_RCC_OscConfig+0x274>)
 80039a6:	6863      	ldr	r3, [r4, #4]
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d007      	beq.n	80039c0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039b0:	6863      	ldr	r3, [r4, #4]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d10a      	bne.n	80039d0 <HAL_RCC_OscConfig+0x5c>
 80039ba:	6863      	ldr	r3, [r4, #4]
 80039bc:	03de      	lsls	r6, r3, #15
 80039be:	d507      	bpl.n	80039d0 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	039c      	lsls	r4, r3, #14
 80039c4:	d5dd      	bpl.n	8003982 <HAL_RCC_OscConfig+0xe>
 80039c6:	686b      	ldr	r3, [r5, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1da      	bne.n	8003982 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80039cc:	2001      	movs	r0, #1
 80039ce:	e013      	b.n	80039f8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d0:	686b      	ldr	r3, [r5, #4]
 80039d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d6:	d112      	bne.n	80039fe <HAL_RCC_OscConfig+0x8a>
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039de:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80039e0:	f7ff f9fc 	bl	8002ddc <HAL_GetTick>
 80039e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	0398      	lsls	r0, r3, #14
 80039ea:	d4ca      	bmi.n	8003982 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ec:	f7ff f9f6 	bl	8002ddc <HAL_GetTick>
 80039f0:	1b80      	subs	r0, r0, r6
 80039f2:	2864      	cmp	r0, #100	@ 0x64
 80039f4:	d9f7      	bls.n	80039e6 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80039f6:	2003      	movs	r0, #3
}
 80039f8:	b002      	add	sp, #8
 80039fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fe:	b99b      	cbnz	r3, 8003a28 <HAL_RCC_OscConfig+0xb4>
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a06:	6023      	str	r3, [r4, #0]
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a0e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003a10:	f7ff f9e4 	bl	8002ddc <HAL_GetTick>
 8003a14:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	0399      	lsls	r1, r3, #14
 8003a1a:	d5b2      	bpl.n	8003982 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7ff f9de 	bl	8002ddc <HAL_GetTick>
 8003a20:	1b80      	subs	r0, r0, r6
 8003a22:	2864      	cmp	r0, #100	@ 0x64
 8003a24:	d9f7      	bls.n	8003a16 <HAL_RCC_OscConfig+0xa2>
 8003a26:	e7e6      	b.n	80039f6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	d103      	bne.n	8003a38 <HAL_RCC_OscConfig+0xc4>
 8003a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	e7cf      	b.n	80039d8 <HAL_RCC_OscConfig+0x64>
 8003a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a44:	e7cb      	b.n	80039de <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a46:	4c68      	ldr	r4, [pc, #416]	@ (8003be8 <HAL_RCC_OscConfig+0x274>)
 8003a48:	6863      	ldr	r3, [r4, #4]
 8003a4a:	f013 0f0c 	tst.w	r3, #12
 8003a4e:	d007      	beq.n	8003a60 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a50:	6863      	ldr	r3, [r4, #4]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d110      	bne.n	8003a7c <HAL_RCC_OscConfig+0x108>
 8003a5a:	6863      	ldr	r3, [r4, #4]
 8003a5c:	03da      	lsls	r2, r3, #15
 8003a5e:	d40d      	bmi.n	8003a7c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	079b      	lsls	r3, r3, #30
 8003a64:	d502      	bpl.n	8003a6c <HAL_RCC_OscConfig+0xf8>
 8003a66:	692b      	ldr	r3, [r5, #16]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d1af      	bne.n	80039cc <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	696a      	ldr	r2, [r5, #20]
 8003a70:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003a74:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	e785      	b.n	8003988 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a7c:	692a      	ldr	r2, [r5, #16]
 8003a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bec <HAL_RCC_OscConfig+0x278>)
 8003a80:	b16a      	cbz	r2, 8003a9e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a86:	f7ff f9a9 	bl	8002ddc <HAL_GetTick>
 8003a8a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	079f      	lsls	r7, r3, #30
 8003a90:	d4ec      	bmi.n	8003a6c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a92:	f7ff f9a3 	bl	8002ddc <HAL_GetTick>
 8003a96:	1b80      	subs	r0, r0, r6
 8003a98:	2802      	cmp	r0, #2
 8003a9a:	d9f7      	bls.n	8003a8c <HAL_RCC_OscConfig+0x118>
 8003a9c:	e7ab      	b.n	80039f6 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8003a9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003aa0:	f7ff f99c 	bl	8002ddc <HAL_GetTick>
 8003aa4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	0798      	lsls	r0, r3, #30
 8003aaa:	f57f af6d 	bpl.w	8003988 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aae:	f7ff f995 	bl	8002ddc <HAL_GetTick>
 8003ab2:	1b80      	subs	r0, r0, r6
 8003ab4:	2802      	cmp	r0, #2
 8003ab6:	d9f6      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x132>
 8003ab8:	e79d      	b.n	80039f6 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aba:	69aa      	ldr	r2, [r5, #24]
 8003abc:	4e4a      	ldr	r6, [pc, #296]	@ (8003be8 <HAL_RCC_OscConfig+0x274>)
 8003abe:	4b4b      	ldr	r3, [pc, #300]	@ (8003bec <HAL_RCC_OscConfig+0x278>)
 8003ac0:	b1e2      	cbz	r2, 8003afc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8003ac8:	f7ff f988 	bl	8002ddc <HAL_GetTick>
 8003acc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ace:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003ad0:	079b      	lsls	r3, r3, #30
 8003ad2:	d50d      	bpl.n	8003af0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ad4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003ad8:	4b45      	ldr	r3, [pc, #276]	@ (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ae0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003ae2:	bf00      	nop
  }
  while (Delay --);
 8003ae4:	9b01      	ldr	r3, [sp, #4]
 8003ae6:	1e5a      	subs	r2, r3, #1
 8003ae8:	9201      	str	r2, [sp, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f9      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x16e>
 8003aee:	e74f      	b.n	8003990 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af0:	f7ff f974 	bl	8002ddc <HAL_GetTick>
 8003af4:	1b00      	subs	r0, r0, r4
 8003af6:	2802      	cmp	r0, #2
 8003af8:	d9e9      	bls.n	8003ace <HAL_RCC_OscConfig+0x15a>
 8003afa:	e77c      	b.n	80039f6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8003afc:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8003b00:	f7ff f96c 	bl	8002ddc <HAL_GetTick>
 8003b04:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b06:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003b08:	079f      	lsls	r7, r3, #30
 8003b0a:	f57f af41 	bpl.w	8003990 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b0e:	f7ff f965 	bl	8002ddc <HAL_GetTick>
 8003b12:	1b00      	subs	r0, r0, r4
 8003b14:	2802      	cmp	r0, #2
 8003b16:	d9f6      	bls.n	8003b06 <HAL_RCC_OscConfig+0x192>
 8003b18:	e76d      	b.n	80039f6 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1a:	4c33      	ldr	r4, [pc, #204]	@ (8003be8 <HAL_RCC_OscConfig+0x274>)
 8003b1c:	69e3      	ldr	r3, [r4, #28]
 8003b1e:	00d8      	lsls	r0, r3, #3
 8003b20:	d424      	bmi.n	8003b6c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8003b22:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b24:	69e3      	ldr	r3, [r4, #28]
 8003b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b2a:	61e3      	str	r3, [r4, #28]
 8003b2c:	69e3      	ldr	r3, [r4, #28]
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b36:	4e2f      	ldr	r6, [pc, #188]	@ (8003bf4 <HAL_RCC_OscConfig+0x280>)
 8003b38:	6833      	ldr	r3, [r6, #0]
 8003b3a:	05d9      	lsls	r1, r3, #23
 8003b3c:	d518      	bpl.n	8003b70 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b3e:	68eb      	ldr	r3, [r5, #12]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d126      	bne.n	8003b92 <HAL_RCC_OscConfig+0x21e>
 8003b44:	6a23      	ldr	r3, [r4, #32]
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003b4c:	f7ff f946 	bl	8002ddc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b50:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003b54:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b56:	6a23      	ldr	r3, [r4, #32]
 8003b58:	079b      	lsls	r3, r3, #30
 8003b5a:	d53f      	bpl.n	8003bdc <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8003b5c:	2f00      	cmp	r7, #0
 8003b5e:	f43f af1b 	beq.w	8003998 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b62:	69e3      	ldr	r3, [r4, #28]
 8003b64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b68:	61e3      	str	r3, [r4, #28]
 8003b6a:	e715      	b.n	8003998 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003b6c:	2700      	movs	r7, #0
 8003b6e:	e7e2      	b.n	8003b36 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b70:	6833      	ldr	r3, [r6, #0]
 8003b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b76:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003b78:	f7ff f930 	bl	8002ddc <HAL_GetTick>
 8003b7c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7e:	6833      	ldr	r3, [r6, #0]
 8003b80:	05da      	lsls	r2, r3, #23
 8003b82:	d4dc      	bmi.n	8003b3e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b84:	f7ff f92a 	bl	8002ddc <HAL_GetTick>
 8003b88:	eba0 0008 	sub.w	r0, r0, r8
 8003b8c:	2864      	cmp	r0, #100	@ 0x64
 8003b8e:	d9f6      	bls.n	8003b7e <HAL_RCC_OscConfig+0x20a>
 8003b90:	e731      	b.n	80039f6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b92:	b9ab      	cbnz	r3, 8003bc0 <HAL_RCC_OscConfig+0x24c>
 8003b94:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b96:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	6223      	str	r3, [r4, #32]
 8003ba0:	6a23      	ldr	r3, [r4, #32]
 8003ba2:	f023 0304 	bic.w	r3, r3, #4
 8003ba6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003ba8:	f7ff f918 	bl	8002ddc <HAL_GetTick>
 8003bac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bae:	6a23      	ldr	r3, [r4, #32]
 8003bb0:	0798      	lsls	r0, r3, #30
 8003bb2:	d5d3      	bpl.n	8003b5c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb4:	f7ff f912 	bl	8002ddc <HAL_GetTick>
 8003bb8:	1b80      	subs	r0, r0, r6
 8003bba:	4540      	cmp	r0, r8
 8003bbc:	d9f7      	bls.n	8003bae <HAL_RCC_OscConfig+0x23a>
 8003bbe:	e71a      	b.n	80039f6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	6a23      	ldr	r3, [r4, #32]
 8003bc4:	d103      	bne.n	8003bce <HAL_RCC_OscConfig+0x25a>
 8003bc6:	f043 0304 	orr.w	r3, r3, #4
 8003bca:	6223      	str	r3, [r4, #32]
 8003bcc:	e7ba      	b.n	8003b44 <HAL_RCC_OscConfig+0x1d0>
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	6223      	str	r3, [r4, #32]
 8003bd4:	6a23      	ldr	r3, [r4, #32]
 8003bd6:	f023 0304 	bic.w	r3, r3, #4
 8003bda:	e7b6      	b.n	8003b4a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bdc:	f7ff f8fe 	bl	8002ddc <HAL_GetTick>
 8003be0:	1b80      	subs	r0, r0, r6
 8003be2:	4540      	cmp	r0, r8
 8003be4:	d9b7      	bls.n	8003b56 <HAL_RCC_OscConfig+0x1e2>
 8003be6:	e706      	b.n	80039f6 <HAL_RCC_OscConfig+0x82>
 8003be8:	40021000 	.word	0x40021000
 8003bec:	42420000 	.word	0x42420000
 8003bf0:	20000000 	.word	0x20000000
 8003bf4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf8:	4c2a      	ldr	r4, [pc, #168]	@ (8003ca4 <HAL_RCC_OscConfig+0x330>)
 8003bfa:	6862      	ldr	r2, [r4, #4]
 8003bfc:	f002 020c 	and.w	r2, r2, #12
 8003c00:	2a08      	cmp	r2, #8
 8003c02:	d03e      	beq.n	8003c82 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c04:	2200      	movs	r2, #0
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	4b27      	ldr	r3, [pc, #156]	@ (8003ca8 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8003c0a:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c0c:	d12c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8003c0e:	f7ff f8e5 	bl	8002ddc <HAL_GetTick>
 8003c12:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	0199      	lsls	r1, r3, #6
 8003c18:	d420      	bmi.n	8003c5c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c1a:	6a2b      	ldr	r3, [r5, #32]
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c20:	d105      	bne.n	8003c2e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c22:	6862      	ldr	r2, [r4, #4]
 8003c24:	68a9      	ldr	r1, [r5, #8]
 8003c26:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c2e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8003c30:	6862      	ldr	r2, [r4, #4]
 8003c32:	430b      	orrs	r3, r1
 8003c34:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8003c38:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8003c3a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c3c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8003c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca8 <HAL_RCC_OscConfig+0x334>)
 8003c40:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003c42:	f7ff f8cb 	bl	8002ddc <HAL_GetTick>
 8003c46:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	019a      	lsls	r2, r3, #6
 8003c4c:	f53f aea8 	bmi.w	80039a0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c50:	f7ff f8c4 	bl	8002ddc <HAL_GetTick>
 8003c54:	1b40      	subs	r0, r0, r5
 8003c56:	2802      	cmp	r0, #2
 8003c58:	d9f6      	bls.n	8003c48 <HAL_RCC_OscConfig+0x2d4>
 8003c5a:	e6cc      	b.n	80039f6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7ff f8be 	bl	8002ddc <HAL_GetTick>
 8003c60:	1b80      	subs	r0, r0, r6
 8003c62:	2802      	cmp	r0, #2
 8003c64:	d9d6      	bls.n	8003c14 <HAL_RCC_OscConfig+0x2a0>
 8003c66:	e6c6      	b.n	80039f6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8003c68:	f7ff f8b8 	bl	8002ddc <HAL_GetTick>
 8003c6c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	019b      	lsls	r3, r3, #6
 8003c72:	f57f ae95 	bpl.w	80039a0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c76:	f7ff f8b1 	bl	8002ddc <HAL_GetTick>
 8003c7a:	1b40      	subs	r0, r0, r5
 8003c7c:	2802      	cmp	r0, #2
 8003c7e:	d9f6      	bls.n	8003c6e <HAL_RCC_OscConfig+0x2fa>
 8003c80:	e6b9      	b.n	80039f6 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	f43f aea2 	beq.w	80039cc <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8003c88:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8a:	6a2b      	ldr	r3, [r5, #32]
 8003c8c:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8003c90:	429a      	cmp	r2, r3
 8003c92:	f47f ae9b 	bne.w	80039cc <HAL_RCC_OscConfig+0x58>
 8003c96:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c98:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9c:	1ac0      	subs	r0, r0, r3
 8003c9e:	bf18      	it	ne
 8003ca0:	2001      	movne	r0, #1
 8003ca2:	e6a9      	b.n	80039f8 <HAL_RCC_OscConfig+0x84>
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	42420000 	.word	0x42420000

08003cac <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003cac:	4a0d      	ldr	r2, [pc, #52]	@ (8003ce4 <HAL_RCC_GetSysClockFreq+0x38>)
 8003cae:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003cb0:	f003 010c 	and.w	r1, r3, #12
 8003cb4:	2908      	cmp	r1, #8
 8003cb6:	d112      	bne.n	8003cde <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cb8:	480b      	ldr	r0, [pc, #44]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003cba:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cbe:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cc0:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cc2:	d509      	bpl.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cc4:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cc6:	4a09      	ldr	r2, [pc, #36]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cc8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ccc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cce:	4a08      	ldr	r2, [pc, #32]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x44>)
 8003cd0:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cd2:	fbb0 f0f3 	udiv	r0, r0, r3
 8003cd6:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cd8:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x48>)
 8003cda:	4358      	muls	r0, r3
 8003cdc:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003cde:	4803      	ldr	r0, [pc, #12]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	08006b26 	.word	0x08006b26
 8003cec:	007a1200 	.word	0x007a1200
 8003cf0:	08006b24 	.word	0x08006b24
 8003cf4:	003d0900 	.word	0x003d0900

08003cf8 <HAL_RCC_ClockConfig>:
{
 8003cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cfc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003cfe:	4604      	mov	r4, r0
 8003d00:	b910      	cbnz	r0, 8003d08 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003d02:	2001      	movs	r0, #1
}
 8003d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d08:	4a44      	ldr	r2, [pc, #272]	@ (8003e1c <HAL_RCC_ClockConfig+0x124>)
 8003d0a:	6813      	ldr	r3, [r2, #0]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	428b      	cmp	r3, r1
 8003d12:	d328      	bcc.n	8003d66 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d14:	6821      	ldr	r1, [r4, #0]
 8003d16:	078e      	lsls	r6, r1, #30
 8003d18:	d430      	bmi.n	8003d7c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1a:	07ca      	lsls	r2, r1, #31
 8003d1c:	d443      	bmi.n	8003da6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d1e:	4a3f      	ldr	r2, [pc, #252]	@ (8003e1c <HAL_RCC_ClockConfig+0x124>)
 8003d20:	6813      	ldr	r3, [r2, #0]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	42ab      	cmp	r3, r5
 8003d28:	d865      	bhi.n	8003df6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	4d3c      	ldr	r5, [pc, #240]	@ (8003e20 <HAL_RCC_ClockConfig+0x128>)
 8003d2e:	f012 0f04 	tst.w	r2, #4
 8003d32:	d16c      	bne.n	8003e0e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d34:	0713      	lsls	r3, r2, #28
 8003d36:	d506      	bpl.n	8003d46 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d38:	686b      	ldr	r3, [r5, #4]
 8003d3a:	6922      	ldr	r2, [r4, #16]
 8003d3c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003d40:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003d44:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d46:	f7ff ffb1 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003d4a:	686b      	ldr	r3, [r5, #4]
 8003d4c:	4a35      	ldr	r2, [pc, #212]	@ (8003e24 <HAL_RCC_ClockConfig+0x12c>)
 8003d4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d52:	5cd3      	ldrb	r3, [r2, r3]
 8003d54:	40d8      	lsrs	r0, r3
 8003d56:	4b34      	ldr	r3, [pc, #208]	@ (8003e28 <HAL_RCC_ClockConfig+0x130>)
 8003d58:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003d5a:	4b34      	ldr	r3, [pc, #208]	@ (8003e2c <HAL_RCC_ClockConfig+0x134>)
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	f7fe fd8b 	bl	8002878 <HAL_InitTick>
  return HAL_OK;
 8003d62:	2000      	movs	r0, #0
 8003d64:	e7ce      	b.n	8003d04 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	6813      	ldr	r3, [r2, #0]
 8003d68:	f023 0307 	bic.w	r3, r3, #7
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d70:	6813      	ldr	r3, [r2, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	428b      	cmp	r3, r1
 8003d78:	d1c3      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xa>
 8003d7a:	e7cb      	b.n	8003d14 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7c:	4b28      	ldr	r3, [pc, #160]	@ (8003e20 <HAL_RCC_ClockConfig+0x128>)
 8003d7e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d82:	bf1e      	ittt	ne
 8003d84:	685a      	ldrne	r2, [r3, #4]
 8003d86:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8003d8a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d8e:	bf42      	ittt	mi
 8003d90:	685a      	ldrmi	r2, [r3, #4]
 8003d92:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8003d96:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	68a0      	ldr	r0, [r4, #8]
 8003d9c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003da0:	4302      	orrs	r2, r0
 8003da2:	605a      	str	r2, [r3, #4]
 8003da4:	e7b9      	b.n	8003d1a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da6:	6862      	ldr	r2, [r4, #4]
 8003da8:	4e1d      	ldr	r6, [pc, #116]	@ (8003e20 <HAL_RCC_ClockConfig+0x128>)
 8003daa:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dac:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dae:	d11a      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db4:	d0a5      	beq.n	8003d02 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003db6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db8:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dbc:	f023 0303 	bic.w	r3, r3, #3
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003dc4:	f7ff f80a 	bl	8002ddc <HAL_GetTick>
 8003dc8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dca:	6873      	ldr	r3, [r6, #4]
 8003dcc:	6862      	ldr	r2, [r4, #4]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003dd6:	d0a2      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd8:	f7ff f800 	bl	8002ddc <HAL_GetTick>
 8003ddc:	1bc0      	subs	r0, r0, r7
 8003dde:	4540      	cmp	r0, r8
 8003de0:	d9f3      	bls.n	8003dca <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003de2:	2003      	movs	r0, #3
 8003de4:	e78e      	b.n	8003d04 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de6:	2a02      	cmp	r2, #2
 8003de8:	d102      	bne.n	8003df0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dea:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003dee:	e7e1      	b.n	8003db4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df0:	f013 0f02 	tst.w	r3, #2
 8003df4:	e7de      	b.n	8003db4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	6813      	ldr	r3, [r2, #0]
 8003df8:	f023 0307 	bic.w	r3, r3, #7
 8003dfc:	432b      	orrs	r3, r5
 8003dfe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e00:	6813      	ldr	r3, [r2, #0]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	42ab      	cmp	r3, r5
 8003e08:	f47f af7b 	bne.w	8003d02 <HAL_RCC_ClockConfig+0xa>
 8003e0c:	e78d      	b.n	8003d2a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e0e:	686b      	ldr	r3, [r5, #4]
 8003e10:	68e1      	ldr	r1, [r4, #12]
 8003e12:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003e16:	430b      	orrs	r3, r1
 8003e18:	606b      	str	r3, [r5, #4]
 8003e1a:	e78b      	b.n	8003d34 <HAL_RCC_ClockConfig+0x3c>
 8003e1c:	40022000 	.word	0x40022000
 8003e20:	40021000 	.word	0x40021000
 8003e24:	08006b14 	.word	0x08006b14
 8003e28:	20000000 	.word	0x20000000
 8003e2c:	20000008 	.word	0x20000008

08003e30 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e30:	4b04      	ldr	r3, [pc, #16]	@ (8003e44 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003e32:	4a05      	ldr	r2, [pc, #20]	@ (8003e48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003e3a:	5cd3      	ldrb	r3, [r2, r3]
 8003e3c:	4a03      	ldr	r2, [pc, #12]	@ (8003e4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003e3e:	6810      	ldr	r0, [r2, #0]
}
 8003e40:	40d8      	lsrs	r0, r3
 8003e42:	4770      	bx	lr
 8003e44:	40021000 	.word	0x40021000
 8003e48:	08006b0c 	.word	0x08006b0c
 8003e4c:	20000000 	.word	0x20000000

08003e50 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e50:	4b04      	ldr	r3, [pc, #16]	@ (8003e64 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003e52:	4a05      	ldr	r2, [pc, #20]	@ (8003e68 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003e5a:	5cd3      	ldrb	r3, [r2, r3]
 8003e5c:	4a03      	ldr	r2, [pc, #12]	@ (8003e6c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003e5e:	6810      	ldr	r0, [r2, #0]
}
 8003e60:	40d8      	lsrs	r0, r3
 8003e62:	4770      	bx	lr
 8003e64:	40021000 	.word	0x40021000
 8003e68:	08006b0c 	.word	0x08006b0c
 8003e6c:	20000000 	.word	0x20000000

08003e70 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e70:	230f      	movs	r3, #15
 8003e72:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea4 <HAL_RCC_GetClockConfig+0x34>)
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	f002 0203 	and.w	r2, r2, #3
 8003e7c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8003e84:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003e8c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	08db      	lsrs	r3, r3, #3
 8003e92:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e96:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e98:	4b03      	ldr	r3, [pc, #12]	@ (8003ea8 <HAL_RCC_GetClockConfig+0x38>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	600b      	str	r3, [r1, #0]
}
 8003ea2:	4770      	bx	lr
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40022000 	.word	0x40022000

08003eac <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003eac:	6803      	ldr	r3, [r0, #0]
{
 8003eae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003eb2:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003eb4:	07d8      	lsls	r0, r3, #31
 8003eb6:	d521      	bpl.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb8:	4c36      	ldr	r4, [pc, #216]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003eba:	69e3      	ldr	r3, [r4, #28]
 8003ebc:	00d9      	lsls	r1, r3, #3
 8003ebe:	d42b      	bmi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003ec0:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	69e3      	ldr	r3, [r4, #28]
 8003ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec8:	61e3      	str	r3, [r4, #28]
 8003eca:	69e3      	ldr	r3, [r4, #28]
 8003ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed4:	4f30      	ldr	r7, [pc, #192]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	05da      	lsls	r2, r3, #23
 8003eda:	d51f      	bpl.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003edc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ede:	686a      	ldr	r2, [r5, #4]
 8003ee0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003ee4:	d12e      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee6:	6a23      	ldr	r3, [r4, #32]
 8003ee8:	686a      	ldr	r2, [r5, #4]
 8003eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ef2:	b11e      	cbz	r6, 8003efc <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef4:	69e3      	ldr	r3, [r4, #28]
 8003ef6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003efa:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003efc:	682a      	ldr	r2, [r5, #0]
 8003efe:	0791      	lsls	r1, r2, #30
 8003f00:	d506      	bpl.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f02:	4924      	ldr	r1, [pc, #144]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003f04:	68a8      	ldr	r0, [r5, #8]
 8003f06:	684b      	ldr	r3, [r1, #4]
 8003f08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003f0c:	4303      	orrs	r3, r0
 8003f0e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f10:	06d3      	lsls	r3, r2, #27
 8003f12:	d436      	bmi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f14:	2000      	movs	r0, #0
 8003f16:	e012      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8003f18:	2600      	movs	r6, #0
 8003f1a:	e7db      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f22:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003f24:	f7fe ff5a 	bl	8002ddc <HAL_GetTick>
 8003f28:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	05db      	lsls	r3, r3, #23
 8003f2e:	d4d5      	bmi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f30:	f7fe ff54 	bl	8002ddc <HAL_GetTick>
 8003f34:	eba0 0008 	sub.w	r0, r0, r8
 8003f38:	2864      	cmp	r0, #100	@ 0x64
 8003f3a:	d9f6      	bls.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8003f3c:	2003      	movs	r0, #3
}
 8003f3e:	b002      	add	sp, #8
 8003f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f44:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d0cc      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	4a13      	ldr	r2, [pc, #76]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f50:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f52:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f56:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f5c:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f5e:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8003f62:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f64:	d5bf      	bpl.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8003f66:	f7fe ff39 	bl	8002ddc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8003f6e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f70:	6a23      	ldr	r3, [r4, #32]
 8003f72:	0798      	lsls	r0, r3, #30
 8003f74:	d4b7      	bmi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f76:	f7fe ff31 	bl	8002ddc <HAL_GetTick>
 8003f7a:	1bc0      	subs	r0, r0, r7
 8003f7c:	4540      	cmp	r0, r8
 8003f7e:	d9f7      	bls.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8003f80:	e7dc      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f82:	4a04      	ldr	r2, [pc, #16]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003f84:	68e9      	ldr	r1, [r5, #12]
 8003f86:	6853      	ldr	r3, [r2, #4]
 8003f88:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6053      	str	r3, [r2, #4]
 8003f90:	e7c0      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003f92:	bf00      	nop
 8003f94:	40021000 	.word	0x40021000
 8003f98:	40007000 	.word	0x40007000
 8003f9c:	42420000 	.word	0x42420000

08003fa0 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003fa0:	2802      	cmp	r0, #2
{
 8003fa2:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8003fa4:	d044      	beq.n	8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8003fa6:	2810      	cmp	r0, #16
 8003fa8:	d003      	beq.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8003faa:	2801      	cmp	r0, #1
 8003fac:	d022      	beq.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8003fae:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8003fb0:	e034      	b.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 8003fb2:	4b25      	ldr	r3, [pc, #148]	@ (8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003fb4:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8003fbc:	d02e      	beq.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fbe:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8003fc2:	4822      	ldr	r0, [pc, #136]	@ (800404c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fc4:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fc6:	bf48      	it	mi
 8003fc8:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fca:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fcc:	bf41      	itttt	mi
 8003fce:	4920      	ldrmi	r1, [pc, #128]	@ (8004050 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003fd0:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8003fd4:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003fd6:	4a1f      	ldrmi	r2, [pc, #124]	@ (8004054 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003fd8:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003fda:	bf4c      	ite	mi
 8003fdc:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fe0:	4a1d      	ldrpl	r2, [pc, #116]	@ (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003fe2:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fe4:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003fe8:	d418      	bmi.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8003fea:	2303      	movs	r3, #3
 8003fec:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003fee:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003ff2:	e013      	b.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ff4:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8003ff8:	4a13      	ldr	r2, [pc, #76]	@ (8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ffa:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ffc:	4019      	ands	r1, r3
 8003ffe:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 8004002:	d01e      	beq.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004004:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800400c:	d107      	bne.n	800401e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 800400e:	f649 4340 	movw	r3, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004012:	6a50      	ldr	r0, [r2, #36]	@ 0x24
        frequency = LSI_VALUE;
 8004014:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8004018:	bf18      	it	ne
 800401a:	4618      	movne	r0, r3
}
 800401c:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800401e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004022:	d1c4      	bne.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8004024:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8004026:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800402a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800402e:	e7f3      	b.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004030:	f7ff ff0e 	bl	8003e50 <HAL_RCC_GetPCLK2Freq>
 8004034:	4b04      	ldr	r3, [pc, #16]	@ (8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800403c:	3301      	adds	r3, #1
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	e7d5      	b.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 8004042:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004046:	e7e9      	b.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004048:	40021000 	.word	0x40021000
 800404c:	08006b38 	.word	0x08006b38
 8004050:	08006b36 	.word	0x08006b36
 8004054:	007a1200 	.word	0x007a1200
 8004058:	003d0900 	.word	0x003d0900

0800405c <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800405c:	6803      	ldr	r3, [r0, #0]
{
 800405e:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004060:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004062:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004064:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8004066:	b295      	uxth	r5, r2
 8004068:	b28c      	uxth	r4, r1
 800406a:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800406c:	bf17      	itett	ne
 800406e:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004070:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004072:	b280      	uxthne	r0, r0
 8004074:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004078:	bf08      	it	eq
 800407a:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 800407e:	bd30      	pop	{r4, r5, pc}

08004080 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004080:	6803      	ldr	r3, [r0, #0]
 8004082:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24

  return (((uint32_t) high1 << 16U) | low);
 8004086:	b29b      	uxth	r3, r3
}
 8004088:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800408c:	4770      	bx	lr

0800408e <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800408e:	2300      	movs	r3, #0

  while (Value >= 10U)
 8004090:	2809      	cmp	r0, #9
 8004092:	d803      	bhi.n	800409c <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004094:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8004098:	b2c0      	uxtb	r0, r0
 800409a:	4770      	bx	lr
    Value -= 10U;
 800409c:	380a      	subs	r0, #10
    bcdhigh++;
 800409e:	3301      	adds	r3, #1
    Value -= 10U;
 80040a0:	b2c0      	uxtb	r0, r0
 80040a2:	e7f5      	b.n	8004090 <RTC_ByteToBcd2+0x2>

080040a4 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 80040a4:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80040a6:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80040a8:	f000 000f 	and.w	r0, r0, #15
 80040ac:	fb02 0003 	mla	r0, r2, r3, r0
}
 80040b0:	b2c0      	uxtb	r0, r0
 80040b2:	4770      	bx	lr

080040b4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80040b4:	b530      	push	{r4, r5, lr}
  year = 2000U + nYear;

  if (nMonth < 3U)
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80040b6:	2517      	movs	r5, #23
 80040b8:	2309      	movs	r3, #9
 80040ba:	434d      	muls	r5, r1
  if (nMonth < 3U)
 80040bc:	2902      	cmp	r1, #2
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80040be:	fbb5 f5f3 	udiv	r5, r5, r3
  year = 2000U + nYear;
 80040c2:	f500 64fa 	add.w	r4, r0, #2000	@ 0x7d0
  if (nMonth < 3U)
 80040c6:	d817      	bhi.n	80040f8 <RTC_WeekDayNum+0x44>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80040c8:	f200 73cf 	addw	r3, r0, #1999	@ 0x7cf
 80040cc:	1d10      	adds	r0, r2, #4
 80040ce:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80040d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80040d6:	4420      	add	r0, r4
 80040d8:	4428      	add	r0, r5
 80040da:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 80040de:	4410      	add	r0, r2
 80040e0:	2264      	movs	r2, #100	@ 0x64
 80040e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80040e6:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80040e8:	2307      	movs	r3, #7
 80040ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80040f2:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 80040f4:	b2c0      	uxtb	r0, r0
 80040f6:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80040f8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80040fc:	fbb4 f3f3 	udiv	r3, r4, r3
 8004100:	1c90      	adds	r0, r2, #2
 8004102:	4420      	add	r0, r4
 8004104:	4428      	add	r0, r5
 8004106:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 800410a:	4418      	add	r0, r3
 800410c:	2364      	movs	r3, #100	@ 0x64
 800410e:	fbb4 f4f3 	udiv	r4, r4, r3
 8004112:	1b00      	subs	r0, r0, r4
 8004114:	e7e8      	b.n	80040e8 <RTC_WeekDayNum+0x34>

08004116 <RTC_EnterInitMode>:
{
 8004116:	b538      	push	{r3, r4, r5, lr}
 8004118:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800411a:	f7fe fe5f 	bl	8002ddc <HAL_GetTick>
 800411e:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	0692      	lsls	r2, r2, #26
 8004126:	d505      	bpl.n	8004134 <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 8004128:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	f042 0210 	orr.w	r2, r2, #16
 8004130:	605a      	str	r2, [r3, #4]
}
 8004132:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004134:	f7fe fe52 	bl	8002ddc <HAL_GetTick>
 8004138:	1b40      	subs	r0, r0, r5
 800413a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800413e:	d9ef      	bls.n	8004120 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8004140:	2003      	movs	r0, #3
 8004142:	e7f6      	b.n	8004132 <RTC_EnterInitMode+0x1c>

08004144 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004144:	6802      	ldr	r2, [r0, #0]
{
 8004146:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004148:	6853      	ldr	r3, [r2, #4]
{
 800414a:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800414c:	f023 0310 	bic.w	r3, r3, #16
 8004150:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8004152:	f7fe fe43 	bl	8002ddc <HAL_GetTick>
 8004156:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	069b      	lsls	r3, r3, #26
 800415e:	d501      	bpl.n	8004164 <RTC_ExitInitMode+0x20>
  return HAL_OK;
 8004160:	2000      	movs	r0, #0
}
 8004162:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004164:	f7fe fe3a 	bl	8002ddc <HAL_GetTick>
 8004168:	1b40      	subs	r0, r0, r5
 800416a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800416e:	d9f3      	bls.n	8004158 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8004170:	2003      	movs	r0, #3
 8004172:	e7f6      	b.n	8004162 <RTC_ExitInitMode+0x1e>

08004174 <RTC_WriteTimeCounter>:
{
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	4605      	mov	r5, r0
 8004178:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800417a:	f7ff ffcc 	bl	8004116 <RTC_EnterInitMode>
 800417e:	b958      	cbnz	r0, 8004198 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004184:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004186:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004188:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800418a:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800418c:	f7ff ffda 	bl	8004144 <RTC_ExitInitMode>
 8004190:	3800      	subs	r0, #0
 8004192:	bf18      	it	ne
 8004194:	2001      	movne	r0, #1
}
 8004196:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8004198:	2001      	movs	r0, #1
 800419a:	e7fc      	b.n	8004196 <RTC_WriteTimeCounter+0x22>

0800419c <RTC_WriteAlarmCounter>:
{
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	4605      	mov	r5, r0
 80041a0:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041a2:	f7ff ffb8 	bl	8004116 <RTC_EnterInitMode>
 80041a6:	b958      	cbnz	r0, 80041c0 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80041ac:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80041ae:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041b0:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80041b2:	625c      	str	r4, [r3, #36]	@ 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041b4:	f7ff ffc6 	bl	8004144 <RTC_ExitInitMode>
 80041b8:	3800      	subs	r0, #0
 80041ba:	bf18      	it	ne
 80041bc:	2001      	movne	r0, #1
}
 80041be:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80041c0:	2001      	movs	r0, #1
 80041c2:	e7fc      	b.n	80041be <RTC_WriteAlarmCounter+0x22>

080041c4 <HAL_RTC_SetTime>:
{
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 80041c6:	4604      	mov	r4, r0
 80041c8:	b1e8      	cbz	r0, 8004206 <HAL_RTC_SetTime+0x42>
 80041ca:	b1e1      	cbz	r1, 8004206 <HAL_RTC_SetTime+0x42>
  __HAL_LOCK(hrtc);
 80041cc:	7c03      	ldrb	r3, [r0, #16]
 80041ce:	2602      	movs	r6, #2
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d019      	beq.n	8004208 <HAL_RTC_SetTime+0x44>
 80041d4:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041d6:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 80041d8:	7403      	strb	r3, [r0, #16]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80041da:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 80041dc:	784d      	ldrb	r5, [r1, #1]
                              ((uint32_t)sTime->Seconds));
 80041de:	788f      	ldrb	r7, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 80041e0:	b9a2      	cbnz	r2, 800420c <HAL_RTC_SetTime+0x48>
                              ((uint32_t)sTime->Minutes * 60U) + \
 80041e2:	233c      	movs	r3, #60	@ 0x3c
 80041e4:	435d      	muls	r5, r3
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80041e6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80041ea:	fb03 5500 	mla	r5, r3, r0, r5
 80041ee:	443d      	add	r5, r7
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80041f0:	4629      	mov	r1, r5
 80041f2:	4620      	mov	r0, r4
 80041f4:	f7ff ffbe 	bl	8004174 <RTC_WriteTimeCounter>
 80041f8:	4607      	mov	r7, r0
 80041fa:	4606      	mov	r6, r0
 80041fc:	b1c0      	cbz	r0, 8004230 <HAL_RTC_SetTime+0x6c>
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041fe:	2304      	movs	r3, #4
 8004200:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8004202:	2300      	movs	r3, #0
 8004204:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8004206:	2601      	movs	r6, #1
}
 8004208:	4630      	mov	r0, r6
 800420a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800420c:	f7ff ff4a 	bl	80040a4 <RTC_Bcd2ToByte>
 8004210:	4606      	mov	r6, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004212:	4628      	mov	r0, r5
 8004214:	f7ff ff46 	bl	80040a4 <RTC_Bcd2ToByte>
 8004218:	233c      	movs	r3, #60	@ 0x3c
 800421a:	fb03 f100 	mul.w	r1, r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800421e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004222:	4638      	mov	r0, r7
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004224:	fb03 1106 	mla	r1, r3, r6, r1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004228:	f7ff ff3c 	bl	80040a4 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800422c:	1845      	adds	r5, r0, r1
 800422e:	e7df      	b.n	80041f0 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004230:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004232:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004234:	6853      	ldr	r3, [r2, #4]
 8004236:	f023 0305 	bic.w	r3, r3, #5
 800423a:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800423c:	f7ff ff20 	bl	8004080 <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 8004240:	4285      	cmp	r5, r0
 8004242:	d90b      	bls.n	800425c <HAL_RTC_SetTime+0x98>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004244:	f500 31a8 	add.w	r1, r0, #86016	@ 0x15000
 8004248:	f501 71c0 	add.w	r1, r1, #384	@ 0x180
 800424c:	4620      	mov	r0, r4
 800424e:	f7ff ffa5 	bl	800419c <RTC_WriteAlarmCounter>
 8004252:	b118      	cbz	r0, 800425c <HAL_RTC_SetTime+0x98>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004254:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8004256:	7427      	strb	r7, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004258:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 800425a:	e7d4      	b.n	8004206 <HAL_RTC_SetTime+0x42>
    hrtc->State = HAL_RTC_STATE_READY;
 800425c:	2301      	movs	r3, #1
 800425e:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8004260:	2300      	movs	r3, #0
 8004262:	7423      	strb	r3, [r4, #16]
    return HAL_OK;
 8004264:	e7d0      	b.n	8004208 <HAL_RTC_SetTime+0x44>
	...

08004268 <HAL_RTC_GetTime>:
{
 8004268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800426c:	460e      	mov	r6, r1
 800426e:	4617      	mov	r7, r2
  if ((hrtc == NULL) || (sTime == NULL))
 8004270:	4605      	mov	r5, r0
 8004272:	b910      	cbnz	r0, 800427a <HAL_RTC_GetTime+0x12>
    return HAL_ERROR;
 8004274:	2001      	movs	r0, #1
}
 8004276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((hrtc == NULL) || (sTime == NULL))
 800427a:	2900      	cmp	r1, #0
 800427c:	d0fa      	beq.n	8004274 <HAL_RTC_GetTime+0xc>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800427e:	6803      	ldr	r3, [r0, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f013 0804 	ands.w	r8, r3, #4
 8004286:	d1f5      	bne.n	8004274 <HAL_RTC_GetTime+0xc>
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004288:	f7ff fee8 	bl	800405c <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 800428c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004290:	fbb0 f2f3 	udiv	r2, r0, r3
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004294:	4604      	mov	r4, r0
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004296:	fb03 0312 	mls	r3, r3, r2, r0
 800429a:	203c      	movs	r0, #60	@ 0x3c
 800429c:	fbb3 f1f0 	udiv	r1, r3, r0
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80042a0:	fb00 3311 	mls	r3, r0, r1, r3
 80042a4:	70b3      	strb	r3, [r6, #2]
  if (hours >= 24U)
 80042a6:	4b48      	ldr	r3, [pc, #288]	@ (80043c8 <HAL_RTC_GetTime+0x160>)
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80042a8:	7071      	strb	r1, [r6, #1]
  if (hours >= 24U)
 80042aa:	429c      	cmp	r4, r3
 80042ac:	d97c      	bls.n	80043a8 <HAL_RTC_GetTime+0x140>
    days_elapsed = (hours / 24U);
 80042ae:	2318      	movs	r3, #24
 80042b0:	fbb2 f9f3 	udiv	r9, r2, r3
    sTime->Hours = (hours % 24U);
 80042b4:	fb03 2219 	mls	r2, r3, r9, r2
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80042b8:	4628      	mov	r0, r5
    sTime->Hours = (hours % 24U);
 80042ba:	7032      	strb	r2, [r6, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80042bc:	f7ff fee0 	bl	8004080 <RTC_ReadAlarmCounter>
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80042c0:	f1b0 3fff 	cmp.w	r0, #4294967295
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80042c4:	4682      	mov	sl, r0
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80042c6:	d005      	beq.n	80042d4 <HAL_RTC_GetTime+0x6c>
 80042c8:	4284      	cmp	r4, r0
      counter_alarm = RTC_ALARM_RESETVALUE;
 80042ca:	bf2c      	ite	cs
 80042cc:	f04f 3aff 	movcs.w	sl, #4294967295
      counter_alarm -= counter_time;
 80042d0:	eba0 0a04 	subcc.w	sl, r0, r4
    counter_time -= (days_elapsed * 24U * 3600U);
 80042d4:	4b3d      	ldr	r3, [pc, #244]	@ (80043cc <HAL_RTC_GetTime+0x164>)
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80042d6:	4628      	mov	r0, r5
    counter_time -= (days_elapsed * 24U * 3600U);
 80042d8:	fb03 4419 	mls	r4, r3, r9, r4
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80042dc:	4621      	mov	r1, r4
 80042de:	f7ff ff49 	bl	8004174 <RTC_WriteTimeCounter>
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d1c6      	bne.n	8004274 <HAL_RTC_GetTime+0xc>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80042e6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80042ea:	d028      	beq.n	800433e <HAL_RTC_GetTime+0xd6>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80042ec:	eb0a 0104 	add.w	r1, sl, r4
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80042f0:	4628      	mov	r0, r5
 80042f2:	f7ff ff53 	bl	800419c <RTC_WriteAlarmCounter>
 80042f6:	2800      	cmp	r0, #0
 80042f8:	d1bc      	bne.n	8004274 <HAL_RTC_GetTime+0xc>
  year = hrtc->DateToUpdate.Year;
 80042fa:	2101      	movs	r1, #1
 80042fc:	f241 5caa 	movw	ip, #5546	@ 0x15aa
 8004300:	7be8      	ldrb	r0, [r5, #15]
  month = hrtc->DateToUpdate.Month;
 8004302:	7b6c      	ldrb	r4, [r5, #13]
  day = hrtc->DateToUpdate.Date;
 8004304:	7bab      	ldrb	r3, [r5, #14]
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004306:	2c0c      	cmp	r4, #12
 8004308:	d809      	bhi.n	800431e <HAL_RTC_GetTime+0xb6>
 800430a:	fa01 f204 	lsl.w	r2, r1, r4
 800430e:	ea12 0f0c 	tst.w	r2, ip
 8004312:	d116      	bne.n	8004342 <HAL_RTC_GetTime+0xda>
 8004314:	f412 6f25 	tst.w	r2, #2640	@ 0xa50
 8004318:	d120      	bne.n	800435c <HAL_RTC_GetTime+0xf4>
 800431a:	2c02      	cmp	r4, #2
 800431c:	d021      	beq.n	8004362 <HAL_RTC_GetTime+0xfa>
  for (loop = 0U; loop < DayElapsed; loop++)
 800431e:	f108 0801 	add.w	r8, r8, #1
 8004322:	45c1      	cmp	r9, r8
 8004324:	d1ef      	bne.n	8004306 <HAL_RTC_GetTime+0x9e>
  hrtc->DateToUpdate.Month = month;
 8004326:	b2e1      	uxtb	r1, r4
  hrtc->DateToUpdate.Date = day;
 8004328:	b2da      	uxtb	r2, r3
  hrtc->DateToUpdate.Year = year;
 800432a:	73e8      	strb	r0, [r5, #15]
  hrtc->DateToUpdate.Month = month;
 800432c:	7369      	strb	r1, [r5, #13]
  hrtc->DateToUpdate.Date = day;
 800432e:	73aa      	strb	r2, [r5, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004330:	f7ff fec0 	bl	80040b4 <RTC_WeekDayNum>
 8004334:	7328      	strb	r0, [r5, #12]
  if (Format != RTC_FORMAT_BIN)
 8004336:	2f00      	cmp	r7, #0
 8004338:	d138      	bne.n	80043ac <HAL_RTC_GetTime+0x144>
  return HAL_OK;
 800433a:	2000      	movs	r0, #0
 800433c:	e79b      	b.n	8004276 <HAL_RTC_GetTime+0xe>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800433e:	4651      	mov	r1, sl
 8004340:	e7d6      	b.n	80042f0 <HAL_RTC_GetTime+0x88>
      if (day < 31U)
 8004342:	2b1e      	cmp	r3, #30
 8004344:	d801      	bhi.n	800434a <HAL_RTC_GetTime+0xe2>
        day++;
 8004346:	3301      	adds	r3, #1
 8004348:	e7e9      	b.n	800431e <HAL_RTC_GetTime+0xb6>
        if (month != 12U)
 800434a:	2c0c      	cmp	r4, #12
 800434c:	d002      	beq.n	8004354 <HAL_RTC_GetTime+0xec>
        day = 1U;
 800434e:	2301      	movs	r3, #1
        month++;
 8004350:	3401      	adds	r4, #1
        day = 1U;
 8004352:	e7e4      	b.n	800431e <HAL_RTC_GetTime+0xb6>
          day = 1U;
 8004354:	2301      	movs	r3, #1
          year++;
 8004356:	3001      	adds	r0, #1
          month = 1U;
 8004358:	461c      	mov	r4, r3
 800435a:	e7e0      	b.n	800431e <HAL_RTC_GetTime+0xb6>
      if (day < 30U)
 800435c:	2b1d      	cmp	r3, #29
 800435e:	d8f6      	bhi.n	800434e <HAL_RTC_GetTime+0xe6>
 8004360:	e7f1      	b.n	8004346 <HAL_RTC_GetTime+0xde>
      if (day < 28U)
 8004362:	2b1b      	cmp	r3, #27
 8004364:	d9ef      	bls.n	8004346 <HAL_RTC_GetTime+0xde>
      else if (day == 28U)
 8004366:	2b1c      	cmp	r3, #28
 8004368:	d117      	bne.n	800439a <HAL_RTC_GetTime+0x132>
  if ((nYear % 4U) != 0U)
 800436a:	0782      	lsls	r2, r0, #30
        if (RTC_IsLeapYear(year))
 800436c:	b283      	uxth	r3, r0
  if ((nYear % 4U) != 0U)
 800436e:	d116      	bne.n	800439e <HAL_RTC_GetTime+0x136>
  if ((nYear % 100U) != 0U)
 8004370:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8004374:	fbb3 f2fe 	udiv	r2, r3, lr
 8004378:	fb0e 3212 	mls	r2, lr, r2, r3
 800437c:	b292      	uxth	r2, r2
 800437e:	b98a      	cbnz	r2, 80043a4 <HAL_RTC_GetTime+0x13c>
  if ((nYear % 400U) == 0U)
 8004380:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8004384:	fbb3 fef2 	udiv	lr, r3, r2
 8004388:	fb02 331e 	mls	r3, r2, lr, r3
 800438c:	b29b      	uxth	r3, r3
          day = 1U;
 800438e:	2b00      	cmp	r3, #0
 8004390:	bf0e      	itee	eq
 8004392:	231d      	moveq	r3, #29
 8004394:	2301      	movne	r3, #1
 8004396:	2403      	movne	r4, #3
 8004398:	e7c1      	b.n	800431e <HAL_RTC_GetTime+0xb6>
      else if (day == 29U)
 800439a:	2b1d      	cmp	r3, #29
 800439c:	d1bf      	bne.n	800431e <HAL_RTC_GetTime+0xb6>
          day = 1U;
 800439e:	2301      	movs	r3, #1
          month++;
 80043a0:	2403      	movs	r4, #3
 80043a2:	e7bc      	b.n	800431e <HAL_RTC_GetTime+0xb6>
          day++;
 80043a4:	231d      	movs	r3, #29
 80043a6:	e7ba      	b.n	800431e <HAL_RTC_GetTime+0xb6>
    sTime->Hours = hours;
 80043a8:	7032      	strb	r2, [r6, #0]
 80043aa:	e7c4      	b.n	8004336 <HAL_RTC_GetTime+0xce>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80043ac:	7830      	ldrb	r0, [r6, #0]
 80043ae:	f7ff fe6e 	bl	800408e <RTC_ByteToBcd2>
 80043b2:	7030      	strb	r0, [r6, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80043b4:	7870      	ldrb	r0, [r6, #1]
 80043b6:	f7ff fe6a 	bl	800408e <RTC_ByteToBcd2>
 80043ba:	7070      	strb	r0, [r6, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80043bc:	78b0      	ldrb	r0, [r6, #2]
 80043be:	f7ff fe66 	bl	800408e <RTC_ByteToBcd2>
 80043c2:	70b0      	strb	r0, [r6, #2]
 80043c4:	e7b9      	b.n	800433a <HAL_RTC_GetTime+0xd2>
 80043c6:	bf00      	nop
 80043c8:	0001517f 	.word	0x0001517f
 80043cc:	00015180 	.word	0x00015180

080043d0 <HAL_RTC_SetDate>:
{
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 80043d4:	4604      	mov	r4, r0
 80043d6:	b348      	cbz	r0, 800442c <HAL_RTC_SetDate+0x5c>
 80043d8:	b341      	cbz	r1, 800442c <HAL_RTC_SetDate+0x5c>
  __HAL_LOCK(hrtc);
 80043da:	7c03      	ldrb	r3, [r0, #16]
 80043dc:	2002      	movs	r0, #2
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d025      	beq.n	800442e <HAL_RTC_SetDate+0x5e>
 80043e2:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043e4:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 80043e6:	7423      	strb	r3, [r4, #16]
  if (Format == RTC_FORMAT_BIN)
 80043e8:	78c8      	ldrb	r0, [r1, #3]
 80043ea:	bb0a      	cbnz	r2, 8004430 <HAL_RTC_SetDate+0x60>
    hrtc->DateToUpdate.Year  = sDate->Year;
 80043ec:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80043ee:	784b      	ldrb	r3, [r1, #1]
 80043f0:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80043f2:	788a      	ldrb	r2, [r1, #2]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80043f4:	7b61      	ldrb	r1, [r4, #13]
 80043f6:	7be0      	ldrb	r0, [r4, #15]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80043f8:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80043fa:	f7ff fe5b 	bl	80040b4 <RTC_WeekDayNum>
 80043fe:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004400:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004402:	4620      	mov	r0, r4
 8004404:	f7ff fe2a 	bl	800405c <RTC_ReadTimeCounter>
  if (hours > 24U)
 8004408:	4b1a      	ldr	r3, [pc, #104]	@ (8004474 <HAL_RTC_SetDate+0xa4>)
 800440a:	4298      	cmp	r0, r3
 800440c:	d92d      	bls.n	800446a <HAL_RTC_SetDate+0x9a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800440e:	4d1a      	ldr	r5, [pc, #104]	@ (8004478 <HAL_RTC_SetDate+0xa8>)
 8004410:	fbb0 f2f5 	udiv	r2, r0, r5
 8004414:	fb05 0512 	mls	r5, r5, r2, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004418:	4620      	mov	r0, r4
 800441a:	4629      	mov	r1, r5
 800441c:	f7ff feaa 	bl	8004174 <RTC_WriteTimeCounter>
 8004420:	4606      	mov	r6, r0
 8004422:	b188      	cbz	r0, 8004448 <HAL_RTC_SetDate+0x78>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004424:	2304      	movs	r3, #4
 8004426:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8004428:	2300      	movs	r3, #0
 800442a:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 800442c:	2001      	movs	r0, #1
}
 800442e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004430:	f7ff fe38 	bl	80040a4 <RTC_Bcd2ToByte>
 8004434:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004436:	7848      	ldrb	r0, [r1, #1]
 8004438:	f7ff fe34 	bl	80040a4 <RTC_Bcd2ToByte>
 800443c:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800443e:	7888      	ldrb	r0, [r1, #2]
 8004440:	f7ff fe30 	bl	80040a4 <RTC_Bcd2ToByte>
 8004444:	4602      	mov	r2, r0
 8004446:	e7d5      	b.n	80043f4 <HAL_RTC_SetDate+0x24>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004448:	4620      	mov	r0, r4
 800444a:	f7ff fe19 	bl	8004080 <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 800444e:	4285      	cmp	r5, r0
 8004450:	d90b      	bls.n	800446a <HAL_RTC_SetDate+0x9a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004452:	f500 31a8 	add.w	r1, r0, #86016	@ 0x15000
 8004456:	f501 71c0 	add.w	r1, r1, #384	@ 0x180
 800445a:	4620      	mov	r0, r4
 800445c:	f7ff fe9e 	bl	800419c <RTC_WriteAlarmCounter>
 8004460:	b118      	cbz	r0, 800446a <HAL_RTC_SetDate+0x9a>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004462:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8004464:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004466:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8004468:	e7e0      	b.n	800442c <HAL_RTC_SetDate+0x5c>
  hrtc->State = HAL_RTC_STATE_READY ;
 800446a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 800446c:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 800446e:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8004470:	7420      	strb	r0, [r4, #16]
  return HAL_OK;
 8004472:	e7dc      	b.n	800442e <HAL_RTC_SetDate+0x5e>
 8004474:	00015f8f 	.word	0x00015f8f
 8004478:	00015180 	.word	0x00015180

0800447c <HAL_RTC_GetDate>:
{
 800447c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800447e:	4616      	mov	r6, r2
  RTC_TimeTypeDef stime = {0U};
 8004480:	2200      	movs	r2, #0
{
 8004482:	460c      	mov	r4, r1
  if ((hrtc == NULL) || (sDate == NULL))
 8004484:	4605      	mov	r5, r0
  RTC_TimeTypeDef stime = {0U};
 8004486:	f8ad 2004 	strh.w	r2, [sp, #4]
 800448a:	f88d 2006 	strb.w	r2, [sp, #6]
  if ((hrtc == NULL) || (sDate == NULL))
 800448e:	b918      	cbnz	r0, 8004498 <HAL_RTC_GetDate+0x1c>
    return HAL_ERROR;
 8004490:	2101      	movs	r1, #1
}
 8004492:	4608      	mov	r0, r1
 8004494:	b003      	add	sp, #12
 8004496:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hrtc == NULL) || (sDate == NULL))
 8004498:	2900      	cmp	r1, #0
 800449a:	d0f9      	beq.n	8004490 <HAL_RTC_GetDate+0x14>
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800449c:	a901      	add	r1, sp, #4
 800449e:	f7ff fee3 	bl	8004268 <HAL_RTC_GetTime>
 80044a2:	4601      	mov	r1, r0
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d1f3      	bne.n	8004490 <HAL_RTC_GetDate+0x14>
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80044a8:	7b2b      	ldrb	r3, [r5, #12]
 80044aa:	7023      	strb	r3, [r4, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80044ac:	7be8      	ldrb	r0, [r5, #15]
 80044ae:	70e0      	strb	r0, [r4, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80044b0:	7b6f      	ldrb	r7, [r5, #13]
 80044b2:	7067      	strb	r7, [r4, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80044b4:	7baa      	ldrb	r2, [r5, #14]
 80044b6:	70a2      	strb	r2, [r4, #2]
  if (Format != RTC_FORMAT_BIN)
 80044b8:	2e00      	cmp	r6, #0
 80044ba:	d0ea      	beq.n	8004492 <HAL_RTC_GetDate+0x16>
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80044bc:	f7ff fde7 	bl	800408e <RTC_ByteToBcd2>
 80044c0:	70e0      	strb	r0, [r4, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80044c2:	4638      	mov	r0, r7
 80044c4:	f7ff fde3 	bl	800408e <RTC_ByteToBcd2>
 80044c8:	7060      	strb	r0, [r4, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80044ca:	4610      	mov	r0, r2
 80044cc:	f7ff fddf 	bl	800408e <RTC_ByteToBcd2>
 80044d0:	70a0      	strb	r0, [r4, #2]
 80044d2:	e7de      	b.n	8004492 <HAL_RTC_GetDate+0x16>

080044d4 <HAL_RTC_WaitForSynchro>:
{
 80044d4:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80044d6:	4604      	mov	r4, r0
 80044d8:	b1a8      	cbz	r0, 8004506 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80044da:	6802      	ldr	r2, [r0, #0]
 80044dc:	6853      	ldr	r3, [r2, #4]
 80044de:	f023 0308 	bic.w	r3, r3, #8
 80044e2:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80044e4:	f7fe fc7a 	bl	8002ddc <HAL_GetTick>
 80044e8:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	071b      	lsls	r3, r3, #28
 80044f0:	d501      	bpl.n	80044f6 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 80044f2:	2000      	movs	r0, #0
}
 80044f4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80044f6:	f7fe fc71 	bl	8002ddc <HAL_GetTick>
 80044fa:	1b40      	subs	r0, r0, r5
 80044fc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004500:	d9f3      	bls.n	80044ea <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8004502:	2003      	movs	r0, #3
 8004504:	e7f6      	b.n	80044f4 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8004506:	2001      	movs	r0, #1
 8004508:	e7f4      	b.n	80044f4 <HAL_RTC_WaitForSynchro+0x20>
	...

0800450c <HAL_RTC_Init>:
{
 800450c:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 800450e:	4604      	mov	r4, r0
 8004510:	b170      	cbz	r0, 8004530 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004512:	7c43      	ldrb	r3, [r0, #17]
 8004514:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004518:	b913      	cbnz	r3, 8004520 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800451a:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 800451c:	f7fe f94c 	bl	80027b8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004520:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004522:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004524:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004526:	f7ff ffd5 	bl	80044d4 <HAL_RTC_WaitForSynchro>
 800452a:	b118      	cbz	r0, 8004534 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800452c:	2304      	movs	r3, #4
 800452e:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8004530:	2001      	movs	r0, #1
}
 8004532:	bd10      	pop	{r4, pc}
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004534:	4620      	mov	r0, r4
 8004536:	f7ff fdee 	bl	8004116 <RTC_EnterInitMode>
 800453a:	2800      	cmp	r0, #0
 800453c:	d1f6      	bne.n	800452c <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800453e:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004540:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004542:	6853      	ldr	r3, [r2, #4]
 8004544:	f023 0307 	bic.w	r3, r3, #7
 8004548:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800454a:	4a12      	ldr	r2, [pc, #72]	@ (8004594 <HAL_RTC_Init+0x88>)
 800454c:	b119      	cbz	r1, 8004556 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800454e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	6313      	str	r3, [r2, #48]	@ 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004556:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004558:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 800455c:	430b      	orrs	r3, r1
 800455e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004560:	6860      	ldr	r0, [r4, #4]
 8004562:	1c43      	adds	r3, r0, #1
 8004564:	d105      	bne.n	8004572 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004566:	2001      	movs	r0, #1
 8004568:	f7ff fd1a 	bl	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 800456c:	2800      	cmp	r0, #0
 800456e:	d0dd      	beq.n	800452c <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8004570:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004578:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800457a:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800457c:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800457e:	4620      	mov	r0, r4
 8004580:	f7ff fde0 	bl	8004144 <RTC_ExitInitMode>
 8004584:	2800      	cmp	r0, #0
 8004586:	d1d1      	bne.n	800452c <HAL_RTC_Init+0x20>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004588:	2301      	movs	r3, #1
 800458a:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800458c:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800458e:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8004590:	e7cf      	b.n	8004532 <HAL_RTC_Init+0x26>
 8004592:	bf00      	nop
 8004594:	40006c00 	.word	0x40006c00

08004598 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004598:	4770      	bx	lr
	...

0800459c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800459c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d120      	bne.n	80045e6 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	2302      	movs	r3, #2
 80045a6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045aa:	6803      	ldr	r3, [r0, #0]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b4:	4a0d      	ldr	r2, [pc, #52]	@ (80045ec <HAL_TIM_Base_Start_IT+0x50>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00a      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x34>
 80045ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045be:	d007      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x34>
 80045c0:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x34>
 80045c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d104      	bne.n	80045da <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d6:	2a06      	cmp	r2, #6
 80045d8:	d003      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0x46>
    {
      __HAL_TIM_ENABLE(htim);
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80045e2:	2000      	movs	r0, #0
 80045e4:	4770      	bx	lr
    return HAL_ERROR;
 80045e6:	2001      	movs	r0, #1
}
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40012c00 	.word	0x40012c00

080045f0 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80045f0:	4770      	bx	lr

080045f2 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80045f2:	4770      	bx	lr

080045f4 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80045f4:	4770      	bx	lr

080045f6 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80045f8:	6803      	ldr	r3, [r0, #0]
{
 80045fa:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80045fc:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045fe:	691e      	ldr	r6, [r3, #16]
{
 8004600:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004602:	07b1      	lsls	r1, r6, #30
 8004604:	d50d      	bpl.n	8004622 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004606:	07aa      	lsls	r2, r5, #30
 8004608:	d50b      	bpl.n	8004622 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800460a:	f06f 0202 	mvn.w	r2, #2
 800460e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004610:	2201      	movs	r2, #1
 8004612:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	079b      	lsls	r3, r3, #30
 8004618:	d069      	beq.n	80046ee <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 800461a:	f7ff ffea 	bl	80045f2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461e:	2300      	movs	r3, #0
 8004620:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004622:	0771      	lsls	r1, r6, #29
 8004624:	d510      	bpl.n	8004648 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004626:	076a      	lsls	r2, r5, #29
 8004628:	d50e      	bpl.n	8004648 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800462a:	f06f 0204 	mvn.w	r2, #4
 800462e:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8004630:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004634:	2202      	movs	r2, #2
 8004636:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800463e:	d05c      	beq.n	80046fa <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8004640:	f7ff ffd7 	bl	80045f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004644:	2300      	movs	r3, #0
 8004646:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004648:	0733      	lsls	r3, r6, #28
 800464a:	d50f      	bpl.n	800466c <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800464c:	0728      	lsls	r0, r5, #28
 800464e:	d50d      	bpl.n	800466c <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004650:	f06f 0208 	mvn.w	r2, #8
 8004654:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8004656:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800465a:	2204      	movs	r2, #4
 800465c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	0799      	lsls	r1, r3, #30
 8004662:	d050      	beq.n	8004706 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 8004664:	f7ff ffc5 	bl	80045f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004668:	2300      	movs	r3, #0
 800466a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800466c:	06f2      	lsls	r2, r6, #27
 800466e:	d510      	bpl.n	8004692 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004670:	06eb      	lsls	r3, r5, #27
 8004672:	d50e      	bpl.n	8004692 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004674:	f06f 0210 	mvn.w	r2, #16
 8004678:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 800467a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800467c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800467e:	2208      	movs	r2, #8
 8004680:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004688:	d043      	beq.n	8004712 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800468a:	f7ff ffb2 	bl	80045f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468e:	2300      	movs	r3, #0
 8004690:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004692:	07f0      	lsls	r0, r6, #31
 8004694:	d508      	bpl.n	80046a8 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004696:	07e9      	lsls	r1, r5, #31
 8004698:	d506      	bpl.n	80046a8 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800469a:	f06f 0201 	mvn.w	r2, #1
 800469e:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a4:	f7fe f814 	bl	80026d0 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046a8:	0632      	lsls	r2, r6, #24
 80046aa:	d508      	bpl.n	80046be <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046ac:	062b      	lsls	r3, r5, #24
 80046ae:	d506      	bpl.n	80046be <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046b4:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 80046b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80046ba:	f000 f89e 	bl	80047fa <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046be:	0670      	lsls	r0, r6, #25
 80046c0:	d508      	bpl.n	80046d4 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046c2:	0669      	lsls	r1, r5, #25
 80046c4:	d506      	bpl.n	80046d4 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046ca:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 80046cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80046d0:	f7ff ff91 	bl	80045f6 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046d4:	06b2      	lsls	r2, r6, #26
 80046d6:	d522      	bpl.n	800471e <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046d8:	06ab      	lsls	r3, r5, #26
 80046da:	d520      	bpl.n	800471e <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046dc:	f06f 0220 	mvn.w	r2, #32
 80046e0:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 80046e2:	4620      	mov	r0, r4
}
 80046e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80046ea:	f000 b885 	b.w	80047f8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ee:	f7ff ff7f 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f2:	4620      	mov	r0, r4
 80046f4:	f7ff ff7e 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
 80046f8:	e791      	b.n	800461e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fa:	f7ff ff79 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fe:	4620      	mov	r0, r4
 8004700:	f7ff ff78 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004704:	e79e      	b.n	8004644 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004706:	f7ff ff73 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800470a:	4620      	mov	r0, r4
 800470c:	f7ff ff72 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004710:	e7aa      	b.n	8004668 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004712:	f7ff ff6d 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004716:	4620      	mov	r0, r4
 8004718:	f7ff ff6c 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800471c:	e7b7      	b.n	800468e <HAL_TIM_IRQHandler+0x96>
}
 800471e:	bd70      	pop	{r4, r5, r6, pc}

08004720 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004720:	4a1e      	ldr	r2, [pc, #120]	@ (800479c <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8004722:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004724:	4290      	cmp	r0, r2
 8004726:	d00a      	beq.n	800473e <TIM_Base_SetConfig+0x1e>
 8004728:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800472c:	d007      	beq.n	800473e <TIM_Base_SetConfig+0x1e>
 800472e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004732:	4290      	cmp	r0, r2
 8004734:	d003      	beq.n	800473e <TIM_Base_SetConfig+0x1e>
 8004736:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800473a:	4290      	cmp	r0, r2
 800473c:	d115      	bne.n	800476a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800473e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004744:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004746:	4a15      	ldr	r2, [pc, #84]	@ (800479c <TIM_Base_SetConfig+0x7c>)
 8004748:	4290      	cmp	r0, r2
 800474a:	d00a      	beq.n	8004762 <TIM_Base_SetConfig+0x42>
 800474c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004750:	d007      	beq.n	8004762 <TIM_Base_SetConfig+0x42>
 8004752:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004756:	4290      	cmp	r0, r2
 8004758:	d003      	beq.n	8004762 <TIM_Base_SetConfig+0x42>
 800475a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800475e:	4290      	cmp	r0, r2
 8004760:	d103      	bne.n	800476a <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004762:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004768:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800476a:	694a      	ldr	r2, [r1, #20]
 800476c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004770:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004772:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004774:	688b      	ldr	r3, [r1, #8]
 8004776:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004778:	680b      	ldr	r3, [r1, #0]
 800477a:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800477c:	4b07      	ldr	r3, [pc, #28]	@ (800479c <TIM_Base_SetConfig+0x7c>)
 800477e:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004780:	bf04      	itt	eq
 8004782:	690b      	ldreq	r3, [r1, #16]
 8004784:	6303      	streq	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004786:	2301      	movs	r3, #1
 8004788:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800478a:	6903      	ldr	r3, [r0, #16]
 800478c:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800478e:	bf42      	ittt	mi
 8004790:	6903      	ldrmi	r3, [r0, #16]
 8004792:	f023 0301 	bicmi.w	r3, r3, #1
 8004796:	6103      	strmi	r3, [r0, #16]
  }
}
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40012c00 	.word	0x40012c00

080047a0 <HAL_TIM_Base_Init>:
{
 80047a0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80047a2:	4604      	mov	r4, r0
 80047a4:	b330      	cbz	r0, 80047f4 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80047a6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80047aa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80047ae:	b91b      	cbnz	r3, 80047b8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80047b0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80047b4:	f7ff fef0 	bl	8004598 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ba:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c0:	1d21      	adds	r1, r4, #4
 80047c2:	f7ff ffad 	bl	8004720 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c6:	2301      	movs	r3, #1
  return HAL_OK;
 80047c8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ca:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80047d2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80047d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80047da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047e6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80047ea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80047ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80047f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80047f4:	2001      	movs	r0, #1
 80047f6:	e7fc      	b.n	80047f2 <HAL_TIM_Base_Init+0x52>

080047f8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80047f8:	4770      	bx	lr

080047fa <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80047fa:	4770      	bx	lr

080047fc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047fc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	f102 030c 	add.w	r3, r2, #12
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	320c      	adds	r2, #12
 800480c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004810:	6802      	ldr	r2, [r0, #0]
 8004812:	2900      	cmp	r1, #0
 8004814:	d1f2      	bne.n	80047fc <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	f102 0314 	add.w	r3, r2, #20
 800481a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	f102 0c14 	add.w	ip, r2, #20
 8004826:	e84c 3100 	strex	r1, r3, [ip]
 800482a:	2900      	cmp	r1, #0
 800482c:	d1f3      	bne.n	8004816 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800482e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004830:	2b01      	cmp	r3, #1
 8004832:	d10b      	bne.n	800484c <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	f102 030c 	add.w	r3, r2, #12
 8004838:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	f102 0c0c 	add.w	ip, r2, #12
 8004844:	e84c 3100 	strex	r1, r3, [ip]
 8004848:	2900      	cmp	r1, #0
 800484a:	d1f3      	bne.n	8004834 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800484c:	2320      	movs	r3, #32
 800484e:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004852:	2300      	movs	r3, #0
 8004854:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8004856:	4770      	bx	lr

08004858 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004858:	b510      	push	{r4, lr}
 800485a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800485c:	6803      	ldr	r3, [r0, #0]
 800485e:	68c1      	ldr	r1, [r0, #12]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004866:	430a      	orrs	r2, r1
 8004868:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800486a:	6882      	ldr	r2, [r0, #8]
 800486c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800486e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004870:	4302      	orrs	r2, r0
 8004872:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004874:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8004878:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800487c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800487e:	430a      	orrs	r2, r1
 8004880:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	69a1      	ldr	r1, [r4, #24]
 8004886:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800488a:	430a      	orrs	r2, r1
 800488c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800488e:	4a0e      	ldr	r2, [pc, #56]	@ (80048c8 <UART_SetConfig+0x70>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d115      	bne.n	80048c0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004894:	f7ff fadc 	bl	8003e50 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004898:	2319      	movs	r3, #25
 800489a:	4343      	muls	r3, r0
 800489c:	6862      	ldr	r2, [r4, #4]
 800489e:	6820      	ldr	r0, [r4, #0]
 80048a0:	0092      	lsls	r2, r2, #2
 80048a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80048a6:	2264      	movs	r2, #100	@ 0x64
 80048a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80048ac:	fb02 3311 	mls	r3, r2, r1, r3
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	3332      	adds	r3, #50	@ 0x32
 80048b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80048b8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80048bc:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80048be:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80048c0:	f7ff fab6 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 80048c4:	e7e8      	b.n	8004898 <UART_SetConfig+0x40>
 80048c6:	bf00      	nop
 80048c8:	40013800 	.word	0x40013800

080048cc <HAL_UART_Init>:
{
 80048cc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80048ce:	4604      	mov	r4, r0
 80048d0:	b348      	cbz	r0, 8004926 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80048d2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80048d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80048da:	b91b      	cbnz	r3, 80048e4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80048dc:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80048e0:	f7fd ff88 	bl	80027f4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80048e4:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80048e6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80048e8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80048ec:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80048ee:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80048f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048f4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80048f6:	f7ff ffaf 	bl	8004858 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048fa:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800490c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004914:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004916:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004918:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800491a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800491e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004922:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004924:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004926:	2001      	movs	r0, #1
 8004928:	e7fc      	b.n	8004924 <HAL_UART_Init+0x58>

0800492a <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800492a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800492e:	2b20      	cmp	r3, #32
 8004930:	d110      	bne.n	8004954 <HAL_UART_Transmit_IT+0x2a>
    if ((pData == NULL) || (Size == 0U))
 8004932:	b189      	cbz	r1, 8004958 <HAL_UART_Transmit_IT+0x2e>
 8004934:	b182      	cbz	r2, 8004958 <HAL_UART_Transmit_IT+0x2e>
    huart->TxXferCount = Size;
 8004936:	84c2      	strh	r2, [r0, #38]	@ 0x26
    huart->TxXferSize = Size;
 8004938:	8482      	strh	r2, [r0, #36]	@ 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493a:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800493c:	2221      	movs	r2, #33	@ 0x21
    huart->pTxBuffPtr = pData;
 800493e:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004940:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004942:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004944:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004948:	68ca      	ldr	r2, [r1, #12]
    return HAL_OK;
 800494a:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800494c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004950:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8004952:	4770      	bx	lr
    return HAL_BUSY;
 8004954:	2002      	movs	r0, #2
 8004956:	4770      	bx	lr
      return HAL_ERROR;
 8004958:	2001      	movs	r0, #1
}
 800495a:	4770      	bx	lr

0800495c <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800495c:	4770      	bx	lr

0800495e <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800495e:	4770      	bx	lr

08004960 <UART_DMAAbortOnError>:
{
 8004960:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8004962:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004964:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8004966:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004968:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800496a:	f7ff fff8 	bl	800495e <HAL_UART_ErrorCallback>
}
 800496e:	bd08      	pop	{r3, pc}

08004970 <HAL_UARTEx_RxEventCallback>:
}
 8004970:	4770      	bx	lr

08004972 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004972:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004976:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004978:	2b22      	cmp	r3, #34	@ 0x22
 800497a:	d142      	bne.n	8004a02 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800497c:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800497e:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004980:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004984:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004986:	d13f      	bne.n	8004a08 <UART_Receive_IT.isra.0+0x96>
 8004988:	6901      	ldr	r1, [r0, #16]
 800498a:	2900      	cmp	r1, #0
 800498c:	d13f      	bne.n	8004a0e <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800498e:	6852      	ldr	r2, [r2, #4]
 8004990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004994:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8004998:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800499a:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800499c:	3b01      	subs	r3, #1
 800499e:	b29b      	uxth	r3, r3
 80049a0:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d12d      	bne.n	8004a02 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049a6:	6802      	ldr	r2, [r0, #0]
 80049a8:	68d1      	ldr	r1, [r2, #12]
 80049aa:	f021 0120 	bic.w	r1, r1, #32
 80049ae:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049b0:	68d1      	ldr	r1, [r2, #12]
 80049b2:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80049b6:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049b8:	6951      	ldr	r1, [r2, #20]
 80049ba:	f021 0101 	bic.w	r1, r1, #1
 80049be:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80049c0:	2220      	movs	r2, #32
 80049c2:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049c6:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c8:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80049ca:	2a01      	cmp	r2, #1
 80049cc:	6802      	ldr	r2, [r0, #0]
 80049ce:	d128      	bne.n	8004a22 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d0:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	f102 030c 	add.w	r3, r2, #12
 80049d6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049da:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	f102 0c0c 	add.w	ip, r2, #12
 80049e2:	e84c 3100 	strex	r1, r3, [ip]
 80049e6:	2900      	cmp	r1, #0
 80049e8:	d1f3      	bne.n	80049d2 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049ea:	6813      	ldr	r3, [r2, #0]
 80049ec:	06db      	lsls	r3, r3, #27
 80049ee:	d505      	bpl.n	80049fc <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049f0:	9101      	str	r1, [sp, #4]
 80049f2:	6813      	ldr	r3, [r2, #0]
 80049f4:	9301      	str	r3, [sp, #4]
 80049f6:	6853      	ldr	r3, [r2, #4]
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049fc:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80049fe:	f7ff ffb7 	bl	8004970 <HAL_UARTEx_RxEventCallback>
}
 8004a02:	b003      	add	sp, #12
 8004a04:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a08:	b939      	cbnz	r1, 8004a1a <UART_Receive_IT.isra.0+0xa8>
 8004a0a:	6901      	ldr	r1, [r0, #16]
 8004a0c:	b929      	cbnz	r1, 8004a1a <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a0e:	6852      	ldr	r2, [r2, #4]
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8004a14:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004a16:	3301      	adds	r3, #1
 8004a18:	e7be      	b.n	8004998 <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a1a:	6852      	ldr	r2, [r2, #4]
 8004a1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a20:	e7f7      	b.n	8004a12 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8004a22:	f000 fc13 	bl	800524c <HAL_UART_RxCpltCallback>
 8004a26:	e7ec      	b.n	8004a02 <UART_Receive_IT.isra.0+0x90>

08004a28 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a28:	6803      	ldr	r3, [r0, #0]
{
 8004a2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a2c:	681a      	ldr	r2, [r3, #0]
{
 8004a2e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004a30:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a32:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a34:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004a36:	d108      	bne.n	8004a4a <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a38:	0696      	lsls	r6, r2, #26
 8004a3a:	d568      	bpl.n	8004b0e <HAL_UART_IRQHandler+0xe6>
 8004a3c:	068d      	lsls	r5, r1, #26
 8004a3e:	d566      	bpl.n	8004b0e <HAL_UART_IRQHandler+0xe6>
}
 8004a40:	b002      	add	sp, #8
 8004a42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8004a46:	f7ff bf94 	b.w	8004972 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a4a:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a4e:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 8004a52:	4305      	orrs	r5, r0
 8004a54:	d05b      	beq.n	8004b0e <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a56:	07d6      	lsls	r6, r2, #31
 8004a58:	d505      	bpl.n	8004a66 <HAL_UART_IRQHandler+0x3e>
 8004a5a:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a5c:	bf42      	ittt	mi
 8004a5e:	6c63      	ldrmi	r3, [r4, #68]	@ 0x44
 8004a60:	f043 0301 	orrmi.w	r3, r3, #1
 8004a64:	6463      	strmi	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a66:	0753      	lsls	r3, r2, #29
 8004a68:	d504      	bpl.n	8004a74 <HAL_UART_IRQHandler+0x4c>
 8004a6a:	b118      	cbz	r0, 8004a74 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a6c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004a6e:	f043 0302 	orr.w	r3, r3, #2
 8004a72:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a74:	0796      	lsls	r6, r2, #30
 8004a76:	d504      	bpl.n	8004a82 <HAL_UART_IRQHandler+0x5a>
 8004a78:	b118      	cbz	r0, 8004a82 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a7a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004a7c:	f043 0304 	orr.w	r3, r3, #4
 8004a80:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a82:	0715      	lsls	r5, r2, #28
 8004a84:	d507      	bpl.n	8004a96 <HAL_UART_IRQHandler+0x6e>
 8004a86:	f001 0320 	and.w	r3, r1, #32
 8004a8a:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a8c:	bf1e      	ittt	ne
 8004a8e:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 8004a90:	f043 0308 	orrne.w	r3, r3, #8
 8004a94:	6463      	strne	r3, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a96:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d032      	beq.n	8004b02 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a9c:	0692      	lsls	r2, r2, #26
 8004a9e:	d504      	bpl.n	8004aaa <HAL_UART_IRQHandler+0x82>
 8004aa0:	068b      	lsls	r3, r1, #26
 8004aa2:	d502      	bpl.n	8004aaa <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f7ff ff64 	bl	8004972 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aaa:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8004aac:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aae:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ab0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ab6:	f002 0208 	and.w	r2, r2, #8
 8004aba:	ea53 0502 	orrs.w	r5, r3, r2
 8004abe:	d022      	beq.n	8004b06 <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8004ac0:	f7ff fe9c 	bl	80047fc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac4:	6973      	ldr	r3, [r6, #20]
 8004ac6:	065e      	lsls	r6, r3, #25
 8004ac8:	d518      	bpl.n	8004afc <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	f102 0314 	add.w	r3, r2, #20
 8004ad0:	e853 3f00 	ldrex	r3, [r3]
 8004ad4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	3214      	adds	r2, #20
 8004ada:	e842 3100 	strex	r1, r3, [r2]
 8004ade:	2900      	cmp	r1, #0
 8004ae0:	d1f3      	bne.n	8004aca <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8004ae2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004ae4:	b150      	cbz	r0, 8004afc <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ae6:	4b74      	ldr	r3, [pc, #464]	@ (8004cb8 <HAL_UART_IRQHandler+0x290>)
 8004ae8:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aea:	f7fe fceb 	bl	80034c4 <HAL_DMA_Abort_IT>
 8004aee:	b140      	cbz	r0, 8004b02 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004af0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004af2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 8004af4:	b002      	add	sp, #8
 8004af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004afa:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8004afc:	4620      	mov	r0, r4
 8004afe:	f7ff ff2e 	bl	800495e <HAL_UART_ErrorCallback>
}
 8004b02:	b002      	add	sp, #8
 8004b04:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8004b06:	f7ff ff2a 	bl	800495e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0a:	6465      	str	r5, [r4, #68]	@ 0x44
 8004b0c:	e7f9      	b.n	8004b02 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004b10:	2801      	cmp	r0, #1
 8004b12:	f040 8094 	bne.w	8004c3e <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b16:	06d5      	lsls	r5, r2, #27
 8004b18:	f140 8091 	bpl.w	8004c3e <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b1c:	06c8      	lsls	r0, r1, #27
 8004b1e:	f140 808e 	bpl.w	8004c3e <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b22:	2200      	movs	r2, #0
 8004b24:	9201      	str	r2, [sp, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	9201      	str	r2, [sp, #4]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	9201      	str	r2, [sp, #4]
 8004b2e:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	0652      	lsls	r2, r2, #25
 8004b34:	d54d      	bpl.n	8004bd2 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b36:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8004b38:	680a      	ldr	r2, [r1, #0]
 8004b3a:	6852      	ldr	r2, [r2, #4]
 8004b3c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004b3e:	2a00      	cmp	r2, #0
 8004b40:	d0df      	beq.n	8004b02 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b42:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 8004b44:	4290      	cmp	r0, r2
 8004b46:	d9dc      	bls.n	8004b02 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8004b48:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b4a:	698a      	ldr	r2, [r1, #24]
 8004b4c:	2a20      	cmp	r2, #32
 8004b4e:	d036      	beq.n	8004bbe <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	f103 020c 	add.w	r2, r3, #12
 8004b54:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	f103 000c 	add.w	r0, r3, #12
 8004b60:	e840 2100 	strex	r1, r2, [r0]
 8004b64:	2900      	cmp	r1, #0
 8004b66:	d1f3      	bne.n	8004b50 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	f103 0214 	add.w	r2, r3, #20
 8004b6c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b70:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	f103 0014 	add.w	r0, r3, #20
 8004b78:	e840 2100 	strex	r1, r2, [r0]
 8004b7c:	2900      	cmp	r1, #0
 8004b7e:	d1f3      	bne.n	8004b68 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	f103 0214 	add.w	r2, r3, #20
 8004b84:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8c:	f103 0014 	add.w	r0, r3, #20
 8004b90:	e840 2100 	strex	r1, r2, [r0]
 8004b94:	2900      	cmp	r1, #0
 8004b96:	d1f3      	bne.n	8004b80 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	f103 020c 	add.w	r2, r3, #12
 8004ba4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	f103 000c 	add.w	r0, r3, #12
 8004bb0:	e840 2100 	strex	r1, r2, [r0]
 8004bb4:	2900      	cmp	r1, #0
 8004bb6:	d1f3      	bne.n	8004ba0 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bb8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004bba:	f7fe fc63 	bl	8003484 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bc2:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004bc4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004bc6:	1ac9      	subs	r1, r1, r3
 8004bc8:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7ff fed0 	bl	8004970 <HAL_UARTEx_RxEventCallback>
 8004bd0:	e797      	b.n	8004b02 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bd2:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8004bd4:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bd6:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8004bd8:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bda:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d090      	beq.n	8004b02 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004be0:	1a89      	subs	r1, r1, r2
 8004be2:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004be4:	2900      	cmp	r1, #0
 8004be6:	d08c      	beq.n	8004b02 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	f103 020c 	add.w	r2, r3, #12
 8004bec:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	f103 050c 	add.w	r5, r3, #12
 8004bf8:	e845 2000 	strex	r0, r2, [r5]
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d1f3      	bne.n	8004be8 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	f103 0214 	add.w	r2, r3, #20
 8004c04:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c08:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	f103 0514 	add.w	r5, r3, #20
 8004c10:	e845 2000 	strex	r0, r2, [r5]
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d1f3      	bne.n	8004c00 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1e:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	f103 020c 	add.w	r2, r3, #12
 8004c24:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c28:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	f103 050c 	add.w	r5, r3, #12
 8004c30:	e845 2000 	strex	r0, r2, [r5]
 8004c34:	2800      	cmp	r0, #0
 8004c36:	d1f3      	bne.n	8004c20 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c3c:	e7c5      	b.n	8004bca <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c3e:	0616      	lsls	r6, r2, #24
 8004c40:	d528      	bpl.n	8004c94 <HAL_UART_IRQHandler+0x26c>
 8004c42:	060d      	lsls	r5, r1, #24
 8004c44:	d526      	bpl.n	8004c94 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c46:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8004c4a:	2a21      	cmp	r2, #33	@ 0x21
 8004c4c:	f47f af59 	bne.w	8004b02 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c50:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c52:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c54:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004c58:	d117      	bne.n	8004c8a <HAL_UART_IRQHandler+0x262>
 8004c5a:	6921      	ldr	r1, [r4, #16]
 8004c5c:	b9a9      	cbnz	r1, 8004c8a <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c5e:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004c62:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004c66:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c68:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8004c6a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8004c6c:	3a01      	subs	r2, #1
 8004c6e:	b292      	uxth	r2, r2
 8004c70:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8004c72:	2a00      	cmp	r2, #0
 8004c74:	f47f af45 	bne.w	8004b02 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c7e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c86:	60da      	str	r2, [r3, #12]
 8004c88:	e73b      	b.n	8004b02 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c8a:	1c51      	adds	r1, r2, #1
 8004c8c:	6221      	str	r1, [r4, #32]
 8004c8e:	7812      	ldrb	r2, [r2, #0]
 8004c90:	605a      	str	r2, [r3, #4]
 8004c92:	e7ea      	b.n	8004c6a <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c94:	0650      	lsls	r0, r2, #25
 8004c96:	f57f af34 	bpl.w	8004b02 <HAL_UART_IRQHandler+0xda>
 8004c9a:	064a      	lsls	r2, r1, #25
 8004c9c:	f57f af31 	bpl.w	8004b02 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ca0:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004ca2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ca4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ca8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004caa:	2320      	movs	r3, #32
 8004cac:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8004cb0:	f7ff fe54 	bl	800495c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8004cb4:	e725      	b.n	8004b02 <HAL_UART_IRQHandler+0xda>
 8004cb6:	bf00      	nop
 8004cb8:	08004961 	.word	0x08004961

08004cbc <UART_Start_Receive_IT>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbc:	2300      	movs	r3, #0
  huart->RxXferCount = Size;
 8004cbe:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc0:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cc2:	2322      	movs	r3, #34	@ 0x22
  huart->RxXferSize = Size;
 8004cc4:	8582      	strh	r2, [r0, #44]	@ 0x2c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cc6:	6902      	ldr	r2, [r0, #16]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cc8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->pRxBuffPtr = pData;
 8004ccc:	6281      	str	r1, [r0, #40]	@ 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cce:	6803      	ldr	r3, [r0, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cd0:	b11a      	cbz	r2, 8004cda <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cd8:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004cda:	695a      	ldr	r2, [r3, #20]
}
 8004cdc:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	f042 0220 	orr.w	r2, r2, #32
 8004cea:	60da      	str	r2, [r3, #12]
}
 8004cec:	4770      	bx	lr

08004cee <HAL_UART_Receive_IT>:
{
 8004cee:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cf0:	f890 6042 	ldrb.w	r6, [r0, #66]	@ 0x42
 8004cf4:	2e20      	cmp	r6, #32
 8004cf6:	d106      	bne.n	8004d06 <HAL_UART_Receive_IT+0x18>
    if ((pData == NULL) || (Size == 0U))
 8004cf8:	b141      	cbz	r1, 8004d0c <HAL_UART_Receive_IT+0x1e>
 8004cfa:	b13a      	cbz	r2, 8004d0c <HAL_UART_Receive_IT+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfc:	2400      	movs	r4, #0
 8004cfe:	6304      	str	r4, [r0, #48]	@ 0x30
}
 8004d00:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d02:	f7ff bfdb 	b.w	8004cbc <UART_Start_Receive_IT>
    return HAL_BUSY;
 8004d06:	2002      	movs	r0, #2
}
 8004d08:	bc70      	pop	{r4, r5, r6}
 8004d0a:	4770      	bx	lr
      return HAL_ERROR;
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	e7fb      	b.n	8004d08 <HAL_UART_Receive_IT+0x1a>

08004d10 <StartCANReceiveTask>:
/**
 * @brief  Task to process received CAN messages.
 *         Dispatches frames to the appropriate subsystem queues.
 */
static void StartCANReceiveTask(void *pvParameters)
{
 8004d10:	b500      	push	{lr}
    CanRxMessage_t Msg;

    for (;;)
    {
        /** Wait indefinitely for next CAN Rx message **/
        if (xQueueReceive(xCanRxQueue, &Msg, portMAX_DELAY) == pdTRUE)
 8004d12:	4d11      	ldr	r5, [pc, #68]	@ (8004d58 <StartCANReceiveTask+0x48>)
        {
            switch (Msg.header.StdId)
            {
                case UDS_REQUEST_ID:
                    /** Forward diagnostic requests to diagnostics task **/
                    xQueueSend(xDiagQueue, &Msg.data, 0);
 8004d14:	4e11      	ldr	r6, [pc, #68]	@ (8004d5c <StartCANReceiveTask+0x4c>)
                    break;

                case SENSOR_TEMP_ID:
                case SENSOR_DIST_ID:
                    /** Forward sensor data to control task **/
                    xQueueSend(xSensorQueue, &Msg, 0);
 8004d16:	4c12      	ldr	r4, [pc, #72]	@ (8004d60 <StartCANReceiveTask+0x50>)
{
 8004d18:	b08b      	sub	sp, #44	@ 0x2c
        if (xQueueReceive(xCanRxQueue, &Msg, portMAX_DELAY) == pdTRUE)
 8004d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1e:	6828      	ldr	r0, [r5, #0]
 8004d20:	a901      	add	r1, sp, #4
 8004d22:	f000 fd17 	bl	8005754 <xQueueReceive>
 8004d26:	2801      	cmp	r0, #1
 8004d28:	d1f7      	bne.n	8004d1a <StartCANReceiveTask+0xa>
            switch (Msg.header.StdId)
 8004d2a:	f240 3201 	movw	r2, #769	@ 0x301
 8004d2e:	9b01      	ldr	r3, [sp, #4]
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d807      	bhi.n	8004d44 <StartCANReceiveTask+0x34>
 8004d34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d38:	d3ef      	bcc.n	8004d1a <StartCANReceiveTask+0xa>
                    xQueueSend(xSensorQueue, &Msg, 0);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6820      	ldr	r0, [r4, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	a901      	add	r1, sp, #4
 8004d42:	e006      	b.n	8004d52 <StartCANReceiveTask+0x42>
            switch (Msg.header.StdId)
 8004d44:	f5b3 6ffc 	cmp.w	r3, #2016	@ 0x7e0
 8004d48:	d1e7      	bne.n	8004d1a <StartCANReceiveTask+0xa>
                    xQueueSend(xDiagQueue, &Msg.data, 0);
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6830      	ldr	r0, [r6, #0]
 8004d50:	a908      	add	r1, sp, #32
                    xQueueSend(xSensorQueue, &Msg, 0);
 8004d52:	f000 fbe1 	bl	8005518 <xQueueGenericSend>
                    break;
 8004d56:	e7e0      	b.n	8004d1a <StartCANReceiveTask+0xa>
 8004d58:	20000128 	.word	0x20000128
 8004d5c:	2000013c 	.word	0x2000013c
 8004d60:	20000138 	.word	0x20000138

08004d64 <InitCANReceiveTask>:
/**
 * @brief  Initializes the CAN receive queue and task.
 *         Must be called before vTaskStartScheduler().
 */
void InitCANReceiveTask(void)
{
 8004d64:	b507      	push	{r0, r1, r2, lr}
    /** Create queue to hold up to 20 CAN Rx messages **/
    xCanRxQueue = xQueueCreate(20, sizeof(CanRxMessage_t));
 8004d66:	2200      	movs	r2, #0
 8004d68:	2124      	movs	r1, #36	@ 0x24
 8004d6a:	2014      	movs	r0, #20
 8004d6c:	f000 fbaa 	bl	80054c4 <xQueueGenericCreate>
 8004d70:	4b09      	ldr	r3, [pc, #36]	@ (8004d98 <InitCANReceiveTask+0x34>)

    /** Activate CAN RX FIFO0 interrupt notifications **/
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004d72:	2102      	movs	r1, #2
    xCanRxQueue = xQueueCreate(20, sizeof(CanRxMessage_t));
 8004d74:	6018      	str	r0, [r3, #0]
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004d76:	4809      	ldr	r0, [pc, #36]	@ (8004d9c <InitCANReceiveTask+0x38>)
 8004d78:	f7fe fa11 	bl	800319e <HAL_CAN_ActivateNotification>

    /** Create the CAN receive task at high priority **/
    xTaskCreate(
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2203      	movs	r2, #3
 8004d80:	4907      	ldr	r1, [pc, #28]	@ (8004da0 <InitCANReceiveTask+0x3c>)
 8004d82:	e9cd 2300 	strd	r2, r3, [sp]
 8004d86:	4807      	ldr	r0, [pc, #28]	@ (8004da4 <InitCANReceiveTask+0x40>)
 8004d88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d8c:	f000 fe62 	bl	8005a54 <xTaskCreate>
        256,                        /** Stack size in words **/
        NULL,                       /** No parameters **/
        tskIDLE_PRIORITY + 3,       /** High priority **/
        NULL                        /** No task handle required **/
    );
}
 8004d90:	b003      	add	sp, #12
 8004d92:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d96:	bf00      	nop
 8004d98:	20000128 	.word	0x20000128
 8004d9c:	20000090 	.word	0x20000090
 8004da0:	08006b48 	.word	0x08006b48
 8004da4:	08004d11 	.word	0x08004d11

08004da8 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
 * @brief  CAN Rx ISR: reads pending message and enqueues it
 *         to xCanRxQueue for processing by the receive task.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004da8:	b510      	push	{r4, lr}
    CanRxMessage_t msg;
    BaseType_t xWoken = pdFALSE;
 8004daa:	2400      	movs	r4, #0
{
 8004dac:	b08a      	sub	sp, #40	@ 0x28

    /** Retrieve CAN message from FIFO0 **/
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &msg.header, msg.data);
 8004dae:	4621      	mov	r1, r4
 8004db0:	ab08      	add	r3, sp, #32
 8004db2:	aa01      	add	r2, sp, #4
    BaseType_t xWoken = pdFALSE;
 8004db4:	9400      	str	r4, [sp, #0]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &msg.header, msg.data);
 8004db6:	f7fe f976 	bl	80030a6 <HAL_CAN_GetRxMessage>

    /** Enqueue for deferred processing in task context **/
    xQueueSendFromISR(xCanRxQueue, &msg, &xWoken);
 8004dba:	480a      	ldr	r0, [pc, #40]	@ (8004de4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8004dbc:	4623      	mov	r3, r4
 8004dbe:	466a      	mov	r2, sp
 8004dc0:	6800      	ldr	r0, [r0, #0]
 8004dc2:	a901      	add	r1, sp, #4
 8004dc4:	f000 fc5a 	bl	800567c <xQueueGenericSendFromISR>
    portYIELD_FROM_ISR(xWoken);
 8004dc8:	9b00      	ldr	r3, [sp, #0]
 8004dca:	b14b      	cbz	r3, 8004de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 8004dcc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004dd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
}
 8004de0:	b00a      	add	sp, #40	@ 0x28
 8004de2:	bd10      	pop	{r4, pc}
 8004de4:	20000128 	.word	0x20000128

08004de8 <StartCANTransmitTask>:
/**
 * @brief  Task: dequeues CAN messages and transmits them on the bus.
 * @param  pvParameters  Not used
 */
static void StartCANTransmitTask(void *pvParameters)
{
 8004de8:	b500      	push	{lr}
    uint32_t txMailbox;

    for (;;)
    {
        /** Block until a CAN message is enqueued **/
        if (xQueueReceive(xCanTxQueue, &msg, portMAX_DELAY) == pdTRUE)
 8004dea:	4d0d      	ldr	r5, [pc, #52]	@ (8004e20 <StartCANTransmitTask+0x38>)
            txHeader.IDE   = CAN_ID_STD;     /** Standard frame **/
            txHeader.RTR   = CAN_RTR_DATA;   /** Data frame **/
            txHeader.DLC   = msg.DLC;        /** Payload length **/

            /** Send the CAN frame **/
            HAL_CAN_AddTxMessage(&hcan, &txHeader, msg.Data, &txMailbox);
 8004dec:	4c0d      	ldr	r4, [pc, #52]	@ (8004e24 <StartCANTransmitTask+0x3c>)
{
 8004dee:	b08d      	sub	sp, #52	@ 0x34
        if (xQueueReceive(xCanTxQueue, &msg, portMAX_DELAY) == pdTRUE)
 8004df0:	f04f 32ff 	mov.w	r2, #4294967295
 8004df4:	6828      	ldr	r0, [r5, #0]
 8004df6:	a902      	add	r1, sp, #8
 8004df8:	f000 fcac 	bl	8005754 <xQueueReceive>
 8004dfc:	2801      	cmp	r0, #1
 8004dfe:	d1f7      	bne.n	8004df0 <StartCANTransmitTask+0x8>
            txHeader.StdId = msg.StdId;      /** Standard ID **/
 8004e00:	9b02      	ldr	r3, [sp, #8]
            HAL_CAN_AddTxMessage(&hcan, &txHeader, msg.Data, &txMailbox);
 8004e02:	4620      	mov	r0, r4
            txHeader.StdId = msg.StdId;      /** Standard ID **/
 8004e04:	9306      	str	r3, [sp, #24]
            txHeader.IDE   = CAN_ID_STD;     /** Standard frame **/
 8004e06:	2300      	movs	r3, #0
            txHeader.RTR   = CAN_RTR_DATA;   /** Data frame **/
 8004e08:	e9cd 3308 	strd	r3, r3, [sp, #32]
            txHeader.DLC   = msg.DLC;        /** Payload length **/
 8004e0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
            HAL_CAN_AddTxMessage(&hcan, &txHeader, msg.Data, &txMailbox);
 8004e10:	f10d 020d 	add.w	r2, sp, #13
            txHeader.DLC   = msg.DLC;        /** Payload length **/
 8004e14:	930a      	str	r3, [sp, #40]	@ 0x28
            HAL_CAN_AddTxMessage(&hcan, &txHeader, msg.Data, &txMailbox);
 8004e16:	a906      	add	r1, sp, #24
 8004e18:	ab01      	add	r3, sp, #4
 8004e1a:	f7fe f8fb 	bl	8003014 <HAL_CAN_AddTxMessage>
 8004e1e:	e7e7      	b.n	8004df0 <StartCANTransmitTask+0x8>
 8004e20:	2000012c 	.word	0x2000012c
 8004e24:	20000090 	.word	0x20000090

08004e28 <InitCANTransmitTask>:
/**
 * @brief  Initializes the CAN transmit queue and task.
 *         Call this before vTaskStartScheduler().
 */
void InitCANTransmitTask(void)
{
 8004e28:	b507      	push	{r0, r1, r2, lr}
    /** Create queue for up to 20 CAN messages **/
    xCanTxQueue = xQueueCreate(20, sizeof(CanTxMessage_t));
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2110      	movs	r1, #16
 8004e2e:	2014      	movs	r0, #20
 8004e30:	f000 fb48 	bl	80054c4 <xQueueGenericCreate>
 8004e34:	4b06      	ldr	r3, [pc, #24]	@ (8004e50 <InitCANTransmitTask+0x28>)

    /** Create the CAN Transmit task at high priority **/
    xTaskCreate(
 8004e36:	2203      	movs	r2, #3
    xCanTxQueue = xQueueCreate(20, sizeof(CanTxMessage_t));
 8004e38:	6018      	str	r0, [r3, #0]
    xTaskCreate(
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	4905      	ldr	r1, [pc, #20]	@ (8004e54 <InitCANTransmitTask+0x2c>)
 8004e3e:	e9cd 2300 	strd	r2, r3, [sp]
 8004e42:	4805      	ldr	r0, [pc, #20]	@ (8004e58 <InitCANTransmitTask+0x30>)
 8004e44:	2280      	movs	r2, #128	@ 0x80
 8004e46:	f000 fe05 	bl	8005a54 <xTaskCreate>
        128,                      /** Stack depth (words) **/
        NULL,                     /** No parameters **/
        tskIDLE_PRIORITY + 3,     /** High priority **/
        NULL                      /** No task handle required **/
    );
}
 8004e4a:	b003      	add	sp, #12
 8004e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e50:	2000012c 	.word	0x2000012c
 8004e54:	08006b53 	.word	0x08006b53
 8004e58:	08004de9 	.word	0x08004de9

08004e5c <StartControlTask>:
    CanRxMessage_t RXMsg;
    CanTxMessage_t  TXMsg;
    uint16_t DistInt;

    /** Prepare motor command CAN header **/
    TXMsg.StdId = MOTOR_CMD_ID;
 8004e5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
{
 8004e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e62:	b08f      	sub	sp, #60	@ 0x3c
    TXMsg.StdId = MOTOR_CMD_ID;
 8004e64:	9301      	str	r3, [sp, #4]
    TXMsg.DLC   = 2;  /** direction + speed **/
 8004e66:	2302      	movs	r3, #2
                    if (LatestTemp > TEMP_THRESHOLD)
                    {
                    	/** Trigger DTC if over threshold **/
                    	WriteDTCListToFlash(DTC_OVER_TEMPERATURE);
                    }
                    else if (LatestTemp == 0)
 8004e68:	2700      	movs	r7, #0
        if (xQueueReceive(xSensorQueue, &RXMsg, portMAX_DELAY) == pdTRUE)
 8004e6a:	4d24      	ldr	r5, [pc, #144]	@ (8004efc <StartControlTask+0xa0>)
                    if (LatestTemp > TEMP_THRESHOLD)
 8004e6c:	4e24      	ldr	r6, [pc, #144]	@ (8004f00 <StartControlTask+0xa4>)
    TXMsg.DLC   = 2;  /** direction + speed **/
 8004e6e:	f88d 3008 	strb.w	r3, [sp, #8]
        if (xQueueReceive(xSensorQueue, &RXMsg, portMAX_DELAY) == pdTRUE)
 8004e72:	f04f 32ff 	mov.w	r2, #4294967295
 8004e76:	6828      	ldr	r0, [r5, #0]
 8004e78:	a905      	add	r1, sp, #20
 8004e7a:	f000 fc6b 	bl	8005754 <xQueueReceive>
 8004e7e:	2801      	cmp	r0, #1
 8004e80:	d1f7      	bne.n	8004e72 <StartControlTask+0x16>
            switch (RXMsg.header.StdId)
 8004e82:	9b05      	ldr	r3, [sp, #20]
 8004e84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e88:	d01e      	beq.n	8004ec8 <StartControlTask+0x6c>
 8004e8a:	f240 3201 	movw	r2, #769	@ 0x301
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d1ef      	bne.n	8004e72 <StartControlTask+0x16>
                    }
                    break;

                case SENSOR_DIST_ID:
                    /** Update distance (little-endian) **/
                    DistInt     = (uint16_t)(RXMsg.data[0] | (RXMsg.data[1] << 8));
 8004e92:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
                    LatestDist = (float)DistInt;
 8004e96:	4620      	mov	r0, r4
 8004e98:	f7fd fa10 	bl	80022bc <__aeabi_ui2f>
 8004e9c:	4b19      	ldr	r3, [pc, #100]	@ (8004f04 <StartControlTask+0xa8>)

                    /** Safety: if too close, send STOP command **/
                    if (LatestDist < MOTOR_BLOCK_DISTANCE_CM)
 8004e9e:	2c04      	cmp	r4, #4
                    LatestDist = (float)DistInt;
 8004ea0:	6018      	str	r0, [r3, #0]
                    if (LatestDist < MOTOR_BLOCK_DISTANCE_CM)
 8004ea2:	d8e6      	bhi.n	8004e72 <StartControlTask+0x16>
                    {
                        TXMsg.Data[0] = MOTOR_DIR_STOP;
 8004ea4:	2300      	movs	r3, #0
                        TXMsg.Data[1] = 0U;
                        for (int i = 2; i < 8; i++) { TXMsg.Data[i] = 0U; }
                        xQueueSend(xCanTxQueue, &TXMsg, portMAX_DELAY);
 8004ea6:	4818      	ldr	r0, [pc, #96]	@ (8004f08 <StartControlTask+0xac>)
 8004ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eac:	6800      	ldr	r0, [r0, #0]
 8004eae:	a901      	add	r1, sp, #4
                        TXMsg.Data[0] = MOTOR_DIR_STOP;
 8004eb0:	f88d 3009 	strb.w	r3, [sp, #9]
                        TXMsg.Data[1] = 0U;
 8004eb4:	f8ad 300a 	strh.w	r3, [sp, #10]
                        for (int i = 2; i < 8; i++) { TXMsg.Data[i] = 0U; }
 8004eb8:	9303      	str	r3, [sp, #12]
 8004eba:	f88d 3010 	strb.w	r3, [sp, #16]
                        xQueueSend(xCanTxQueue, &TXMsg, portMAX_DELAY);
 8004ebe:	f000 fb2b 	bl	8005518 <xQueueGenericSend>
                        /** Trigger DTC for obstacle **/
                        WriteDTCListToFlash(DTC_ULTRASONIC_BLOCKED);
 8004ec2:	f24f 2051 	movw	r0, #62033	@ 0xf251
 8004ec6:	e00c      	b.n	8004ee2 <StartControlTask+0x86>
                    LatestTemp = (float)(RXMsg.data[0] | (RXMsg.data[1] << 8));
 8004ec8:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8004ecc:	f7fd f9fa 	bl	80022c4 <__aeabi_i2f>
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8004f0c <StartControlTask+0xb0>)
                    if (LatestTemp > TEMP_THRESHOLD)
 8004ed2:	4631      	mov	r1, r6
                    LatestTemp = (float)(RXMsg.data[0] | (RXMsg.data[1] << 8));
 8004ed4:	6018      	str	r0, [r3, #0]
 8004ed6:	4604      	mov	r4, r0
                    if (LatestTemp > TEMP_THRESHOLD)
 8004ed8:	f7fd fab4 	bl	8002444 <__aeabi_fcmpgt>
 8004edc:	b120      	cbz	r0, 8004ee8 <StartControlTask+0x8c>
                    	WriteDTCListToFlash(DTC_OVER_TEMPERATURE);
 8004ede:	f24f 2061 	movw	r0, #62049	@ 0xf261
                        WriteDTCListToFlash(DTC_ULTRASONIC_BLOCKED);
 8004ee2:	f7fd fd99 	bl	8002a18 <WriteDTCListToFlash>
 8004ee6:	e7c4      	b.n	8004e72 <StartControlTask+0x16>
                    else if (LatestTemp == 0)
 8004ee8:	4639      	mov	r1, r7
 8004eea:	4620      	mov	r0, r4
 8004eec:	f7fd fa82 	bl	80023f4 <__aeabi_fcmpeq>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d0be      	beq.n	8004e72 <StartControlTask+0x16>
                    	WriteDTCListToFlash(DTC_TEMP_SENSOR_FAILURE);
 8004ef4:	f24f 2060 	movw	r0, #62048	@ 0xf260
 8004ef8:	e7f3      	b.n	8004ee2 <StartControlTask+0x86>
 8004efa:	bf00      	nop
 8004efc:	20000138 	.word	0x20000138
 8004f00:	420c0000 	.word	0x420c0000
 8004f04:	20000130 	.word	0x20000130
 8004f08:	2000012c 	.word	0x2000012c
 8004f0c:	20000134 	.word	0x20000134

08004f10 <InitControlTask>:
/**
 * @brief  Initializes the control task and its sensor queue.
 *         Call before vTaskStartScheduler().
 */
void InitControlTask(void)
{
 8004f10:	b507      	push	{r0, r1, r2, lr}
    /** Create queue for sensor CAN messages (up to 10) **/
    xSensorQueue = xQueueCreate(10, sizeof(CanRxMessage_t));
 8004f12:	2200      	movs	r2, #0
 8004f14:	2124      	movs	r1, #36	@ 0x24
 8004f16:	200a      	movs	r0, #10
 8004f18:	f000 fad4 	bl	80054c4 <xQueueGenericCreate>
 8004f1c:	4b07      	ldr	r3, [pc, #28]	@ (8004f3c <InitControlTask+0x2c>)

    /** Create control task at high priority **/
    xTaskCreate(
 8004f1e:	2204      	movs	r2, #4
    xSensorQueue = xQueueCreate(10, sizeof(CanRxMessage_t));
 8004f20:	6018      	str	r0, [r3, #0]
    xTaskCreate(
 8004f22:	2300      	movs	r3, #0
 8004f24:	4906      	ldr	r1, [pc, #24]	@ (8004f40 <InitControlTask+0x30>)
 8004f26:	e9cd 2300 	strd	r2, r3, [sp]
 8004f2a:	4806      	ldr	r0, [pc, #24]	@ (8004f44 <InitControlTask+0x34>)
 8004f2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f30:	f000 fd90 	bl	8005a54 <xTaskCreate>
        256,                           /** Stack depth in words **/
        NULL,                          /** No parameters **/
        tskIDLE_PRIORITY + 4,          /** Very high priority **/
        NULL                           /** No handle required **/
    );
}
 8004f34:	b003      	add	sp, #12
 8004f36:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f3a:	bf00      	nop
 8004f3c:	20000138 	.word	0x20000138
 8004f40:	08006b59 	.word	0x08006b59
 8004f44:	08004e5d 	.word	0x08004e5d

08004f48 <StartDiagnosticsTask>:
 * @brief  Task that processes diagnostic requests directly.
 *         Receives frames from xDiagQueue and handles each service ID.
 */
static void StartDiagnosticsTask(void *pvParameters)
{
    uint8_t Data[8]={0};     /**< Buffer for received CAN frame data **/
 8004f48:	2300      	movs	r3, #0
{
 8004f4a:	b513      	push	{r0, r1, r4, lr}
    uint8_t Data[8]={0};     /**< Buffer for received CAN frame data **/
 8004f4c:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t DLC = 8;     /**< Default Data Length Code (all 8 bytes) **/

    for (;;)
    {
        /** Wait indefinitely for a diagnostic request frame **/
        if (xQueueReceive(xDiagQueue, Data, portMAX_DELAY) == pdTRUE)
 8004f50:	4c1a      	ldr	r4, [pc, #104]	@ (8004fbc <StartDiagnosticsTask+0x74>)
 8004f52:	f04f 32ff 	mov.w	r2, #4294967295
 8004f56:	4669      	mov	r1, sp
 8004f58:	6820      	ldr	r0, [r4, #0]
 8004f5a:	f000 fbfb 	bl	8005754 <xQueueReceive>
 8004f5e:	2801      	cmp	r0, #1
 8004f60:	d1f7      	bne.n	8004f52 <StartDiagnosticsTask+0xa>
        {
            uint8_t SID = Data[0];  /**< Service ID byte **/
 8004f62:	f89d 3000 	ldrb.w	r3, [sp]
            uint8_t Sub = Data[1];  /**< Sub-function byte **/
 8004f66:	f89d 0001 	ldrb.w	r0, [sp, #1]

            switch (SID)
 8004f6a:	2b22      	cmp	r3, #34	@ 0x22
 8004f6c:	d01b      	beq.n	8004fa6 <StartDiagnosticsTask+0x5e>
 8004f6e:	d80a      	bhi.n	8004f86 <StartDiagnosticsTask+0x3e>
 8004f70:	2b14      	cmp	r3, #20
 8004f72:	d01f      	beq.n	8004fb4 <StartDiagnosticsTask+0x6c>
 8004f74:	2b19      	cmp	r3, #25
 8004f76:	d01a      	beq.n	8004fae <StartDiagnosticsTask+0x66>
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d00c      	beq.n	8004f96 <StartDiagnosticsTask+0x4e>
                    ProcessRequestDownload(Sub,Data);
                    break;

                default:
                    /** Unsupported service, send negative response **/
                    SendNegative(SID, NRC_SERVICE_NOT_SUPP);
 8004f7c:	2111      	movs	r1, #17
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fd fdf2 	bl	8002b68 <SendNegative>
                    break;
 8004f84:	e7e5      	b.n	8004f52 <StartDiagnosticsTask+0xa>
            switch (SID)
 8004f86:	2b27      	cmp	r3, #39	@ 0x27
 8004f88:	d008      	beq.n	8004f9c <StartDiagnosticsTask+0x54>
 8004f8a:	2b34      	cmp	r3, #52	@ 0x34
 8004f8c:	d1f6      	bne.n	8004f7c <StartDiagnosticsTask+0x34>
                    ProcessRequestDownload(Sub,Data);
 8004f8e:	4669      	mov	r1, sp
 8004f90:	f7fd fee8 	bl	8002d64 <ProcessRequestDownload>
                    break;
 8004f94:	e7dd      	b.n	8004f52 <StartDiagnosticsTask+0xa>
                    ProcessSessionControl(Sub);
 8004f96:	f7fd fe03 	bl	8002ba0 <ProcessSessionControl>
                    break;
 8004f9a:	e7da      	b.n	8004f52 <StartDiagnosticsTask+0xa>
                    ProcessSecurityAccess(Sub, Data, DLC);
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	4669      	mov	r1, sp
 8004fa0:	f7fd fe18 	bl	8002bd4 <ProcessSecurityAccess>
                    break;
 8004fa4:	e7d5      	b.n	8004f52 <StartDiagnosticsTask+0xa>
                    ProcessReadDataById(Sub, Data);
 8004fa6:	4669      	mov	r1, sp
 8004fa8:	f7fd fe2c 	bl	8002c04 <ProcessReadDataById>
                    break;
 8004fac:	e7d1      	b.n	8004f52 <StartDiagnosticsTask+0xa>
                    ProcessReadDTC(Sub);
 8004fae:	f7fd fe59 	bl	8002c64 <ProcessReadDTC>
                    break;
 8004fb2:	e7ce      	b.n	8004f52 <StartDiagnosticsTask+0xa>
                    ProcessClearDTC(Sub);
 8004fb4:	f7fd feba 	bl	8002d2c <ProcessClearDTC>
                    break;
 8004fb8:	e7cb      	b.n	8004f52 <StartDiagnosticsTask+0xa>
 8004fba:	bf00      	nop
 8004fbc:	2000013c 	.word	0x2000013c

08004fc0 <InitDiagnosticsTask>:
/**
 * @brief  Initialize the diagnostics task and its request queue.
 *         Must be called before starting the FreeRTOS scheduler.
 */
void InitDiagnosticsTask(void)
{
 8004fc0:	b507      	push	{r0, r1, r2, lr}
    /** Create queue for up to 10 diagnostic frames (8 bytes each) **/
    xDiagQueue = xQueueCreate(10, sizeof(uint8_t[8]));
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2108      	movs	r1, #8
 8004fc6:	200a      	movs	r0, #10
 8004fc8:	f000 fa7c 	bl	80054c4 <xQueueGenericCreate>
 8004fcc:	4b07      	ldr	r3, [pc, #28]	@ (8004fec <InitDiagnosticsTask+0x2c>)

    /** Create the Diagnostics task at medium priority **/
    xTaskCreate(
 8004fce:	2202      	movs	r2, #2
    xDiagQueue = xQueueCreate(10, sizeof(uint8_t[8]));
 8004fd0:	6018      	str	r0, [r3, #0]
    xTaskCreate(
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	4906      	ldr	r1, [pc, #24]	@ (8004ff0 <InitDiagnosticsTask+0x30>)
 8004fd6:	e9cd 2300 	strd	r2, r3, [sp]
 8004fda:	4806      	ldr	r0, [pc, #24]	@ (8004ff4 <InitDiagnosticsTask+0x34>)
 8004fdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fe0:	f000 fd38 	bl	8005a54 <xTaskCreate>
        256,                        /**< Stack depth in words **/
        NULL,                       /**< Task parameter       **/
        tskIDLE_PRIORITY + 2,      /**< Task priority        **/
        NULL                        /**< Task handle (unused) **/
    );
}
 8004fe4:	b003      	add	sp, #12
 8004fe6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fea:	bf00      	nop
 8004fec:	2000013c 	.word	0x2000013c
 8004ff0:	08006b61 	.word	0x08006b61
 8004ff4:	08004f49 	.word	0x08004f49

08004ff8 <InitOTAManagerTask>:
/**
 * @brief  Initializes the OTA manager task and its queue.
 *         Call before vTaskStartScheduler().
 */
void InitOTAManagerTask(void)
{
 8004ff8:	b507      	push	{r0, r1, r2, lr}
    /** Create queue for OTA messages (holding one CanRxMessage_t) **/
    xOtaQueue = xQueueCreate(1, sizeof(CanRxMessage_t));
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2124      	movs	r1, #36	@ 0x24
 8004ffe:	2001      	movs	r0, #1
 8005000:	f000 fa60 	bl	80054c4 <xQueueGenericCreate>
 8005004:	4b06      	ldr	r3, [pc, #24]	@ (8005020 <InitOTAManagerTask+0x28>)

    /** Create the OTA manager task at medium priority **/
    xTaskCreate(
 8005006:	2280      	movs	r2, #128	@ 0x80
    xOtaQueue = xQueueCreate(1, sizeof(CanRxMessage_t));
 8005008:	6018      	str	r0, [r3, #0]
    xTaskCreate(
 800500a:	2300      	movs	r3, #0
 800500c:	4905      	ldr	r1, [pc, #20]	@ (8005024 <InitOTAManagerTask+0x2c>)
 800500e:	e9cd 3300 	strd	r3, r3, [sp]
 8005012:	4805      	ldr	r0, [pc, #20]	@ (8005028 <InitOTAManagerTask+0x30>)
 8005014:	f000 fd1e 	bl	8005a54 <xTaskCreate>
        128,                       /** Stack depth in words **/
        NULL,                      /** No parameters **/
        tskIDLE_PRIORITY + 0,      /** height priority **/
        NULL                       /** No task handle required **/
    );
}
 8005018:	b003      	add	sp, #12
 800501a:	f85d fb04 	ldr.w	pc, [sp], #4
 800501e:	bf00      	nop
 8005020:	20000140 	.word	0x20000140
 8005024:	08006b6d 	.word	0x08006b6d
 8005028:	080050d1 	.word	0x080050d1

0800502c <WriteMetadata>:
    }
}

/** Write current metadata to reserved flash page **/
void WriteMetadata(void)
{
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	b086      	sub	sp, #24
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t PageError;

    /* Unlock flash */
    HAL_FLASH_Unlock();
 8005030:	f7fe fab6 	bl	80035a0 <HAL_FLASH_Unlock>

    /** Erase metadata page **/
    EraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005034:	2400      	movs	r4, #0
    EraseInit.PageAddress = FLASH_METADATA_ADDR;
    EraseInit.NbPages     = 1;
 8005036:	2301      	movs	r3, #1
    HAL_FLASHEx_Erase(&EraseInit, &PageError);

    /** Program metadata words **/
    uint32_t Address = FLASH_METADATA_ADDR;
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address,       MetaData.magic);
 8005038:	4d12      	ldr	r5, [pc, #72]	@ (8005084 <WriteMetadata+0x58>)
    EraseInit.NbPages     = 1;
 800503a:	4e13      	ldr	r6, [pc, #76]	@ (8005088 <WriteMetadata+0x5c>)
    HAL_FLASHEx_Erase(&EraseInit, &PageError);
 800503c:	a901      	add	r1, sp, #4
 800503e:	a802      	add	r0, sp, #8
    EraseInit.NbPages     = 1;
 8005040:	e9cd 6304 	strd	r6, r3, [sp, #16]
    EraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005044:	9402      	str	r4, [sp, #8]
    HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8005046:	f7fe fb55 	bl	80036f4 <HAL_FLASHEx_Erase>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address,       MetaData.magic);
 800504a:	4623      	mov	r3, r4
 800504c:	4631      	mov	r1, r6
 800504e:	682a      	ldr	r2, [r5, #0]
 8005050:	2002      	movs	r0, #2
 8005052:	f7fe faeb 	bl	800362c <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 4U,  MetaData.active_app);
 8005056:	4623      	mov	r3, r4
 8005058:	686a      	ldr	r2, [r5, #4]
 800505a:	490c      	ldr	r1, [pc, #48]	@ (800508c <WriteMetadata+0x60>)
 800505c:	2002      	movs	r0, #2
 800505e:	f7fe fae5 	bl	800362c <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 8U,  MetaData.version);
 8005062:	4623      	mov	r3, r4
 8005064:	68aa      	ldr	r2, [r5, #8]
 8005066:	490a      	ldr	r1, [pc, #40]	@ (8005090 <WriteMetadata+0x64>)
 8005068:	2002      	movs	r0, #2
 800506a:	f7fe fadf 	bl	800362c <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 12U, MetaData.pending);
 800506e:	4623      	mov	r3, r4
 8005070:	68ea      	ldr	r2, [r5, #12]
 8005072:	4908      	ldr	r1, [pc, #32]	@ (8005094 <WriteMetadata+0x68>)
 8005074:	2002      	movs	r0, #2
 8005076:	f7fe fad9 	bl	800362c <HAL_FLASH_Program>

    /* Lock flash */
    HAL_FLASH_Lock();
 800507a:	f7fe faa3 	bl	80035c4 <HAL_FLASH_Lock>
}
 800507e:	b006      	add	sp, #24
 8005080:	bd70      	pop	{r4, r5, r6, pc}
 8005082:	bf00      	nop
 8005084:	20000144 	.word	0x20000144
 8005088:	0800f000 	.word	0x0800f000
 800508c:	0800f004 	.word	0x0800f004
 8005090:	0800f008 	.word	0x0800f008
 8005094:	0800f00c 	.word	0x0800f00c

08005098 <ReadMetadata>:
    if (pMetaDataAdd->magic != METADATA_MAGIC)
 8005098:	4b0b      	ldr	r3, [pc, #44]	@ (80050c8 <ReadMetadata+0x30>)
{
 800509a:	b410      	push	{r4}
    if (pMetaDataAdd->magic != METADATA_MAGIC)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	4c0b      	ldr	r4, [pc, #44]	@ (80050cc <ReadMetadata+0x34>)
 80050a0:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 80050a4:	d00a      	beq.n	80050bc <ReadMetadata+0x24>
    	MetaData.active_app = 1U;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f04f 32a5 	mov.w	r2, #2779096485	@ 0xa5a5a5a5
 80050ac:	e9c4 2300 	strd	r2, r3, [r4]
    	MetaData.version = 0U;
 80050b0:	2300      	movs	r3, #0
    	MetaData.pending = 0U;
 80050b2:	e9c4 3302 	strd	r3, r3, [r4, #8]
}
 80050b6:	bc10      	pop	{r4}
        WriteMetadata();
 80050b8:	f7ff bfb8 	b.w	800502c <WriteMetadata>
        memcpy(&MetaData, pMetaDataAdd, sizeof(metadata_t));
 80050bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80050c2:	bc10      	pop	{r4}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	0800f000 	.word	0x0800f000
 80050cc:	20000144 	.word	0x20000144

080050d0 <StartOTAManagerTask>:
{
 80050d0:	b500      	push	{lr}
        if (xQueueReceive(xOtaQueue, &msg, portMAX_DELAY) == pdTRUE)
 80050d2:	4d10      	ldr	r5, [pc, #64]	@ (8005114 <StartOTAManagerTask+0x44>)
{
 80050d4:	b08b      	sub	sp, #44	@ 0x2c
        if (xQueueReceive(xOtaQueue, &msg, portMAX_DELAY) == pdTRUE)
 80050d6:	f04f 32ff 	mov.w	r2, #4294967295
 80050da:	6828      	ldr	r0, [r5, #0]
 80050dc:	a901      	add	r1, sp, #4
 80050de:	f000 fb39 	bl	8005754 <xQueueReceive>
 80050e2:	2801      	cmp	r0, #1
 80050e4:	4604      	mov	r4, r0
 80050e6:	d1f6      	bne.n	80050d6 <StartOTAManagerTask+0x6>
			ReadMetadata(); /** read current metadata **/
 80050e8:	f7ff ffd6 	bl	8005098 <ReadMetadata>
			MetaData.pending = 1U; /** mark update pending **/
 80050ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005118 <StartOTAManagerTask+0x48>)
 80050ee:	60dc      	str	r4, [r3, #12]
			WriteMetadata(); /** write back to flash **/
 80050f0:	f7ff ff9c 	bl	800502c <WriteMetadata>
			vTaskDelay(50);
 80050f4:	2032      	movs	r0, #50	@ 0x32
 80050f6:	f000 ff3d 	bl	8005f74 <vTaskDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80050fa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80050fe:	4907      	ldr	r1, [pc, #28]	@ (800511c <StartOTAManagerTask+0x4c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005100:	4b07      	ldr	r3, [pc, #28]	@ (8005120 <StartOTAManagerTask+0x50>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005102:	68ca      	ldr	r2, [r1, #12]
 8005104:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005108:	4313      	orrs	r3, r2
 800510a:	60cb      	str	r3, [r1, #12]
 800510c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005110:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8005112:	e7fd      	b.n	8005110 <StartOTAManagerTask+0x40>
 8005114:	20000140 	.word	0x20000140
 8005118:	20000144 	.word	0x20000144
 800511c:	e000ed00 	.word	0xe000ed00
 8005120:	05fa0004 	.word	0x05fa0004

08005124 <FreeRTOS_Init>:

#include "TaskHandle.h"

/* Initialize FreeRTOS queues and tasks */
void FreeRTOS_Init(void)
{
 8005124:	b508      	push	{r3, lr}
    InitCANReceiveTask();    /** Receive CAN frames **/
 8005126:	f7ff fe1d 	bl	8004d64 <InitCANReceiveTask>
    InitCANTransmitTask();   /** Transmit CAN frames **/
 800512a:	f7ff fe7d 	bl	8004e28 <InitCANTransmitTask>
    InitControlTask();       /** Sensor processing and motor safety **/
 800512e:	f7ff feef 	bl	8004f10 <InitControlTask>
    InitDiagnosticsTask();   /** UDS diagnostic services **/
 8005132:	f7ff ff45 	bl	8004fc0 <InitDiagnosticsTask>
    InitOTAManagerTask();    /** Manage OTA trigger **/
 8005136:	f7ff ff5f 	bl	8004ff8 <InitOTAManagerTask>
    InitUARTReceiveTask();
}
 800513a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    InitUARTReceiveTask();
 800513e:	f000 b861 	b.w	8005204 <InitUARTReceiveTask>

08005142 <Start_Scheduler>:

void Start_Scheduler(void)
{
    /* Start FreeRTOS scheduler */
    vTaskStartScheduler();
 8005142:	f000 bd6f 	b.w	8005c24 <vTaskStartScheduler>
	...

08005148 <StartUARTReceiveTask>:
 * @brief  Control task: processes sensor data from UART and sends motor commands via UART.
 * @param  pvParameters  Not used
 */
static void StartUARTReceiveTask(void *pvParameters)
{
	uint8_t Msg[4] ={0};
 8005148:	2300      	movs	r3, #0
{
 800514a:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t motorCmdFrame[4];  /* [0..1] = MOTOR_CMD_ID, [2] = direction, [3] = speed */

    for (;;)
    {
        /** Wait for a UART sensor message (4 bytes) **/
        if (xQueueReceive(xUartQueue, Msg, portMAX_DELAY) == pdTRUE)
 800514c:	4d28      	ldr	r5, [pc, #160]	@ (80051f0 <StartUARTReceiveTask+0xa8>)
{
 800514e:	b087      	sub	sp, #28
                        WriteDTCListToFlash(DTC_TEMP_SENSOR_FAILURE);
                    }
                    break;

                case SENSOR_DIST_ID:
                    LatestDist = (float)sensorValue;
 8005150:	4e28      	ldr	r6, [pc, #160]	@ (80051f4 <StartUARTReceiveTask+0xac>)
                        motorCmdFrame[1] = (uint8_t)((MOTOR_CMD_ID >> 8) & 0xFF);
                        motorCmdFrame[2] = MOTOR_DIR_STOP;
                        motorCmdFrame[3] = 0U;

                        /** Send motor command over UART **/
                        HAL_UART_Transmit_IT(&huart2, motorCmdFrame, 4);
 8005152:	4f29      	ldr	r7, [pc, #164]	@ (80051f8 <StartUARTReceiveTask+0xb0>)
	uint8_t Msg[4] ={0};
 8005154:	9300      	str	r3, [sp, #0]
        if (xQueueReceive(xUartQueue, Msg, portMAX_DELAY) == pdTRUE)
 8005156:	f04f 32ff 	mov.w	r2, #4294967295
 800515a:	4669      	mov	r1, sp
 800515c:	6828      	ldr	r0, [r5, #0]
 800515e:	f000 faf9 	bl	8005754 <xQueueReceive>
 8005162:	2801      	cmp	r0, #1
 8005164:	d1f7      	bne.n	8005156 <StartUARTReceiveTask+0xe>
            switch (sensorId)
 8005166:	f240 3201 	movw	r2, #769	@ 0x301
            sensorId    = (uint16_t)(Msg[0] | (Msg[1] << 8));
 800516a:	f9bd 3000 	ldrsh.w	r3, [sp]
            sensorValue = (uint16_t)(Msg[2] | (Msg[3] << 8));
 800516e:	f8bd 4002 	ldrh.w	r4, [sp, #2]
            switch (sensorId)
 8005172:	4293      	cmp	r3, r2
 8005174:	d017      	beq.n	80051a6 <StartUARTReceiveTask+0x5e>
 8005176:	f240 4201 	movw	r2, #1025	@ 0x401
 800517a:	4293      	cmp	r3, r2
 800517c:	d025      	beq.n	80051ca <StartUARTReceiveTask+0x82>
 800517e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005182:	d1e8      	bne.n	8005156 <StartUARTReceiveTask+0xe>
                    LatestTemp = (float)sensorValue;
 8005184:	4620      	mov	r0, r4
 8005186:	f7fd f899 	bl	80022bc <__aeabi_ui2f>
 800518a:	4b1c      	ldr	r3, [pc, #112]	@ (80051fc <StartUARTReceiveTask+0xb4>)
                    if (LatestTemp > TEMP_THRESHOLD)
 800518c:	2c23      	cmp	r4, #35	@ 0x23
                    LatestTemp = (float)sensorValue;
 800518e:	6018      	str	r0, [r3, #0]
                    if (LatestTemp > TEMP_THRESHOLD)
 8005190:	d904      	bls.n	800519c <StartUARTReceiveTask+0x54>
                        WriteDTCListToFlash(DTC_OVER_TEMPERATURE);
 8005192:	f24f 2061 	movw	r0, #62049	@ 0xf261

                        /** Log DTC **/
                        WriteDTCListToFlash(DTC_ULTRASONIC_BLOCKED);
 8005196:	f7fd fc3f 	bl	8002a18 <WriteDTCListToFlash>
 800519a:	e7dc      	b.n	8005156 <StartUARTReceiveTask+0xe>
                    else if (LatestTemp == 0)
 800519c:	2c00      	cmp	r4, #0
 800519e:	d1da      	bne.n	8005156 <StartUARTReceiveTask+0xe>
                        WriteDTCListToFlash(DTC_TEMP_SENSOR_FAILURE);
 80051a0:	f24f 2060 	movw	r0, #62048	@ 0xf260
 80051a4:	e7f7      	b.n	8005196 <StartUARTReceiveTask+0x4e>
                    LatestDist = (float)sensorValue;
 80051a6:	4620      	mov	r0, r4
 80051a8:	f7fd f888 	bl	80022bc <__aeabi_ui2f>
                    if (LatestDist < MOTOR_BLOCK_DISTANCE_CM)
 80051ac:	2c04      	cmp	r4, #4
                    LatestDist = (float)sensorValue;
 80051ae:	6030      	str	r0, [r6, #0]
                    if (LatestDist < MOTOR_BLOCK_DISTANCE_CM)
 80051b0:	d8d1      	bhi.n	8005156 <StartUARTReceiveTask+0xe>
                        HAL_UART_Transmit_IT(&huart2, motorCmdFrame, 4);
 80051b2:	2204      	movs	r2, #4
                        motorCmdFrame[0] = (uint8_t)(MOTOR_CMD_ID & 0xFF);
 80051b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
                        HAL_UART_Transmit_IT(&huart2, motorCmdFrame, 4);
 80051b8:	4638      	mov	r0, r7
 80051ba:	eb0d 0102 	add.w	r1, sp, r2
                        motorCmdFrame[0] = (uint8_t)(MOTOR_CMD_ID & 0xFF);
 80051be:	9301      	str	r3, [sp, #4]
                        HAL_UART_Transmit_IT(&huart2, motorCmdFrame, 4);
 80051c0:	f7ff fbb3 	bl	800492a <HAL_UART_Transmit_IT>
                        WriteDTCListToFlash(DTC_ULTRASONIC_BLOCKED);
 80051c4:	f24f 2051 	movw	r0, #62033	@ 0xf251
 80051c8:	e7e5      	b.n	8005196 <StartUARTReceiveTask+0x4e>
                    }
                    break;

                case SPEED_ID:
                	SpeedValue = sensorValue;
                    TXMsg.StdId = SPEED_ID;
 80051ca:	9302      	str	r3, [sp, #8]
                    TXMsg.DLC   = 2;
 80051cc:	2302      	movs	r3, #2
                    TXMsg.Data[0] = (uint8_t)(SpeedValue & 0xFF);
                    TXMsg.Data[1] = (uint8_t)((SpeedValue >> 8) & 0xFF);
                    xQueueSend(xCanTxQueue, &TXMsg, portMAX_DELAY);
 80051ce:	480c      	ldr	r0, [pc, #48]	@ (8005200 <StartUARTReceiveTask+0xb8>)
                    TXMsg.DLC   = 2;
 80051d0:	f88d 300c 	strb.w	r3, [sp, #12]
                    TXMsg.Data[0] = (uint8_t)(SpeedValue & 0xFF);
 80051d4:	f88d 400d 	strb.w	r4, [sp, #13]
                    xQueueSend(xCanTxQueue, &TXMsg, portMAX_DELAY);
 80051d8:	2300      	movs	r3, #0
                    TXMsg.Data[1] = (uint8_t)((SpeedValue >> 8) & 0xFF);
 80051da:	0a24      	lsrs	r4, r4, #8
                    xQueueSend(xCanTxQueue, &TXMsg, portMAX_DELAY);
 80051dc:	f04f 32ff 	mov.w	r2, #4294967295
 80051e0:	a902      	add	r1, sp, #8
 80051e2:	6800      	ldr	r0, [r0, #0]
                    TXMsg.Data[1] = (uint8_t)((SpeedValue >> 8) & 0xFF);
 80051e4:	f88d 400e 	strb.w	r4, [sp, #14]
                    xQueueSend(xCanTxQueue, &TXMsg, portMAX_DELAY);
 80051e8:	f000 f996 	bl	8005518 <xQueueGenericSend>

                    break;
 80051ec:	e7b3      	b.n	8005156 <StartUARTReceiveTask+0xe>
 80051ee:	bf00      	nop
 80051f0:	20000158 	.word	0x20000158
 80051f4:	20000130 	.word	0x20000130
 80051f8:	20000034 	.word	0x20000034
 80051fc:	20000134 	.word	0x20000134
 8005200:	2000012c 	.word	0x2000012c

08005204 <InitUARTReceiveTask>:
/**
 * @brief  Initializes the UART receive queue and task.
 *         Must be called before vTaskStartScheduler().
 */
void InitUARTReceiveTask(void)
{
 8005204:	b507      	push	{r0, r1, r2, lr}
    /** Create queue to hold up to 20 UART Rx messages **/
	xUartQueue = xQueueCreate(20, 4);
 8005206:	2200      	movs	r2, #0
 8005208:	2104      	movs	r1, #4
 800520a:	2014      	movs	r0, #20
 800520c:	f000 f95a 	bl	80054c4 <xQueueGenericCreate>
 8005210:	4b09      	ldr	r3, [pc, #36]	@ (8005238 <InitUARTReceiveTask+0x34>)

    /** Activate UART RX interrupt notifications **/
    HAL_UART_Receive_IT(&huart2, RXMsg, 4);
 8005212:	2204      	movs	r2, #4
	xUartQueue = xQueueCreate(20, 4);
 8005214:	6018      	str	r0, [r3, #0]
    HAL_UART_Receive_IT(&huart2, RXMsg, 4);
 8005216:	4909      	ldr	r1, [pc, #36]	@ (800523c <InitUARTReceiveTask+0x38>)
 8005218:	4809      	ldr	r0, [pc, #36]	@ (8005240 <InitUARTReceiveTask+0x3c>)
 800521a:	f7ff fd68 	bl	8004cee <HAL_UART_Receive_IT>

    /** Create the CAN receive task at high priority **/
    xTaskCreate(
 800521e:	2300      	movs	r3, #0
 8005220:	2203      	movs	r2, #3
 8005222:	4908      	ldr	r1, [pc, #32]	@ (8005244 <InitUARTReceiveTask+0x40>)
 8005224:	e9cd 2300 	strd	r2, r3, [sp]
 8005228:	4807      	ldr	r0, [pc, #28]	@ (8005248 <InitUARTReceiveTask+0x44>)
 800522a:	2280      	movs	r2, #128	@ 0x80
 800522c:	f000 fc12 	bl	8005a54 <xTaskCreate>
        128,                        /** Stack size in words **/
        NULL,                       /** No parameters **/
        tskIDLE_PRIORITY + 3,       /** High priority **/
        NULL                        /** No task handle required **/
    );
}
 8005230:	b003      	add	sp, #12
 8005232:	f85d fb04 	ldr.w	pc, [sp], #4
 8005236:	bf00      	nop
 8005238:	20000158 	.word	0x20000158
 800523c:	20000154 	.word	0x20000154
 8005240:	20000034 	.word	0x20000034
 8005244:	08006b74 	.word	0x08006b74
 8005248:	08005149 	.word	0x08005149

0800524c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800524c:	b507      	push	{r0, r1, r2, lr}
    if (huart->Instance == USART2)
 800524e:	4b12      	ldr	r3, [pc, #72]	@ (8005298 <HAL_UART_RxCpltCallback+0x4c>)
 8005250:	6802      	ldr	r2, [r0, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d11c      	bne.n	8005290 <HAL_UART_RxCpltCallback+0x44>
    {
        BaseType_t xWoken = pdFALSE;
 8005256:	2300      	movs	r3, #0

        /** Enqueue for deferred processing in task context **/
        xQueueSendFromISR(xUartQueue, RXMsg, &xWoken);
 8005258:	4810      	ldr	r0, [pc, #64]	@ (800529c <HAL_UART_RxCpltCallback+0x50>)
 800525a:	4911      	ldr	r1, [pc, #68]	@ (80052a0 <HAL_UART_RxCpltCallback+0x54>)
 800525c:	aa01      	add	r2, sp, #4
 800525e:	6800      	ldr	r0, [r0, #0]
        BaseType_t xWoken = pdFALSE;
 8005260:	9301      	str	r3, [sp, #4]
        xQueueSendFromISR(xUartQueue, RXMsg, &xWoken);
 8005262:	f000 fa0b 	bl	800567c <xQueueGenericSendFromISR>

        /* Restart UART receive interrupt */
        HAL_UART_Receive_IT(&huart2, RXMsg, 4);
 8005266:	2204      	movs	r2, #4
 8005268:	490d      	ldr	r1, [pc, #52]	@ (80052a0 <HAL_UART_RxCpltCallback+0x54>)
 800526a:	480e      	ldr	r0, [pc, #56]	@ (80052a4 <HAL_UART_RxCpltCallback+0x58>)
 800526c:	f7ff fd3f 	bl	8004cee <HAL_UART_Receive_IT>
        //HAL_Delay(500);
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8005270:	2120      	movs	r1, #32
 8005272:	480d      	ldr	r0, [pc, #52]	@ (80052a8 <HAL_UART_RxCpltCallback+0x5c>)
 8005274:	f7fe fb6f 	bl	8003956 <HAL_GPIO_TogglePin>

        portYIELD_FROM_ISR(xWoken);
 8005278:	9b01      	ldr	r3, [sp, #4]
 800527a:	b14b      	cbz	r3, 8005290 <HAL_UART_RxCpltCallback+0x44>
 800527c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005280:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005284:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	f3bf 8f6f 	isb	sy
    }
}
 8005290:	b003      	add	sp, #12
 8005292:	f85d fb04 	ldr.w	pc, [sp], #4
 8005296:	bf00      	nop
 8005298:	40004400 	.word	0x40004400
 800529c:	20000158 	.word	0x20000158
 80052a0:	20000154 	.word	0x20000154
 80052a4:	20000034 	.word	0x20000034
 80052a8:	40010c00 	.word	0x40010c00

080052ac <vListInitialise>:

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052ac:	f04f 32ff 	mov.w	r2, #4294967295
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b0:	f100 0308 	add.w	r3, r0, #8

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b8:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052ba:	6103      	str	r3, [r0, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052c0:	4770      	bx	lr

080052c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052c6:	4770      	bx	lr

080052c8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80052c8:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052ca:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80052cc:	1c63      	adds	r3, r4, #1
 80052ce:	d10a      	bne.n	80052e6 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80052d0:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052d6:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80052d8:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 80052da:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 80052dc:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 80052de:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 80052e0:	3301      	adds	r3, #1
 80052e2:	6003      	str	r3, [r0, #0]
}
 80052e4:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052e6:	f100 0208 	add.w	r2, r0, #8
 80052ea:	4613      	mov	r3, r2
 80052ec:	6852      	ldr	r2, [r2, #4]
 80052ee:	6815      	ldr	r5, [r2, #0]
 80052f0:	42a5      	cmp	r5, r4
 80052f2:	d9fa      	bls.n	80052ea <vListInsert+0x22>
 80052f4:	e7ed      	b.n	80052d2 <vListInsert+0xa>

080052f6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80052f6:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052f8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80052fc:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052fe:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005300:	6859      	ldr	r1, [r3, #4]
 8005302:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005304:	bf08      	it	eq
 8005306:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005308:	2200      	movs	r2, #0
 800530a:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	3a01      	subs	r2, #1
 8005310:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005312:	6818      	ldr	r0, [r3, #0]
}
 8005314:	4770      	bx	lr

08005316 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005316:	b510      	push	{r4, lr}
 8005318:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800531a:	f001 f9bb 	bl	8006694 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800531e:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8005320:	f001 f9d8 	bl	80066d4 <vPortExitCritical>

    return xReturn;
}
 8005324:	fab4 f084 	clz	r0, r4
 8005328:	0940      	lsrs	r0, r0, #5
 800532a:	bd10      	pop	{r4, pc}

0800532c <prvCopyDataToQueue>:
{
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	4616      	mov	r6, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005330:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8005332:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005334:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005336:	b942      	cbnz	r2, 800534a <prvCopyDataToQueue+0x1e>
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005338:	6806      	ldr	r6, [r0, #0]
 800533a:	b99e      	cbnz	r6, 8005364 <prvCopyDataToQueue+0x38>
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800533c:	6880      	ldr	r0, [r0, #8]
 800533e:	f000 ff83 	bl	8006248 <xTaskPriorityDisinherit>
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005342:	60a6      	str	r6, [r4, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005344:	3501      	adds	r5, #1
 8005346:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8005348:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
 800534a:	b96e      	cbnz	r6, 8005368 <prvCopyDataToQueue+0x3c>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800534c:	6840      	ldr	r0, [r0, #4]
 800534e:	f001 fbc3 	bl	8006ad8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005352:	6863      	ldr	r3, [r4, #4]
 8005354:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005356:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005358:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800535a:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800535c:	4293      	cmp	r3, r2
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800535e:	bf24      	itt	cs
 8005360:	6823      	ldrcs	r3, [r4, #0]
 8005362:	6063      	strcs	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
 8005364:	2000      	movs	r0, #0
 8005366:	e7ed      	b.n	8005344 <prvCopyDataToQueue+0x18>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005368:	68c0      	ldr	r0, [r0, #12]
 800536a:	f001 fbb5 	bl	8006ad8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800536e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005370:	68e3      	ldr	r3, [r4, #12]
 8005372:	4251      	negs	r1, r2
 8005374:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005376:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005378:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800537a:	4293      	cmp	r3, r2
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800537c:	bf3e      	ittt	cc
 800537e:	68a3      	ldrcc	r3, [r4, #8]
 8005380:	185b      	addcc	r3, r3, r1
 8005382:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 8005384:	2e02      	cmp	r6, #2
 8005386:	d1ed      	bne.n	8005364 <prvCopyDataToQueue+0x38>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005388:	b10d      	cbz	r5, 800538e <prvCopyDataToQueue+0x62>
                --uxMessagesWaiting;
 800538a:	3d01      	subs	r5, #1
 800538c:	e7ea      	b.n	8005364 <prvCopyDataToQueue+0x38>
    BaseType_t xReturn = pdFALSE;
 800538e:	4628      	mov	r0, r5
 8005390:	e7d8      	b.n	8005344 <prvCopyDataToQueue+0x18>

08005392 <prvCopyDataFromQueue>:
{
 8005392:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005394:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8005396:	4608      	mov	r0, r1
 8005398:	b410      	push	{r4}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800539a:	b162      	cbz	r2, 80053b6 <prvCopyDataFromQueue+0x24>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800539c:	68dc      	ldr	r4, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800539e:	6899      	ldr	r1, [r3, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053a0:	4414      	add	r4, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053a2:	428c      	cmp	r4, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053a4:	bf28      	it	cs
 80053a6:	6819      	ldrcs	r1, [r3, #0]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053a8:	60dc      	str	r4, [r3, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053aa:	bf28      	it	cs
 80053ac:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053ae:	68d9      	ldr	r1, [r3, #12]
}
 80053b0:	bc10      	pop	{r4}
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053b2:	f001 bb91 	b.w	8006ad8 <memcpy>
}
 80053b6:	bc10      	pop	{r4}
 80053b8:	4770      	bx	lr

080053ba <prvUnlockQueue>:
{
 80053ba:	b570      	push	{r4, r5, r6, lr}
 80053bc:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 80053be:	f001 f969 	bl	8006694 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 80053c2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053c6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
        int8_t cTxLock = pxQueue->cTxLock;
 80053ca:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80053cc:	2d00      	cmp	r5, #0
 80053ce:	dc14      	bgt.n	80053fa <prvUnlockQueue+0x40>
        pxQueue->cTxLock = queueUNLOCKED;
 80053d0:	23ff      	movs	r3, #255	@ 0xff
 80053d2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 80053d6:	f001 f97d 	bl	80066d4 <vPortExitCritical>
    taskENTER_CRITICAL();
 80053da:	f001 f95b 	bl	8006694 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 80053de:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053e2:	f104 0610 	add.w	r6, r4, #16
        int8_t cRxLock = pxQueue->cRxLock;
 80053e6:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80053e8:	2d00      	cmp	r5, #0
 80053ea:	dc12      	bgt.n	8005412 <prvUnlockQueue+0x58>
        pxQueue->cRxLock = queueUNLOCKED;
 80053ec:	23ff      	movs	r3, #255	@ 0xff
 80053ee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80053f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 80053f6:	f001 b96d 	b.w	80066d4 <vPortExitCritical>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0e7      	beq.n	80053d0 <prvUnlockQueue+0x16>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005400:	4630      	mov	r0, r6
 8005402:	f000 fe5d 	bl	80060c0 <xTaskRemoveFromEventList>
 8005406:	b108      	cbz	r0, 800540c <prvUnlockQueue+0x52>
                        vTaskMissedYield();
 8005408:	f000 ff08 	bl	800621c <vTaskMissedYield>
            --cTxLock;
 800540c:	3d01      	subs	r5, #1
 800540e:	b26d      	sxtb	r5, r5
 8005410:	e7dc      	b.n	80053cc <prvUnlockQueue+0x12>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005412:	6923      	ldr	r3, [r4, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0e9      	beq.n	80053ec <prvUnlockQueue+0x32>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005418:	4630      	mov	r0, r6
 800541a:	f000 fe51 	bl	80060c0 <xTaskRemoveFromEventList>
 800541e:	b108      	cbz	r0, 8005424 <prvUnlockQueue+0x6a>
                    vTaskMissedYield();
 8005420:	f000 fefc 	bl	800621c <vTaskMissedYield>
                --cRxLock;
 8005424:	3d01      	subs	r5, #1
 8005426:	b26d      	sxtb	r5, r5
 8005428:	e7de      	b.n	80053e8 <prvUnlockQueue+0x2e>

0800542a <xQueueGenericReset>:
{
 800542a:	b570      	push	{r4, r5, r6, lr}
 800542c:	460e      	mov	r6, r1
    configASSERT( pxQueue );
 800542e:	4604      	mov	r4, r0
 8005430:	b940      	cbnz	r0, 8005444 <xQueueGenericReset+0x1a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	e7fe      	b.n	8005442 <xQueueGenericReset+0x18>
        ( pxQueue->uxLength >= 1U ) &&
 8005444:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8005446:	b3a5      	cbz	r5, 80054b2 <xQueueGenericReset+0x88>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005448:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800544a:	fba3 3505 	umull	r3, r5, r3, r5
 800544e:	bb85      	cbnz	r5, 80054b2 <xQueueGenericReset+0x88>
        taskENTER_CRITICAL();
 8005450:	f001 f920 	bl	8006694 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005454:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8005458:	434b      	muls	r3, r1
 800545a:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800545c:	63a5      	str	r5, [r4, #56]	@ 0x38
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800545e:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005460:	1a5b      	subs	r3, r3, r1
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005462:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005464:	441a      	add	r2, r3
            pxQueue->cRxLock = queueUNLOCKED;
 8005466:	23ff      	movs	r3, #255	@ 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005468:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 800546a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800546e:	60e2      	str	r2, [r4, #12]
            pxQueue->cTxLock = queueUNLOCKED;
 8005470:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
            if( xNewQueue == pdFALSE )
 8005474:	b9a6      	cbnz	r6, 80054a0 <xQueueGenericReset+0x76>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005476:	6923      	ldr	r3, [r4, #16]
 8005478:	b173      	cbz	r3, 8005498 <xQueueGenericReset+0x6e>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800547a:	f104 0010 	add.w	r0, r4, #16
 800547e:	f000 fe1f 	bl	80060c0 <xTaskRemoveFromEventList>
 8005482:	b148      	cbz	r0, 8005498 <xQueueGenericReset+0x6e>
                        queueYIELD_IF_USING_PREEMPTION();
 8005484:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005488:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800548c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8005498:	f001 f91c 	bl	80066d4 <vPortExitCritical>
}
 800549c:	2001      	movs	r0, #1
 800549e:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054a0:	f104 0010 	add.w	r0, r4, #16
 80054a4:	f7ff ff02 	bl	80052ac <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054a8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80054ac:	f7ff fefe 	bl	80052ac <vListInitialise>
 80054b0:	e7f2      	b.n	8005498 <xQueueGenericReset+0x6e>
 80054b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
    configASSERT( xReturn != pdFAIL );
 80054c2:	e7fe      	b.n	80054c2 <xQueueGenericReset+0x98>

080054c4 <xQueueGenericCreate>:
    {
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	460d      	mov	r5, r1
 80054c8:	4617      	mov	r7, r2
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80054ca:	4606      	mov	r6, r0
 80054cc:	b1d8      	cbz	r0, 8005506 <xQueueGenericCreate+0x42>
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80054ce:	fba1 2300 	umull	r2, r3, r1, r0
 80054d2:	b9c3      	cbnz	r3, 8005506 <xQueueGenericCreate+0x42>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80054d4:	4348      	muls	r0, r1
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80054d6:	f110 0f51 	cmn.w	r0, #81	@ 0x51
 80054da:	d814      	bhi.n	8005506 <xQueueGenericCreate+0x42>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80054dc:	3050      	adds	r0, #80	@ 0x50
 80054de:	f001 fa05 	bl	80068ec <pvPortMalloc>
            if( pxNewQueue != NULL )
 80054e2:	4604      	mov	r4, r0
 80054e4:	b158      	cbz	r0, 80054fe <xQueueGenericCreate+0x3a>
    if( uxItemSize == ( UBaseType_t ) 0 )
 80054e6:	b165      	cbz	r5, 8005502 <xQueueGenericCreate+0x3e>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054e8:	f100 0350 	add.w	r3, r0, #80	@ 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054ec:	2101      	movs	r1, #1
 80054ee:	4620      	mov	r0, r4
    pxNewQueue->uxItemSize = uxItemSize;
 80054f0:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 80054f4:	6023      	str	r3, [r4, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054f6:	f7ff ff98 	bl	800542a <xQueueGenericReset>
        pxNewQueue->ucQueueType = ucQueueType;
 80054fa:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
    }
 80054fe:	4620      	mov	r0, r4
 8005500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005502:	4603      	mov	r3, r0
 8005504:	e7f2      	b.n	80054ec <xQueueGenericCreate+0x28>
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 8005516:	e7fe      	b.n	8005516 <xQueueGenericCreate+0x52>

08005518 <xQueueGenericSend>:
{
 8005518:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800551c:	460f      	mov	r7, r1
 800551e:	461e      	mov	r6, r3
    configASSERT( pxQueue );
 8005520:	4604      	mov	r4, r0
{
 8005522:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 8005524:	b940      	cbnz	r0, 8005538 <xQueueGenericSend+0x20>
 8005526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	e7fe      	b.n	8005536 <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005538:	b951      	cbnz	r1, 8005550 <xQueueGenericSend+0x38>
 800553a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800553c:	b143      	cbz	r3, 8005550 <xQueueGenericSend+0x38>
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	e7fe      	b.n	800554e <xQueueGenericSend+0x36>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005550:	2e02      	cmp	r6, #2
 8005552:	d10b      	bne.n	800556c <xQueueGenericSend+0x54>
 8005554:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005556:	2b01      	cmp	r3, #1
 8005558:	d008      	beq.n	800556c <xQueueGenericSend+0x54>
 800555a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	e7fe      	b.n	800556a <xQueueGenericSend+0x52>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800556c:	f000 fe5c 	bl	8006228 <xTaskGetSchedulerState>
 8005570:	4605      	mov	r5, r0
 8005572:	b330      	cbz	r0, 80055c2 <xQueueGenericSend+0xaa>
 8005574:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
 8005576:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
 800557a:	f001 f88b 	bl	8006694 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800557e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005580:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005582:	429a      	cmp	r2, r3
 8005584:	d301      	bcc.n	800558a <xQueueGenericSend+0x72>
 8005586:	2e02      	cmp	r6, #2
 8005588:	d127      	bne.n	80055da <xQueueGenericSend+0xc2>
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800558a:	4632      	mov	r2, r6
 800558c:	4639      	mov	r1, r7
 800558e:	4620      	mov	r0, r4
 8005590:	f7ff fecc 	bl	800532c <prvCopyDataToQueue>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005594:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005596:	b11b      	cbz	r3, 80055a0 <xQueueGenericSend+0x88>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005598:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800559c:	f000 fd90 	bl	80060c0 <xTaskRemoveFromEventList>
                    else if( xYieldRequired != pdFALSE )
 80055a0:	b148      	cbz	r0, 80055b6 <xQueueGenericSend+0x9e>
                        queueYIELD_IF_USING_PREEMPTION();
 80055a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80055a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 80055b6:	f001 f88d 	bl	80066d4 <vPortExitCritical>
                return pdPASS;
 80055ba:	2001      	movs	r0, #1
}
 80055bc:	b004      	add	sp, #16
 80055be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055c2:	9b01      	ldr	r3, [sp, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0d6      	beq.n	8005576 <xQueueGenericSend+0x5e>
 80055c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	e7fe      	b.n	80055d8 <xQueueGenericSend+0xc0>
                if( xTicksToWait == ( TickType_t ) 0 )
 80055da:	9b01      	ldr	r3, [sp, #4]
 80055dc:	b91b      	cbnz	r3, 80055e6 <xQueueGenericSend+0xce>
                    taskEXIT_CRITICAL();
 80055de:	f001 f879 	bl	80066d4 <vPortExitCritical>
                    return errQUEUE_FULL;
 80055e2:	2000      	movs	r0, #0
 80055e4:	e7ea      	b.n	80055bc <xQueueGenericSend+0xa4>
                else if( xEntryTimeSet == pdFALSE )
 80055e6:	b915      	cbnz	r5, 80055ee <xQueueGenericSend+0xd6>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80055e8:	a802      	add	r0, sp, #8
 80055ea:	f000 fdcf 	bl	800618c <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 80055ee:	f001 f871 	bl	80066d4 <vPortExitCritical>
        vTaskSuspendAll();
 80055f2:	f000 fb57 	bl	8005ca4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80055f6:	f001 f84d 	bl	8006694 <vPortEnterCritical>
 80055fa:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80055fe:	2bff      	cmp	r3, #255	@ 0xff
 8005600:	bf08      	it	eq
 8005602:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8005606:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800560a:	2bff      	cmp	r3, #255	@ 0xff
 800560c:	bf08      	it	eq
 800560e:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8005612:	f001 f85f 	bl	80066d4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005616:	a901      	add	r1, sp, #4
 8005618:	a802      	add	r0, sp, #8
 800561a:	f000 fdc3 	bl	80061a4 <xTaskCheckForTimeOut>
 800561e:	bb38      	cbnz	r0, 8005670 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005620:	f001 f838 	bl	8006694 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005624:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005626:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005628:	429a      	cmp	r2, r3
 800562a:	d10e      	bne.n	800564a <xQueueGenericSend+0x132>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 800562c:	f001 f852 	bl	80066d4 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005630:	9901      	ldr	r1, [sp, #4]
 8005632:	f104 0010 	add.w	r0, r4, #16
 8005636:	f000 fcfb 	bl	8006030 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800563a:	4620      	mov	r0, r4
 800563c:	f7ff febd 	bl	80053ba <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8005640:	f000 fbfa 	bl	8005e38 <xTaskResumeAll>
 8005644:	b148      	cbz	r0, 800565a <xQueueGenericSend+0x142>
 8005646:	2501      	movs	r5, #1
 8005648:	e797      	b.n	800557a <xQueueGenericSend+0x62>
    taskEXIT_CRITICAL();
 800564a:	f001 f843 	bl	80066d4 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 800564e:	4620      	mov	r0, r4
 8005650:	f7ff feb3 	bl	80053ba <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005654:	f000 fbf0 	bl	8005e38 <xTaskResumeAll>
 8005658:	e7f5      	b.n	8005646 <xQueueGenericSend+0x12e>
                    portYIELD_WITHIN_API();
 800565a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800565e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005662:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	e7ea      	b.n	8005646 <xQueueGenericSend+0x12e>
            prvUnlockQueue( pxQueue );
 8005670:	4620      	mov	r0, r4
 8005672:	f7ff fea2 	bl	80053ba <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005676:	f000 fbdf 	bl	8005e38 <xTaskResumeAll>
            return errQUEUE_FULL;
 800567a:	e7b2      	b.n	80055e2 <xQueueGenericSend+0xca>

0800567c <xQueueGenericSendFromISR>:
{
 800567c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005680:	4689      	mov	r9, r1
 8005682:	4617      	mov	r7, r2
 8005684:	461e      	mov	r6, r3
    configASSERT( pxQueue );
 8005686:	4604      	mov	r4, r0
 8005688:	b940      	cbnz	r0, 800569c <xQueueGenericSendFromISR+0x20>
 800568a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	e7fe      	b.n	800569a <xQueueGenericSendFromISR+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800569c:	b951      	cbnz	r1, 80056b4 <xQueueGenericSendFromISR+0x38>
 800569e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80056a0:	b143      	cbz	r3, 80056b4 <xQueueGenericSendFromISR+0x38>
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	e7fe      	b.n	80056b2 <xQueueGenericSendFromISR+0x36>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056b4:	2e02      	cmp	r6, #2
 80056b6:	d10b      	bne.n	80056d0 <xQueueGenericSendFromISR+0x54>
 80056b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d008      	beq.n	80056d0 <xQueueGenericSendFromISR+0x54>
 80056be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	e7fe      	b.n	80056ce <xQueueGenericSendFromISR+0x52>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056d0:	f001 f8b8 	bl	8006844 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80056d4:	f3ef 8811 	mrs	r8, BASEPRI
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056e8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80056ea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d301      	bcc.n	80056f4 <xQueueGenericSendFromISR+0x78>
 80056f0:	2e02      	cmp	r6, #2
 80056f2:	d12d      	bne.n	8005750 <xQueueGenericSendFromISR+0xd4>
            const int8_t cTxLock = pxQueue->cTxLock;
 80056f4:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056f8:	4632      	mov	r2, r6
 80056fa:	4649      	mov	r1, r9
 80056fc:	4620      	mov	r0, r4
            const int8_t cTxLock = pxQueue->cTxLock;
 80056fe:	b26d      	sxtb	r5, r5
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005700:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005702:	f7ff fe13 	bl	800532c <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 8005706:	1c6b      	adds	r3, r5, #1
 8005708:	d10e      	bne.n	8005728 <xQueueGenericSendFromISR+0xac>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800570a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800570c:	b13b      	cbz	r3, 800571e <xQueueGenericSendFromISR+0xa2>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800570e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005712:	f000 fcd5 	bl	80060c0 <xTaskRemoveFromEventList>
 8005716:	b110      	cbz	r0, 800571e <xQueueGenericSendFromISR+0xa2>
                            if( pxHigherPriorityTaskWoken != NULL )
 8005718:	b10f      	cbz	r7, 800571e <xQueueGenericSendFromISR+0xa2>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800571a:	2301      	movs	r3, #1
 800571c:	603b      	str	r3, [r7, #0]
            xReturn = pdPASS;
 800571e:	2001      	movs	r0, #1
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005720:	f388 8811 	msr	BASEPRI, r8
}
 8005724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8005728:	f000 faca 	bl	8005cc0 <uxTaskGetNumberOfTasks>
 800572c:	4285      	cmp	r5, r0
 800572e:	d2f6      	bcs.n	800571e <xQueueGenericSendFromISR+0xa2>
 8005730:	2d7f      	cmp	r5, #127	@ 0x7f
 8005732:	d108      	bne.n	8005746 <xQueueGenericSendFromISR+0xca>
        __asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	e7fe      	b.n	8005744 <xQueueGenericSendFromISR+0xc8>
 8005746:	3501      	adds	r5, #1
 8005748:	b26d      	sxtb	r5, r5
 800574a:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800574e:	e7e6      	b.n	800571e <xQueueGenericSendFromISR+0xa2>
            xReturn = errQUEUE_FULL;
 8005750:	2000      	movs	r0, #0
 8005752:	e7e5      	b.n	8005720 <xQueueGenericSendFromISR+0xa4>

08005754 <xQueueReceive>:
{
 8005754:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005758:	460e      	mov	r6, r1
    configASSERT( ( pxQueue ) );
 800575a:	4604      	mov	r4, r0
{
 800575c:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 800575e:	b940      	cbnz	r0, 8005772 <xQueueReceive+0x1e>
 8005760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	e7fe      	b.n	8005770 <xQueueReceive+0x1c>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005772:	b951      	cbnz	r1, 800578a <xQueueReceive+0x36>
 8005774:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005776:	b143      	cbz	r3, 800578a <xQueueReceive+0x36>
 8005778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	e7fe      	b.n	8005788 <xQueueReceive+0x34>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800578a:	f000 fd4d 	bl	8006228 <xTaskGetSchedulerState>
 800578e:	4605      	mov	r5, r0
 8005790:	b318      	cbz	r0, 80057da <xQueueReceive+0x86>
 8005792:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
 8005794:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
 8005798:	f000 ff7c 	bl	8006694 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800579c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800579e:	b347      	cbz	r7, 80057f2 <xQueueReceive+0x9e>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057a0:	4631      	mov	r1, r6
 80057a2:	4620      	mov	r0, r4
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057a4:	3f01      	subs	r7, #1
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057a6:	f7ff fdf4 	bl	8005392 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057aa:	63a7      	str	r7, [r4, #56]	@ 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ac:	6923      	ldr	r3, [r4, #16]
 80057ae:	b173      	cbz	r3, 80057ce <xQueueReceive+0x7a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057b0:	f104 0010 	add.w	r0, r4, #16
 80057b4:	f000 fc84 	bl	80060c0 <xTaskRemoveFromEventList>
 80057b8:	b148      	cbz	r0, 80057ce <xQueueReceive+0x7a>
                        queueYIELD_IF_USING_PREEMPTION();
 80057ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80057be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 80057ce:	f000 ff81 	bl	80066d4 <vPortExitCritical>
                return pdPASS;
 80057d2:	2001      	movs	r0, #1
}
 80057d4:	b004      	add	sp, #16
 80057d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057da:	9b01      	ldr	r3, [sp, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0d9      	beq.n	8005794 <xQueueReceive+0x40>
 80057e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	e7fe      	b.n	80057f0 <xQueueReceive+0x9c>
                if( xTicksToWait == ( TickType_t ) 0 )
 80057f2:	9b01      	ldr	r3, [sp, #4]
 80057f4:	b91b      	cbnz	r3, 80057fe <xQueueReceive+0xaa>
                    taskEXIT_CRITICAL();
 80057f6:	f000 ff6d 	bl	80066d4 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 80057fa:	2000      	movs	r0, #0
 80057fc:	e7ea      	b.n	80057d4 <xQueueReceive+0x80>
                else if( xEntryTimeSet == pdFALSE )
 80057fe:	b915      	cbnz	r5, 8005806 <xQueueReceive+0xb2>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005800:	a802      	add	r0, sp, #8
 8005802:	f000 fcc3 	bl	800618c <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8005806:	f000 ff65 	bl	80066d4 <vPortExitCritical>
        vTaskSuspendAll();
 800580a:	f000 fa4b 	bl	8005ca4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800580e:	f000 ff41 	bl	8006694 <vPortEnterCritical>
 8005812:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005816:	2bff      	cmp	r3, #255	@ 0xff
 8005818:	bf08      	it	eq
 800581a:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 800581e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005822:	2bff      	cmp	r3, #255	@ 0xff
 8005824:	bf08      	it	eq
 8005826:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 800582a:	f000 ff53 	bl	80066d4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800582e:	a901      	add	r1, sp, #4
 8005830:	a802      	add	r0, sp, #8
 8005832:	f000 fcb7 	bl	80061a4 <xTaskCheckForTimeOut>
 8005836:	bb00      	cbnz	r0, 800587a <xQueueReceive+0x126>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005838:	4620      	mov	r0, r4
 800583a:	f7ff fd6c 	bl	8005316 <prvIsQueueEmpty>
 800583e:	b1b0      	cbz	r0, 800586e <xQueueReceive+0x11a>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005840:	9901      	ldr	r1, [sp, #4]
 8005842:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005846:	f000 fbf3 	bl	8006030 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800584a:	4620      	mov	r0, r4
 800584c:	f7ff fdb5 	bl	80053ba <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8005850:	f000 faf2 	bl	8005e38 <xTaskResumeAll>
 8005854:	b948      	cbnz	r0, 800586a <xQueueReceive+0x116>
                    portYIELD_WITHIN_API();
 8005856:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800585a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800585e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	2501      	movs	r5, #1
 800586c:	e794      	b.n	8005798 <xQueueReceive+0x44>
                prvUnlockQueue( pxQueue );
 800586e:	4620      	mov	r0, r4
 8005870:	f7ff fda3 	bl	80053ba <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005874:	f000 fae0 	bl	8005e38 <xTaskResumeAll>
 8005878:	e7f7      	b.n	800586a <xQueueReceive+0x116>
            prvUnlockQueue( pxQueue );
 800587a:	4620      	mov	r0, r4
 800587c:	f7ff fd9d 	bl	80053ba <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005880:	f000 fada 	bl	8005e38 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005884:	4620      	mov	r0, r4
 8005886:	f7ff fd46 	bl	8005316 <prvIsQueueEmpty>
 800588a:	2800      	cmp	r0, #0
 800588c:	d0ed      	beq.n	800586a <xQueueReceive+0x116>
 800588e:	e7b4      	b.n	80057fa <xQueueReceive+0xa6>

08005890 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005890:	b570      	push	{r4, r5, r6, lr}
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;

        configASSERT( xQueue );
 8005892:	b940      	cbnz	r0, 80058a6 <vQueueAddToRegistry+0x16>
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	e7fe      	b.n	80058a4 <vQueueAddToRegistry+0x14>

        if( pcQueueName != NULL )
 80058a6:	b1b9      	cbz	r1, 80058d8 <vQueueAddToRegistry+0x48>
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80058a8:	2300      	movs	r3, #0
 80058aa:	4a0c      	ldr	r2, [pc, #48]	@ (80058dc <vQueueAddToRegistry+0x4c>)
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058ac:	461c      	mov	r4, r3
 80058ae:	4615      	mov	r5, r2
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80058b0:	6856      	ldr	r6, [r2, #4]
 80058b2:	4286      	cmp	r6, r0
 80058b4:	d104      	bne.n	80058c0 <vQueueAddToRegistry+0x30>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80058b6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3

        if( pxEntryToWrite != NULL )
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
            pxEntryToWrite->xHandle = xQueue;
 80058ba:	e9c3 1000 	strd	r1, r0, [r3]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80058be:	e00b      	b.n	80058d8 <vQueueAddToRegistry+0x48>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80058c0:	b91b      	cbnz	r3, 80058ca <vQueueAddToRegistry+0x3a>
 80058c2:	6816      	ldr	r6, [r2, #0]
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80058c4:	2e00      	cmp	r6, #0
 80058c6:	bf08      	it	eq
 80058c8:	4613      	moveq	r3, r2
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058ca:	3401      	adds	r4, #1
 80058cc:	2c04      	cmp	r4, #4
 80058ce:	f102 0208 	add.w	r2, r2, #8
 80058d2:	d1ed      	bne.n	80058b0 <vQueueAddToRegistry+0x20>
        if( pxEntryToWrite != NULL )
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f0      	bne.n	80058ba <vQueueAddToRegistry+0x2a>
    }
 80058d8:	bd70      	pop	{r4, r5, r6, pc}
 80058da:	bf00      	nop
 80058dc:	2000015c 	.word	0x2000015c

080058e0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80058e0:	b570      	push	{r4, r5, r6, lr}
 80058e2:	4604      	mov	r4, r0
 80058e4:	460d      	mov	r5, r1
 80058e6:	4616      	mov	r6, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80058e8:	f000 fed4 	bl	8006694 <vPortEnterCritical>
 80058ec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80058f0:	2bff      	cmp	r3, #255	@ 0xff
 80058f2:	bf04      	itt	eq
 80058f4:	2300      	moveq	r3, #0
 80058f6:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 80058fa:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80058fe:	2bff      	cmp	r3, #255	@ 0xff
 8005900:	bf04      	itt	eq
 8005902:	2300      	moveq	r3, #0
 8005904:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8005908:	f000 fee4 	bl	80066d4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800590c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800590e:	b92b      	cbnz	r3, 800591c <vQueueWaitForMessageRestricted+0x3c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005910:	4632      	mov	r2, r6
 8005912:	4629      	mov	r1, r5
 8005914:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005918:	f000 fba4 	bl	8006064 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800591c:	4620      	mov	r0, r4
    }
 800591e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvUnlockQueue( pxQueue );
 8005922:	f7ff bd4a 	b.w	80053ba <prvUnlockQueue>
	...

08005928 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800592a:	4b20      	ldr	r3, [pc, #128]	@ (80059ac <prvAddCurrentTaskToDelayedList+0x84>)
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800592c:	4c20      	ldr	r4, [pc, #128]	@ (80059b0 <prvAddCurrentTaskToDelayedList+0x88>)
{
 800592e:	4606      	mov	r6, r0
    const TickType_t xConstTickCount = xTickCount;
 8005930:	681d      	ldr	r5, [r3, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005932:	6820      	ldr	r0, [r4, #0]
{
 8005934:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005936:	3004      	adds	r0, #4
 8005938:	f7ff fcdd 	bl	80052f6 <uxListRemove>
 800593c:	b940      	cbnz	r0, 8005950 <prvAddCurrentTaskToDelayedList+0x28>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	491c      	ldr	r1, [pc, #112]	@ (80059b4 <prvAddCurrentTaskToDelayedList+0x8c>)
 8005942:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8005944:	2201      	movs	r2, #1
 8005946:	680b      	ldr	r3, [r1, #0]
 8005948:	4082      	lsls	r2, r0
 800594a:	ea23 0302 	bic.w	r3, r3, r2
 800594e:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005950:	1c73      	adds	r3, r6, #1
 8005952:	d113      	bne.n	800597c <prvAddCurrentTaskToDelayedList+0x54>
 8005954:	b197      	cbz	r7, 800597c <prvAddCurrentTaskToDelayedList+0x54>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005956:	4b18      	ldr	r3, [pc, #96]	@ (80059b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005958:	6821      	ldr	r1, [r4, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	608a      	str	r2, [r1, #8]
 800595e:	6890      	ldr	r0, [r2, #8]
 8005960:	6821      	ldr	r1, [r4, #0]
 8005962:	60c8      	str	r0, [r1, #12]
 8005964:	6821      	ldr	r1, [r4, #0]
 8005966:	3104      	adds	r1, #4
 8005968:	6041      	str	r1, [r0, #4]
 800596a:	6821      	ldr	r1, [r4, #0]
 800596c:	3104      	adds	r1, #4
 800596e:	6091      	str	r1, [r2, #8]
 8005970:	6822      	ldr	r2, [r4, #0]
 8005972:	6153      	str	r3, [r2, #20]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	3201      	adds	r2, #1
 8005978:	601a      	str	r2, [r3, #0]

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800597a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	19ad      	adds	r5, r5, r6
 8005980:	605d      	str	r5, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005982:	d307      	bcc.n	8005994 <prvAddCurrentTaskToDelayedList+0x6c>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005984:	4b0d      	ldr	r3, [pc, #52]	@ (80059bc <prvAddCurrentTaskToDelayedList+0x94>)
 8005986:	6818      	ldr	r0, [r3, #0]
 8005988:	6821      	ldr	r1, [r4, #0]
}
 800598a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800598e:	3104      	adds	r1, #4
 8005990:	f7ff bc9a 	b.w	80052c8 <vListInsert>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005994:	4b0a      	ldr	r3, [pc, #40]	@ (80059c0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	6821      	ldr	r1, [r4, #0]
 800599a:	3104      	adds	r1, #4
 800599c:	f7ff fc94 	bl	80052c8 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80059a0:	4b08      	ldr	r3, [pc, #32]	@ (80059c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	42aa      	cmp	r2, r5
                    xNextTaskUnblockTime = xTimeToWake;
 80059a6:	bf88      	it	hi
 80059a8:	601d      	strhi	r5, [r3, #0]
}
 80059aa:	e7e6      	b.n	800597a <prvAddCurrentTaskToDelayedList+0x52>
 80059ac:	200001a0 	.word	0x200001a0
 80059b0:	20000290 	.word	0x20000290
 80059b4:	2000019c 	.word	0x2000019c
 80059b8:	200001a8 	.word	0x200001a8
 80059bc:	200001e8 	.word	0x200001e8
 80059c0:	200001ec 	.word	0x200001ec
 80059c4:	20000184 	.word	0x20000184

080059c8 <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c8:	4a06      	ldr	r2, [pc, #24]	@ (80059e4 <prvResetNextTaskUnblockTime+0x1c>)
 80059ca:	6813      	ldr	r3, [r2, #0]
 80059cc:	6819      	ldr	r1, [r3, #0]
 80059ce:	4b06      	ldr	r3, [pc, #24]	@ (80059e8 <prvResetNextTaskUnblockTime+0x20>)
 80059d0:	b919      	cbnz	r1, 80059da <prvResetNextTaskUnblockTime+0x12>
        xNextTaskUnblockTime = portMAX_DELAY;
 80059d2:	f04f 32ff 	mov.w	r2, #4294967295
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059d6:	601a      	str	r2, [r3, #0]
}
 80059d8:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	68d2      	ldr	r2, [r2, #12]
 80059de:	6812      	ldr	r2, [r2, #0]
 80059e0:	e7f9      	b.n	80059d6 <prvResetNextTaskUnblockTime+0xe>
 80059e2:	bf00      	nop
 80059e4:	200001ec 	.word	0x200001ec
 80059e8:	20000184 	.word	0x20000184

080059ec <prvIdleTask>:
{
 80059ec:	b580      	push	{r7, lr}
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059ee:	4c15      	ldr	r4, [pc, #84]	@ (8005a44 <prvIdleTask+0x58>)
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f0:	4f15      	ldr	r7, [pc, #84]	@ (8005a48 <prvIdleTask+0x5c>)
                --uxCurrentNumberOfTasks;
 80059f2:	4e16      	ldr	r6, [pc, #88]	@ (8005a4c <prvIdleTask+0x60>)
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	b973      	cbnz	r3, 8005a16 <prvIdleTask+0x2a>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059f8:	4b15      	ldr	r3, [pc, #84]	@ (8005a50 <prvIdleTask+0x64>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d9f8      	bls.n	80059f2 <prvIdleTask+0x6>
                taskYIELD();
 8005a00:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a08:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	e7ed      	b.n	80059f2 <prvIdleTask+0x6>
            taskENTER_CRITICAL();
 8005a16:	f000 fe3d 	bl	8006694 <vPortEnterCritical>
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	68dd      	ldr	r5, [r3, #12]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a1e:	1d28      	adds	r0, r5, #4
 8005a20:	f7ff fc69 	bl	80052f6 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005a24:	6833      	ldr	r3, [r6, #0]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	6033      	str	r3, [r6, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	6023      	str	r3, [r4, #0]
            taskEXIT_CRITICAL();
 8005a30:	f000 fe50 	bl	80066d4 <vPortExitCritical>
            vPortFreeStack( pxTCB->pxStack );
 8005a34:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8005a36:	f000 ffe9 	bl	8006a0c <vPortFree>
            vPortFree( pxTCB );
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 ffe6 	bl	8006a0c <vPortFree>
    }
 8005a40:	e7d8      	b.n	80059f4 <prvIdleTask+0x8>
 8005a42:	bf00      	nop
 8005a44:	200001bc 	.word	0x200001bc
 8005a48:	200001c0 	.word	0x200001c0
 8005a4c:	200001a4 	.word	0x200001a4
 8005a50:	20000218 	.word	0x20000218

08005a54 <xTaskCreate>:
    {
 8005a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a58:	0095      	lsls	r5, r2, #2
    {
 8005a5a:	4681      	mov	r9, r0
 8005a5c:	e9dd 8b0a 	ldrd	r8, fp, [sp, #40]	@ 0x28
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a60:	4628      	mov	r0, r5
    {
 8005a62:	460e      	mov	r6, r1
 8005a64:	469a      	mov	sl, r3
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a66:	f000 ff41 	bl	80068ec <pvPortMalloc>
            if( pxStack != NULL )
 8005a6a:	4607      	mov	r7, r0
 8005a6c:	b918      	cbnz	r0, 8005a76 <xTaskCreate+0x22>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a6e:	f04f 30ff 	mov.w	r0, #4294967295
    }
 8005a72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a76:	2058      	movs	r0, #88	@ 0x58
 8005a78:	f000 ff38 	bl	80068ec <pvPortMalloc>
                if( pxNewTCB != NULL )
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	f000 80b2 	beq.w	8005be8 <xTaskCreate+0x194>
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005a84:	2258      	movs	r2, #88	@ 0x58
 8005a86:	2100      	movs	r1, #0
 8005a88:	f000 fffa 	bl	8006a80 <memset>
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a8c:	4638      	mov	r0, r7
                    pxNewTCB->pxStack = pxStack;
 8005a8e:	6327      	str	r7, [r4, #48]	@ 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a90:	462a      	mov	r2, r5
 8005a92:	21a5      	movs	r1, #165	@ 0xa5
 8005a94:	f000 fff4 	bl	8006a80 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a98:	6b27      	ldr	r7, [r4, #48]	@ 0x30
    if( pcName != NULL )
 8005a9a:	b16e      	cbz	r6, 8005ab8 <xTaskCreate+0x64>
 8005a9c:	1e73      	subs	r3, r6, #1
 8005a9e:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8005aa2:	3609      	adds	r6, #9
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005aa4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8005aa8:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
 8005aac:	b109      	cbz	r1, 8005ab2 <xTaskCreate+0x5e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005aae:	42b3      	cmp	r3, r6
 8005ab0:	d1f8      	bne.n	8005aa4 <xTaskCreate+0x50>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005ab8:	f1b8 0f05 	cmp.w	r8, #5
 8005abc:	d908      	bls.n	8005ad0 <xTaskCreate+0x7c>
 8005abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	e7fe      	b.n	8005ace <xTaskCreate+0x7a>
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ad0:	1d26      	adds	r6, r4, #4
 8005ad2:	4630      	mov	r0, r6
    pxNewTCB->uxPriority = uxPriority;
 8005ad4:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 8005ad8:	f8c4 8048 	str.w	r8, [r4, #72]	@ 0x48
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005adc:	f7ff fbf1 	bl	80052c2 <vListInitialiseItem>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ae0:	3d04      	subs	r5, #4
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ae2:	f104 0018 	add.w	r0, r4, #24
 8005ae6:	f7ff fbec 	bl	80052c2 <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aea:	f1c8 0306 	rsb	r3, r8, #6
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005aee:	1978      	adds	r0, r7, r5
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005af0:	4652      	mov	r2, sl
 8005af2:	4649      	mov	r1, r9
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005af4:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af6:	61a3      	str	r3, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005af8:	6264      	str	r4, [r4, #36]	@ 0x24
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005afa:	f020 0007 	bic.w	r0, r0, #7
 8005afe:	f000 fd9f 	bl	8006640 <pxPortInitialiseStack>
 8005b02:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8005b04:	f1bb 0f00 	cmp.w	fp, #0
 8005b08:	d001      	beq.n	8005b0e <xTaskCreate+0xba>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b0a:	f8cb 4000 	str.w	r4, [fp]
    taskENTER_CRITICAL();
 8005b0e:	f000 fdc1 	bl	8006694 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8005b12:	4b37      	ldr	r3, [pc, #220]	@ (8005bf0 <xTaskCreate+0x19c>)
        if( pxCurrentTCB == NULL )
 8005b14:	4f37      	ldr	r7, [pc, #220]	@ (8005bf4 <xTaskCreate+0x1a0>)
        uxCurrentNumberOfTasks++;
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8005bf8 <xTaskCreate+0x1a4>
 8005b1c:	3201      	adds	r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
        if( pxCurrentTCB == NULL )
 8005b20:	683d      	ldr	r5, [r7, #0]
 8005b22:	2d00      	cmp	r5, #0
 8005b24:	d155      	bne.n	8005bd2 <xTaskCreate+0x17e>
            pxCurrentTCB = pxNewTCB;
 8005b26:	603c      	str	r4, [r7, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d11f      	bne.n	8005b6e <xTaskCreate+0x11a>
 8005b2e:	46c1      	mov	r9, r8
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b30:	4648      	mov	r0, r9
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b32:	3501      	adds	r5, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b34:	f7ff fbba 	bl	80052ac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b38:	2d06      	cmp	r5, #6
 8005b3a:	f109 0914 	add.w	r9, r9, #20
 8005b3e:	d1f7      	bne.n	8005b30 <xTaskCreate+0xdc>
    vListInitialise( &xDelayedTaskList1 );
 8005b40:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 8005bfc <xTaskCreate+0x1a8>
    vListInitialise( &xDelayedTaskList2 );
 8005b44:	4d2e      	ldr	r5, [pc, #184]	@ (8005c00 <xTaskCreate+0x1ac>)
    vListInitialise( &xDelayedTaskList1 );
 8005b46:	4648      	mov	r0, r9
 8005b48:	f7ff fbb0 	bl	80052ac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f7ff fbad 	bl	80052ac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005b52:	482c      	ldr	r0, [pc, #176]	@ (8005c04 <xTaskCreate+0x1b0>)
 8005b54:	f7ff fbaa 	bl	80052ac <vListInitialise>
        vListInitialise( &xTasksWaitingTermination );
 8005b58:	482b      	ldr	r0, [pc, #172]	@ (8005c08 <xTaskCreate+0x1b4>)
 8005b5a:	f7ff fba7 	bl	80052ac <vListInitialise>
        vListInitialise( &xSuspendedTaskList );
 8005b5e:	482b      	ldr	r0, [pc, #172]	@ (8005c0c <xTaskCreate+0x1b8>)
 8005b60:	f7ff fba4 	bl	80052ac <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8005b64:	4b2a      	ldr	r3, [pc, #168]	@ (8005c10 <xTaskCreate+0x1bc>)
 8005b66:	f8c3 9000 	str.w	r9, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8005c14 <xTaskCreate+0x1c0>)
 8005b6c:	601d      	str	r5, [r3, #0]
        uxTaskNumber++;
 8005b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8005c18 <xTaskCreate+0x1c4>)
        prvAddTaskToReadyList( pxNewTCB );
 8005b70:	492a      	ldr	r1, [pc, #168]	@ (8005c1c <xTaskCreate+0x1c8>)
        uxTaskNumber++;
 8005b72:	6813      	ldr	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8005b74:	6808      	ldr	r0, [r1, #0]
        uxTaskNumber++;
 8005b76:	3301      	adds	r3, #1
 8005b78:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8005b7a:	2201      	movs	r2, #1
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b7c:	6423      	str	r3, [r4, #64]	@ 0x40
        prvAddTaskToReadyList( pxNewTCB );
 8005b7e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005b80:	409a      	lsls	r2, r3
 8005b82:	4302      	orrs	r2, r0
 8005b84:	600a      	str	r2, [r1, #0]
 8005b86:	2214      	movs	r2, #20
 8005b88:	4353      	muls	r3, r2
 8005b8a:	eb08 0103 	add.w	r1, r8, r3
 8005b8e:	684a      	ldr	r2, [r1, #4]
 8005b90:	6890      	ldr	r0, [r2, #8]
 8005b92:	60a2      	str	r2, [r4, #8]
 8005b94:	60e0      	str	r0, [r4, #12]
 8005b96:	6046      	str	r6, [r0, #4]
 8005b98:	6096      	str	r6, [r2, #8]
 8005b9a:	f858 2003 	ldr.w	r2, [r8, r3]
 8005b9e:	6161      	str	r1, [r4, #20]
 8005ba0:	3201      	adds	r2, #1
 8005ba2:	f848 2003 	str.w	r2, [r8, r3]
    taskEXIT_CRITICAL();
 8005ba6:	f000 fd95 	bl	80066d4 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8005baa:	4b1d      	ldr	r3, [pc, #116]	@ (8005c20 <xTaskCreate+0x1cc>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	b173      	cbz	r3, 8005bce <xTaskCreate+0x17a>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d209      	bcs.n	8005bce <xTaskCreate+0x17a>
            taskYIELD_IF_USING_PREEMPTION();
 8005bba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	f3bf 8f6f 	isb	sy
            xReturn = pdPASS;
 8005bce:	2001      	movs	r0, #1
        return xReturn;
 8005bd0:	e74f      	b.n	8005a72 <xTaskCreate+0x1e>
            if( xSchedulerRunning == pdFALSE )
 8005bd2:	4b13      	ldr	r3, [pc, #76]	@ (8005c20 <xTaskCreate+0x1cc>)
 8005bd4:	681a      	ldr	r2, [r3, #0]
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bd6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            if( xSchedulerRunning == pdFALSE )
 8005bd8:	2a00      	cmp	r2, #0
 8005bda:	d1c8      	bne.n	8005b6e <xTaskCreate+0x11a>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005be0:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
 8005be2:	bf98      	it	ls
 8005be4:	603c      	strls	r4, [r7, #0]
 8005be6:	e7c2      	b.n	8005b6e <xTaskCreate+0x11a>
                    vPortFreeStack( pxStack );
 8005be8:	4638      	mov	r0, r7
 8005bea:	f000 ff0f 	bl	8006a0c <vPortFree>
        if( pxNewTCB != NULL )
 8005bee:	e73e      	b.n	8005a6e <xTaskCreate+0x1a>
 8005bf0:	200001a4 	.word	0x200001a4
 8005bf4:	20000290 	.word	0x20000290
 8005bf8:	20000218 	.word	0x20000218
 8005bfc:	20000204 	.word	0x20000204
 8005c00:	200001f0 	.word	0x200001f0
 8005c04:	200001d4 	.word	0x200001d4
 8005c08:	200001c0 	.word	0x200001c0
 8005c0c:	200001a8 	.word	0x200001a8
 8005c10:	200001ec 	.word	0x200001ec
 8005c14:	200001e8 	.word	0x200001e8
 8005c18:	20000188 	.word	0x20000188
 8005c1c:	2000019c 	.word	0x2000019c
 8005c20:	20000198 	.word	0x20000198

08005c24 <vTaskStartScheduler>:
{
 8005c24:	b513      	push	{r0, r1, r4, lr}
        xReturn = xTaskCreate( prvIdleTask,
 8005c26:	2400      	movs	r4, #0
 8005c28:	4b17      	ldr	r3, [pc, #92]	@ (8005c88 <vTaskStartScheduler+0x64>)
 8005c2a:	2264      	movs	r2, #100	@ 0x64
 8005c2c:	9301      	str	r3, [sp, #4]
 8005c2e:	4917      	ldr	r1, [pc, #92]	@ (8005c8c <vTaskStartScheduler+0x68>)
 8005c30:	4623      	mov	r3, r4
 8005c32:	4817      	ldr	r0, [pc, #92]	@ (8005c90 <vTaskStartScheduler+0x6c>)
 8005c34:	9400      	str	r4, [sp, #0]
 8005c36:	f7ff ff0d 	bl	8005a54 <xTaskCreate>
        if( xReturn == pdPASS )
 8005c3a:	2801      	cmp	r0, #1
 8005c3c:	d119      	bne.n	8005c72 <vTaskStartScheduler+0x4e>
            xReturn = xTimerCreateTimerTask();
 8005c3e:	f000 fca9 	bl	8006594 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 8005c42:	2801      	cmp	r0, #1
 8005c44:	d115      	bne.n	8005c72 <vTaskStartScheduler+0x4e>
 8005c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 8005c56:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c94 <vTaskStartScheduler+0x70>)
 8005c5c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c98 <vTaskStartScheduler+0x74>)
 8005c60:	6018      	str	r0, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c62:	4b0e      	ldr	r3, [pc, #56]	@ (8005c9c <vTaskStartScheduler+0x78>)
 8005c64:	601c      	str	r4, [r3, #0]
        xPortStartScheduler();
 8005c66:	f000 fd95 	bl	8006794 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <vTaskStartScheduler+0x7c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
}
 8005c6e:	b002      	add	sp, #8
 8005c70:	bd10      	pop	{r4, pc}
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c72:	3001      	adds	r0, #1
 8005c74:	d1f9      	bne.n	8005c6a <vTaskStartScheduler+0x46>
 8005c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	e7fe      	b.n	8005c86 <vTaskStartScheduler+0x62>
 8005c88:	20000180 	.word	0x20000180
 8005c8c:	08006b80 	.word	0x08006b80
 8005c90:	080059ed 	.word	0x080059ed
 8005c94:	20000184 	.word	0x20000184
 8005c98:	20000198 	.word	0x20000198
 8005c9c:	200001a0 	.word	0x200001a0
 8005ca0:	2000000c 	.word	0x2000000c

08005ca4 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8005ca4:	4a02      	ldr	r2, [pc, #8]	@ (8005cb0 <vTaskSuspendAll+0xc>)
 8005ca6:	6813      	ldr	r3, [r2, #0]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	6013      	str	r3, [r2, #0]
}
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	2000017c 	.word	0x2000017c

08005cb4 <xTaskGetTickCount>:
        xTicks = xTickCount;
 8005cb4:	4b01      	ldr	r3, [pc, #4]	@ (8005cbc <xTaskGetTickCount+0x8>)
 8005cb6:	6818      	ldr	r0, [r3, #0]
}
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	200001a0 	.word	0x200001a0

08005cc0 <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
 8005cc0:	4b01      	ldr	r3, [pc, #4]	@ (8005cc8 <uxTaskGetNumberOfTasks+0x8>)
 8005cc2:	6818      	ldr	r0, [r3, #0]
}
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	200001a4 	.word	0x200001a4

08005ccc <xTaskIncrementTick>:
{
 8005ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cd0:	4b4e      	ldr	r3, [pc, #312]	@ (8005e0c <xTaskIncrementTick+0x140>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 8092 	bne.w	8005dfe <xTaskIncrementTick+0x132>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cda:	4b4d      	ldr	r3, [pc, #308]	@ (8005e10 <xTaskIncrementTick+0x144>)
 8005cdc:	681c      	ldr	r4, [r3, #0]
 8005cde:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8005ce0:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ce2:	b9bc      	cbnz	r4, 8005d14 <xTaskIncrementTick+0x48>
            taskSWITCH_DELAYED_LISTS();
 8005ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8005e14 <xTaskIncrementTick+0x148>)
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	b142      	cbz	r2, 8005cfe <xTaskIncrementTick+0x32>
 8005cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	e7fe      	b.n	8005cfc <xTaskIncrementTick+0x30>
 8005cfe:	4a46      	ldr	r2, [pc, #280]	@ (8005e18 <xTaskIncrementTick+0x14c>)
 8005d00:	6819      	ldr	r1, [r3, #0]
 8005d02:	6810      	ldr	r0, [r2, #0]
 8005d04:	6018      	str	r0, [r3, #0]
 8005d06:	6011      	str	r1, [r2, #0]
 8005d08:	4a44      	ldr	r2, [pc, #272]	@ (8005e1c <xTaskIncrementTick+0x150>)
 8005d0a:	6813      	ldr	r3, [r2, #0]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	f7ff fe5a 	bl	80059c8 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005d14:	f8df c108 	ldr.w	ip, [pc, #264]	@ 8005e20 <xTaskIncrementTick+0x154>
    BaseType_t xSwitchRequired = pdFALSE;
 8005d18:	2000      	movs	r0, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005d1a:	f8dc 3000 	ldr.w	r3, [ip]
 8005d1e:	4a41      	ldr	r2, [pc, #260]	@ (8005e24 <xTaskIncrementTick+0x158>)
 8005d20:	429c      	cmp	r4, r3
 8005d22:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 8005e28 <xTaskIncrementTick+0x15c>
 8005d26:	d20f      	bcs.n	8005d48 <xTaskIncrementTick+0x7c>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d28:	2114      	movs	r1, #20
 8005d2a:	f8d9 3000 	ldr.w	r3, [r9]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d30:	434b      	muls	r3, r1
 8005d32:	58d3      	ldr	r3, [r2, r3]
                xSwitchRequired = pdTRUE;
 8005d34:	2b02      	cmp	r3, #2
            if( xYieldPending != pdFALSE )
 8005d36:	4b3d      	ldr	r3, [pc, #244]	@ (8005e2c <xTaskIncrementTick+0x160>)
                xSwitchRequired = pdTRUE;
 8005d38:	bf28      	it	cs
 8005d3a:	2001      	movcs	r0, #1
            if( xYieldPending != pdFALSE )
 8005d3c:	681b      	ldr	r3, [r3, #0]
                xSwitchRequired = pdTRUE;
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	bf18      	it	ne
 8005d42:	2001      	movne	r0, #1
}
 8005d44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d48:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 8005e14 <xTaskIncrementTick+0x148>
                    prvAddTaskToReadyList( pxTCB );
 8005d4c:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 8005e30 <xTaskIncrementTick+0x164>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d50:	f8d8 3000 	ldr.w	r3, [r8]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	b923      	cbnz	r3, 8005d62 <xTaskIncrementTick+0x96>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d58:	f04f 33ff 	mov.w	r3, #4294967295
 8005d5c:	f8cc 3000 	str.w	r3, [ip]
                    break;
 8005d60:	e7e2      	b.n	8005d28 <xTaskIncrementTick+0x5c>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d62:	f8d8 3000 	ldr.w	r3, [r8]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d6a:	6859      	ldr	r1, [r3, #4]
                    if( xConstTickCount < xItemValue )
 8005d6c:	428c      	cmp	r4, r1
 8005d6e:	d202      	bcs.n	8005d76 <xTaskIncrementTick+0xaa>
                        xNextTaskUnblockTime = xItemValue;
 8005d70:	f8cc 1000 	str.w	r1, [ip]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005d74:	e7d8      	b.n	8005d28 <xTaskIncrementTick+0x5c>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005d76:	695d      	ldr	r5, [r3, #20]
 8005d78:	e9d3 1602 	ldrd	r1, r6, [r3, #8]
 8005d7c:	608e      	str	r6, [r1, #8]
 8005d7e:	6071      	str	r1, [r6, #4]
 8005d80:	6869      	ldr	r1, [r5, #4]
 8005d82:	1d1f      	adds	r7, r3, #4
 8005d84:	42b9      	cmp	r1, r7
 8005d86:	f04f 0100 	mov.w	r1, #0
 8005d8a:	bf08      	it	eq
 8005d8c:	606e      	streq	r6, [r5, #4]
 8005d8e:	6159      	str	r1, [r3, #20]
 8005d90:	6829      	ldr	r1, [r5, #0]
 8005d92:	3901      	subs	r1, #1
 8005d94:	6029      	str	r1, [r5, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d96:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8005d98:	b17d      	cbz	r5, 8005dba <xTaskIncrementTick+0xee>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005d9a:	e9d3 1607 	ldrd	r1, r6, [r3, #28]
 8005d9e:	608e      	str	r6, [r1, #8]
 8005da0:	6071      	str	r1, [r6, #4]
 8005da2:	6869      	ldr	r1, [r5, #4]
 8005da4:	f103 0a18 	add.w	sl, r3, #24
 8005da8:	4551      	cmp	r1, sl
 8005daa:	f04f 0100 	mov.w	r1, #0
 8005dae:	bf08      	it	eq
 8005db0:	606e      	streq	r6, [r5, #4]
 8005db2:	6299      	str	r1, [r3, #40]	@ 0x28
 8005db4:	6829      	ldr	r1, [r5, #0]
 8005db6:	3901      	subs	r1, #1
 8005db8:	6029      	str	r1, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005dba:	2501      	movs	r5, #1
 8005dbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005dbe:	f8de 6000 	ldr.w	r6, [lr]
 8005dc2:	408d      	lsls	r5, r1
 8005dc4:	4335      	orrs	r5, r6
 8005dc6:	f8ce 5000 	str.w	r5, [lr]
 8005dca:	2514      	movs	r5, #20
 8005dcc:	434d      	muls	r5, r1
 8005dce:	eb02 0a05 	add.w	sl, r2, r5
 8005dd2:	f8da 6004 	ldr.w	r6, [sl, #4]
 8005dd6:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8005dda:	609e      	str	r6, [r3, #8]
 8005ddc:	f8c3 b00c 	str.w	fp, [r3, #12]
 8005de0:	f8cb 7004 	str.w	r7, [fp, #4]
 8005de4:	60b7      	str	r7, [r6, #8]
 8005de6:	f8c3 a014 	str.w	sl, [r3, #20]
 8005dea:	5953      	ldr	r3, [r2, r5]
 8005dec:	3301      	adds	r3, #1
 8005dee:	5153      	str	r3, [r2, r5]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005df0:	f8d9 3000 	ldr.w	r3, [r9]
 8005df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            xSwitchRequired = pdTRUE;
 8005df6:	4299      	cmp	r1, r3
 8005df8:	bf88      	it	hi
 8005dfa:	2001      	movhi	r0, #1
 8005dfc:	e7a8      	b.n	8005d50 <xTaskIncrementTick+0x84>
        ++xPendedTicks;
 8005dfe:	4a0d      	ldr	r2, [pc, #52]	@ (8005e34 <xTaskIncrementTick+0x168>)
    BaseType_t xSwitchRequired = pdFALSE;
 8005e00:	2000      	movs	r0, #0
        ++xPendedTicks;
 8005e02:	6813      	ldr	r3, [r2, #0]
 8005e04:	3301      	adds	r3, #1
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	e79c      	b.n	8005d44 <xTaskIncrementTick+0x78>
 8005e0a:	bf00      	nop
 8005e0c:	2000017c 	.word	0x2000017c
 8005e10:	200001a0 	.word	0x200001a0
 8005e14:	200001ec 	.word	0x200001ec
 8005e18:	200001e8 	.word	0x200001e8
 8005e1c:	2000018c 	.word	0x2000018c
 8005e20:	20000184 	.word	0x20000184
 8005e24:	20000218 	.word	0x20000218
 8005e28:	20000290 	.word	0x20000290
 8005e2c:	20000190 	.word	0x20000190
 8005e30:	2000019c 	.word	0x2000019c
 8005e34:	20000194 	.word	0x20000194

08005e38 <xTaskResumeAll>:
{
 8005e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    configASSERT( uxSchedulerSuspended );
 8005e3c:	4c45      	ldr	r4, [pc, #276]	@ (8005f54 <xTaskResumeAll+0x11c>)
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	b943      	cbnz	r3, 8005e54 <xTaskResumeAll+0x1c>
 8005e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	e7fe      	b.n	8005e52 <xTaskResumeAll+0x1a>
    taskENTER_CRITICAL();
 8005e54:	f000 fc1e 	bl	8006694 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	6023      	str	r3, [r4, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	b12b      	cbz	r3, 8005e6e <xTaskResumeAll+0x36>
    BaseType_t xAlreadyYielded = pdFALSE;
 8005e62:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8005e64:	f000 fc36 	bl	80066d4 <vPortExitCritical>
}
 8005e68:	4620      	mov	r0, r4
 8005e6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e6e:	4a3a      	ldr	r2, [pc, #232]	@ (8005f58 <xTaskResumeAll+0x120>)
 8005e70:	6812      	ldr	r2, [r2, #0]
 8005e72:	2a00      	cmp	r2, #0
 8005e74:	d0f5      	beq.n	8005e62 <xTaskResumeAll+0x2a>
                    prvAddTaskToReadyList( pxTCB );
 8005e76:	f04f 0c01 	mov.w	ip, #1
 8005e7a:	f04f 0e14 	mov.w	lr, #20
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e7e:	4e37      	ldr	r6, [pc, #220]	@ (8005f5c <xTaskResumeAll+0x124>)
                    prvAddTaskToReadyList( pxTCB );
 8005e80:	4f37      	ldr	r7, [pc, #220]	@ (8005f60 <xTaskResumeAll+0x128>)
 8005e82:	4a38      	ldr	r2, [pc, #224]	@ (8005f64 <xTaskResumeAll+0x12c>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e84:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8005f68 <xTaskResumeAll+0x130>
                        xYieldPending = pdTRUE;
 8005e88:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 8005f6c <xTaskResumeAll+0x134>
 8005e8c:	e03f      	b.n	8005f0e <xTaskResumeAll+0xd6>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8e:	68f3      	ldr	r3, [r6, #12]
 8005e90:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005e92:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005e94:	e9d3 1407 	ldrd	r1, r4, [r3, #28]
 8005e98:	608c      	str	r4, [r1, #8]
 8005e9a:	6061      	str	r1, [r4, #4]
 8005e9c:	6841      	ldr	r1, [r0, #4]
 8005e9e:	f103 0518 	add.w	r5, r3, #24
 8005ea2:	42a9      	cmp	r1, r5
 8005ea4:	f04f 0100 	mov.w	r1, #0
 8005ea8:	bf08      	it	eq
 8005eaa:	6044      	streq	r4, [r0, #4]
 8005eac:	6299      	str	r1, [r3, #40]	@ 0x28
 8005eae:	6801      	ldr	r1, [r0, #0]
 8005eb0:	3901      	subs	r1, #1
 8005eb2:	6001      	str	r1, [r0, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005eb4:	6958      	ldr	r0, [r3, #20]
 8005eb6:	e9d3 1402 	ldrd	r1, r4, [r3, #8]
 8005eba:	608c      	str	r4, [r1, #8]
 8005ebc:	6061      	str	r1, [r4, #4]
 8005ebe:	6841      	ldr	r1, [r0, #4]
 8005ec0:	1d1d      	adds	r5, r3, #4
 8005ec2:	42a9      	cmp	r1, r5
 8005ec4:	6801      	ldr	r1, [r0, #0]
 8005ec6:	bf08      	it	eq
 8005ec8:	6044      	streq	r4, [r0, #4]
 8005eca:	3901      	subs	r1, #1
 8005ecc:	6001      	str	r1, [r0, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005ece:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005ed0:	683c      	ldr	r4, [r7, #0]
 8005ed2:	fa0c f001 	lsl.w	r0, ip, r1
 8005ed6:	4320      	orrs	r0, r4
 8005ed8:	6038      	str	r0, [r7, #0]
 8005eda:	fb0e f001 	mul.w	r0, lr, r1
 8005ede:	eb02 0a00 	add.w	sl, r2, r0
 8005ee2:	f8da 4004 	ldr.w	r4, [sl, #4]
 8005ee6:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8005eea:	609c      	str	r4, [r3, #8]
 8005eec:	f8c3 b00c 	str.w	fp, [r3, #12]
 8005ef0:	f8cb 5004 	str.w	r5, [fp, #4]
 8005ef4:	60a5      	str	r5, [r4, #8]
 8005ef6:	5814      	ldr	r4, [r2, r0]
 8005ef8:	f8c3 a014 	str.w	sl, [r3, #20]
 8005efc:	3401      	adds	r4, #1
 8005efe:	5014      	str	r4, [r2, r0]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f00:	f8d8 0000 	ldr.w	r0, [r8]
 8005f04:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8005f06:	4281      	cmp	r1, r0
 8005f08:	d301      	bcc.n	8005f0e <xTaskResumeAll+0xd6>
                        xYieldPending = pdTRUE;
 8005f0a:	f8c9 c000 	str.w	ip, [r9]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f0e:	6831      	ldr	r1, [r6, #0]
 8005f10:	2900      	cmp	r1, #0
 8005f12:	d1bc      	bne.n	8005e8e <xTaskResumeAll+0x56>
                if( pxTCB != NULL )
 8005f14:	b10b      	cbz	r3, 8005f1a <xTaskResumeAll+0xe2>
                    prvResetNextTaskUnblockTime();
 8005f16:	f7ff fd57 	bl	80059c8 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f1a:	4d15      	ldr	r5, [pc, #84]	@ (8005f70 <xTaskResumeAll+0x138>)
 8005f1c:	682c      	ldr	r4, [r5, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
 8005f1e:	b144      	cbz	r4, 8005f32 <xTaskResumeAll+0xfa>
                                xYieldPending = pdTRUE;
 8005f20:	2701      	movs	r7, #1
 8005f22:	4e12      	ldr	r6, [pc, #72]	@ (8005f6c <xTaskResumeAll+0x134>)
                            if( xTaskIncrementTick() != pdFALSE )
 8005f24:	f7ff fed2 	bl	8005ccc <xTaskIncrementTick>
 8005f28:	b100      	cbz	r0, 8005f2c <xTaskResumeAll+0xf4>
                                xYieldPending = pdTRUE;
 8005f2a:	6037      	str	r7, [r6, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005f2c:	3c01      	subs	r4, #1
 8005f2e:	d1f9      	bne.n	8005f24 <xTaskResumeAll+0xec>
                        xPendedTicks = 0;
 8005f30:	602c      	str	r4, [r5, #0]
                if( xYieldPending != pdFALSE )
 8005f32:	4b0e      	ldr	r3, [pc, #56]	@ (8005f6c <xTaskResumeAll+0x134>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d093      	beq.n	8005e62 <xTaskResumeAll+0x2a>
                    taskYIELD_IF_USING_PREEMPTION();
 8005f3a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f42:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	f3bf 8f6f 	isb	sy
                        xAlreadyYielded = pdTRUE;
 8005f4e:	2401      	movs	r4, #1
 8005f50:	e788      	b.n	8005e64 <xTaskResumeAll+0x2c>
 8005f52:	bf00      	nop
 8005f54:	2000017c 	.word	0x2000017c
 8005f58:	200001a4 	.word	0x200001a4
 8005f5c:	200001d4 	.word	0x200001d4
 8005f60:	2000019c 	.word	0x2000019c
 8005f64:	20000218 	.word	0x20000218
 8005f68:	20000290 	.word	0x20000290
 8005f6c:	20000190 	.word	0x20000190
 8005f70:	20000194 	.word	0x20000194

08005f74 <vTaskDelay>:
    {
 8005f74:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005f76:	b950      	cbnz	r0, 8005f8e <vTaskDelay+0x1a>
            portYIELD_WITHIN_API();
 8005f78:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005f7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f80:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	f3bf 8f6f 	isb	sy
    }
 8005f8c:	bd08      	pop	{r3, pc}
            configASSERT( uxSchedulerSuspended == 0 );
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb8 <vTaskDelay+0x44>)
 8005f90:	6819      	ldr	r1, [r3, #0]
 8005f92:	b141      	cbz	r1, 8005fa6 <vTaskDelay+0x32>
 8005f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	e7fe      	b.n	8005fa4 <vTaskDelay+0x30>
            vTaskSuspendAll();
 8005fa6:	f7ff fe7d 	bl	8005ca4 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005faa:	f7ff fcbd 	bl	8005928 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 8005fae:	f7ff ff43 	bl	8005e38 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d0e0      	beq.n	8005f78 <vTaskDelay+0x4>
 8005fb6:	e7e9      	b.n	8005f8c <vTaskDelay+0x18>
 8005fb8:	2000017c 	.word	0x2000017c

08005fbc <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fbc:	4b17      	ldr	r3, [pc, #92]	@ (800601c <vTaskSwitchContext+0x60>)
{
 8005fbe:	b510      	push	{r4, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4b17      	ldr	r3, [pc, #92]	@ (8006020 <vTaskSwitchContext+0x64>)
 8005fc4:	b112      	cbz	r2, 8005fcc <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
 8005fc6:	2201      	movs	r2, #1
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc8:	601a      	str	r2, [r3, #0]
}
 8005fca:	bd10      	pop	{r4, pc}
        xYieldPending = pdFALSE;
 8005fcc:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fce:	4b15      	ldr	r3, [pc, #84]	@ (8006024 <vTaskSwitchContext+0x68>)
 8005fd0:	681a      	ldr	r2, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fd2:	fab2 f282 	clz	r2, r2
 8005fd6:	2314      	movs	r3, #20
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	f1c2 021f 	rsb	r2, r2, #31
 8005fde:	4353      	muls	r3, r2
 8005fe0:	4911      	ldr	r1, [pc, #68]	@ (8006028 <vTaskSwitchContext+0x6c>)
 8005fe2:	58cc      	ldr	r4, [r1, r3]
 8005fe4:	18c8      	adds	r0, r1, r3
 8005fe6:	b944      	cbnz	r4, 8005ffa <vTaskSwitchContext+0x3e>
        __asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	e7fe      	b.n	8005ff8 <vTaskSwitchContext+0x3c>
 8005ffa:	6844      	ldr	r4, [r0, #4]
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	6864      	ldr	r4, [r4, #4]
 8006000:	440b      	add	r3, r1
 8006002:	429c      	cmp	r4, r3
 8006004:	bf08      	it	eq
 8006006:	6863      	ldreq	r3, [r4, #4]
 8006008:	6044      	str	r4, [r0, #4]
 800600a:	bf08      	it	eq
 800600c:	6043      	streq	r3, [r0, #4]
 800600e:	2314      	movs	r3, #20
 8006010:	fb03 1102 	mla	r1, r3, r2, r1
 8006014:	684b      	ldr	r3, [r1, #4]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	4b04      	ldr	r3, [pc, #16]	@ (800602c <vTaskSwitchContext+0x70>)
 800601a:	e7d5      	b.n	8005fc8 <vTaskSwitchContext+0xc>
 800601c:	2000017c 	.word	0x2000017c
 8006020:	20000190 	.word	0x20000190
 8006024:	2000019c 	.word	0x2000019c
 8006028:	20000218 	.word	0x20000218
 800602c:	20000290 	.word	0x20000290

08006030 <vTaskPlaceOnEventList>:
{
 8006030:	b510      	push	{r4, lr}
 8006032:	460c      	mov	r4, r1
    configASSERT( pxEventList );
 8006034:	b940      	cbnz	r0, 8006048 <vTaskPlaceOnEventList+0x18>
 8006036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	e7fe      	b.n	8006046 <vTaskPlaceOnEventList+0x16>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006048:	4b05      	ldr	r3, [pc, #20]	@ (8006060 <vTaskPlaceOnEventList+0x30>)
 800604a:	6819      	ldr	r1, [r3, #0]
 800604c:	3118      	adds	r1, #24
 800604e:	f7ff f93b 	bl	80052c8 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006052:	4620      	mov	r0, r4
}
 8006054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006058:	2101      	movs	r1, #1
 800605a:	f7ff bc65 	b.w	8005928 <prvAddCurrentTaskToDelayedList>
 800605e:	bf00      	nop
 8006060:	20000290 	.word	0x20000290

08006064 <vTaskPlaceOnEventListRestricted>:
    {
 8006064:	b470      	push	{r4, r5, r6}
 8006066:	460c      	mov	r4, r1
 8006068:	4611      	mov	r1, r2
        configASSERT( pxEventList );
 800606a:	b940      	cbnz	r0, 800607e <vTaskPlaceOnEventListRestricted+0x1a>
 800606c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	e7fe      	b.n	800607c <vTaskPlaceOnEventListRestricted+0x18>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800607e:	4b0f      	ldr	r3, [pc, #60]	@ (80060bc <vTaskPlaceOnEventListRestricted+0x58>)
 8006080:	6842      	ldr	r2, [r0, #4]
 8006082:	681d      	ldr	r5, [r3, #0]
 8006084:	6896      	ldr	r6, [r2, #8]
 8006086:	61ea      	str	r2, [r5, #28]
 8006088:	681d      	ldr	r5, [r3, #0]
            xTicksToWait = portMAX_DELAY;
 800608a:	2900      	cmp	r1, #0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800608c:	622e      	str	r6, [r5, #32]
 800608e:	681d      	ldr	r5, [r3, #0]
 8006090:	f105 0518 	add.w	r5, r5, #24
 8006094:	6075      	str	r5, [r6, #4]
 8006096:	681d      	ldr	r5, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f105 0518 	add.w	r5, r5, #24
 800609e:	6095      	str	r5, [r2, #8]
 80060a0:	6298      	str	r0, [r3, #40]	@ 0x28
 80060a2:	6803      	ldr	r3, [r0, #0]
 80060a4:	f103 0301 	add.w	r3, r3, #1
 80060a8:	6003      	str	r3, [r0, #0]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80060aa:	bf08      	it	eq
 80060ac:	4620      	moveq	r0, r4
    }
 80060ae:	bc70      	pop	{r4, r5, r6}
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80060b0:	bf18      	it	ne
 80060b2:	f04f 30ff 	movne.w	r0, #4294967295
 80060b6:	f7ff bc37 	b.w	8005928 <prvAddCurrentTaskToDelayedList>
 80060ba:	bf00      	nop
 80060bc:	20000290 	.word	0x20000290

080060c0 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c0:	68c3      	ldr	r3, [r0, #12]
{
 80060c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c4:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
 80060c6:	b943      	cbnz	r3, 80060da <xTaskRemoveFromEventList+0x1a>
 80060c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	e7fe      	b.n	80060d8 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80060da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060dc:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 80060e0:	6081      	str	r1, [r0, #8]
 80060e2:	6048      	str	r0, [r1, #4]
 80060e4:	6850      	ldr	r0, [r2, #4]
 80060e6:	f103 0418 	add.w	r4, r3, #24
 80060ea:	42a0      	cmp	r0, r4
 80060ec:	bf08      	it	eq
 80060ee:	6051      	streq	r1, [r2, #4]
 80060f0:	2100      	movs	r1, #0
 80060f2:	6299      	str	r1, [r3, #40]	@ 0x28
 80060f4:	6811      	ldr	r1, [r2, #0]
 80060f6:	3901      	subs	r1, #1
 80060f8:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006174 <xTaskRemoveFromEventList+0xb4>)
 80060fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	2a00      	cmp	r2, #0
 8006102:	d12a      	bne.n	800615a <xTaskRemoveFromEventList+0x9a>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006104:	e9d3 4002 	ldrd	r4, r0, [r3, #8]
 8006108:	695a      	ldr	r2, [r3, #20]
 800610a:	60a0      	str	r0, [r4, #8]
 800610c:	6044      	str	r4, [r0, #4]
 800610e:	6854      	ldr	r4, [r2, #4]
 8006110:	1d1d      	adds	r5, r3, #4
 8006112:	42ac      	cmp	r4, r5
 8006114:	bf08      	it	eq
 8006116:	6050      	streq	r0, [r2, #4]
 8006118:	6810      	ldr	r0, [r2, #0]
 800611a:	3801      	subs	r0, #1
 800611c:	6010      	str	r0, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800611e:	2201      	movs	r2, #1
 8006120:	4815      	ldr	r0, [pc, #84]	@ (8006178 <xTaskRemoveFromEventList+0xb8>)
 8006122:	408a      	lsls	r2, r1
 8006124:	6804      	ldr	r4, [r0, #0]
 8006126:	4322      	orrs	r2, r4
 8006128:	6002      	str	r2, [r0, #0]
 800612a:	2214      	movs	r2, #20
 800612c:	434a      	muls	r2, r1
 800612e:	4813      	ldr	r0, [pc, #76]	@ (800617c <xTaskRemoveFromEventList+0xbc>)
 8006130:	1886      	adds	r6, r0, r2
 8006132:	6874      	ldr	r4, [r6, #4]
 8006134:	68a7      	ldr	r7, [r4, #8]
 8006136:	609c      	str	r4, [r3, #8]
 8006138:	60df      	str	r7, [r3, #12]
 800613a:	607d      	str	r5, [r7, #4]
 800613c:	60a5      	str	r5, [r4, #8]
 800613e:	615e      	str	r6, [r3, #20]
 8006140:	5883      	ldr	r3, [r0, r2]
 8006142:	3301      	adds	r3, #1
 8006144:	5083      	str	r3, [r0, r2]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006146:	4b0e      	ldr	r3, [pc, #56]	@ (8006180 <xTaskRemoveFromEventList+0xc0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614c:	4299      	cmp	r1, r3
        xYieldPending = pdTRUE;
 800614e:	bf85      	ittet	hi
 8006150:	2001      	movhi	r0, #1
 8006152:	4b0c      	ldrhi	r3, [pc, #48]	@ (8006184 <xTaskRemoveFromEventList+0xc4>)
        xReturn = pdFALSE;
 8006154:	2000      	movls	r0, #0
        xYieldPending = pdTRUE;
 8006156:	6018      	strhi	r0, [r3, #0]
}
 8006158:	bdf0      	pop	{r4, r5, r6, r7, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800615a:	4a0b      	ldr	r2, [pc, #44]	@ (8006188 <xTaskRemoveFromEventList+0xc8>)
 800615c:	6850      	ldr	r0, [r2, #4]
 800615e:	6885      	ldr	r5, [r0, #8]
 8006160:	61d8      	str	r0, [r3, #28]
 8006162:	621d      	str	r5, [r3, #32]
 8006164:	606c      	str	r4, [r5, #4]
 8006166:	6084      	str	r4, [r0, #8]
 8006168:	629a      	str	r2, [r3, #40]	@ 0x28
 800616a:	6813      	ldr	r3, [r2, #0]
 800616c:	3301      	adds	r3, #1
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	e7e9      	b.n	8006146 <xTaskRemoveFromEventList+0x86>
 8006172:	bf00      	nop
 8006174:	2000017c 	.word	0x2000017c
 8006178:	2000019c 	.word	0x2000019c
 800617c:	20000218 	.word	0x20000218
 8006180:	20000290 	.word	0x20000290
 8006184:	20000190 	.word	0x20000190
 8006188:	200001d4 	.word	0x200001d4

0800618c <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800618c:	4b03      	ldr	r3, [pc, #12]	@ (800619c <vTaskInternalSetTimeOutState+0x10>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006192:	4b03      	ldr	r3, [pc, #12]	@ (80061a0 <vTaskInternalSetTimeOutState+0x14>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6043      	str	r3, [r0, #4]
}
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	2000018c 	.word	0x2000018c
 80061a0:	200001a0 	.word	0x200001a0

080061a4 <xTaskCheckForTimeOut>:
{
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	460d      	mov	r5, r1
    configASSERT( pxTimeOut );
 80061a8:	4604      	mov	r4, r0
 80061aa:	b940      	cbnz	r0, 80061be <xTaskCheckForTimeOut+0x1a>
 80061ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	e7fe      	b.n	80061bc <xTaskCheckForTimeOut+0x18>
    configASSERT( pxTicksToWait );
 80061be:	b941      	cbnz	r1, 80061d2 <xTaskCheckForTimeOut+0x2e>
 80061c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	e7fe      	b.n	80061d0 <xTaskCheckForTimeOut+0x2c>
    taskENTER_CRITICAL();
 80061d2:	f000 fa5f 	bl	8006694 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 80061d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006214 <xTaskCheckForTimeOut+0x70>)
 80061d8:	6819      	ldr	r1, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 80061da:	682b      	ldr	r3, [r5, #0]
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	d017      	beq.n	8006210 <xTaskCheckForTimeOut+0x6c>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061e0:	480d      	ldr	r0, [pc, #52]	@ (8006218 <xTaskCheckForTimeOut+0x74>)
 80061e2:	6826      	ldr	r6, [r4, #0]
 80061e4:	6800      	ldr	r0, [r0, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061e6:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061e8:	4286      	cmp	r6, r0
 80061ea:	d008      	beq.n	80061fe <xTaskCheckForTimeOut+0x5a>
 80061ec:	428a      	cmp	r2, r1
 80061ee:	d806      	bhi.n	80061fe <xTaskCheckForTimeOut+0x5a>
            *pxTicksToWait = ( TickType_t ) 0;
 80061f0:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 80061f2:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 80061f4:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 80061f6:	f000 fa6d 	bl	80066d4 <vPortExitCritical>
}
 80061fa:	4620      	mov	r0, r4
 80061fc:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061fe:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006200:	4283      	cmp	r3, r0
 8006202:	d9f5      	bls.n	80061f0 <xTaskCheckForTimeOut+0x4c>
            *pxTicksToWait -= xElapsedTime;
 8006204:	1a5b      	subs	r3, r3, r1
 8006206:	4413      	add	r3, r2
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006208:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
 800620a:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800620c:	f7ff ffbe 	bl	800618c <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
 8006210:	2400      	movs	r4, #0
 8006212:	e7f0      	b.n	80061f6 <xTaskCheckForTimeOut+0x52>
 8006214:	200001a0 	.word	0x200001a0
 8006218:	2000018c 	.word	0x2000018c

0800621c <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 800621c:	2201      	movs	r2, #1
 800621e:	4b01      	ldr	r3, [pc, #4]	@ (8006224 <vTaskMissedYield+0x8>)
 8006220:	601a      	str	r2, [r3, #0]
}
 8006222:	4770      	bx	lr
 8006224:	20000190 	.word	0x20000190

08006228 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 8006228:	4b05      	ldr	r3, [pc, #20]	@ (8006240 <xTaskGetSchedulerState+0x18>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	b133      	cbz	r3, 800623c <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800622e:	4b05      	ldr	r3, [pc, #20]	@ (8006244 <xTaskGetSchedulerState+0x1c>)
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	fab0 f080 	clz	r0, r0
 8006236:	0940      	lsrs	r0, r0, #5
 8006238:	0040      	lsls	r0, r0, #1
 800623a:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 800623c:	2001      	movs	r0, #1
    }
 800623e:	4770      	bx	lr
 8006240:	20000198 	.word	0x20000198
 8006244:	2000017c 	.word	0x2000017c

08006248 <xTaskPriorityDisinherit>:
    {
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 800624a:	4604      	mov	r4, r0
 800624c:	b908      	cbnz	r0, 8006252 <xTaskPriorityDisinherit+0xa>
        BaseType_t xReturn = pdFALSE;
 800624e:	2000      	movs	r0, #0
    }
 8006250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            configASSERT( pxTCB == pxCurrentTCB );
 8006252:	4b23      	ldr	r3, [pc, #140]	@ (80062e0 <xTaskPriorityDisinherit+0x98>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4283      	cmp	r3, r0
 8006258:	d008      	beq.n	800626c <xTaskPriorityDisinherit+0x24>
 800625a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	e7fe      	b.n	800626a <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
 800626c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800626e:	b943      	cbnz	r3, 8006282 <xTaskPriorityDisinherit+0x3a>
 8006270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	e7fe      	b.n	8006280 <xTaskPriorityDisinherit+0x38>
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006282:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006284:	6c82      	ldr	r2, [r0, #72]	@ 0x48
            ( pxTCB->uxMutexesHeld )--;
 8006286:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006288:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 800628a:	64c3      	str	r3, [r0, #76]	@ 0x4c
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800628c:	d0df      	beq.n	800624e <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1dd      	bne.n	800624e <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006292:	1d05      	adds	r5, r0, #4
 8006294:	4628      	mov	r0, r5
 8006296:	f7ff f82e 	bl	80052f6 <uxListRemove>
 800629a:	4a12      	ldr	r2, [pc, #72]	@ (80062e4 <xTaskPriorityDisinherit+0x9c>)
 800629c:	b930      	cbnz	r0, 80062ac <xTaskPriorityDisinherit+0x64>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800629e:	2101      	movs	r1, #1
 80062a0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80062a2:	6813      	ldr	r3, [r2, #0]
 80062a4:	4081      	lsls	r1, r0
 80062a6:	ea23 0301 	bic.w	r3, r3, r1
 80062aa:	6013      	str	r3, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
 80062ac:	2001      	movs	r0, #1
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062ae:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
                    prvAddTaskToReadyList( pxTCB );
 80062b0:	6816      	ldr	r6, [r2, #0]
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b2:	f1c3 0106 	rsb	r1, r3, #6
 80062b6:	61a1      	str	r1, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 80062b8:	fa00 f103 	lsl.w	r1, r0, r3
 80062bc:	4331      	orrs	r1, r6
 80062be:	6011      	str	r1, [r2, #0]
 80062c0:	2114      	movs	r1, #20
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxTCB );
 80062c4:	434b      	muls	r3, r1
 80062c6:	4a08      	ldr	r2, [pc, #32]	@ (80062e8 <xTaskPriorityDisinherit+0xa0>)
 80062c8:	18d6      	adds	r6, r2, r3
 80062ca:	6871      	ldr	r1, [r6, #4]
 80062cc:	688f      	ldr	r7, [r1, #8]
 80062ce:	60a1      	str	r1, [r4, #8]
 80062d0:	60e7      	str	r7, [r4, #12]
 80062d2:	607d      	str	r5, [r7, #4]
 80062d4:	608d      	str	r5, [r1, #8]
 80062d6:	58d1      	ldr	r1, [r2, r3]
 80062d8:	6166      	str	r6, [r4, #20]
 80062da:	4401      	add	r1, r0
 80062dc:	50d1      	str	r1, [r2, r3]
        return xReturn;
 80062de:	e7b7      	b.n	8006250 <xTaskPriorityDisinherit+0x8>
 80062e0:	20000290 	.word	0x20000290
 80062e4:	2000019c 	.word	0x2000019c
 80062e8:	20000218 	.word	0x20000218

080062ec <prvInsertTimerInActiveList>:
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

        if( xNextExpiryTime <= xTimeNow )
 80062ec:	4291      	cmp	r1, r2
    {
 80062ee:	b508      	push	{r3, lr}
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80062f0:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062f2:	6100      	str	r0, [r0, #16]
        if( xNextExpiryTime <= xTimeNow )
 80062f4:	d80a      	bhi.n	800630c <prvInsertTimerInActiveList+0x20>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062f6:	1ad2      	subs	r2, r2, r3
 80062f8:	6983      	ldr	r3, [r0, #24]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d20d      	bcs.n	800631a <prvInsertTimerInActiveList+0x2e>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062fe:	4b08      	ldr	r3, [pc, #32]	@ (8006320 <prvInsertTimerInActiveList+0x34>)
 8006300:	1d01      	adds	r1, r0, #4
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	f7fe ffe0 	bl	80052c8 <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 8006308:	2000      	movs	r0, #0
            }
        }

        return xProcessTimerNow;
    }
 800630a:	bd08      	pop	{r3, pc}
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800630c:	429a      	cmp	r2, r3
 800630e:	d201      	bcs.n	8006314 <prvInsertTimerInActiveList+0x28>
 8006310:	4299      	cmp	r1, r3
 8006312:	d202      	bcs.n	800631a <prvInsertTimerInActiveList+0x2e>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006314:	4b03      	ldr	r3, [pc, #12]	@ (8006324 <prvInsertTimerInActiveList+0x38>)
 8006316:	1d01      	adds	r1, r0, #4
 8006318:	e7f3      	b.n	8006302 <prvInsertTimerInActiveList+0x16>
                xProcessTimerNow = pdTRUE;
 800631a:	2001      	movs	r0, #1
        return xProcessTimerNow;
 800631c:	e7f5      	b.n	800630a <prvInsertTimerInActiveList+0x1e>
 800631e:	bf00      	nop
 8006320:	200002a0 	.word	0x200002a0
 8006324:	200002a4 	.word	0x200002a4

08006328 <prvReloadTimer>:
    {
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	4604      	mov	r4, r0
 800632c:	460d      	mov	r5, r1
 800632e:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006330:	69a1      	ldr	r1, [r4, #24]
 8006332:	462b      	mov	r3, r5
 8006334:	4632      	mov	r2, r6
 8006336:	4620      	mov	r0, r4
 8006338:	4429      	add	r1, r5
 800633a:	f7ff ffd7 	bl	80062ec <prvInsertTimerInActiveList>
 800633e:	b900      	cbnz	r0, 8006342 <prvReloadTimer+0x1a>
    }
 8006340:	bd70      	pop	{r4, r5, r6, pc}
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006342:	69a3      	ldr	r3, [r4, #24]
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006344:	4620      	mov	r0, r4
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006346:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006348:	6a23      	ldr	r3, [r4, #32]
 800634a:	4798      	blx	r3
 800634c:	e7f0      	b.n	8006330 <prvReloadTimer+0x8>
	...

08006350 <prvProcessExpiredTimer>:
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006350:	4b0e      	ldr	r3, [pc, #56]	@ (800638c <prvProcessExpiredTimer+0x3c>)
    {
 8006352:	b570      	push	{r4, r5, r6, lr}
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006354:	681b      	ldr	r3, [r3, #0]
    {
 8006356:	4605      	mov	r5, r0
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006358:	68db      	ldr	r3, [r3, #12]
    {
 800635a:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800635c:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800635e:	1d20      	adds	r0, r4, #4
 8006360:	f7fe ffc9 	bl	80052f6 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006364:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006368:	075a      	lsls	r2, r3, #29
 800636a:	d509      	bpl.n	8006380 <prvProcessExpiredTimer+0x30>
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800636c:	4632      	mov	r2, r6
 800636e:	4629      	mov	r1, r5
 8006370:	4620      	mov	r0, r4
 8006372:	f7ff ffd9 	bl	8006328 <prvReloadTimer>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006376:	4620      	mov	r0, r4
 8006378:	6a23      	ldr	r3, [r4, #32]
    }
 800637a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800637e:	4718      	bx	r3
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8006388:	e7f5      	b.n	8006376 <prvProcessExpiredTimer+0x26>
 800638a:	bf00      	nop
 800638c:	200002a4 	.word	0x200002a4

08006390 <prvSampleTimeNow>:
    {
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
 8006394:	f7ff fc8e 	bl	8005cb4 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 8006398:	4e0d      	ldr	r6, [pc, #52]	@ (80063d0 <prvSampleTimeNow+0x40>)
        xTimeNow = xTaskGetTickCount();
 800639a:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
 800639c:	6833      	ldr	r3, [r6, #0]
 800639e:	4283      	cmp	r3, r0
 80063a0:	d909      	bls.n	80063b6 <prvSampleTimeNow+0x26>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063a2:	4f0c      	ldr	r7, [pc, #48]	@ (80063d4 <prvSampleTimeNow+0x44>)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	b952      	cbnz	r2, 80063c0 <prvSampleTimeNow+0x30>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
 80063aa:	4a0b      	ldr	r2, [pc, #44]	@ (80063d8 <prvSampleTimeNow+0x48>)
 80063ac:	6811      	ldr	r1, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80063ae:	6013      	str	r3, [r2, #0]
        pxCurrentTimerList = pxOverflowTimerList;
 80063b0:	6039      	str	r1, [r7, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <prvSampleTimeNow+0x28>
 80063b6:	2300      	movs	r3, #0
    }
 80063b8:	4620      	mov	r0, r4
            *pxTimerListsWereSwitched = pdTRUE;
 80063ba:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
 80063bc:	6034      	str	r4, [r6, #0]
    }
 80063be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063c0:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80063c2:	f04f 31ff 	mov.w	r1, #4294967295
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	f7ff ffc2 	bl	8006350 <prvProcessExpiredTimer>
 80063cc:	e7ea      	b.n	80063a4 <prvSampleTimeNow+0x14>
 80063ce:	bf00      	nop
 80063d0:	20000294 	.word	0x20000294
 80063d4:	200002a4 	.word	0x200002a4
 80063d8:	200002a0 	.word	0x200002a0

080063dc <prvTimerTask>:
    {
 80063dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063e0:	4f53      	ldr	r7, [pc, #332]	@ (8006530 <prvTimerTask+0x154>)
 80063e2:	4e54      	ldr	r6, [pc, #336]	@ (8006534 <prvTimerTask+0x158>)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	f8d3 8000 	ldr.w	r8, [r3]
 80063ea:	f1b8 0f00 	cmp.w	r8, #0
 80063ee:	d034      	beq.n	800645a <prvTimerTask+0x7e>
 80063f0:	2400      	movs	r4, #0
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f8d3 8000 	ldr.w	r8, [r3]
        vTaskSuspendAll();
 80063f8:	f7ff fc54 	bl	8005ca4 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063fc:	a801      	add	r0, sp, #4
 80063fe:	f7ff ffc7 	bl	8006390 <prvSampleTimeNow>
            if( xTimerListsWereSwitched == pdFALSE )
 8006402:	9b01      	ldr	r3, [sp, #4]
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006404:	4605      	mov	r5, r0
            if( xTimerListsWereSwitched == pdFALSE )
 8006406:	2b00      	cmp	r3, #0
 8006408:	d144      	bne.n	8006494 <prvTimerTask+0xb8>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800640a:	bb44      	cbnz	r4, 800645e <prvTimerTask+0x82>
 800640c:	4540      	cmp	r0, r8
 800640e:	d32c      	bcc.n	800646a <prvTimerTask+0x8e>
                    ( void ) xTaskResumeAll();
 8006410:	f7ff fd12 	bl	8005e38 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006414:	4629      	mov	r1, r5
 8006416:	4640      	mov	r0, r8
 8006418:	f7ff ff9a 	bl	8006350 <prvProcessExpiredTimer>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800641c:	2200      	movs	r2, #0
 800641e:	6830      	ldr	r0, [r6, #0]
 8006420:	a901      	add	r1, sp, #4
 8006422:	f7ff f997 	bl	8005754 <xQueueReceive>
 8006426:	2800      	cmp	r0, #0
 8006428:	d0dc      	beq.n	80063e4 <prvTimerTask+0x8>
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800642a:	9b01      	ldr	r3, [sp, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	dbf5      	blt.n	800641c <prvTimerTask+0x40>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006430:	9c03      	ldr	r4, [sp, #12]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006432:	6963      	ldr	r3, [r4, #20]
 8006434:	b113      	cbz	r3, 800643c <prvTimerTask+0x60>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006436:	1d20      	adds	r0, r4, #4
 8006438:	f7fe ff5d 	bl	80052f6 <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800643c:	4668      	mov	r0, sp
 800643e:	f7ff ffa7 	bl	8006390 <prvSampleTimeNow>
                switch( xMessage.xMessageID )
 8006442:	9b01      	ldr	r3, [sp, #4]
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006444:	4605      	mov	r5, r0
                switch( xMessage.xMessageID )
 8006446:	3b01      	subs	r3, #1
 8006448:	2b08      	cmp	r3, #8
 800644a:	d8e7      	bhi.n	800641c <prvTimerTask+0x40>
 800644c:	e8df f003 	tbb	[pc, r3]
 8006450:	4f482525 	.word	0x4f482525
 8006454:	48252568 	.word	0x48252568
 8006458:	4f          	.byte	0x4f
 8006459:	00          	.byte	0x00
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800645a:	2401      	movs	r4, #1
 800645c:	e7cc      	b.n	80063f8 <prvTimerTask+0x1c>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800645e:	4b36      	ldr	r3, [pc, #216]	@ (8006538 <prvTimerTask+0x15c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681c      	ldr	r4, [r3, #0]
 8006464:	fab4 f484 	clz	r4, r4
 8006468:	0964      	lsrs	r4, r4, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800646a:	4622      	mov	r2, r4
 800646c:	6830      	ldr	r0, [r6, #0]
 800646e:	eba8 0105 	sub.w	r1, r8, r5
 8006472:	f7ff fa35 	bl	80058e0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006476:	f7ff fcdf 	bl	8005e38 <xTaskResumeAll>
 800647a:	2800      	cmp	r0, #0
 800647c:	d1ce      	bne.n	800641c <prvTimerTask+0x40>
                        portYIELD_WITHIN_API();
 800647e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006486:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	e7c3      	b.n	800641c <prvTimerTask+0x40>
                ( void ) xTaskResumeAll();
 8006494:	f7ff fcd0 	bl	8005e38 <xTaskResumeAll>
    }
 8006498:	e7c0      	b.n	800641c <prvTimerTask+0x40>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800649a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800649e:	69a1      	ldr	r1, [r4, #24]
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064a0:	f043 0301 	orr.w	r3, r3, #1
 80064a4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064a8:	9b02      	ldr	r3, [sp, #8]
 80064aa:	4602      	mov	r2, r0
 80064ac:	4419      	add	r1, r3
 80064ae:	4620      	mov	r0, r4
 80064b0:	f7ff ff1c 	bl	80062ec <prvInsertTimerInActiveList>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d0b1      	beq.n	800641c <prvTimerTask+0x40>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064b8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80064bc:	0759      	lsls	r1, r3, #29
 80064be:	d50a      	bpl.n	80064d6 <prvTimerTask+0xfa>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80064c0:	69a3      	ldr	r3, [r4, #24]
 80064c2:	9902      	ldr	r1, [sp, #8]
 80064c4:	462a      	mov	r2, r5
 80064c6:	4620      	mov	r0, r4
 80064c8:	4419      	add	r1, r3
 80064ca:	f7ff ff2d 	bl	8006328 <prvReloadTimer>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064ce:	4620      	mov	r0, r4
 80064d0:	6a23      	ldr	r3, [r4, #32]
 80064d2:	4798      	blx	r3
 80064d4:	e7a2      	b.n	800641c <prvTimerTask+0x40>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80064d6:	f023 0301 	bic.w	r3, r3, #1
 80064da:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80064de:	e7f6      	b.n	80064ce <prvTimerTask+0xf2>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80064e0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80064ec:	e796      	b.n	800641c <prvTimerTask+0x40>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064ee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80064f2:	f043 0301 	orr.w	r3, r3, #1
 80064f6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064fa:	9902      	ldr	r1, [sp, #8]
 80064fc:	61a1      	str	r1, [r4, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064fe:	b941      	cbnz	r1, 8006512 <prvTimerTask+0x136>
 8006500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	e7fe      	b.n	8006510 <prvTimerTask+0x134>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006512:	4603      	mov	r3, r0
 8006514:	4602      	mov	r2, r0
 8006516:	4401      	add	r1, r0
 8006518:	4620      	mov	r0, r4
 800651a:	f7ff fee7 	bl	80062ec <prvInsertTimerInActiveList>
                        break;
 800651e:	e77d      	b.n	800641c <prvTimerTask+0x40>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006520:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006524:	079a      	lsls	r2, r3, #30
 8006526:	d4dd      	bmi.n	80064e4 <prvTimerTask+0x108>
                                vPortFree( pxTimer );
 8006528:	4620      	mov	r0, r4
 800652a:	f000 fa6f 	bl	8006a0c <vPortFree>
 800652e:	e775      	b.n	800641c <prvTimerTask+0x40>
 8006530:	200002a4 	.word	0x200002a4
 8006534:	2000029c 	.word	0x2000029c
 8006538:	200002a0 	.word	0x200002a0

0800653c <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
 800653e:	4c0f      	ldr	r4, [pc, #60]	@ (800657c <prvCheckForValidListAndQueue+0x40>)
        taskENTER_CRITICAL();
 8006540:	f000 f8a8 	bl	8006694 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 8006544:	6825      	ldr	r5, [r4, #0]
 8006546:	b9ad      	cbnz	r5, 8006574 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8006548:	4f0d      	ldr	r7, [pc, #52]	@ (8006580 <prvCheckForValidListAndQueue+0x44>)
                vListInitialise( &xActiveTimerList2 );
 800654a:	4e0e      	ldr	r6, [pc, #56]	@ (8006584 <prvCheckForValidListAndQueue+0x48>)
                vListInitialise( &xActiveTimerList1 );
 800654c:	4638      	mov	r0, r7
 800654e:	f7fe fead 	bl	80052ac <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006552:	4630      	mov	r0, r6
 8006554:	f7fe feaa 	bl	80052ac <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006558:	4b0b      	ldr	r3, [pc, #44]	@ (8006588 <prvCheckForValidListAndQueue+0x4c>)

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800655a:	462a      	mov	r2, r5
                pxCurrentTimerList = &xActiveTimerList1;
 800655c:	601f      	str	r7, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800655e:	4b0b      	ldr	r3, [pc, #44]	@ (800658c <prvCheckForValidListAndQueue+0x50>)
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006560:	210c      	movs	r1, #12
 8006562:	2008      	movs	r0, #8
                pxOverflowTimerList = &xActiveTimerList2;
 8006564:	601e      	str	r6, [r3, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006566:	f7fe ffad 	bl	80054c4 <xQueueGenericCreate>
 800656a:	6020      	str	r0, [r4, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800656c:	b110      	cbz	r0, 8006574 <prvCheckForValidListAndQueue+0x38>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800656e:	4908      	ldr	r1, [pc, #32]	@ (8006590 <prvCheckForValidListAndQueue+0x54>)
 8006570:	f7ff f98e 	bl	8005890 <vQueueAddToRegistry>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    }
 8006574:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        taskEXIT_CRITICAL();
 8006578:	f000 b8ac 	b.w	80066d4 <vPortExitCritical>
 800657c:	2000029c 	.word	0x2000029c
 8006580:	200002bc 	.word	0x200002bc
 8006584:	200002a8 	.word	0x200002a8
 8006588:	200002a4 	.word	0x200002a4
 800658c:	200002a0 	.word	0x200002a0
 8006590:	08006b85 	.word	0x08006b85

08006594 <xTimerCreateTimerTask>:
    {
 8006594:	b507      	push	{r0, r1, r2, lr}
        prvCheckForValidListAndQueue();
 8006596:	f7ff ffd1 	bl	800653c <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 800659a:	4b0d      	ldr	r3, [pc, #52]	@ (80065d0 <xTimerCreateTimerTask+0x3c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	b943      	cbnz	r3, 80065b2 <xTimerCreateTimerTask+0x1e>
 80065a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
        configASSERT( xReturn );
 80065b0:	e7fe      	b.n	80065b0 <xTimerCreateTimerTask+0x1c>
                xReturn = xTaskCreate( prvTimerTask,
 80065b2:	4b08      	ldr	r3, [pc, #32]	@ (80065d4 <xTimerCreateTimerTask+0x40>)
 80065b4:	22c8      	movs	r2, #200	@ 0xc8
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	2302      	movs	r3, #2
 80065ba:	4907      	ldr	r1, [pc, #28]	@ (80065d8 <xTimerCreateTimerTask+0x44>)
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	4807      	ldr	r0, [pc, #28]	@ (80065dc <xTimerCreateTimerTask+0x48>)
 80065c0:	2300      	movs	r3, #0
 80065c2:	f7ff fa47 	bl	8005a54 <xTaskCreate>
        configASSERT( xReturn );
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d0ea      	beq.n	80065a0 <xTimerCreateTimerTask+0xc>
    }
 80065ca:	b003      	add	sp, #12
 80065cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80065d0:	2000029c 	.word	0x2000029c
 80065d4:	20000298 	.word	0x20000298
 80065d8:	08006b8a 	.word	0x08006b8a
 80065dc:	080063dd 	.word	0x080063dd

080065e0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80065e0:	4806      	ldr	r0, [pc, #24]	@ (80065fc <prvPortStartFirstTask+0x1c>)
 80065e2:	6800      	ldr	r0, [r0, #0]
 80065e4:	6800      	ldr	r0, [r0, #0]
 80065e6:	f380 8808 	msr	MSP, r0
 80065ea:	b662      	cpsie	i
 80065ec:	b661      	cpsie	f
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	df00      	svc	0
 80065f8:	bf00      	nop
 80065fa:	0000      	.short	0x0000
 80065fc:	e000ed08 	.word	0xe000ed08

08006600 <prvTaskExitError>:
    volatile uint32_t ulDummy = 0UL;
 8006600:	2300      	movs	r3, #0
{
 8006602:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0UL;
 8006604:	9301      	str	r3, [sp, #4]
    configASSERT( uxCriticalNesting == ~0UL );
 8006606:	4b0d      	ldr	r3, [pc, #52]	@ (800663c <prvTaskExitError+0x3c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3301      	adds	r3, #1
 800660c:	d008      	beq.n	8006620 <prvTaskExitError+0x20>
 800660e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	e7fe      	b.n	800661e <prvTaskExitError+0x1e>
 8006620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
    while( ulDummy == 0 )
 8006630:	9b01      	ldr	r3, [sp, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0fc      	beq.n	8006630 <prvTaskExitError+0x30>
}
 8006636:	b002      	add	sp, #8
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000010 	.word	0x20000010

08006640 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006640:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006644:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006648:	4b05      	ldr	r3, [pc, #20]	@ (8006660 <pxPortInitialiseStack+0x20>)
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800664a:	f021 0101 	bic.w	r1, r1, #1
 800664e:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006652:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8006656:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800665a:	3840      	subs	r0, #64	@ 0x40
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	08006601 	.word	0x08006601
	...

08006670 <SVC_Handler>:
    __asm volatile (
 8006670:	4b07      	ldr	r3, [pc, #28]	@ (8006690 <pxCurrentTCBConst2>)
 8006672:	6819      	ldr	r1, [r3, #0]
 8006674:	6808      	ldr	r0, [r1, #0]
 8006676:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800667a:	f380 8809 	msr	PSP, r0
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f380 8811 	msr	BASEPRI, r0
 800668a:	f04e 0e0d 	orr.w	lr, lr, #13
 800668e:	4770      	bx	lr

08006690 <pxCurrentTCBConst2>:
 8006690:	20000290 	.word	0x20000290

08006694 <vPortEnterCritical>:
 8006694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80066a4:	4a0a      	ldr	r2, [pc, #40]	@ (80066d0 <vPortEnterCritical+0x3c>)
 80066a6:	6813      	ldr	r3, [r2, #0]
 80066a8:	3301      	adds	r3, #1
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80066aa:	2b01      	cmp	r3, #1
    uxCriticalNesting++;
 80066ac:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
 80066ae:	d10e      	bne.n	80066ce <vPortEnterCritical+0x3a>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80066b4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	b143      	cbz	r3, 80066ce <vPortEnterCritical+0x3a>
 80066bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	e7fe      	b.n	80066cc <vPortEnterCritical+0x38>
    }
}
 80066ce:	4770      	bx	lr
 80066d0:	20000010 	.word	0x20000010

080066d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    configASSERT( uxCriticalNesting );
 80066d4:	4a08      	ldr	r2, [pc, #32]	@ (80066f8 <vPortExitCritical+0x24>)
 80066d6:	6813      	ldr	r3, [r2, #0]
 80066d8:	b943      	cbnz	r3, 80066ec <vPortExitCritical+0x18>
 80066da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	e7fe      	b.n	80066ea <vPortExitCritical+0x16>
    uxCriticalNesting--;
 80066ec:	3b01      	subs	r3, #1
 80066ee:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80066f0:	b90b      	cbnz	r3, 80066f6 <vPortExitCritical+0x22>
        __asm volatile
 80066f2:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80066f6:	4770      	bx	lr
 80066f8:	20000010 	.word	0x20000010
 80066fc:	00000000 	.word	0x00000000

08006700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006700:	f3ef 8009 	mrs	r0, PSP
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	4b0d      	ldr	r3, [pc, #52]	@ (8006740 <pxCurrentTCBConst>)
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006710:	6010      	str	r0, [r2, #0]
 8006712:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006716:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800671a:	f380 8811 	msr	BASEPRI, r0
 800671e:	f7ff fc4d 	bl	8005fbc <vTaskSwitchContext>
 8006722:	f04f 0000 	mov.w	r0, #0
 8006726:	f380 8811 	msr	BASEPRI, r0
 800672a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800672e:	6819      	ldr	r1, [r3, #0]
 8006730:	6808      	ldr	r0, [r1, #0]
 8006732:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006736:	f380 8809 	msr	PSP, r0
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	4770      	bx	lr

08006740 <pxCurrentTCBConst>:
 8006740:	20000290 	.word	0x20000290

08006744 <SysTick_Handler>:
    );
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006744:	b508      	push	{r3, lr}
        __asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006756:	f7ff fab9 	bl	8005ccc <xTaskIncrementTick>
 800675a:	b128      	cbz	r0, 8006768 <SysTick_Handler+0x24>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800675c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006764:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
        __asm volatile
 8006768:	2300      	movs	r3, #0
 800676a:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800676e:	bd08      	pop	{r3, pc}

08006770 <vPortSetupTimerInterrupt>:
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006770:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006774:	2300      	movs	r3, #0
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006776:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800677a:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800677c:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800677e:	4b04      	ldr	r3, [pc, #16]	@ (8006790 <vPortSetupTimerInterrupt+0x20>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	fbb3 f3f1 	udiv	r3, r3, r1
 8006786:	3b01      	subs	r3, #1
 8006788:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800678a:	2307      	movs	r3, #7
 800678c:	6113      	str	r3, [r2, #16]
}
 800678e:	4770      	bx	lr
 8006790:	20000000 	.word	0x20000000

08006794 <xPortStartScheduler>:
{
 8006794:	b513      	push	{r0, r1, r4, lr}
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006796:	4b27      	ldr	r3, [pc, #156]	@ (8006834 <xPortStartScheduler+0xa0>)
 8006798:	781a      	ldrb	r2, [r3, #0]
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	9201      	str	r2, [sp, #4]
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800679e:	22ff      	movs	r2, #255	@ 0xff
 80067a0:	701a      	strb	r2, [r3, #0]
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067a2:	781b      	ldrb	r3, [r3, #0]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067a4:	4a24      	ldr	r2, [pc, #144]	@ (8006838 <xPortStartScheduler+0xa4>)
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	f88d 3003 	strb.w	r3, [sp, #3]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80067b0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80067b4:	7013      	strb	r3, [r2, #0]
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067b6:	2307      	movs	r3, #7
 80067b8:	4a20      	ldr	r2, [pc, #128]	@ (800683c <xPortStartScheduler+0xa8>)
 80067ba:	6013      	str	r3, [r2, #0]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067bc:	f89d 1003 	ldrb.w	r1, [sp, #3]
            ulMaxPRIGROUPValue--;
 80067c0:	6813      	ldr	r3, [r2, #0]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067c2:	0609      	lsls	r1, r1, #24
 80067c4:	d40a      	bmi.n	80067dc <xPortStartScheduler+0x48>
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d011      	beq.n	80067ee <xPortStartScheduler+0x5a>
        __asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	e7fe      	b.n	80067da <xPortStartScheduler+0x46>
            ulMaxPRIGROUPValue--;
 80067dc:	3b01      	subs	r3, #1
 80067de:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	f88d 3003 	strb.w	r3, [sp, #3]
 80067ec:	e7e6      	b.n	80067bc <xPortStartScheduler+0x28>
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80067f2:	6013      	str	r3, [r2, #0]
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80067f4:	9b01      	ldr	r3, [sp, #4]
 80067f6:	4a0f      	ldr	r2, [pc, #60]	@ (8006834 <xPortStartScheduler+0xa0>)
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80067fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    uxCriticalNesting = 0;
 8006800:	2400      	movs	r4, #0
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006802:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8006806:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800680a:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800680e:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8006812:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 8006816:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
    vPortSetupTimerInterrupt();
 800681a:	f7ff ffa9 	bl	8006770 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 800681e:	4b08      	ldr	r3, [pc, #32]	@ (8006840 <xPortStartScheduler+0xac>)
 8006820:	601c      	str	r4, [r3, #0]
    prvPortStartFirstTask();
 8006822:	f7ff fedd 	bl	80065e0 <prvPortStartFirstTask>
    vTaskSwitchContext();
 8006826:	f7ff fbc9 	bl	8005fbc <vTaskSwitchContext>
}
 800682a:	4620      	mov	r0, r4
    prvTaskExitError();
 800682c:	f7ff fee8 	bl	8006600 <prvTaskExitError>
}
 8006830:	b002      	add	sp, #8
 8006832:	bd10      	pop	{r4, pc}
 8006834:	e000e400 	.word	0xe000e400
 8006838:	200002d4 	.word	0x200002d4
 800683c:	200002d0 	.word	0x200002d0
 8006840:	20000010 	.word	0x20000010

08006844 <vPortValidateInterruptPriority>:
    {
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006844:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006848:	2b0f      	cmp	r3, #15
 800684a:	d90e      	bls.n	800686a <vPortValidateInterruptPriority+0x26>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800684c:	4a11      	ldr	r2, [pc, #68]	@ (8006894 <vPortValidateInterruptPriority+0x50>)
 800684e:	5c9b      	ldrb	r3, [r3, r2]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006850:	4a11      	ldr	r2, [pc, #68]	@ (8006898 <vPortValidateInterruptPriority+0x54>)
 8006852:	7812      	ldrb	r2, [r2, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d908      	bls.n	800686a <vPortValidateInterruptPriority+0x26>
 8006858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	e7fe      	b.n	8006868 <vPortValidateInterruptPriority+0x24>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800686a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800686e:	4a0b      	ldr	r2, [pc, #44]	@ (800689c <vPortValidateInterruptPriority+0x58>)
 8006870:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800687a:	4293      	cmp	r3, r2
 800687c:	d908      	bls.n	8006890 <vPortValidateInterruptPriority+0x4c>
 800687e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	e7fe      	b.n	800688e <vPortValidateInterruptPriority+0x4a>
    }
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	e000e3f0 	.word	0xe000e3f0
 8006898:	200002d4 	.word	0x200002d4
 800689c:	200002d0 	.word	0x200002d0

080068a0 <prvInsertBlockIntoFreeList>:
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80068a0:	b510      	push	{r4, lr}
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068a2:	4b10      	ldr	r3, [pc, #64]	@ (80068e4 <prvInsertBlockIntoFreeList+0x44>)
 80068a4:	461a      	mov	r2, r3
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4283      	cmp	r3, r0
 80068aa:	d3fb      	bcc.n	80068a4 <prvInsertBlockIntoFreeList+0x4>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068ac:	6854      	ldr	r4, [r2, #4]
 80068ae:	1911      	adds	r1, r2, r4
 80068b0:	4288      	cmp	r0, r1
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068b2:	bf01      	itttt	eq
 80068b4:	6841      	ldreq	r1, [r0, #4]
 80068b6:	4610      	moveq	r0, r2
 80068b8:	1909      	addeq	r1, r1, r4
 80068ba:	6051      	streq	r1, [r2, #4]

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068bc:	6844      	ldr	r4, [r0, #4]
 80068be:	1901      	adds	r1, r0, r4
 80068c0:	428b      	cmp	r3, r1
 80068c2:	d10c      	bne.n	80068de <prvInsertBlockIntoFreeList+0x3e>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80068c4:	4908      	ldr	r1, [pc, #32]	@ (80068e8 <prvInsertBlockIntoFreeList+0x48>)
 80068c6:	6809      	ldr	r1, [r1, #0]
 80068c8:	428b      	cmp	r3, r1
 80068ca:	d003      	beq.n	80068d4 <prvInsertBlockIntoFreeList+0x34>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068cc:	6859      	ldr	r1, [r3, #4]
 80068ce:	4421      	add	r1, r4
 80068d0:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068d2:	6819      	ldr	r1, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80068d4:	4290      	cmp	r0, r2
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068d6:	6001      	str	r1, [r0, #0]
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068d8:	bf18      	it	ne
 80068da:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80068dc:	bd10      	pop	{r4, pc}
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068de:	4619      	mov	r1, r3
 80068e0:	e7f8      	b.n	80068d4 <prvInsertBlockIntoFreeList+0x34>
 80068e2:	bf00      	nop
 80068e4:	200002ec 	.word	0x200002ec
 80068e8:	200002e8 	.word	0x200002e8

080068ec <pvPortMalloc>:
{
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	4604      	mov	r4, r0
    vTaskSuspendAll();
 80068f0:	f7ff f9d8 	bl	8005ca4 <vTaskSuspendAll>
        if( pxEnd == NULL )
 80068f4:	493f      	ldr	r1, [pc, #252]	@ (80069f4 <pvPortMalloc+0x108>)
 80068f6:	680b      	ldr	r3, [r1, #0]
 80068f8:	b9f3      	cbnz	r3, 8006938 <pvPortMalloc+0x4c>
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80068fa:	4a3f      	ldr	r2, [pc, #252]	@ (80069f8 <pvPortMalloc+0x10c>)
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068fc:	4d3f      	ldr	r5, [pc, #252]	@ (80069fc <pvPortMalloc+0x110>)
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068fe:	0750      	lsls	r0, r2, #29
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006900:	bf1f      	itttt	ne
 8006902:	1dd0      	addne	r0, r2, #7
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006904:	f020 0007 	bicne.w	r0, r0, #7
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006908:	f502 5220 	addne.w	r2, r2, #10240	@ 0x2800
 800690c:	1a13      	subne	r3, r2, r0
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800690e:	bf0c      	ite	eq
 8006910:	f44f 5320 	moveq.w	r3, #10240	@ 0x2800
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006914:	4602      	movne	r2, r0
    xStart.xBlockSize = ( size_t ) 0;
 8006916:	2000      	movs	r0, #0
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006918:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
 800691a:	3b08      	subs	r3, #8
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800691c:	f023 0307 	bic.w	r3, r3, #7
    xStart.xBlockSize = ( size_t ) 0;
 8006920:	6068      	str	r0, [r5, #4]
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006922:	602a      	str	r2, [r5, #0]
    pxEnd->pxNextFreeBlock = NULL;
 8006924:	e9c3 0000 	strd	r0, r0, [r3]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8006928:	1a98      	subs	r0, r3, r2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800692a:	e9c2 3000 	strd	r3, r0, [r2]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800692e:	600b      	str	r3, [r1, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006930:	4b33      	ldr	r3, [pc, #204]	@ (8006a00 <pvPortMalloc+0x114>)
 8006932:	6018      	str	r0, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006934:	4b33      	ldr	r3, [pc, #204]	@ (8006a04 <pvPortMalloc+0x118>)
 8006936:	6018      	str	r0, [r3, #0]
        if( xWantedSize > 0 )
 8006938:	2c00      	cmp	r4, #0
 800693a:	d04a      	beq.n	80069d2 <pvPortMalloc+0xe6>
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800693c:	f004 0307 	and.w	r3, r4, #7
            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8006940:	f1a3 0211 	sub.w	r2, r3, #17
 8006944:	42a2      	cmp	r2, r4
 8006946:	d351      	bcc.n	80069ec <pvPortMalloc+0x100>
 8006948:	f104 0e10 	add.w	lr, r4, #16
                xWantedSize += xAdditionalRequiredSize;
 800694c:	ebae 0c03 	sub.w	ip, lr, r3
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006950:	f1bc 0f00 	cmp.w	ip, #0
 8006954:	dd4a      	ble.n	80069ec <pvPortMalloc+0x100>
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006956:	4f2b      	ldr	r7, [pc, #172]	@ (8006a04 <pvPortMalloc+0x118>)
 8006958:	683e      	ldr	r6, [r7, #0]
 800695a:	4566      	cmp	r6, ip
 800695c:	d346      	bcc.n	80069ec <pvPortMalloc+0x100>
                pxBlock = xStart.pxNextFreeBlock;
 800695e:	4a27      	ldr	r2, [pc, #156]	@ (80069fc <pvPortMalloc+0x110>)
 8006960:	6815      	ldr	r5, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006962:	6868      	ldr	r0, [r5, #4]
 8006964:	4560      	cmp	r0, ip
 8006966:	d201      	bcs.n	800696c <pvPortMalloc+0x80>
 8006968:	682c      	ldr	r4, [r5, #0]
 800696a:	b9bc      	cbnz	r4, 800699c <pvPortMalloc+0xb0>
                if( pxBlock != pxEnd )
 800696c:	6809      	ldr	r1, [r1, #0]
 800696e:	42a9      	cmp	r1, r5
 8006970:	d03c      	beq.n	80069ec <pvPortMalloc+0x100>
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006972:	eba3 030e 	sub.w	r3, r3, lr
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006976:	6829      	ldr	r1, [r5, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006978:	4403      	add	r3, r0
 800697a:	2b10      	cmp	r3, #16
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800697c:	6814      	ldr	r4, [r2, #0]
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800697e:	6011      	str	r1, [r2, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006980:	d914      	bls.n	80069ac <pvPortMalloc+0xc0>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006982:	eb05 000c 	add.w	r0, r5, ip
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006986:	0742      	lsls	r2, r0, #29
 8006988:	d00b      	beq.n	80069a2 <pvPortMalloc+0xb6>
 800698a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	e7fe      	b.n	800699a <pvPortMalloc+0xae>
 800699c:	462a      	mov	r2, r5
 800699e:	4625      	mov	r5, r4
 80069a0:	e7df      	b.n	8006962 <pvPortMalloc+0x76>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069a2:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80069a4:	f8c5 c004 	str.w	ip, [r5, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069a8:	f7ff ff7a 	bl	80068a0 <prvInsertBlockIntoFreeList>
                    pxBlock->pxNextFreeBlock = NULL;
 80069ac:	2300      	movs	r3, #0
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069ae:	686a      	ldr	r2, [r5, #4]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069b0:	4913      	ldr	r1, [pc, #76]	@ (8006a00 <pvPortMalloc+0x114>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069b2:	1ab6      	subs	r6, r6, r2
                    heapALLOCATE_BLOCK( pxBlock );
 80069b4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80069b8:	606a      	str	r2, [r5, #4]
                    xNumberOfSuccessfulAllocations++;
 80069ba:	4a13      	ldr	r2, [pc, #76]	@ (8006a08 <pvPortMalloc+0x11c>)
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069bc:	6808      	ldr	r0, [r1, #0]
                    pxBlock->pxNextFreeBlock = NULL;
 80069be:	602b      	str	r3, [r5, #0]
                    xNumberOfSuccessfulAllocations++;
 80069c0:	6813      	ldr	r3, [r2, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069c2:	4286      	cmp	r6, r0
                    xNumberOfSuccessfulAllocations++;
 80069c4:	f103 0301 	add.w	r3, r3, #1
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069c8:	603e      	str	r6, [r7, #0]
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069ca:	bf38      	it	cc
 80069cc:	600e      	strcc	r6, [r1, #0]
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069ce:	3408      	adds	r4, #8
                    xNumberOfSuccessfulAllocations++;
 80069d0:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
 80069d2:	f7ff fa31 	bl	8005e38 <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069d6:	0763      	lsls	r3, r4, #29
 80069d8:	d00a      	beq.n	80069f0 <pvPortMalloc+0x104>
 80069da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	e7fe      	b.n	80069ea <pvPortMalloc+0xfe>
    void * pvReturn = NULL;
 80069ec:	2400      	movs	r4, #0
 80069ee:	e7f0      	b.n	80069d2 <pvPortMalloc+0xe6>
}
 80069f0:	4620      	mov	r0, r4
 80069f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f4:	200002e8 	.word	0x200002e8
 80069f8:	200002f4 	.word	0x200002f4
 80069fc:	200002ec 	.word	0x200002ec
 8006a00:	200002e0 	.word	0x200002e0
 8006a04:	200002e4 	.word	0x200002e4
 8006a08:	200002dc 	.word	0x200002dc

08006a0c <vPortFree>:
{
 8006a0c:	b510      	push	{r4, lr}
    if( pv != NULL )
 8006a0e:	4604      	mov	r4, r0
 8006a10:	b380      	cbz	r0, 8006a74 <vPortFree+0x68>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006a12:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	db08      	blt.n	8006a2c <vPortFree+0x20>
 8006a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	e7fe      	b.n	8006a2a <vPortFree+0x1e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a2c:	f850 2c08 	ldr.w	r2, [r0, #-8]
 8006a30:	b142      	cbz	r2, 8006a44 <vPortFree+0x38>
 8006a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	e7fe      	b.n	8006a42 <vPortFree+0x36>
                heapFREE_BLOCK( pxLink );
 8006a44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a48:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 8006a4c:	f7ff f92a 	bl	8005ca4 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006a50:	4a09      	ldr	r2, [pc, #36]	@ (8006a78 <vPortFree+0x6c>)
 8006a52:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006a56:	6811      	ldr	r1, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a58:	f1a4 0008 	sub.w	r0, r4, #8
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006a5c:	440b      	add	r3, r1
 8006a5e:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a60:	f7ff ff1e 	bl	80068a0 <prvInsertBlockIntoFreeList>
}
 8006a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                    xNumberOfSuccessfulFrees++;
 8006a68:	4a04      	ldr	r2, [pc, #16]	@ (8006a7c <vPortFree+0x70>)
 8006a6a:	6813      	ldr	r3, [r2, #0]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 8006a70:	f7ff b9e2 	b.w	8005e38 <xTaskResumeAll>
}
 8006a74:	bd10      	pop	{r4, pc}
 8006a76:	bf00      	nop
 8006a78:	200002e4 	.word	0x200002e4
 8006a7c:	200002d8 	.word	0x200002d8

08006a80 <memset>:
 8006a80:	4603      	mov	r3, r0
 8006a82:	4402      	add	r2, r0
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d100      	bne.n	8006a8a <memset+0xa>
 8006a88:	4770      	bx	lr
 8006a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a8e:	e7f9      	b.n	8006a84 <memset+0x4>

08006a90 <__libc_init_array>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	2600      	movs	r6, #0
 8006a94:	4d0c      	ldr	r5, [pc, #48]	@ (8006ac8 <__libc_init_array+0x38>)
 8006a96:	4c0d      	ldr	r4, [pc, #52]	@ (8006acc <__libc_init_array+0x3c>)
 8006a98:	1b64      	subs	r4, r4, r5
 8006a9a:	10a4      	asrs	r4, r4, #2
 8006a9c:	42a6      	cmp	r6, r4
 8006a9e:	d109      	bne.n	8006ab4 <__libc_init_array+0x24>
 8006aa0:	f000 f828 	bl	8006af4 <_init>
 8006aa4:	2600      	movs	r6, #0
 8006aa6:	4d0a      	ldr	r5, [pc, #40]	@ (8006ad0 <__libc_init_array+0x40>)
 8006aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8006ad4 <__libc_init_array+0x44>)
 8006aaa:	1b64      	subs	r4, r4, r5
 8006aac:	10a4      	asrs	r4, r4, #2
 8006aae:	42a6      	cmp	r6, r4
 8006ab0:	d105      	bne.n	8006abe <__libc_init_array+0x2e>
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab8:	4798      	blx	r3
 8006aba:	3601      	adds	r6, #1
 8006abc:	e7ee      	b.n	8006a9c <__libc_init_array+0xc>
 8006abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac2:	4798      	blx	r3
 8006ac4:	3601      	adds	r6, #1
 8006ac6:	e7f2      	b.n	8006aae <__libc_init_array+0x1e>
 8006ac8:	08006b94 	.word	0x08006b94
 8006acc:	08006b94 	.word	0x08006b94
 8006ad0:	08006b94 	.word	0x08006b94
 8006ad4:	08006b98 	.word	0x08006b98

08006ad8 <memcpy>:
 8006ad8:	440a      	add	r2, r1
 8006ada:	4291      	cmp	r1, r2
 8006adc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ae0:	d100      	bne.n	8006ae4 <memcpy+0xc>
 8006ae2:	4770      	bx	lr
 8006ae4:	b510      	push	{r4, lr}
 8006ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aea:	4291      	cmp	r1, r2
 8006aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006af0:	d1f9      	bne.n	8006ae6 <memcpy+0xe>
 8006af2:	bd10      	pop	{r4, pc}

08006af4 <_init>:
 8006af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af6:	bf00      	nop
 8006af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afa:	bc08      	pop	{r3}
 8006afc:	469e      	mov	lr, r3
 8006afe:	4770      	bx	lr

08006b00 <_fini>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	bf00      	nop
 8006b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b06:	bc08      	pop	{r3}
 8006b08:	469e      	mov	lr, r3
 8006b0a:	4770      	bx	lr
