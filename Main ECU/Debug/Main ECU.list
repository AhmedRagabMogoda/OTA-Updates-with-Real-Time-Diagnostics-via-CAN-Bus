
Main ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008318  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08008428  08008428  00009428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084bc  080084bc  0000a014  2**0
                  CONTENTS
  4 .ARM          00000000  080084bc  080084bc  0000a014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084bc  080084bc  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084bc  080084bc  000094bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084c0  080084c0  000094c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080084c4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002adc  20000018  080084d8  0000a018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002af4  080084d8  0000aaf4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c7a  00000000  00000000  0000a03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000493d  00000000  00000000  00022cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  000275f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001216  00000000  00000000  00028d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7be  00000000  00000000  00029f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4d1  00000000  00000000  00045744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098abe  00000000  00000000  00064c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd6d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fd4  00000000  00000000  000fd718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  001036ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08008410 	.word	0x08008410

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08008410 	.word	0x08008410

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__gesf2>:
 800036c:	f04f 3cff 	mov.w	ip, #4294967295
 8000370:	e006      	b.n	8000380 <__cmpsf2+0x4>
 8000372:	bf00      	nop

08000374 <__lesf2>:
 8000374:	f04f 0c01 	mov.w	ip, #1
 8000378:	e002      	b.n	8000380 <__cmpsf2+0x4>
 800037a:	bf00      	nop

0800037c <__cmpsf2>:
 800037c:	f04f 0c01 	mov.w	ip, #1
 8000380:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000384:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000388:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800038c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000390:	bf18      	it	ne
 8000392:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000396:	d011      	beq.n	80003bc <__cmpsf2+0x40>
 8000398:	b001      	add	sp, #4
 800039a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800039e:	bf18      	it	ne
 80003a0:	ea90 0f01 	teqne	r0, r1
 80003a4:	bf58      	it	pl
 80003a6:	ebb2 0003 	subspl.w	r0, r2, r3
 80003aa:	bf88      	it	hi
 80003ac:	17c8      	asrhi	r0, r1, #31
 80003ae:	bf38      	it	cc
 80003b0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003b4:	bf18      	it	ne
 80003b6:	f040 0001 	orrne.w	r0, r0, #1
 80003ba:	4770      	bx	lr
 80003bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c0:	d102      	bne.n	80003c8 <__cmpsf2+0x4c>
 80003c2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003c6:	d105      	bne.n	80003d4 <__cmpsf2+0x58>
 80003c8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003cc:	d1e4      	bne.n	8000398 <__cmpsf2+0x1c>
 80003ce:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003d2:	d0e1      	beq.n	8000398 <__cmpsf2+0x1c>
 80003d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop

080003dc <__aeabi_cfrcmple>:
 80003dc:	4684      	mov	ip, r0
 80003de:	4608      	mov	r0, r1
 80003e0:	4661      	mov	r1, ip
 80003e2:	e7ff      	b.n	80003e4 <__aeabi_cfcmpeq>

080003e4 <__aeabi_cfcmpeq>:
 80003e4:	b50f      	push	{r0, r1, r2, r3, lr}
 80003e6:	f7ff ffc9 	bl	800037c <__cmpsf2>
 80003ea:	2800      	cmp	r0, #0
 80003ec:	bf48      	it	mi
 80003ee:	f110 0f00 	cmnmi.w	r0, #0
 80003f2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080003f4 <__aeabi_fcmpeq>:
 80003f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80003f8:	f7ff fff4 	bl	80003e4 <__aeabi_cfcmpeq>
 80003fc:	bf0c      	ite	eq
 80003fe:	2001      	moveq	r0, #1
 8000400:	2000      	movne	r0, #0
 8000402:	f85d fb08 	ldr.w	pc, [sp], #8
 8000406:	bf00      	nop

08000408 <__aeabi_fcmplt>:
 8000408:	f84d ed08 	str.w	lr, [sp, #-8]!
 800040c:	f7ff ffea 	bl	80003e4 <__aeabi_cfcmpeq>
 8000410:	bf34      	ite	cc
 8000412:	2001      	movcc	r0, #1
 8000414:	2000      	movcs	r0, #0
 8000416:	f85d fb08 	ldr.w	pc, [sp], #8
 800041a:	bf00      	nop

0800041c <__aeabi_fcmple>:
 800041c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000420:	f7ff ffe0 	bl	80003e4 <__aeabi_cfcmpeq>
 8000424:	bf94      	ite	ls
 8000426:	2001      	movls	r0, #1
 8000428:	2000      	movhi	r0, #0
 800042a:	f85d fb08 	ldr.w	pc, [sp], #8
 800042e:	bf00      	nop

08000430 <__aeabi_fcmpge>:
 8000430:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000434:	f7ff ffd2 	bl	80003dc <__aeabi_cfrcmple>
 8000438:	bf94      	ite	ls
 800043a:	2001      	movls	r0, #1
 800043c:	2000      	movhi	r0, #0
 800043e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000442:	bf00      	nop

08000444 <__aeabi_fcmpgt>:
 8000444:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000448:	f7ff ffc8 	bl	80003dc <__aeabi_cfrcmple>
 800044c:	bf34      	ite	cc
 800044e:	2001      	movcc	r0, #1
 8000450:	2000      	movcs	r0, #0
 8000452:	f85d fb08 	ldr.w	pc, [sp], #8
 8000456:	bf00      	nop

08000458 <__aeabi_f2uiz>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	d20e      	bcs.n	800047a <__aeabi_f2uiz+0x22>
 800045c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000460:	d30b      	bcc.n	800047a <__aeabi_f2uiz+0x22>
 8000462:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000466:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800046a:	d409      	bmi.n	8000480 <__aeabi_f2uiz+0x28>
 800046c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000470:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000474:	fa23 f002 	lsr.w	r0, r3, r2
 8000478:	4770      	bx	lr
 800047a:	f04f 0000 	mov.w	r0, #0
 800047e:	4770      	bx	lr
 8000480:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000484:	d101      	bne.n	800048a <__aeabi_f2uiz+0x32>
 8000486:	0242      	lsls	r2, r0, #9
 8000488:	d102      	bne.n	8000490 <__aeabi_f2uiz+0x38>
 800048a:	f04f 30ff 	mov.w	r0, #4294967295
 800048e:	4770      	bx	lr
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop

08000498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049c:	f000 ffc8 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a0:	f000 f81a 	bl	80004d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a4:	f000 f91c 	bl	80006e0 <MX_GPIO_Init>
  MX_CAN_Init();
 80004a8:	f000 f870 	bl	800058c <MX_CAN_Init>
  MX_RTC_Init();
 80004ac:	f000 f8a4 	bl	80005f8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80004b0:	f000 f8ec 	bl	800068c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* configure three banks */
  CAN_Filter_Config();
 80004b4:	f000 f952 	bl	800075c <CAN_Filter_Config>

  /* Start CAN peripheral and notifications */
  HAL_CAN_Start(&hcan);
 80004b8:	4806      	ldr	r0, [pc, #24]	@ (80004d4 <main+0x3c>)
 80004ba:	f001 f9af 	bl	800181c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80004be:	2102      	movs	r1, #2
 80004c0:	4804      	ldr	r0, [pc, #16]	@ (80004d4 <main+0x3c>)
 80004c2:	f001 fbdf 	bl	8001c84 <HAL_CAN_ActivateNotification>

  /** Initialize FreeRTOS tasks **/
  FreeRTOS_Init();
 80004c6:	f005 f9e7 	bl	8005898 <FreeRTOS_Init>

  /** Start scheduler **/
  Start_Scheduler();
 80004ca:	f005 f9f5 	bl	80058b8 <Start_Scheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ce:	bf00      	nop
 80004d0:	e7fd      	b.n	80004ce <main+0x36>
 80004d2:	bf00      	nop
 80004d4:	20000034 	.word	0x20000034

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b094      	sub	sp, #80	@ 0x50
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004e2:	2228      	movs	r2, #40	@ 0x28
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f007 ff58 	bl	800839c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000508:	230a      	movs	r3, #10
 800050a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050c:	2301      	movs	r3, #1
 800050e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000510:	2310      	movs	r3, #16
 8000512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000514:	2301      	movs	r3, #1
 8000516:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000518:	2302      	movs	r3, #2
 800051a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800051c:	2300      	movs	r3, #0
 800051e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000520:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000524:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800052a:	4618      	mov	r0, r3
 800052c:	f002 fb46 	bl	8002bbc <HAL_RCC_OscConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000536:	f000 f95f 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053a:	230f      	movs	r3, #15
 800053c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	2302      	movs	r3, #2
 8000540:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800054a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	2102      	movs	r1, #2
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fdb2 	bl	80030c0 <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000562:	f000 f949 	bl	80007f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000566:	2301      	movs	r3, #1
 8000568:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800056a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800056e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4618      	mov	r0, r3
 8000574:	f002 ff62 	bl	800343c <HAL_RCCEx_PeriphCLKConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800057e:	f000 f93b 	bl	80007f8 <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3750      	adds	r7, #80	@ 0x50
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000590:	4b17      	ldr	r3, [pc, #92]	@ (80005f0 <MX_CAN_Init+0x64>)
 8000592:	4a18      	ldr	r2, [pc, #96]	@ (80005f4 <MX_CAN_Init+0x68>)
 8000594:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000596:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <MX_CAN_Init+0x64>)
 8000598:	2204      	movs	r2, #4
 800059a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800059c:	4b14      	ldr	r3, [pc, #80]	@ (80005f0 <MX_CAN_Init+0x64>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005a2:	4b13      	ldr	r3, [pc, #76]	@ (80005f0 <MX_CAN_Init+0x64>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80005a8:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <MX_CAN_Init+0x64>)
 80005aa:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80005ae:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <MX_CAN_Init+0x64>)
 80005b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80005b6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005b8:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <MX_CAN_Init+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005be:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <MX_CAN_Init+0x64>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <MX_CAN_Init+0x64>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <MX_CAN_Init+0x64>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <MX_CAN_Init+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <MX_CAN_Init+0x64>)
 80005d8:	2200      	movs	r2, #0
 80005da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005dc:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <MX_CAN_Init+0x64>)
 80005de:	f000 ff59 	bl	8001494 <HAL_CAN_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80005e8:	f000 f906 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000034 	.word	0x20000034
 80005f4:	40006400 	.word	0x40006400

080005f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2100      	movs	r1, #0
 8000602:	460a      	mov	r2, r1
 8000604:	801a      	strh	r2, [r3, #0]
 8000606:	460a      	mov	r2, r1
 8000608:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800060e:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <MX_RTC_Init+0x8c>)
 8000610:	4a1d      	ldr	r2, [pc, #116]	@ (8000688 <MX_RTC_Init+0x90>)
 8000612:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000614:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <MX_RTC_Init+0x8c>)
 8000616:	f04f 32ff 	mov.w	r2, #4294967295
 800061a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800061c:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <MX_RTC_Init+0x8c>)
 800061e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000622:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000624:	4817      	ldr	r0, [pc, #92]	@ (8000684 <MX_RTC_Init+0x8c>)
 8000626:	f003 f875 	bl	8003714 <HAL_RTC_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000630:	f000 f8e2 	bl	80007f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	4619      	mov	r1, r3
 8000646:	480f      	ldr	r0, [pc, #60]	@ (8000684 <MX_RTC_Init+0x8c>)
 8000648:	f003 f8f0 	bl	800382c <HAL_RTC_SetTime>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000652:	f000 f8d1 	bl	80007f8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000656:	2301      	movs	r3, #1
 8000658:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800065a:	2301      	movs	r3, #1
 800065c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 800065e:	2301      	movs	r3, #1
 8000660:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	@ (8000684 <MX_RTC_Init+0x8c>)
 800066e:	f003 fa4d 	bl	8003b0c <HAL_RTC_SetDate>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000678:	f000 f8be 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000005c 	.word	0x2000005c
 8000688:	40002800 	.word	0x40002800

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	@ (80006dc <MX_USART2_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f004 f80c 	bl	80046e0 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f000 f893 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000070 	.word	0x20000070
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <MX_GPIO_Init+0x74>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a16      	ldr	r2, [pc, #88]	@ (8000754 <MX_GPIO_Init+0x74>)
 80006fa:	f043 0304 	orr.w	r3, r3, #4
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_GPIO_Init+0x74>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_GPIO_Init+0x74>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a10      	ldr	r2, [pc, #64]	@ (8000754 <MX_GPIO_Init+0x74>)
 8000712:	f043 0308 	orr.w	r3, r3, #8
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_GPIO_Init+0x74>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0308 	and.w	r3, r3, #8
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2120      	movs	r1, #32
 8000728:	480b      	ldr	r0, [pc, #44]	@ (8000758 <MX_GPIO_Init+0x78>)
 800072a:	f002 fa09 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800072e:	2320      	movs	r3, #32
 8000730:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2302      	movs	r3, #2
 800073c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	@ (8000758 <MX_GPIO_Init+0x78>)
 8000746:	f002 f877 	bl	8002838 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000
 8000758:	40010c00 	.word	0x40010c00

0800075c <CAN_Filter_Config>:

/* USER CODE BEGIN 4 */

void CAN_Filter_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef filter;

    /* Filter for CAN_ID_1 in bank 0 */
    filter.FilterBank           = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
    filter.FilterMode           = CAN_FILTERMODE_IDLIST;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
    filter.FilterScale          = CAN_FILTERSCALE_32BIT;
 800076a:	2301      	movs	r3, #1
 800076c:	61fb      	str	r3, [r7, #28]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
    filter.FilterActivation     = ENABLE;
 8000772:	2301      	movs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]

    /* Position standard ID at bits 21..31 */
    filter.FilterIdHigh   = (uint16_t)(UDS_REQUEST_ID << 5);       /* high 16 bits of 32-bit ID */
 8000776:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800077a:	603b      	str	r3, [r7, #0]
    filter.FilterIdLow    =  0x0000;                         /* low 16 bits */
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
    filter.FilterMaskIdHigh = 0xFFFF;                        /* unused in IDLIST */
 8000780:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000784:	60bb      	str	r3, [r7, #8]
    filter.FilterMaskIdLow    = 0xFFFF;
 8000786:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800078a:	60fb      	str	r3, [r7, #12]
    HAL_CAN_ConfigFilter(&hcan, &filter);
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	480f      	ldr	r0, [pc, #60]	@ (80007d0 <CAN_Filter_Config+0x74>)
 8000792:	f000 ff7a 	bl	800168a <HAL_CAN_ConfigFilter>

    /* Filter for CAN_ID_2 in bank 1 */
    filter.FilterBank = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	617b      	str	r3, [r7, #20]
    filter.FilterIdHigh   = (uint16_t)(SENSOR_DIST_ID << 5);
 800079a:	f246 0320 	movw	r3, #24608	@ 0x6020
 800079e:	603b      	str	r3, [r7, #0]
    filter.FilterIdLow    =  0x0000;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
    HAL_CAN_ConfigFilter(&hcan, &filter);
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4809      	ldr	r0, [pc, #36]	@ (80007d0 <CAN_Filter_Config+0x74>)
 80007aa:	f000 ff6e 	bl	800168a <HAL_CAN_ConfigFilter>

    /* Filter for CAN_ID_3 in bank 2 */
    filter.FilterBank = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	617b      	str	r3, [r7, #20]
    filter.FilterIdHigh   = (uint16_t)(SENSOR_TEMP_ID << 5);
 80007b2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007b6:	603b      	str	r3, [r7, #0]
    filter.FilterIdLow    =  0x0000;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
    HAL_CAN_ConfigFilter(&hcan, &filter);
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <CAN_Filter_Config+0x74>)
 80007c2:	f000 ff62 	bl	800168a <HAL_CAN_ConfigFilter>
}
 80007c6:	bf00      	nop
 80007c8:	3728      	adds	r7, #40	@ 0x28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000034 	.word	0x20000034

080007d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a04      	ldr	r2, [pc, #16]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d101      	bne.n	80007ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e6:	f000 fe39 	bl	800145c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40012c00 	.word	0x40012c00

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <Error_Handler+0x8>

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800080a:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <HAL_MspInit+0x5c>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a14      	ldr	r2, [pc, #80]	@ (8000860 <HAL_MspInit+0x5c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <HAL_MspInit+0x5c>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <HAL_MspInit+0x5c>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a0e      	ldr	r2, [pc, #56]	@ (8000860 <HAL_MspInit+0x5c>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <HAL_MspInit+0x5c>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800083a:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <HAL_MspInit+0x60>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	4a04      	ldr	r2, [pc, #16]	@ (8000864 <HAL_MspInit+0x60>)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	40021000 	.word	0x40021000
 8000864:	40010000 	.word	0x40010000

08000868 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a24      	ldr	r2, [pc, #144]	@ (8000914 <HAL_CAN_MspInit+0xac>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d141      	bne.n	800090c <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000888:	4b23      	ldr	r3, [pc, #140]	@ (8000918 <HAL_CAN_MspInit+0xb0>)
 800088a:	69db      	ldr	r3, [r3, #28]
 800088c:	4a22      	ldr	r2, [pc, #136]	@ (8000918 <HAL_CAN_MspInit+0xb0>)
 800088e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000892:	61d3      	str	r3, [r2, #28]
 8000894:	4b20      	ldr	r3, [pc, #128]	@ (8000918 <HAL_CAN_MspInit+0xb0>)
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <HAL_CAN_MspInit+0xb0>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <HAL_CAN_MspInit+0xb0>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <HAL_CAN_MspInit+0xb0>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	4619      	mov	r1, r3
 80008cc:	4813      	ldr	r0, [pc, #76]	@ (800091c <HAL_CAN_MspInit+0xb4>)
 80008ce:	f001 ffb3 	bl	8002838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	480d      	ldr	r0, [pc, #52]	@ (800091c <HAL_CAN_MspInit+0xb4>)
 80008e8:	f001 ffa6 	bl	8002838 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 7, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2107      	movs	r1, #7
 80008f0:	2013      	movs	r0, #19
 80008f2:	f001 fcc4 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80008f6:	2013      	movs	r0, #19
 80008f8:	f001 fcdd 	bl	80022b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 7, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2107      	movs	r1, #7
 8000900:	2014      	movs	r0, #20
 8000902:	f001 fcbc 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000906:	2014      	movs	r0, #20
 8000908:	f001 fcd5 	bl	80022b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40006400 	.word	0x40006400
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800

08000920 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0b      	ldr	r2, [pc, #44]	@ (800095c <HAL_RTC_MspInit+0x3c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d110      	bne.n	8000954 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000932:	f002 f937 	bl	8002ba4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <HAL_RTC_MspInit+0x40>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a09      	ldr	r2, [pc, #36]	@ (8000960 <HAL_RTC_MspInit+0x40>)
 800093c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <HAL_RTC_MspInit+0x40>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800094e:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <HAL_RTC_MspInit+0x44>)
 8000950:	2201      	movs	r2, #1
 8000952:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40002800 	.word	0x40002800
 8000960:	40021000 	.word	0x40021000
 8000964:	4242043c 	.word	0x4242043c

08000968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a1f      	ldr	r2, [pc, #124]	@ (8000a00 <HAL_UART_MspInit+0x98>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d137      	bne.n	80009f8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000988:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <HAL_UART_MspInit+0x9c>)
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a04 <HAL_UART_MspInit+0x9c>)
 800098e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000992:	61d3      	str	r3, [r2, #28]
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <HAL_UART_MspInit+0x9c>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <HAL_UART_MspInit+0x9c>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a17      	ldr	r2, [pc, #92]	@ (8000a04 <HAL_UART_MspInit+0x9c>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <HAL_UART_MspInit+0x9c>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b8:	2304      	movs	r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	480f      	ldr	r0, [pc, #60]	@ (8000a08 <HAL_UART_MspInit+0xa0>)
 80009cc:	f001 ff34 	bl	8002838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009d0:	2308      	movs	r3, #8
 80009d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	4619      	mov	r1, r3
 80009e2:	4809      	ldr	r0, [pc, #36]	@ (8000a08 <HAL_UART_MspInit+0xa0>)
 80009e4:	f001 ff28 	bl	8002838 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2107      	movs	r1, #7
 80009ec:	2026      	movs	r0, #38	@ 0x26
 80009ee:	f001 fc46 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009f2:	2026      	movs	r0, #38	@ 0x26
 80009f4:	f001 fc5f 	bl	80022b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009f8:	bf00      	nop
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40004400 	.word	0x40004400
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010800 	.word	0x40010800

08000a0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	@ 0x30
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a22:	4b2e      	ldr	r3, [pc, #184]	@ (8000adc <HAL_InitTick+0xd0>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	4a2d      	ldr	r2, [pc, #180]	@ (8000adc <HAL_InitTick+0xd0>)
 8000a28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a2c:	6193      	str	r3, [r2, #24]
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000adc <HAL_InitTick+0xd0>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a3a:	f107 020c 	add.w	r2, r7, #12
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 fcab 	bl	80033a0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a4a:	f002 fc95 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8000a4e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a52:	4a23      	ldr	r2, [pc, #140]	@ (8000ae0 <HAL_InitTick+0xd4>)
 8000a54:	fba2 2303 	umull	r2, r3, r2, r3
 8000a58:	0c9b      	lsrs	r3, r3, #18
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <HAL_InitTick+0xd8>)
 8000a60:	4a21      	ldr	r2, [pc, #132]	@ (8000ae8 <HAL_InitTick+0xdc>)
 8000a62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <HAL_InitTick+0xd8>)
 8000a66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a6a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae4 <HAL_InitTick+0xd8>)
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a70:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <HAL_InitTick+0xd8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <HAL_InitTick+0xd8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <HAL_InitTick+0xd8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a84:	4817      	ldr	r0, [pc, #92]	@ (8000ae4 <HAL_InitTick+0xd8>)
 8000a86:	f003 fbed 	bl	8004264 <HAL_TIM_Base_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d11b      	bne.n	8000ad0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a98:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <HAL_InitTick+0xd8>)
 8000a9a:	f003 fc3b 	bl	8004314 <HAL_TIM_Base_Start_IT>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d111      	bne.n	8000ad0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000aac:	2019      	movs	r0, #25
 8000aae:	f001 fc02 	bl	80022b6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	d808      	bhi.n	8000aca <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	2019      	movs	r0, #25
 8000abe:	f001 fbde 	bl	800227e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <HAL_InitTick+0xe0>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	e002      	b.n	8000ad0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3730      	adds	r7, #48	@ 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	200000b8 	.word	0x200000b8
 8000ae8:	40012c00 	.word	0x40012c00
 8000aec:	20000004 	.word	0x20000004

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <NMI_Handler+0x4>

08000af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <MemManage_Handler+0x4>

08000b08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b28:	4802      	ldr	r0, [pc, #8]	@ (8000b34 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000b2a:	f001 f8d0 	bl	8001cce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000034 	.word	0x20000034

08000b38 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b3c:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b3e:	f001 f8c6 	bl	8001cce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000034 	.word	0x20000034

08000b4c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b50:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <TIM1_UP_IRQHandler+0x10>)
 8000b52:	f003 fc31 	bl	80043b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200000b8 	.word	0x200000b8

08000b60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b64:	4802      	ldr	r0, [pc, #8]	@ (8000b70 <USART2_IRQHandler+0x10>)
 8000b66:	f003 fe65 	bl	8004834 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000070 	.word	0x20000070

08000b74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b80:	f7ff fff8 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480b      	ldr	r0, [pc, #44]	@ (8000bb4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b86:	490c      	ldr	r1, [pc, #48]	@ (8000bb8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b88:	4a0c      	ldr	r2, [pc, #48]	@ (8000bbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a09      	ldr	r2, [pc, #36]	@ (8000bc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b9c:	4c09      	ldr	r4, [pc, #36]	@ (8000bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000baa:	f007 fbff 	bl	80083ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bae:	f7ff fc73 	bl	8000498 <main>
  bx lr
 8000bb2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000bbc:	080084c4 	.word	0x080084c4
  ldr r2, =_sbss
 8000bc0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000bc4:	20002af4 	.word	0x20002af4

08000bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_2_IRQHandler>
	...

08000bcc <ReadDTCListFromFlash>:

/**
 * Read stored DTC entries into RAM buffer. Returns count.
 */
uint8_t ReadDTCListFromFlash(DTC_Entry_t *DTC_List, uint8_t MaxCount)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	70fb      	strb	r3, [r7, #3]
    uint32_t Address = FLASH_DTC_PAGE_ADDR;
 8000bd8:	4b23      	ldr	r3, [pc, #140]	@ (8000c68 <ReadDTCListFromFlash+0x9c>)
 8000bda:	60fb      	str	r3, [r7, #12]
    uint8_t Count = (uint8_t)(*(uint32_t*)Address & 0xFFU);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	72fb      	strb	r3, [r7, #11]
    Address += 4;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3304      	adds	r3, #4
 8000be6:	60fb      	str	r3, [r7, #12]
    if (Count > MaxCount) Count = MaxCount;
 8000be8:	7afa      	ldrb	r2, [r7, #11]
 8000bea:	78fb      	ldrb	r3, [r7, #3]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d901      	bls.n	8000bf4 <ReadDTCListFromFlash+0x28>
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	72fb      	strb	r3, [r7, #11]

    uint8_t Counter;
    for (Counter = 0; Counter < Count; Counter++)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	72bb      	strb	r3, [r7, #10]
 8000bf8:	e02c      	b.n	8000c54 <ReadDTCListFromFlash+0x88>
    {
        DTC_List[Counter].code = *(uint32_t*)Address;
 8000bfa:	68f9      	ldr	r1, [r7, #12]
 8000bfc:	7aba      	ldrb	r2, [r7, #10]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	461a      	mov	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	680a      	ldr	r2, [r1, #0]
 8000c0e:	601a      	str	r2, [r3, #0]
        Address += 4;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3304      	adds	r3, #4
 8000c14:	60fb      	str	r3, [r7, #12]
        DTC_List[Counter].timestamp = *(uint32_t*)Address;
 8000c16:	68f9      	ldr	r1, [r7, #12]
 8000c18:	7aba      	ldrb	r2, [r7, #10]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	461a      	mov	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	680a      	ldr	r2, [r1, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
        Address += 4;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3304      	adds	r3, #4
 8000c30:	60fb      	str	r3, [r7, #12]
        DTC_List[Counter].datastamp = *(uint32_t*)Address;
 8000c32:	68f9      	ldr	r1, [r7, #12]
 8000c34:	7aba      	ldrb	r2, [r7, #10]
 8000c36:	4613      	mov	r3, r2
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	4413      	add	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	461a      	mov	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4413      	add	r3, r2
 8000c44:	680a      	ldr	r2, [r1, #0]
 8000c46:	609a      	str	r2, [r3, #8]
        Address += 4;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3304      	adds	r3, #4
 8000c4c:	60fb      	str	r3, [r7, #12]
    for (Counter = 0; Counter < Count; Counter++)
 8000c4e:	7abb      	ldrb	r3, [r7, #10]
 8000c50:	3301      	adds	r3, #1
 8000c52:	72bb      	strb	r3, [r7, #10]
 8000c54:	7aba      	ldrb	r2, [r7, #10]
 8000c56:	7afb      	ldrb	r3, [r7, #11]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d3ce      	bcc.n	8000bfa <ReadDTCListFromFlash+0x2e>
    }

    return Count;
 8000c5c:	7afb      	ldrb	r3, [r7, #11]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	0800f400 	.word	0x0800f400

08000c6c <ClearDTCListFlash>:

/**
 * Clear all stored DTC entries: erase the flash page and write zero count
 */
void ClearDTCListFlash(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
    FLASH_EraseInitTypeDef EraseInit = {0};
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
    uint32_t PageError;

    HAL_FLASH_Unlock();
 8000c80:	f001 fc4a 	bl	8002518 <HAL_FLASH_Unlock>

    /* Erase the DTC page */
    EraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
    EraseInit.PageAddress = FLASH_DTC_PAGE_ADDR;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <ClearDTCListFlash+0x50>)
 8000c8a:	613b      	str	r3, [r7, #16]
    EraseInit.NbPages     = 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
    HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8000c90:	1d3a      	adds	r2, r7, #4
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 fd25 	bl	80026e8 <HAL_FLASHEx_Erase>

    /* Write zero count */
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_DTC_PAGE_ADDR, 0U);
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	f04f 0300 	mov.w	r3, #0
 8000ca6:	4905      	ldr	r1, [pc, #20]	@ (8000cbc <ClearDTCListFlash+0x50>)
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f001 fbc5 	bl	8002438 <HAL_FLASH_Program>

    HAL_FLASH_Lock();
 8000cae:	f001 fc59 	bl	8002564 <HAL_FLASH_Lock>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	0800f400 	.word	0x0800f400

08000cc0 <WriteDTCListToFlash>:

/**
 * Write the current DTC list: reads existing entries, appends new, rewrites flash.
 */
void WriteDTCListToFlash(uint32_t NewDTC)
{
 8000cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cc4:	b0ab      	sub	sp, #172	@ 0xac
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	60f8      	str	r0, [r7, #12]
    DTC_Entry_t Entries[MAX_DTC_CODES];
    uint8_t Count = ReadDTCListFromFlash(Entries, MAX_DTC_CODES);
 8000cca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cce:	210a      	movs	r1, #10
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff7b 	bl	8000bcc <ReadDTCListFromFlash>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

    if (Count < MAX_DTC_CODES)
 8000cdc:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
 8000ce0:	2b09      	cmp	r3, #9
 8000ce2:	f200 80bd 	bhi.w	8000e60 <WriteDTCListToFlash+0x1a0>
    {
        /* Append new entry */
        Entries[Count].code      = NewDTC;
 8000ce6:	f897 20a2 	ldrb.w	r2, [r7, #162]	@ 0xa2
 8000cea:	4613      	mov	r3, r2
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4413      	add	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	33a0      	adds	r3, #160	@ 0xa0
 8000cf4:	f107 0208 	add.w	r2, r7, #8
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3b80      	subs	r3, #128	@ 0x80
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	601a      	str	r2, [r3, #0]
        Entries[Count].timestamp = RTC_GetTime();
 8000d00:	f897 40a2 	ldrb.w	r4, [r7, #162]	@ 0xa2
 8000d04:	f000 f8b4 	bl	8000e70 <RTC_GetTime>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	4623      	mov	r3, r4
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4423      	add	r3, r4
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	33a0      	adds	r3, #160	@ 0xa0
 8000d14:	f107 0108 	add.w	r1, r7, #8
 8000d18:	440b      	add	r3, r1
 8000d1a:	3b7c      	subs	r3, #124	@ 0x7c
 8000d1c:	601a      	str	r2, [r3, #0]
        Entries[Count].datastamp = RTC_GetDate();
 8000d1e:	f897 40a2 	ldrb.w	r4, [r7, #162]	@ 0xa2
 8000d22:	f000 f8c7 	bl	8000eb4 <RTC_GetDate>
 8000d26:	4602      	mov	r2, r0
 8000d28:	4623      	mov	r3, r4
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4423      	add	r3, r4
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	33a0      	adds	r3, #160	@ 0xa0
 8000d32:	f107 0108 	add.w	r1, r7, #8
 8000d36:	440b      	add	r3, r1
 8000d38:	3b78      	subs	r3, #120	@ 0x78
 8000d3a:	601a      	str	r2, [r3, #0]
        Count++;
 8000d3c:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
 8000d40:	3301      	adds	r3, #1
 8000d42:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

        /* Erase and rewrite */

        FLASH_EraseInitTypeDef EraseInit = {0};
 8000d46:	f107 0318 	add.w	r3, r7, #24
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
        uint32_t PageError;

        HAL_FLASH_Unlock();
 8000d54:	f001 fbe0 	bl	8002518 <HAL_FLASH_Unlock>
        EraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
        EraseInit.PageAddress = FLASH_DTC_PAGE_ADDR;
 8000d5c:	4b43      	ldr	r3, [pc, #268]	@ (8000e6c <WriteDTCListToFlash+0x1ac>)
 8000d5e:	623b      	str	r3, [r7, #32]
        EraseInit.NbPages     = 1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8000d64:	f107 0214 	add.w	r2, r7, #20
 8000d68:	f107 0318 	add.w	r3, r7, #24
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fcba 	bl	80026e8 <HAL_FLASHEx_Erase>

        uint32_t Address = FLASH_DTC_PAGE_ADDR;
 8000d74:	4b3d      	ldr	r3, [pc, #244]	@ (8000e6c <WriteDTCListToFlash+0x1ac>)
 8000d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* Write count */
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Count);
 8000d7a:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
 8000d7e:	2200      	movs	r2, #0
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d88:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f001 fb53 	bl	8002438 <HAL_FLASH_Program>
        Address += 4;
 8000d92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000d96:	3304      	adds	r3, #4
 8000d98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

        /* Write each entry */
        uint8_t Counter;
        for (Counter = 0; Counter < Count; Counter++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 8000da2:	e055      	b.n	8000e50 <WriteDTCListToFlash+0x190>
        {
            HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Entries[Counter].code);
 8000da4:	f897 20a3 	ldrb.w	r2, [r7, #163]	@ 0xa3
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	33a0      	adds	r3, #160	@ 0xa0
 8000db2:	f107 0208 	add.w	r2, r7, #8
 8000db6:	4413      	add	r3, r2
 8000db8:	3b80      	subs	r3, #128	@ 0x80
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4698      	mov	r8, r3
 8000dc0:	4691      	mov	r9, r2
 8000dc2:	4642      	mov	r2, r8
 8000dc4:	464b      	mov	r3, r9
 8000dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8000dca:	2002      	movs	r0, #2
 8000dcc:	f001 fb34 	bl	8002438 <HAL_FLASH_Program>
            Address += 4;
 8000dd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Entries[Counter].timestamp);
 8000dda:	f897 20a3 	ldrb.w	r2, [r7, #163]	@ 0xa3
 8000dde:	4613      	mov	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	33a0      	adds	r3, #160	@ 0xa0
 8000de8:	f107 0208 	add.w	r2, r7, #8
 8000dec:	4413      	add	r3, r2
 8000dee:	3b7c      	subs	r3, #124	@ 0x7c
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2200      	movs	r2, #0
 8000df4:	469a      	mov	sl, r3
 8000df6:	4693      	mov	fp, r2
 8000df8:	4652      	mov	r2, sl
 8000dfa:	465b      	mov	r3, fp
 8000dfc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8000e00:	2002      	movs	r0, #2
 8000e02:	f001 fb19 	bl	8002438 <HAL_FLASH_Program>
            Address += 4;
 8000e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Entries[Counter].datastamp);
 8000e10:	f897 20a3 	ldrb.w	r2, [r7, #163]	@ 0xa3
 8000e14:	4613      	mov	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	33a0      	adds	r3, #160	@ 0xa0
 8000e1e:	f107 0208 	add.w	r2, r7, #8
 8000e22:	4413      	add	r3, r2
 8000e24:	3b78      	subs	r3, #120	@ 0x78
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	461d      	mov	r5, r3
 8000e2c:	4616      	mov	r6, r2
 8000e2e:	462a      	mov	r2, r5
 8000e30:	4633      	mov	r3, r6
 8000e32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8000e36:	2002      	movs	r0, #2
 8000e38:	f001 fafe 	bl	8002438 <HAL_FLASH_Program>
            Address += 4;
 8000e3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e40:	3304      	adds	r3, #4
 8000e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        for (Counter = 0; Counter < Count; Counter++)
 8000e46:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 8000e50:	f897 20a3 	ldrb.w	r2, [r7, #163]	@ 0xa3
 8000e54:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d3a3      	bcc.n	8000da4 <WriteDTCListToFlash+0xe4>
        }

        HAL_FLASH_Lock();
 8000e5c:	f001 fb82 	bl	8002564 <HAL_FLASH_Lock>
    }
}
 8000e60:	bf00      	nop
 8000e62:	37ac      	adds	r7, #172	@ 0xac
 8000e64:	46bd      	mov	sp, r7
 8000e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e6a:	bf00      	nop
 8000e6c:	0800f400 	.word	0x0800f400

08000e70 <RTC_GetTime>:
 *         [24]    AM/PM flag (0=AM,1=PM)
 *         [31:25] Reserved
 * @return packed 32-bit time word
 */
uint32_t RTC_GetTime(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef Local_RTCTime;
	uint32_t Time = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]

    HAL_RTC_GetTime(&hrtc, &Local_RTCTime, RTC_FORMAT_BIN);
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480b      	ldr	r0, [pc, #44]	@ (8000eb0 <RTC_GetTime+0x40>)
 8000e82:	f002 fd6b 	bl	800395c <HAL_RTC_GetTime>

    Time |= (uint32_t)(Local_RTCTime.Seconds & 0xFF);
 8000e86:	78bb      	ldrb	r3, [r7, #2]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	607b      	str	r3, [r7, #4]
    Time |= (uint32_t)(Local_RTCTime.Minutes & 0xFF) << 8;
 8000e90:	787b      	ldrb	r3, [r7, #1]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	607b      	str	r3, [r7, #4]
    Time |= (uint32_t)(Local_RTCTime.Hours   & 0xFF) << 16;
 8000e9a:	783b      	ldrb	r3, [r7, #0]
 8000e9c:	041b      	lsls	r3, r3, #16
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	607b      	str	r3, [r7, #4]

    return Time;
 8000ea4:	687b      	ldr	r3, [r7, #4]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000005c 	.word	0x2000005c

08000eb4 <RTC_GetDate>:
 *         [15:8]  Month (1-12)
 *         [31:16] Year  (full year, e.g., 2025)
 * @return packed 32-bit date word
 */
uint32_t RTC_GetDate(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
    RTC_DateTypeDef Local_RTCDate;
    uint32_t Date = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
    uint32_t year = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]

    HAL_RTC_GetDate(&hrtc, &Local_RTCDate, RTC_FORMAT_BIN);
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <RTC_GetDate+0x4c>)
 8000eca:	f002 fed5 	bl	8003c78 <HAL_RTC_GetDate>

    year = (uint32_t)(Local_RTCDate.Year + 2000);
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000ed4:	60bb      	str	r3, [r7, #8]
    Date |= (uint32_t)(Local_RTCDate.Date & 0xFF);
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
    Date |= (uint32_t)(Local_RTCDate.Month & 0xFF) << 8;
 8000ee0:	797b      	ldrb	r3, [r7, #5]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
    Date |= year << 16;
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	041b      	lsls	r3, r3, #16
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
    return Date;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000005c 	.word	0x2000005c

08000f04 <SendResponse>:

/**
 * SendResponse
 */
void SendResponse(uint8_t *Data, uint8_t DLC)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
    CanTxMessage_t Msg;
    uint8_t Count;
    Msg.StdId = UDS_RESPONSE_ID;
 8000f10:	f44f 63fd 	mov.w	r3, #2024	@ 0x7e8
 8000f14:	60fb      	str	r3, [r7, #12]
    Msg.DLC   = DLC;
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	743b      	strb	r3, [r7, #16]

    for (Count = 0; Count < DLC; Count++) Msg.Data[Count] = Data[Count];
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	77fb      	strb	r3, [r7, #31]
 8000f1e:	e00b      	b.n	8000f38 <SendResponse+0x34>
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	441a      	add	r2, r3
 8000f26:	7ffb      	ldrb	r3, [r7, #31]
 8000f28:	7812      	ldrb	r2, [r2, #0]
 8000f2a:	3320      	adds	r3, #32
 8000f2c:	443b      	add	r3, r7
 8000f2e:	f803 2c0f 	strb.w	r2, [r3, #-15]
 8000f32:	7ffb      	ldrb	r3, [r7, #31]
 8000f34:	3301      	adds	r3, #1
 8000f36:	77fb      	strb	r3, [r7, #31]
 8000f38:	7ffa      	ldrb	r2, [r7, #31]
 8000f3a:	78fb      	ldrb	r3, [r7, #3]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d3ef      	bcc.n	8000f20 <SendResponse+0x1c>
    for (Count = DLC; Count < 8; Count++) Msg.Data[Count] = 0;
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	77fb      	strb	r3, [r7, #31]
 8000f44:	e008      	b.n	8000f58 <SendResponse+0x54>
 8000f46:	7ffb      	ldrb	r3, [r7, #31]
 8000f48:	3320      	adds	r3, #32
 8000f4a:	443b      	add	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f803 2c0f 	strb.w	r2, [r3, #-15]
 8000f52:	7ffb      	ldrb	r3, [r7, #31]
 8000f54:	3301      	adds	r3, #1
 8000f56:	77fb      	strb	r3, [r7, #31]
 8000f58:	7ffb      	ldrb	r3, [r7, #31]
 8000f5a:	2b07      	cmp	r3, #7
 8000f5c:	d9f3      	bls.n	8000f46 <SendResponse+0x42>
    xQueueSend(xCanTxQueue, &Msg, portMAX_DELAY);
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <SendResponse+0x74>)
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	f107 010c 	add.w	r1, r7, #12
 8000f66:	2300      	movs	r3, #0
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	f004 ff50 	bl	8005e10 <xQueueGenericSend>
}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	2000012c 	.word	0x2000012c

08000f7c <SendNegative>:

/**
 * SendNegative
 */
void SendNegative(uint8_t SID, uint8_t NRC)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	71bb      	strb	r3, [r7, #6]
    uint8_t Resp[3] = {0x7F, SID, NRC};
 8000f8c:	237f      	movs	r3, #127	@ 0x7f
 8000f8e:	733b      	strb	r3, [r7, #12]
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	737b      	strb	r3, [r7, #13]
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	73bb      	strb	r3, [r7, #14]
    SendResponse(Resp, 3);
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ffb0 	bl	8000f04 <SendResponse>
}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <SendPositive>:

/**
 * SendPositive
 */
void SendPositive(uint8_t SID, uint8_t Sub)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	71bb      	strb	r3, [r7, #6]
    uint8_t Resp[2] = {(uint8_t)(SID + 0x40), Sub};
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	3340      	adds	r3, #64	@ 0x40
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	733b      	strb	r3, [r7, #12]
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
 8000fc6:	737b      	strb	r3, [r7, #13]
    SendResponse(Resp, 2);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff98 	bl	8000f04 <SendResponse>
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <ProcessSessionControl>:

/**
 * ProcessSessionControl
 */
void ProcessSessionControl(uint8_t Sub)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
    if (Sub <= SESSION_SENSOR)
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d808      	bhi.n	8000ffe <ProcessSessionControl+0x22>
    {
        /* Allowed sessions in default or sensor mode */
        CurrentSession = Sub;
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <ProcessSessionControl+0x64>)
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	7013      	strb	r3, [r2, #0]
        SendPositive(SID_DIAG_SESSION_CTRL, Sub);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	2010      	movs	r0, #16
 8000ff8:	f7ff ffd8 	bl	8000fac <SendPositive>
    else
    {
        /* Unsupported session ID */
        SendNegative(SID_DIAG_SESSION_CTRL, NRC_SERVICE_NOT_SUPP);
    }
}
 8000ffc:	e01c      	b.n	8001038 <ProcessSessionControl+0x5c>
    else if (Sub == SESSION_CONTROL || Sub == SESSION_PROGRAMMING)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d002      	beq.n	800100a <ProcessSessionControl+0x2e>
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d111      	bne.n	800102e <ProcessSessionControl+0x52>
    	if(SecurityUnlocked == 1)
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <ProcessSessionControl+0x68>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d108      	bne.n	8001024 <ProcessSessionControl+0x48>
            CurrentSession = Sub;
 8001012:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <ProcessSessionControl+0x64>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	7013      	strb	r3, [r2, #0]
            SendPositive(SID_DIAG_SESSION_CTRL, Sub);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4619      	mov	r1, r3
 800101c:	2010      	movs	r0, #16
 800101e:	f7ff ffc5 	bl	8000fac <SendPositive>
    	if(SecurityUnlocked == 1)
 8001022:	e009      	b.n	8001038 <ProcessSessionControl+0x5c>
            SendNegative(SID_DIAG_SESSION_CTRL, NRC_SECURITY_REQUIRED);
 8001024:	2131      	movs	r1, #49	@ 0x31
 8001026:	2010      	movs	r0, #16
 8001028:	f7ff ffa8 	bl	8000f7c <SendNegative>
    	if(SecurityUnlocked == 1)
 800102c:	e004      	b.n	8001038 <ProcessSessionControl+0x5c>
        SendNegative(SID_DIAG_SESSION_CTRL, NRC_SERVICE_NOT_SUPP);
 800102e:	2111      	movs	r1, #17
 8001030:	2010      	movs	r0, #16
 8001032:	f7ff ffa3 	bl	8000f7c <SendNegative>
}
 8001036:	e7ff      	b.n	8001038 <ProcessSessionControl+0x5c>
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000100 	.word	0x20000100
 8001044:	20000101 	.word	0x20000101

08001048 <ProcessSecurityAccess>:

/**
 * ProcessSecurityAccess
 */
void ProcessSecurityAccess(uint8_t Sub, uint8_t *Data, uint8_t DLC)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
    if (Sub == 0x00 && DLC >= 4)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d121      	bne.n	80010a2 <ProcessSecurityAccess+0x5a>
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	2b03      	cmp	r3, #3
 8001062:	d91e      	bls.n	80010a2 <ProcessSecurityAccess+0x5a>
    {
        /* Extract 16-bit password from bytes 2 and 3 */
        uint16_t Password = (Data[2] << 8) | Data[3];
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	3302      	adds	r3, #2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	3303      	adds	r3, #3
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21b      	sxth	r3, r3
 800107a:	81fb      	strh	r3, [r7, #14]
        if (Password == DIAG_PASSWORD)
 800107c:	89fb      	ldrh	r3, [r7, #14]
 800107e:	f241 2234 	movw	r2, #4660	@ 0x1234
 8001082:	4293      	cmp	r3, r2
 8001084:	d108      	bne.n	8001098 <ProcessSecurityAccess+0x50>
        {
            SecurityUnlocked = 1;
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <ProcessSecurityAccess+0x6c>)
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
            SendPositive(SID_SECURITY_ACCESS, Sub);
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4619      	mov	r1, r3
 8001090:	2027      	movs	r0, #39	@ 0x27
 8001092:	f7ff ff8b 	bl	8000fac <SendPositive>
    {
 8001096:	e009      	b.n	80010ac <ProcessSecurityAccess+0x64>
        }
        else
        {
            SendNegative(SID_SECURITY_ACCESS, NRC_SECURITY_DENIED);
 8001098:	2135      	movs	r1, #53	@ 0x35
 800109a:	2027      	movs	r0, #39	@ 0x27
 800109c:	f7ff ff6e 	bl	8000f7c <SendNegative>
    {
 80010a0:	e004      	b.n	80010ac <ProcessSecurityAccess+0x64>
        }
    }
    else
    {
        /* Service not supported for other sub-functions */
        SendNegative(SID_SECURITY_ACCESS, NRC_SERVICE_NOT_SUPP);
 80010a2:	2111      	movs	r1, #17
 80010a4:	2027      	movs	r0, #39	@ 0x27
 80010a6:	f7ff ff69 	bl	8000f7c <SendNegative>
    }
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000101 	.word	0x20000101

080010b8 <ProcessReadDataById>:

/**
 * ProcessReadDataByIdr
 */
void ProcessReadDataById(uint8_t Sub, uint8_t *Data)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
    if (CurrentSession == SESSION_DEFAULT || CurrentSession == SESSION_SENSOR)
 80010c4:	4b2d      	ldr	r3, [pc, #180]	@ (800117c <ProcessReadDataById+0xc4>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <ProcessReadDataById+0x1c>
 80010cc:	4b2b      	ldr	r3, [pc, #172]	@ (800117c <ProcessReadDataById+0xc4>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d14a      	bne.n	800116a <ProcessReadDataById+0xb2>
    {
        /* Extract 16-bit DID from bytes 2 and 3 */
        uint16_t ID = (Data[2] << 8) | Data[3];
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3302      	adds	r3, #2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3303      	adds	r3, #3
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	82fb      	strh	r3, [r7, #22]
        uint8_t Response[6];

        /* Build positive response header */
        Response[0] = SID_READ_DATA_BY_ID + 0x40;
 80010ec:	2362      	movs	r3, #98	@ 0x62
 80010ee:	733b      	strb	r3, [r7, #12]
        Response[1] = Sub;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	737b      	strb	r3, [r7, #13]

        if (ID == 0xF190)
 80010f4:	8afb      	ldrh	r3, [r7, #22]
 80010f6:	f24f 1290 	movw	r2, #61840	@ 0xf190
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d115      	bne.n	800112a <ProcessReadDataById+0x72>
        {
            /* Report latest temperature as two bytes */
            uint16_t Temp = (uint16_t)LatestTemp;
 80010fe:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <ProcessReadDataById+0xc8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f9a8 	bl	8000458 <__aeabi_f2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	827b      	strh	r3, [r7, #18]
            Response[2] = (uint8_t)(Temp >> 8);
 800110c:	8a7b      	ldrh	r3, [r7, #18]
 800110e:	0a1b      	lsrs	r3, r3, #8
 8001110:	b29b      	uxth	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	73bb      	strb	r3, [r7, #14]
            Response[3] = (uint8_t)(Temp & 0xFF);
 8001116:	8a7b      	ldrh	r3, [r7, #18]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	73fb      	strb	r3, [r7, #15]
            SendResponse(Response, 4);
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2104      	movs	r1, #4
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff feee 	bl	8000f04 <SendResponse>
    {
 8001128:	e024      	b.n	8001174 <ProcessReadDataById+0xbc>
        }
        else if (ID == 0xF191)
 800112a:	8afb      	ldrh	r3, [r7, #22]
 800112c:	f24f 1291 	movw	r2, #61841	@ 0xf191
 8001130:	4293      	cmp	r3, r2
 8001132:	d115      	bne.n	8001160 <ProcessReadDataById+0xa8>
        {
            /* Report latest distance as two bytes */
            uint16_t Dist = (uint16_t)LatestDist;
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <ProcessReadDataById+0xcc>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f98d 	bl	8000458 <__aeabi_f2uiz>
 800113e:	4603      	mov	r3, r0
 8001140:	82bb      	strh	r3, [r7, #20]
            Response[2] = (uint8_t)(Dist >> 8);
 8001142:	8abb      	ldrh	r3, [r7, #20]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	b29b      	uxth	r3, r3
 8001148:	b2db      	uxtb	r3, r3
 800114a:	73bb      	strb	r3, [r7, #14]
            Response[3] = (uint8_t)(Dist & 0xFF);
 800114c:	8abb      	ldrh	r3, [r7, #20]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	73fb      	strb	r3, [r7, #15]
            SendResponse(Response, 4);
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2104      	movs	r1, #4
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fed3 	bl	8000f04 <SendResponse>
    {
 800115e:	e009      	b.n	8001174 <ProcessReadDataById+0xbc>
        }
        else
        {
            /* Unsupported DID */
            SendNegative(SID_READ_DATA_BY_ID, NRC_SERVICE_NOT_SUPP);
 8001160:	2111      	movs	r1, #17
 8001162:	2022      	movs	r0, #34	@ 0x22
 8001164:	f7ff ff0a 	bl	8000f7c <SendNegative>
    {
 8001168:	e004      	b.n	8001174 <ProcessReadDataById+0xbc>
        }
    }
    else
    {
        /* Not allowed in current session */
        SendNegative(SID_READ_DATA_BY_ID, NRC_SERVICE_NOT_SUPP);
 800116a:	2111      	movs	r1, #17
 800116c:	2022      	movs	r0, #34	@ 0x22
 800116e:	f7ff ff05 	bl	8000f7c <SendNegative>
    }
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000100 	.word	0x20000100
 8001180:	20000134 	.word	0x20000134
 8001184:	20000138 	.word	0x20000138

08001188 <ProcessReadDTC>:

/**
 * ProcessReadDTC
 */
void ProcessReadDTC(uint8_t Sub)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0ac      	sub	sp, #176	@ 0xb0
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
    if (CurrentSession == SESSION_CONTROL && SecurityUnlocked)
 8001192:	4b81      	ldr	r3, [pc, #516]	@ (8001398 <ProcessReadDTC+0x210>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b02      	cmp	r3, #2
 8001198:	f040 80f5 	bne.w	8001386 <ProcessReadDTC+0x1fe>
 800119c:	4b7f      	ldr	r3, [pc, #508]	@ (800139c <ProcessReadDTC+0x214>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80f0 	beq.w	8001386 <ProcessReadDTC+0x1fe>
    {
        DTC_Entry_t Entries[MAX_DTC_CODES];
        uint8_t Count = ReadDTCListFromFlash(Entries, MAX_DTC_CODES);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	210a      	movs	r1, #10
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fd0d 	bl	8000bcc <ReadDTCListFromFlash>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad

        /* First send number-of-DTCs response */
        uint8_t Response[3] = {SID_READ_DTC + 0x40, Sub, Count};
 80011b8:	2359      	movs	r3, #89	@ 0x59
 80011ba:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
 80011c4:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80011c8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
        SendResponse(Response, 3);
 80011cc:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80011d0:	2103      	movs	r1, #3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fe96 	bl	8000f04 <SendResponse>

        /* Now send each DTC entry in two sequenced frames */
        for (uint8_t Local_Count = 0; Local_Count < Count; Local_Count++)
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 80011de:	e0ca      	b.n	8001376 <ProcessReadDTC+0x1ee>
        {
            uint8_t DTCMsg[12];
            /* build the 12-byte payload */
            DTCMsg[0] = (uint8_t)(Entries[Local_Count].code >> 24);
 80011e0:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	33b0      	adds	r3, #176	@ 0xb0
 80011ee:	443b      	add	r3, r7
 80011f0:	3ba4      	subs	r3, #164	@ 0xa4
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	0e1b      	lsrs	r3, r3, #24
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
            DTCMsg[1] = (uint8_t)(Entries[Local_Count].code >> 16);
 80011fc:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	33b0      	adds	r3, #176	@ 0xb0
 800120a:	443b      	add	r3, r7
 800120c:	3ba4      	subs	r3, #164	@ 0xa4
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	0c1b      	lsrs	r3, r3, #16
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
            DTCMsg[2] = (uint8_t)(Entries[Local_Count].code >> 8);
 8001218:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	33b0      	adds	r3, #176	@ 0xb0
 8001226:	443b      	add	r3, r7
 8001228:	3ba4      	subs	r3, #164	@ 0xa4
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
            DTCMsg[3] = (uint8_t)Entries[Local_Count].code;
 8001234:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	33b0      	adds	r3, #176	@ 0xb0
 8001242:	443b      	add	r3, r7
 8001244:	3ba4      	subs	r3, #164	@ 0xa4
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
            uint32_t Time = Entries[Local_Count].timestamp;
 800124e:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	33b0      	adds	r3, #176	@ 0xb0
 800125c:	443b      	add	r3, r7
 800125e:	3ba0      	subs	r3, #160	@ 0xa0
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            DTCMsg[4] = (uint8_t)(Time);
 8001266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            DTCMsg[5] = (uint8_t)(Time >> 8);
 8001270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	b2db      	uxtb	r3, r3
 8001278:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
            DTCMsg[6] = (uint8_t)(Time >> 16);
 800127c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001280:	0c1b      	lsrs	r3, r3, #16
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
            DTCMsg[7] = (uint8_t)(Time >> 24);
 8001288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800128c:	0e1b      	lsrs	r3, r3, #24
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
            uint32_t Date = Entries[Local_Count].datastamp;
 8001294:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	33b0      	adds	r3, #176	@ 0xb0
 80012a2:	443b      	add	r3, r7
 80012a4:	3b9c      	subs	r3, #156	@ 0x9c
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            DTCMsg[8]  = (uint8_t)(Date);
 80012ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
            DTCMsg[9]  = (uint8_t)(Date >> 8);
 80012b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012ba:	0a1b      	lsrs	r3, r3, #8
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
            DTCMsg[10] = (uint8_t)(Date >> 16);
 80012c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012c6:	0c1b      	lsrs	r3, r3, #16
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
            DTCMsg[11] = (uint8_t)(Date >> 24);
 80012ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012d2:	0e1b      	lsrs	r3, r3, #24
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

            /* ---- split into two 8-byte frames ---- */
            uint8_t Index = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
            /* Frame 1: sequence = 1, then first 7 bytes of DTCMsg */
            {
                uint8_t Frame1[8];
                Frame1[0] = 1;  /* sequence number */
 80012e0:	2301      	movs	r3, #1
 80012e2:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
                /* copy DTCMsg[0..6] into Frame1[1..7] */
                for (Index = 0; Index < 7; Index++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 80012ec:	e011      	b.n	8001312 <ProcessReadDTC+0x18a>
                {
                    Frame1[Index+1] = DTCMsg[Index];
 80012ee:	f897 20ae 	ldrb.w	r2, [r7, #174]	@ 0xae
 80012f2:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80012f6:	3301      	adds	r3, #1
 80012f8:	32b0      	adds	r2, #176	@ 0xb0
 80012fa:	443a      	add	r2, r7
 80012fc:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8001300:	33b0      	adds	r3, #176	@ 0xb0
 8001302:	443b      	add	r3, r7
 8001304:	f803 2c24 	strb.w	r2, [r3, #-36]
                for (Index = 0; Index < 7; Index++)
 8001308:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800130c:	3301      	adds	r3, #1
 800130e:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8001312:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8001316:	2b06      	cmp	r3, #6
 8001318:	d9e9      	bls.n	80012ee <ProcessReadDTC+0x166>
                }
                /* send exactly 8 bytes */
                SendResponse(Frame1, 8);
 800131a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800131e:	2108      	movs	r1, #8
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fdef 	bl	8000f04 <SendResponse>
            }

            /* Frame 2: sequence = 2, then remaining 5 bytes, pad with zeros */
            {
                uint8_t Frame2[8];
                Frame2[0] = 2;  /* sequence number */
 8001326:	2302      	movs	r3, #2
 8001328:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                /* copy DTCMsg[7..11] into Frame2[1..5] */
                for (Index = 7; Index < 12; Index++)
 800132c:	2307      	movs	r3, #7
 800132e:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8001332:	e011      	b.n	8001358 <ProcessReadDTC+0x1d0>
                {
                    Frame2[(Index - 7) + 1] = DTCMsg[Index];
 8001334:	f897 20ae 	ldrb.w	r2, [r7, #174]	@ 0xae
 8001338:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800133c:	3b06      	subs	r3, #6
 800133e:	32b0      	adds	r2, #176	@ 0xb0
 8001340:	443a      	add	r2, r7
 8001342:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8001346:	33b0      	adds	r3, #176	@ 0xb0
 8001348:	443b      	add	r3, r7
 800134a:	f803 2c2c 	strb.w	r2, [r3, #-44]
                for (Index = 7; Index < 12; Index++)
 800134e:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8001352:	3301      	adds	r3, #1
 8001354:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8001358:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800135c:	2b0b      	cmp	r3, #11
 800135e:	d9e9      	bls.n	8001334 <ProcessReadDTC+0x1ac>
                }

                SendResponse(Frame2, 6);
 8001360:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001364:	2106      	movs	r1, #6
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fdcc 	bl	8000f04 <SendResponse>
        for (uint8_t Local_Count = 0; Local_Count < Count; Local_Count++)
 800136c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001370:	3301      	adds	r3, #1
 8001372:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8001376:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 800137a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800137e:	429a      	cmp	r2, r3
 8001380:	f4ff af2e 	bcc.w	80011e0 <ProcessReadDTC+0x58>
    {
 8001384:	e004      	b.n	8001390 <ProcessReadDTC+0x208>
            }
        }
    }
    else
    {
        SendNegative(SID_READ_DTC, NRC_SERVICE_NOT_SUPP);
 8001386:	2111      	movs	r1, #17
 8001388:	2019      	movs	r0, #25
 800138a:	f7ff fdf7 	bl	8000f7c <SendNegative>
    }
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	37b0      	adds	r7, #176	@ 0xb0
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000100 	.word	0x20000100
 800139c:	20000101 	.word	0x20000101

080013a0 <ProcessClearDTC>:

/**
 * ProcessClearDTC
 */
void ProcessClearDTC(uint8_t Sub)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
    if (CurrentSession == SESSION_CONTROL && SecurityUnlocked)
 80013aa:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <ProcessClearDTC+0x3c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d10b      	bne.n	80013ca <ProcessClearDTC+0x2a>
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <ProcessClearDTC+0x40>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <ProcessClearDTC+0x2a>
    {
        /* Erase flash and send positive ack */
        ClearDTCListFlash();
 80013ba:	f7ff fc57 	bl	8000c6c <ClearDTCListFlash>
        SendPositive(SID_CLEAR_DTC, Sub);
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	4619      	mov	r1, r3
 80013c2:	2014      	movs	r0, #20
 80013c4:	f7ff fdf2 	bl	8000fac <SendPositive>
 80013c8:	e004      	b.n	80013d4 <ProcessClearDTC+0x34>
    }
    else
    {
        /* Not allowed */
        SendNegative(SID_CLEAR_DTC, NRC_SERVICE_NOT_SUPP);
 80013ca:	2111      	movs	r1, #17
 80013cc:	2014      	movs	r0, #20
 80013ce:	f7ff fdd5 	bl	8000f7c <SendNegative>
    }
}
 80013d2:	bf00      	nop
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000100 	.word	0x20000100
 80013e0:	20000101 	.word	0x20000101

080013e4 <ProcessRequestDownload>:

/**
 * ProcessRequestDownload
 */
void ProcessRequestDownload(uint8_t Sub, uint8_t* Msg)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
    if (CurrentSession == SESSION_PROGRAMMING && SecurityUnlocked)
 80013f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <ProcessRequestDownload+0x40>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d10b      	bne.n	8001410 <ProcessRequestDownload+0x2c>
 80013f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <ProcessRequestDownload+0x44>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d007      	beq.n	8001410 <ProcessRequestDownload+0x2c>
    {
        /* Enqueue OTA start command and reset MCU */
        xQueueSend(xOtaQueue, &Msg, 0);
 8001400:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <ProcessRequestDownload+0x48>)
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	4639      	mov	r1, r7
 8001406:	2300      	movs	r3, #0
 8001408:	2200      	movs	r2, #0
 800140a:	f004 fd01 	bl	8005e10 <xQueueGenericSend>
 800140e:	e004      	b.n	800141a <ProcessRequestDownload+0x36>

    }
    else
    {
        /* Bootloader entry not allowed */
        SendNegative(SID_REQUEST_DOWNLOAD, NRC_SERVICE_NOT_SUPP);
 8001410:	2111      	movs	r1, #17
 8001412:	2034      	movs	r0, #52	@ 0x34
 8001414:	f7ff fdb2 	bl	8000f7c <SendNegative>
    }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000100 	.word	0x20000100
 8001428:	20000101 	.word	0x20000101
 800142c:	20000150 	.word	0x20000150

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_Init+0x28>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	@ (8001458 <HAL_Init+0x28>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 ff11 	bl	8002268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	200f      	movs	r0, #15
 8001448:	f7ff fae0 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff f9da 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000

0800145c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <HAL_IncTick+0x1c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b05      	ldr	r3, [pc, #20]	@ (800147c <HAL_IncTick+0x20>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a03      	ldr	r2, [pc, #12]	@ (800147c <HAL_IncTick+0x20>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000008 	.word	0x20000008
 800147c:	20000104 	.word	0x20000104

08001480 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b02      	ldr	r3, [pc, #8]	@ (8001490 <HAL_GetTick+0x10>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	20000104 	.word	0x20000104

08001494 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e0ed      	b.n	8001682 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff f9d8 	bl	8000868 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0201 	orr.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c8:	f7ff ffda 	bl	8001480 <HAL_GetTick>
 80014cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ce:	e012      	b.n	80014f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014d0:	f7ff ffd6 	bl	8001480 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b0a      	cmp	r3, #10
 80014dc:	d90b      	bls.n	80014f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2205      	movs	r2, #5
 80014ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e0c5      	b.n	8001682 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0e5      	beq.n	80014d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0202 	bic.w	r2, r2, #2
 8001512:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001514:	f7ff ffb4 	bl	8001480 <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800151a:	e012      	b.n	8001542 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800151c:	f7ff ffb0 	bl	8001480 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b0a      	cmp	r3, #10
 8001528:	d90b      	bls.n	8001542 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2205      	movs	r2, #5
 800153a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e09f      	b.n	8001682 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1e5      	bne.n	800151c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7e1b      	ldrb	r3, [r3, #24]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d108      	bne.n	800156a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e007      	b.n	800157a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001578:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7e5b      	ldrb	r3, [r3, #25]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d108      	bne.n	8001594 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	e007      	b.n	80015a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7e9b      	ldrb	r3, [r3, #26]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d108      	bne.n	80015be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0220 	orr.w	r2, r2, #32
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e007      	b.n	80015ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0220 	bic.w	r2, r2, #32
 80015cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7edb      	ldrb	r3, [r3, #27]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d108      	bne.n	80015e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0210 	bic.w	r2, r2, #16
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e007      	b.n	80015f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0210 	orr.w	r2, r2, #16
 80015f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7f1b      	ldrb	r3, [r3, #28]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d108      	bne.n	8001612 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0208 	orr.w	r2, r2, #8
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e007      	b.n	8001622 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0208 	bic.w	r2, r2, #8
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7f5b      	ldrb	r3, [r3, #29]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d108      	bne.n	800163c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0204 	orr.w	r2, r2, #4
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e007      	b.n	800164c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0204 	bic.w	r2, r2, #4
 800164a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	ea42 0103 	orr.w	r1, r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	1e5a      	subs	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800168a:	b480      	push	{r7}
 800168c:	b087      	sub	sp, #28
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016a2:	7cfb      	ldrb	r3, [r7, #19]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d003      	beq.n	80016b0 <HAL_CAN_ConfigFilter+0x26>
 80016a8:	7cfb      	ldrb	r3, [r7, #19]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	f040 80aa 	bne.w	8001804 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016b6:	f043 0201 	orr.w	r2, r3, #1
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	2201      	movs	r2, #1
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43db      	mvns	r3, r3
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d123      	bne.n	8001732 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	401a      	ands	r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800170c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3248      	adds	r2, #72	@ 0x48
 8001712:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001726:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001728:	6979      	ldr	r1, [r7, #20]
 800172a:	3348      	adds	r3, #72	@ 0x48
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d122      	bne.n	8001780 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	431a      	orrs	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800175a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3248      	adds	r2, #72	@ 0x48
 8001760:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001774:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001776:	6979      	ldr	r1, [r7, #20]
 8001778:	3348      	adds	r3, #72	@ 0x48
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43db      	mvns	r3, r3
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800179a:	e007      	b.n	80017ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	431a      	orrs	r2, r3
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43db      	mvns	r3, r3
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80017c6:	e007      	b.n	80017d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	431a      	orrs	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d107      	bne.n	80017f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	431a      	orrs	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017f6:	f023 0201 	bic.w	r2, r3, #1
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	e006      	b.n	8001812 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001808:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
  }
}
 8001812:	4618      	mov	r0, r3
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d12e      	bne.n	800188e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001848:	f7ff fe1a 	bl	8001480 <HAL_GetTick>
 800184c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800184e:	e012      	b.n	8001876 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001850:	f7ff fe16 	bl	8001480 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b0a      	cmp	r3, #10
 800185c:	d90b      	bls.n	8001876 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001862:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2205      	movs	r2, #5
 800186e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e012      	b.n	800189c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1e5      	bne.n	8001850 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e006      	b.n	800189c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
  }
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	@ 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018c2:	7ffb      	ldrb	r3, [r7, #31]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d003      	beq.n	80018d0 <HAL_CAN_AddTxMessage+0x2c>
 80018c8:	7ffb      	ldrb	r3, [r7, #31]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	f040 80ad 	bne.w	8001a2a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10a      	bne.n	80018f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8095 	beq.w	8001a1a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	0e1b      	lsrs	r3, r3, #24
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80018fa:	2201      	movs	r2, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10d      	bne.n	8001928 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001916:	68f9      	ldr	r1, [r7, #12]
 8001918:	6809      	ldr	r1, [r1, #0]
 800191a:	431a      	orrs	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	3318      	adds	r3, #24
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	440b      	add	r3, r1
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	e00f      	b.n	8001948 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001932:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001938:	68f9      	ldr	r1, [r7, #12]
 800193a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800193c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3318      	adds	r3, #24
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	440b      	add	r3, r1
 8001946:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6819      	ldr	r1, [r3, #0]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3318      	adds	r3, #24
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	440b      	add	r3, r1
 8001958:	3304      	adds	r3, #4
 800195a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	7d1b      	ldrb	r3, [r3, #20]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d111      	bne.n	8001988 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3318      	adds	r3, #24
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4413      	add	r3, r2
 8001970:	3304      	adds	r3, #4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	6811      	ldr	r1, [r2, #0]
 8001978:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3318      	adds	r3, #24
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	440b      	add	r3, r1
 8001984:	3304      	adds	r3, #4
 8001986:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3307      	adds	r3, #7
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	061a      	lsls	r2, r3, #24
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3306      	adds	r3, #6
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	041b      	lsls	r3, r3, #16
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3305      	adds	r3, #5
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	4313      	orrs	r3, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	3204      	adds	r2, #4
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	4610      	mov	r0, r2
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	6811      	ldr	r1, [r2, #0]
 80019b0:	ea43 0200 	orr.w	r2, r3, r0
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	440b      	add	r3, r1
 80019ba:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80019be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3303      	adds	r3, #3
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	061a      	lsls	r2, r3, #24
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3302      	adds	r3, #2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	041b      	lsls	r3, r3, #16
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3301      	adds	r3, #1
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	4313      	orrs	r3, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	7812      	ldrb	r2, [r2, #0]
 80019e0:	4610      	mov	r0, r2
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	6811      	ldr	r1, [r2, #0]
 80019e6:	ea43 0200 	orr.w	r2, r3, r0
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	440b      	add	r3, r1
 80019f0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80019f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3318      	adds	r3, #24
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	4413      	add	r3, r2
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	6811      	ldr	r1, [r2, #0]
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3318      	adds	r3, #24
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	440b      	add	r3, r1
 8001a14:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e00e      	b.n	8001a38 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e006      	b.n	8001a38 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
  }
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3724      	adds	r7, #36	@ 0x24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a42:	b480      	push	{r7}
 8001a44:	b087      	sub	sp, #28
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a56:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d003      	beq.n	8001a66 <HAL_CAN_GetRxMessage+0x24>
 8001a5e:	7dfb      	ldrb	r3, [r7, #23]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	f040 8103 	bne.w	8001c6c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10e      	bne.n	8001a8a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d116      	bne.n	8001aa8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0f7      	b.n	8001c7a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d107      	bne.n	8001aa8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0e8      	b.n	8001c7a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	331b      	adds	r3, #27
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	4413      	add	r3, r2
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0204 	and.w	r2, r3, #4
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	331b      	adds	r3, #27
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	0d5b      	lsrs	r3, r3, #21
 8001ad6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	e00b      	b.n	8001af8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	331b      	adds	r3, #27
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	4413      	add	r3, r2
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	08db      	lsrs	r3, r3, #3
 8001af0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	331b      	adds	r3, #27
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0202 	and.w	r2, r3, #2
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	331b      	adds	r3, #27
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	4413      	add	r3, r2
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2208      	movs	r2, #8
 8001b2a:	611a      	str	r2, [r3, #16]
 8001b2c:	e00b      	b.n	8001b46 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	331b      	adds	r3, #27
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	4413      	add	r3, r2
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 020f 	and.w	r2, r3, #15
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	331b      	adds	r3, #27
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	4413      	add	r3, r2
 8001b52:	3304      	adds	r3, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	331b      	adds	r3, #27
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0a1a      	lsrs	r2, r3, #8
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0c1a      	lsrs	r2, r3, #16
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	3302      	adds	r3, #2
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0e1a      	lsrs	r2, r3, #24
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	3303      	adds	r3, #3
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	3304      	adds	r3, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0a1a      	lsrs	r2, r3, #8
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	3305      	adds	r3, #5
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0c1a      	lsrs	r2, r3, #16
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	3306      	adds	r3, #6
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	0e1a      	lsrs	r2, r3, #24
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	3307      	adds	r3, #7
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d108      	bne.n	8001c58 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0220 	orr.w	r2, r2, #32
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	e007      	b.n	8001c68 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0220 	orr.w	r2, r2, #32
 8001c66:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e006      	b.n	8001c7a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c94:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d002      	beq.n	8001ca2 <HAL_CAN_ActivateNotification+0x1e>
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d109      	bne.n	8001cb6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6959      	ldr	r1, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e006      	b.n	8001cc4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
  }
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b08a      	sub	sp, #40	@ 0x28
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d07c      	beq.n	8001e0e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d023      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2201      	movs	r2, #1
 8001d24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f983 	bl	800203c <HAL_CAN_TxMailbox0CompleteCallback>
 8001d36:	e016      	b.n	8001d66 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d004      	beq.n	8001d4c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4a:	e00c      	b.n	8001d66 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5e:	e002      	b.n	8001d66 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f986 	bl	8002072 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d024      	beq.n	8001dba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f962 	bl	800204e <HAL_CAN_TxMailbox1CompleteCallback>
 8001d8a:	e016      	b.n	8001dba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d9e:	e00c      	b.n	8001dba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db2:	e002      	b.n	8001dba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f965 	bl	8002084 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d024      	beq.n	8001e0e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dcc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f941 	bl	8002060 <HAL_CAN_TxMailbox2CompleteCallback>
 8001dde:	e016      	b.n	8001e0e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d004      	beq.n	8001df4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df2:	e00c      	b.n	8001e0e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d004      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e06:	e002      	b.n	8001e0e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f944 	bl	8002096 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00c      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2210      	movs	r2, #16
 8001e30:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d006      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f92a 	bl	80020a8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d009      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f003 fa51 	bl	8005314 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00c      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2210      	movs	r2, #16
 8001e94:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00b      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2208      	movs	r2, #8
 8001eb0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f90a 	bl	80020cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f8f2 	bl	80020ba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00b      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d006      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2210      	movs	r2, #16
 8001ef0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8f3 	bl	80020de <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00b      	beq.n	8001f1a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2208      	movs	r2, #8
 8001f12:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f8eb 	bl	80020f0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d07b      	beq.n	800201c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d072      	beq.n	8002014 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d043      	beq.n	8002014 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d03e      	beq.n	8002014 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f9c:	2b60      	cmp	r3, #96	@ 0x60
 8001f9e:	d02b      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x32a>
 8001fa0:	2b60      	cmp	r3, #96	@ 0x60
 8001fa2:	d82e      	bhi.n	8002002 <HAL_CAN_IRQHandler+0x334>
 8001fa4:	2b50      	cmp	r3, #80	@ 0x50
 8001fa6:	d022      	beq.n	8001fee <HAL_CAN_IRQHandler+0x320>
 8001fa8:	2b50      	cmp	r3, #80	@ 0x50
 8001faa:	d82a      	bhi.n	8002002 <HAL_CAN_IRQHandler+0x334>
 8001fac:	2b40      	cmp	r3, #64	@ 0x40
 8001fae:	d019      	beq.n	8001fe4 <HAL_CAN_IRQHandler+0x316>
 8001fb0:	2b40      	cmp	r3, #64	@ 0x40
 8001fb2:	d826      	bhi.n	8002002 <HAL_CAN_IRQHandler+0x334>
 8001fb4:	2b30      	cmp	r3, #48	@ 0x30
 8001fb6:	d010      	beq.n	8001fda <HAL_CAN_IRQHandler+0x30c>
 8001fb8:	2b30      	cmp	r3, #48	@ 0x30
 8001fba:	d822      	bhi.n	8002002 <HAL_CAN_IRQHandler+0x334>
 8001fbc:	2b10      	cmp	r3, #16
 8001fbe:	d002      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x2f8>
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d005      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fc4:	e01d      	b.n	8002002 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fce:	e019      	b.n	8002004 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd2:	f043 0310 	orr.w	r3, r3, #16
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fd8:	e014      	b.n	8002004 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	f043 0320 	orr.w	r3, r3, #32
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fe2:	e00f      	b.n	8002004 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fec:	e00a      	b.n	8002004 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ff6:	e005      	b.n	8002004 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002000:	e000      	b.n	8002004 <HAL_CAN_IRQHandler+0x336>
            break;
 8002002:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699a      	ldr	r2, [r3, #24]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002012:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2204      	movs	r2, #4
 800201a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f867 	bl	8002102 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002034:	bf00      	nop
 8002036:	3728      	adds	r7, #40	@ 0x28
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002124:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002130:	4013      	ands	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800213c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002146:	4a04      	ldr	r2, [pc, #16]	@ (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	60d3      	str	r3, [r2, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <__NVIC_GetPriorityGrouping+0x18>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 0307 	and.w	r3, r3, #7
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	2b00      	cmp	r3, #0
 8002188:	db0b      	blt.n	80021a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	f003 021f 	and.w	r2, r3, #31
 8002190:	4906      	ldr	r1, [pc, #24]	@ (80021ac <__NVIC_EnableIRQ+0x34>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	2001      	movs	r0, #1
 800219a:	fa00 f202 	lsl.w	r2, r0, r2
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100

080021b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	6039      	str	r1, [r7, #0]
 80021ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	db0a      	blt.n	80021da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	490c      	ldr	r1, [pc, #48]	@ (80021fc <__NVIC_SetPriority+0x4c>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	0112      	lsls	r2, r2, #4
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	440b      	add	r3, r1
 80021d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d8:	e00a      	b.n	80021f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4908      	ldr	r1, [pc, #32]	@ (8002200 <__NVIC_SetPriority+0x50>)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	3b04      	subs	r3, #4
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	761a      	strb	r2, [r3, #24]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000e100 	.word	0xe000e100
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	@ 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f1c3 0307 	rsb	r3, r3, #7
 800221e:	2b04      	cmp	r3, #4
 8002220:	bf28      	it	cs
 8002222:	2304      	movcs	r3, #4
 8002224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3304      	adds	r3, #4
 800222a:	2b06      	cmp	r3, #6
 800222c:	d902      	bls.n	8002234 <NVIC_EncodePriority+0x30>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3b03      	subs	r3, #3
 8002232:	e000      	b.n	8002236 <NVIC_EncodePriority+0x32>
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43da      	mvns	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	401a      	ands	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800224c:	f04f 31ff 	mov.w	r1, #4294967295
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	43d9      	mvns	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	4313      	orrs	r3, r2
         );
}
 800225e:	4618      	mov	r0, r3
 8002260:	3724      	adds	r7, #36	@ 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ff4f 	bl	8002114 <__NVIC_SetPriorityGrouping>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002290:	f7ff ff64 	bl	800215c <__NVIC_GetPriorityGrouping>
 8002294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	6978      	ldr	r0, [r7, #20]
 800229c:	f7ff ffb2 	bl	8002204 <NVIC_EncodePriority>
 80022a0:	4602      	mov	r2, r0
 80022a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff81 	bl	80021b0 <__NVIC_SetPriority>
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff57 	bl	8002178 <__NVIC_EnableIRQ>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b085      	sub	sp, #20
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d008      	beq.n	80022fc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2204      	movs	r2, #4
 80022ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e020      	b.n	800233e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 020e 	bic.w	r2, r2, #14
 800230a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002324:	2101      	movs	r1, #1
 8002326:	fa01 f202 	lsl.w	r2, r1, r2
 800232a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800233c:	7bfb      	ldrb	r3, [r7, #15]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d005      	beq.n	800236c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2204      	movs	r2, #4
 8002364:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	e051      	b.n	8002410 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 020e 	bic.w	r2, r2, #14
 800237a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0201 	bic.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a22      	ldr	r2, [pc, #136]	@ (800241c <HAL_DMA_Abort_IT+0xd4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d029      	beq.n	80023ea <HAL_DMA_Abort_IT+0xa2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a21      	ldr	r2, [pc, #132]	@ (8002420 <HAL_DMA_Abort_IT+0xd8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d022      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x9e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002424 <HAL_DMA_Abort_IT+0xdc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d01a      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x98>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002428 <HAL_DMA_Abort_IT+0xe0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d012      	beq.n	80023da <HAL_DMA_Abort_IT+0x92>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a1c      	ldr	r2, [pc, #112]	@ (800242c <HAL_DMA_Abort_IT+0xe4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00a      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x8c>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002430 <HAL_DMA_Abort_IT+0xe8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d102      	bne.n	80023ce <HAL_DMA_Abort_IT+0x86>
 80023c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80023cc:	e00e      	b.n	80023ec <HAL_DMA_Abort_IT+0xa4>
 80023ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023d2:	e00b      	b.n	80023ec <HAL_DMA_Abort_IT+0xa4>
 80023d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023d8:	e008      	b.n	80023ec <HAL_DMA_Abort_IT+0xa4>
 80023da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023de:	e005      	b.n	80023ec <HAL_DMA_Abort_IT+0xa4>
 80023e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023e4:	e002      	b.n	80023ec <HAL_DMA_Abort_IT+0xa4>
 80023e6:	2310      	movs	r3, #16
 80023e8:	e000      	b.n	80023ec <HAL_DMA_Abort_IT+0xa4>
 80023ea:	2301      	movs	r3, #1
 80023ec:	4a11      	ldr	r2, [pc, #68]	@ (8002434 <HAL_DMA_Abort_IT+0xec>)
 80023ee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
    } 
  }
  return status;
 8002410:	7bfb      	ldrb	r3, [r7, #15]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40020008 	.word	0x40020008
 8002420:	4002001c 	.word	0x4002001c
 8002424:	40020030 	.word	0x40020030
 8002428:	40020044 	.word	0x40020044
 800242c:	40020058 	.word	0x40020058
 8002430:	4002006c 	.word	0x4002006c
 8002434:	40020000 	.word	0x40020000

08002438 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002452:	4b2f      	ldr	r3, [pc, #188]	@ (8002510 <HAL_FLASH_Program+0xd8>)
 8002454:	7e1b      	ldrb	r3, [r3, #24]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_FLASH_Program+0x26>
 800245a:	2302      	movs	r3, #2
 800245c:	e054      	b.n	8002508 <HAL_FLASH_Program+0xd0>
 800245e:	4b2c      	ldr	r3, [pc, #176]	@ (8002510 <HAL_FLASH_Program+0xd8>)
 8002460:	2201      	movs	r2, #1
 8002462:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002464:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002468:	f000 f8a8 	bl	80025bc <FLASH_WaitForLastOperation>
 800246c:	4603      	mov	r3, r0
 800246e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002470:	7dfb      	ldrb	r3, [r7, #23]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d144      	bne.n	8002500 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d102      	bne.n	8002482 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800247c:	2301      	movs	r3, #1
 800247e:	757b      	strb	r3, [r7, #21]
 8002480:	e007      	b.n	8002492 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d102      	bne.n	800248e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002488:	2302      	movs	r3, #2
 800248a:	757b      	strb	r3, [r7, #21]
 800248c:	e001      	b.n	8002492 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800248e:	2304      	movs	r3, #4
 8002490:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002492:	2300      	movs	r3, #0
 8002494:	75bb      	strb	r3, [r7, #22]
 8002496:	e02d      	b.n	80024f4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002498:	7dbb      	ldrb	r3, [r7, #22]
 800249a:	005a      	lsls	r2, r3, #1
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	eb02 0c03 	add.w	ip, r2, r3
 80024a2:	7dbb      	ldrb	r3, [r7, #22]
 80024a4:	0119      	lsls	r1, r3, #4
 80024a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024aa:	f1c1 0620 	rsb	r6, r1, #32
 80024ae:	f1a1 0020 	sub.w	r0, r1, #32
 80024b2:	fa22 f401 	lsr.w	r4, r2, r1
 80024b6:	fa03 f606 	lsl.w	r6, r3, r6
 80024ba:	4334      	orrs	r4, r6
 80024bc:	fa23 f000 	lsr.w	r0, r3, r0
 80024c0:	4304      	orrs	r4, r0
 80024c2:	fa23 f501 	lsr.w	r5, r3, r1
 80024c6:	b2a3      	uxth	r3, r4
 80024c8:	4619      	mov	r1, r3
 80024ca:	4660      	mov	r0, ip
 80024cc:	f000 f85a 	bl	8002584 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80024d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80024d4:	f000 f872 	bl	80025bc <FLASH_WaitForLastOperation>
 80024d8:	4603      	mov	r3, r0
 80024da:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80024dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <HAL_FLASH_Program+0xdc>)
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002514 <HAL_FLASH_Program+0xdc>)
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d107      	bne.n	80024fe <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80024ee:	7dbb      	ldrb	r3, [r7, #22]
 80024f0:	3301      	adds	r3, #1
 80024f2:	75bb      	strb	r3, [r7, #22]
 80024f4:	7dba      	ldrb	r2, [r7, #22]
 80024f6:	7d7b      	ldrb	r3, [r7, #21]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d3cd      	bcc.n	8002498 <HAL_FLASH_Program+0x60>
 80024fc:	e000      	b.n	8002500 <HAL_FLASH_Program+0xc8>
      {
        break;
 80024fe:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002500:	4b03      	ldr	r3, [pc, #12]	@ (8002510 <HAL_FLASH_Program+0xd8>)
 8002502:	2200      	movs	r2, #0
 8002504:	761a      	strb	r2, [r3, #24]

  return status;
 8002506:	7dfb      	ldrb	r3, [r7, #23]
}
 8002508:	4618      	mov	r0, r3
 800250a:	371c      	adds	r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002510:	20000108 	.word	0x20000108
 8002514:	40022000 	.word	0x40022000

08002518 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002522:	4b0d      	ldr	r3, [pc, #52]	@ (8002558 <HAL_FLASH_Unlock+0x40>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00d      	beq.n	800254a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800252e:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <HAL_FLASH_Unlock+0x40>)
 8002530:	4a0a      	ldr	r2, [pc, #40]	@ (800255c <HAL_FLASH_Unlock+0x44>)
 8002532:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002534:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <HAL_FLASH_Unlock+0x40>)
 8002536:	4a0a      	ldr	r2, [pc, #40]	@ (8002560 <HAL_FLASH_Unlock+0x48>)
 8002538:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800253a:	4b07      	ldr	r3, [pc, #28]	@ (8002558 <HAL_FLASH_Unlock+0x40>)
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800254a:	79fb      	ldrb	r3, [r7, #7]
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40022000 	.word	0x40022000
 800255c:	45670123 	.word	0x45670123
 8002560:	cdef89ab 	.word	0xcdef89ab

08002564 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002568:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <HAL_FLASH_Lock+0x1c>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	4a04      	ldr	r2, [pc, #16]	@ (8002580 <HAL_FLASH_Lock+0x1c>)
 800256e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002572:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40022000 	.word	0x40022000

08002584 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002590:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <FLASH_Program_HalfWord+0x30>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002596:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <FLASH_Program_HalfWord+0x34>)
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	4a07      	ldr	r2, [pc, #28]	@ (80025b8 <FLASH_Program_HalfWord+0x34>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	887a      	ldrh	r2, [r7, #2]
 80025a6:	801a      	strh	r2, [r3, #0]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000108 	.word	0x20000108
 80025b8:	40022000 	.word	0x40022000

080025bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7fe ff5c 	bl	8001480 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80025ca:	e010      	b.n	80025ee <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d00c      	beq.n	80025ee <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <FLASH_WaitForLastOperation+0x2e>
 80025da:	f7fe ff51 	bl	8001480 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d201      	bcs.n	80025ee <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e025      	b.n	800263a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80025ee:	4b15      	ldr	r3, [pc, #84]	@ (8002644 <FLASH_WaitForLastOperation+0x88>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1e8      	bne.n	80025cc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80025fa:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <FLASH_WaitForLastOperation+0x88>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002606:	4b0f      	ldr	r3, [pc, #60]	@ (8002644 <FLASH_WaitForLastOperation+0x88>)
 8002608:	2220      	movs	r2, #32
 800260a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800260c:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <FLASH_WaitForLastOperation+0x88>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10b      	bne.n	8002630 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002618:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <FLASH_WaitForLastOperation+0x88>)
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002620:	2b00      	cmp	r3, #0
 8002622:	d105      	bne.n	8002630 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002624:	4b07      	ldr	r3, [pc, #28]	@ (8002644 <FLASH_WaitForLastOperation+0x88>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002630:	f000 f80a 	bl	8002648 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40022000 	.word	0x40022000

08002648 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002652:	4b23      	ldr	r3, [pc, #140]	@ (80026e0 <FLASH_SetErrorCode+0x98>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800265e:	4b21      	ldr	r3, [pc, #132]	@ (80026e4 <FLASH_SetErrorCode+0x9c>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f043 0302 	orr.w	r3, r3, #2
 8002666:	4a1f      	ldr	r2, [pc, #124]	@ (80026e4 <FLASH_SetErrorCode+0x9c>)
 8002668:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f043 0310 	orr.w	r3, r3, #16
 8002670:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002672:	4b1b      	ldr	r3, [pc, #108]	@ (80026e0 <FLASH_SetErrorCode+0x98>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800267e:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <FLASH_SetErrorCode+0x9c>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	4a17      	ldr	r2, [pc, #92]	@ (80026e4 <FLASH_SetErrorCode+0x9c>)
 8002688:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002692:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <FLASH_SetErrorCode+0x98>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800269e:	4b11      	ldr	r3, [pc, #68]	@ (80026e4 <FLASH_SetErrorCode+0x9c>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	4a0f      	ldr	r2, [pc, #60]	@ (80026e4 <FLASH_SetErrorCode+0x9c>)
 80026a8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80026aa:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <FLASH_SetErrorCode+0x98>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4a0c      	ldr	r2, [pc, #48]	@ (80026e0 <FLASH_SetErrorCode+0x98>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f240 1201 	movw	r2, #257	@ 0x101
 80026bc:	4293      	cmp	r3, r2
 80026be:	d106      	bne.n	80026ce <FLASH_SetErrorCode+0x86>
 80026c0:	4b07      	ldr	r3, [pc, #28]	@ (80026e0 <FLASH_SetErrorCode+0x98>)
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	4a06      	ldr	r2, [pc, #24]	@ (80026e0 <FLASH_SetErrorCode+0x98>)
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	61d3      	str	r3, [r2, #28]
}  
 80026cc:	e002      	b.n	80026d4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80026ce:	4a04      	ldr	r2, [pc, #16]	@ (80026e0 <FLASH_SetErrorCode+0x98>)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	60d3      	str	r3, [r2, #12]
}  
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40022000 	.word	0x40022000
 80026e4:	20000108 	.word	0x20000108

080026e8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026fa:	4b2f      	ldr	r3, [pc, #188]	@ (80027b8 <HAL_FLASHEx_Erase+0xd0>)
 80026fc:	7e1b      	ldrb	r3, [r3, #24]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_FLASHEx_Erase+0x1e>
 8002702:	2302      	movs	r3, #2
 8002704:	e053      	b.n	80027ae <HAL_FLASHEx_Erase+0xc6>
 8002706:	4b2c      	ldr	r3, [pc, #176]	@ (80027b8 <HAL_FLASHEx_Erase+0xd0>)
 8002708:	2201      	movs	r2, #1
 800270a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d116      	bne.n	8002742 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002714:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002718:	f7ff ff50 	bl	80025bc <FLASH_WaitForLastOperation>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d141      	bne.n	80027a6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002722:	2001      	movs	r0, #1
 8002724:	f000 f84c 	bl	80027c0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002728:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800272c:	f7ff ff46 	bl	80025bc <FLASH_WaitForLastOperation>
 8002730:	4603      	mov	r3, r0
 8002732:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002734:	4b21      	ldr	r3, [pc, #132]	@ (80027bc <HAL_FLASHEx_Erase+0xd4>)
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	4a20      	ldr	r2, [pc, #128]	@ (80027bc <HAL_FLASHEx_Erase+0xd4>)
 800273a:	f023 0304 	bic.w	r3, r3, #4
 800273e:	6113      	str	r3, [r2, #16]
 8002740:	e031      	b.n	80027a6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002742:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002746:	f7ff ff39 	bl	80025bc <FLASH_WaitForLastOperation>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d12a      	bne.n	80027a6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f04f 32ff 	mov.w	r2, #4294967295
 8002756:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	e019      	b.n	8002794 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002760:	68b8      	ldr	r0, [r7, #8]
 8002762:	f000 f849 	bl	80027f8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002766:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800276a:	f7ff ff27 	bl	80025bc <FLASH_WaitForLastOperation>
 800276e:	4603      	mov	r3, r0
 8002770:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002772:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <HAL_FLASHEx_Erase+0xd4>)
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	4a11      	ldr	r2, [pc, #68]	@ (80027bc <HAL_FLASHEx_Erase+0xd4>)
 8002778:	f023 0302 	bic.w	r3, r3, #2
 800277c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	601a      	str	r2, [r3, #0]
            break;
 800278a:	e00c      	b.n	80027a6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002792:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	029a      	lsls	r2, r3, #10
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	4413      	add	r3, r2
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d3dc      	bcc.n	8002760 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027a6:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <HAL_FLASHEx_Erase+0xd0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	761a      	strb	r2, [r3, #24]

  return status;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000108 	.word	0x20000108
 80027bc:	40022000 	.word	0x40022000

080027c0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027c8:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <FLASH_MassErase+0x30>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80027ce:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <FLASH_MassErase+0x34>)
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	4a08      	ldr	r2, [pc, #32]	@ (80027f4 <FLASH_MassErase+0x34>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80027da:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <FLASH_MassErase+0x34>)
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	4a05      	ldr	r2, [pc, #20]	@ (80027f4 <FLASH_MassErase+0x34>)
 80027e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027e4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	20000108 	.word	0x20000108
 80027f4:	40022000 	.word	0x40022000

080027f8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <FLASH_PageErase+0x38>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002806:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <FLASH_PageErase+0x3c>)
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	4a0a      	ldr	r2, [pc, #40]	@ (8002834 <FLASH_PageErase+0x3c>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002812:	4a08      	ldr	r2, [pc, #32]	@ (8002834 <FLASH_PageErase+0x3c>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002818:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <FLASH_PageErase+0x3c>)
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	4a05      	ldr	r2, [pc, #20]	@ (8002834 <FLASH_PageErase+0x3c>)
 800281e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002822:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000108 	.word	0x20000108
 8002834:	40022000 	.word	0x40022000

08002838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002838:	b480      	push	{r7}
 800283a:	b08b      	sub	sp, #44	@ 0x2c
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800284a:	e169      	b.n	8002b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800284c:	2201      	movs	r2, #1
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	429a      	cmp	r2, r3
 8002866:	f040 8158 	bne.w	8002b1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a9a      	ldr	r2, [pc, #616]	@ (8002ad8 <HAL_GPIO_Init+0x2a0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d05e      	beq.n	8002932 <HAL_GPIO_Init+0xfa>
 8002874:	4a98      	ldr	r2, [pc, #608]	@ (8002ad8 <HAL_GPIO_Init+0x2a0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d875      	bhi.n	8002966 <HAL_GPIO_Init+0x12e>
 800287a:	4a98      	ldr	r2, [pc, #608]	@ (8002adc <HAL_GPIO_Init+0x2a4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d058      	beq.n	8002932 <HAL_GPIO_Init+0xfa>
 8002880:	4a96      	ldr	r2, [pc, #600]	@ (8002adc <HAL_GPIO_Init+0x2a4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d86f      	bhi.n	8002966 <HAL_GPIO_Init+0x12e>
 8002886:	4a96      	ldr	r2, [pc, #600]	@ (8002ae0 <HAL_GPIO_Init+0x2a8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d052      	beq.n	8002932 <HAL_GPIO_Init+0xfa>
 800288c:	4a94      	ldr	r2, [pc, #592]	@ (8002ae0 <HAL_GPIO_Init+0x2a8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d869      	bhi.n	8002966 <HAL_GPIO_Init+0x12e>
 8002892:	4a94      	ldr	r2, [pc, #592]	@ (8002ae4 <HAL_GPIO_Init+0x2ac>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d04c      	beq.n	8002932 <HAL_GPIO_Init+0xfa>
 8002898:	4a92      	ldr	r2, [pc, #584]	@ (8002ae4 <HAL_GPIO_Init+0x2ac>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d863      	bhi.n	8002966 <HAL_GPIO_Init+0x12e>
 800289e:	4a92      	ldr	r2, [pc, #584]	@ (8002ae8 <HAL_GPIO_Init+0x2b0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d046      	beq.n	8002932 <HAL_GPIO_Init+0xfa>
 80028a4:	4a90      	ldr	r2, [pc, #576]	@ (8002ae8 <HAL_GPIO_Init+0x2b0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d85d      	bhi.n	8002966 <HAL_GPIO_Init+0x12e>
 80028aa:	2b12      	cmp	r3, #18
 80028ac:	d82a      	bhi.n	8002904 <HAL_GPIO_Init+0xcc>
 80028ae:	2b12      	cmp	r3, #18
 80028b0:	d859      	bhi.n	8002966 <HAL_GPIO_Init+0x12e>
 80028b2:	a201      	add	r2, pc, #4	@ (adr r2, 80028b8 <HAL_GPIO_Init+0x80>)
 80028b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b8:	08002933 	.word	0x08002933
 80028bc:	0800290d 	.word	0x0800290d
 80028c0:	0800291f 	.word	0x0800291f
 80028c4:	08002961 	.word	0x08002961
 80028c8:	08002967 	.word	0x08002967
 80028cc:	08002967 	.word	0x08002967
 80028d0:	08002967 	.word	0x08002967
 80028d4:	08002967 	.word	0x08002967
 80028d8:	08002967 	.word	0x08002967
 80028dc:	08002967 	.word	0x08002967
 80028e0:	08002967 	.word	0x08002967
 80028e4:	08002967 	.word	0x08002967
 80028e8:	08002967 	.word	0x08002967
 80028ec:	08002967 	.word	0x08002967
 80028f0:	08002967 	.word	0x08002967
 80028f4:	08002967 	.word	0x08002967
 80028f8:	08002967 	.word	0x08002967
 80028fc:	08002915 	.word	0x08002915
 8002900:	08002929 	.word	0x08002929
 8002904:	4a79      	ldr	r2, [pc, #484]	@ (8002aec <HAL_GPIO_Init+0x2b4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d013      	beq.n	8002932 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800290a:	e02c      	b.n	8002966 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	623b      	str	r3, [r7, #32]
          break;
 8002912:	e029      	b.n	8002968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	3304      	adds	r3, #4
 800291a:	623b      	str	r3, [r7, #32]
          break;
 800291c:	e024      	b.n	8002968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	3308      	adds	r3, #8
 8002924:	623b      	str	r3, [r7, #32]
          break;
 8002926:	e01f      	b.n	8002968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	330c      	adds	r3, #12
 800292e:	623b      	str	r3, [r7, #32]
          break;
 8002930:	e01a      	b.n	8002968 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800293a:	2304      	movs	r3, #4
 800293c:	623b      	str	r3, [r7, #32]
          break;
 800293e:	e013      	b.n	8002968 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d105      	bne.n	8002954 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002948:	2308      	movs	r3, #8
 800294a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	611a      	str	r2, [r3, #16]
          break;
 8002952:	e009      	b.n	8002968 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002954:	2308      	movs	r3, #8
 8002956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	615a      	str	r2, [r3, #20]
          break;
 800295e:	e003      	b.n	8002968 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002960:	2300      	movs	r3, #0
 8002962:	623b      	str	r3, [r7, #32]
          break;
 8002964:	e000      	b.n	8002968 <HAL_GPIO_Init+0x130>
          break;
 8002966:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2bff      	cmp	r3, #255	@ 0xff
 800296c:	d801      	bhi.n	8002972 <HAL_GPIO_Init+0x13a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	e001      	b.n	8002976 <HAL_GPIO_Init+0x13e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3304      	adds	r3, #4
 8002976:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2bff      	cmp	r3, #255	@ 0xff
 800297c:	d802      	bhi.n	8002984 <HAL_GPIO_Init+0x14c>
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	e002      	b.n	800298a <HAL_GPIO_Init+0x152>
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	3b08      	subs	r3, #8
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	210f      	movs	r1, #15
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	6a39      	ldr	r1, [r7, #32]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	431a      	orrs	r2, r3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 80b1 	beq.w	8002b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029b8:	4b4d      	ldr	r3, [pc, #308]	@ (8002af0 <HAL_GPIO_Init+0x2b8>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a4c      	ldr	r2, [pc, #304]	@ (8002af0 <HAL_GPIO_Init+0x2b8>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b4a      	ldr	r3, [pc, #296]	@ (8002af0 <HAL_GPIO_Init+0x2b8>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029d0:	4a48      	ldr	r2, [pc, #288]	@ (8002af4 <HAL_GPIO_Init+0x2bc>)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	3302      	adds	r3, #2
 80029d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	220f      	movs	r2, #15
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4013      	ands	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a40      	ldr	r2, [pc, #256]	@ (8002af8 <HAL_GPIO_Init+0x2c0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d013      	beq.n	8002a24 <HAL_GPIO_Init+0x1ec>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a3f      	ldr	r2, [pc, #252]	@ (8002afc <HAL_GPIO_Init+0x2c4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00d      	beq.n	8002a20 <HAL_GPIO_Init+0x1e8>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a3e      	ldr	r2, [pc, #248]	@ (8002b00 <HAL_GPIO_Init+0x2c8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d007      	beq.n	8002a1c <HAL_GPIO_Init+0x1e4>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b04 <HAL_GPIO_Init+0x2cc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d101      	bne.n	8002a18 <HAL_GPIO_Init+0x1e0>
 8002a14:	2303      	movs	r3, #3
 8002a16:	e006      	b.n	8002a26 <HAL_GPIO_Init+0x1ee>
 8002a18:	2304      	movs	r3, #4
 8002a1a:	e004      	b.n	8002a26 <HAL_GPIO_Init+0x1ee>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e002      	b.n	8002a26 <HAL_GPIO_Init+0x1ee>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_GPIO_Init+0x1ee>
 8002a24:	2300      	movs	r3, #0
 8002a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a28:	f002 0203 	and.w	r2, r2, #3
 8002a2c:	0092      	lsls	r2, r2, #2
 8002a2e:	4093      	lsls	r3, r2
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a36:	492f      	ldr	r1, [pc, #188]	@ (8002af4 <HAL_GPIO_Init+0x2bc>)
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	089b      	lsrs	r3, r3, #2
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d006      	beq.n	8002a5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a50:	4b2d      	ldr	r3, [pc, #180]	@ (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	492c      	ldr	r1, [pc, #176]	@ (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	608b      	str	r3, [r1, #8]
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	4928      	ldr	r1, [pc, #160]	@ (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d006      	beq.n	8002a86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a78:	4b23      	ldr	r3, [pc, #140]	@ (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	4922      	ldr	r1, [pc, #136]	@ (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60cb      	str	r3, [r1, #12]
 8002a84:	e006      	b.n	8002a94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a86:	4b20      	ldr	r3, [pc, #128]	@ (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	491e      	ldr	r1, [pc, #120]	@ (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d006      	beq.n	8002aae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	4918      	ldr	r1, [pc, #96]	@ (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
 8002aac:	e006      	b.n	8002abc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aae:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	4914      	ldr	r1, [pc, #80]	@ (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d021      	beq.n	8002b0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	490e      	ldr	r1, [pc, #56]	@ (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
 8002ad4:	e021      	b.n	8002b1a <HAL_GPIO_Init+0x2e2>
 8002ad6:	bf00      	nop
 8002ad8:	10320000 	.word	0x10320000
 8002adc:	10310000 	.word	0x10310000
 8002ae0:	10220000 	.word	0x10220000
 8002ae4:	10210000 	.word	0x10210000
 8002ae8:	10120000 	.word	0x10120000
 8002aec:	10110000 	.word	0x10110000
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010000 	.word	0x40010000
 8002af8:	40010800 	.word	0x40010800
 8002afc:	40010c00 	.word	0x40010c00
 8002b00:	40011000 	.word	0x40011000
 8002b04:	40011400 	.word	0x40011400
 8002b08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <HAL_GPIO_Init+0x304>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	4909      	ldr	r1, [pc, #36]	@ (8002b3c <HAL_GPIO_Init+0x304>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f47f ae8e 	bne.w	800284c <HAL_GPIO_Init+0x14>
  }
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	372c      	adds	r7, #44	@ 0x2c
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	40010400 	.word	0x40010400

08002b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	807b      	strh	r3, [r7, #2]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b50:	787b      	ldrb	r3, [r7, #1]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b5c:	e003      	b.n	8002b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	041a      	lsls	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	611a      	str	r2, [r3, #16]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	041a      	lsls	r2, r3, #16
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	43d9      	mvns	r1, r3
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	400b      	ands	r3, r1
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	611a      	str	r2, [r3, #16]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002ba8:	4b03      	ldr	r3, [pc, #12]	@ (8002bb8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	420e0020 	.word	0x420e0020

08002bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e272      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8087 	beq.w	8002cea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bdc:	4b92      	ldr	r3, [pc, #584]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d00c      	beq.n	8002c02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002be8:	4b8f      	ldr	r3, [pc, #572]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d112      	bne.n	8002c1a <HAL_RCC_OscConfig+0x5e>
 8002bf4:	4b8c      	ldr	r3, [pc, #560]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c00:	d10b      	bne.n	8002c1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c02:	4b89      	ldr	r3, [pc, #548]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d06c      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x12c>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d168      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e24c      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x76>
 8002c24:	4b80      	ldr	r3, [pc, #512]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a7f      	ldr	r2, [pc, #508]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	e02e      	b.n	8002c90 <HAL_RCC_OscConfig+0xd4>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x98>
 8002c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7a      	ldr	r2, [pc, #488]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b78      	ldr	r3, [pc, #480]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a77      	ldr	r2, [pc, #476]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e01d      	b.n	8002c90 <HAL_RCC_OscConfig+0xd4>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0xbc>
 8002c5e:	4b72      	ldr	r3, [pc, #456]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a71      	ldr	r2, [pc, #452]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b6f      	ldr	r3, [pc, #444]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xd4>
 8002c78:	4b6b      	ldr	r3, [pc, #428]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b68      	ldr	r3, [pc, #416]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a67      	ldr	r2, [pc, #412]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe fbf2 	bl	8001480 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fbee 	bl	8001480 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	@ 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e200      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xe4>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fbde 	bl	8001480 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fbda 	bl	8001480 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1ec      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	4b53      	ldr	r3, [pc, #332]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x10c>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d063      	beq.n	8002dbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d02:	4b49      	ldr	r3, [pc, #292]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d11c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x18c>
 8002d0e:	4b46      	ldr	r3, [pc, #280]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	4b43      	ldr	r3, [pc, #268]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x176>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1c0      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b3d      	ldr	r3, [pc, #244]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4939      	ldr	r1, [pc, #228]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	e03a      	b.n	8002dbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d50:	4b36      	ldr	r3, [pc, #216]	@ (8002e2c <HAL_RCC_OscConfig+0x270>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d56:	f7fe fb93 	bl	8001480 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7fe fb8f 	bl	8001480 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e1a1      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	4b2d      	ldr	r3, [pc, #180]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4927      	ldr	r1, [pc, #156]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
 8002d90:	e015      	b.n	8002dbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d92:	4b26      	ldr	r3, [pc, #152]	@ (8002e2c <HAL_RCC_OscConfig+0x270>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fe fb72 	bl	8001480 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da0:	f7fe fb6e 	bl	8001480 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e180      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d03a      	beq.n	8002e40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d019      	beq.n	8002e06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd2:	4b17      	ldr	r3, [pc, #92]	@ (8002e30 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fb52 	bl	8001480 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe fb4e 	bl	8001480 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e160      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dfe:	2001      	movs	r0, #1
 8002e00:	f000 fafe 	bl	8003400 <RCC_Delay>
 8002e04:	e01c      	b.n	8002e40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e06:	4b0a      	ldr	r3, [pc, #40]	@ (8002e30 <HAL_RCC_OscConfig+0x274>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0c:	f7fe fb38 	bl	8001480 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e12:	e00f      	b.n	8002e34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e14:	f7fe fb34 	bl	8001480 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d908      	bls.n	8002e34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e146      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	42420000 	.word	0x42420000
 8002e30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	4b92      	ldr	r3, [pc, #584]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e9      	bne.n	8002e14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80a6 	beq.w	8002f9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e52:	4b8b      	ldr	r3, [pc, #556]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10d      	bne.n	8002e7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	4b88      	ldr	r3, [pc, #544]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4a87      	ldr	r2, [pc, #540]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e68:	61d3      	str	r3, [r2, #28]
 8002e6a:	4b85      	ldr	r3, [pc, #532]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7a:	4b82      	ldr	r3, [pc, #520]	@ (8003084 <HAL_RCC_OscConfig+0x4c8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d118      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e86:	4b7f      	ldr	r3, [pc, #508]	@ (8003084 <HAL_RCC_OscConfig+0x4c8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a7e      	ldr	r2, [pc, #504]	@ (8003084 <HAL_RCC_OscConfig+0x4c8>)
 8002e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e92:	f7fe faf5 	bl	8001480 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9a:	f7fe faf1 	bl	8001480 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b64      	cmp	r3, #100	@ 0x64
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e103      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	4b75      	ldr	r3, [pc, #468]	@ (8003084 <HAL_RCC_OscConfig+0x4c8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d106      	bne.n	8002ece <HAL_RCC_OscConfig+0x312>
 8002ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a6e      	ldr	r2, [pc, #440]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	e02d      	b.n	8002f2a <HAL_RCC_OscConfig+0x36e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x334>
 8002ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4a69      	ldr	r2, [pc, #420]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	6213      	str	r3, [r2, #32]
 8002ee2:	4b67      	ldr	r3, [pc, #412]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4a66      	ldr	r2, [pc, #408]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002ee8:	f023 0304 	bic.w	r3, r3, #4
 8002eec:	6213      	str	r3, [r2, #32]
 8002eee:	e01c      	b.n	8002f2a <HAL_RCC_OscConfig+0x36e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b05      	cmp	r3, #5
 8002ef6:	d10c      	bne.n	8002f12 <HAL_RCC_OscConfig+0x356>
 8002ef8:	4b61      	ldr	r3, [pc, #388]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4a60      	ldr	r2, [pc, #384]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002efe:	f043 0304 	orr.w	r3, r3, #4
 8002f02:	6213      	str	r3, [r2, #32]
 8002f04:	4b5e      	ldr	r3, [pc, #376]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	4a5d      	ldr	r2, [pc, #372]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6213      	str	r3, [r2, #32]
 8002f10:	e00b      	b.n	8002f2a <HAL_RCC_OscConfig+0x36e>
 8002f12:	4b5b      	ldr	r3, [pc, #364]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4a5a      	ldr	r2, [pc, #360]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	6213      	str	r3, [r2, #32]
 8002f1e:	4b58      	ldr	r3, [pc, #352]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4a57      	ldr	r2, [pc, #348]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	f023 0304 	bic.w	r3, r3, #4
 8002f28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d015      	beq.n	8002f5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f32:	f7fe faa5 	bl	8001480 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7fe faa1 	bl	8001480 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e0b1      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f50:	4b4b      	ldr	r3, [pc, #300]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0ee      	beq.n	8002f3a <HAL_RCC_OscConfig+0x37e>
 8002f5c:	e014      	b.n	8002f88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe fa8f 	bl	8001480 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe fa8b 	bl	8001480 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e09b      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7c:	4b40      	ldr	r3, [pc, #256]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1ee      	bne.n	8002f66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d105      	bne.n	8002f9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4a3b      	ldr	r2, [pc, #236]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8087 	beq.w	80030b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa4:	4b36      	ldr	r3, [pc, #216]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d061      	beq.n	8003074 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d146      	bne.n	8003046 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb8:	4b33      	ldr	r3, [pc, #204]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fe fa5f 	bl	8001480 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fe fa5b 	bl	8001480 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e06d      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd8:	4b29      	ldr	r3, [pc, #164]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fec:	d108      	bne.n	8003000 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fee:	4b24      	ldr	r3, [pc, #144]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	4921      	ldr	r1, [pc, #132]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003000:	4b1f      	ldr	r3, [pc, #124]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a19      	ldr	r1, [r3, #32]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003010:	430b      	orrs	r3, r1
 8003012:	491b      	ldr	r1, [pc, #108]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003018:	4b1b      	ldr	r3, [pc, #108]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301e:	f7fe fa2f 	bl	8001480 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe fa2b 	bl	8001480 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e03d      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003038:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x46a>
 8003044:	e035      	b.n	80030b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003046:	4b10      	ldr	r3, [pc, #64]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fe fa18 	bl	8001480 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe fa14 	bl	8001480 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e026      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003066:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x498>
 8003072:	e01e      	b.n	80030b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d107      	bne.n	800308c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e019      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
 8003080:	40021000 	.word	0x40021000
 8003084:	40007000 	.word	0x40007000
 8003088:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800308c:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_RCC_OscConfig+0x500>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	429a      	cmp	r2, r3
 800309e:	d106      	bne.n	80030ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d001      	beq.n	80030b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000

080030c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0d0      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d910      	bls.n	8003104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b67      	ldr	r3, [pc, #412]	@ (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 0207 	bic.w	r2, r3, #7
 80030ea:	4965      	ldr	r1, [pc, #404]	@ (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b63      	ldr	r3, [pc, #396]	@ (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0b8      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d020      	beq.n	8003152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800311c:	4b59      	ldr	r3, [pc, #356]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a58      	ldr	r2, [pc, #352]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003134:	4b53      	ldr	r3, [pc, #332]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4a52      	ldr	r2, [pc, #328]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800313e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003140:	4b50      	ldr	r3, [pc, #320]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	494d      	ldr	r1, [pc, #308]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d040      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	4b47      	ldr	r3, [pc, #284]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d115      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e07f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317e:	4b41      	ldr	r3, [pc, #260]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e073      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318e:	4b3d      	ldr	r3, [pc, #244]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e06b      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319e:	4b39      	ldr	r3, [pc, #228]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f023 0203 	bic.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4936      	ldr	r1, [pc, #216]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b0:	f7fe f966 	bl	8001480 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b8:	f7fe f962 	bl	8001480 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e053      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 020c 	and.w	r2, r3, #12
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	429a      	cmp	r2, r3
 80031de:	d1eb      	bne.n	80031b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e0:	4b27      	ldr	r3, [pc, #156]	@ (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d210      	bcs.n	8003210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b24      	ldr	r3, [pc, #144]	@ (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 0207 	bic.w	r2, r3, #7
 80031f6:	4922      	ldr	r1, [pc, #136]	@ (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b20      	ldr	r3, [pc, #128]	@ (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e032      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800321c:	4b19      	ldr	r3, [pc, #100]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4916      	ldr	r1, [pc, #88]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	4313      	orrs	r3, r2
 800322c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800323a:	4b12      	ldr	r3, [pc, #72]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	490e      	ldr	r1, [pc, #56]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800324e:	f000 f821 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8003252:	4602      	mov	r2, r0
 8003254:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	490a      	ldr	r1, [pc, #40]	@ (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003260:	5ccb      	ldrb	r3, [r1, r3]
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	4a09      	ldr	r2, [pc, #36]	@ (800328c <HAL_RCC_ClockConfig+0x1cc>)
 8003268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800326a:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <HAL_RCC_ClockConfig+0x1d0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd fbcc 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40022000 	.word	0x40022000
 8003284:	40021000 	.word	0x40021000
 8003288:	0800847c 	.word	0x0800847c
 800328c:	20000000 	.word	0x20000000
 8003290:	20000004 	.word	0x20000004

08003294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x94>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d002      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x30>
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d003      	beq.n	80032ca <HAL_RCC_GetSysClockFreq+0x36>
 80032c2:	e027      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032c4:	4b19      	ldr	r3, [pc, #100]	@ (800332c <HAL_RCC_GetSysClockFreq+0x98>)
 80032c6:	613b      	str	r3, [r7, #16]
      break;
 80032c8:	e027      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	0c9b      	lsrs	r3, r3, #18
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	4a17      	ldr	r2, [pc, #92]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032d4:	5cd3      	ldrb	r3, [r2, r3]
 80032d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d010      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032e2:	4b11      	ldr	r3, [pc, #68]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x94>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	0c5b      	lsrs	r3, r3, #17
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	4a11      	ldr	r2, [pc, #68]	@ (8003334 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032ee:	5cd3      	ldrb	r3, [r2, r3]
 80032f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a0d      	ldr	r2, [pc, #52]	@ (800332c <HAL_RCC_GetSysClockFreq+0x98>)
 80032f6:	fb03 f202 	mul.w	r2, r3, r2
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	e004      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a0c      	ldr	r2, [pc, #48]	@ (8003338 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003308:	fb02 f303 	mul.w	r3, r2, r3
 800330c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	613b      	str	r3, [r7, #16]
      break;
 8003312:	e002      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b05      	ldr	r3, [pc, #20]	@ (800332c <HAL_RCC_GetSysClockFreq+0x98>)
 8003316:	613b      	str	r3, [r7, #16]
      break;
 8003318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331a:	693b      	ldr	r3, [r7, #16]
}
 800331c:	4618      	mov	r0, r3
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	007a1200 	.word	0x007a1200
 8003330:	08008494 	.word	0x08008494
 8003334:	080084a4 	.word	0x080084a4
 8003338:	003d0900 	.word	0x003d0900

0800333c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003340:	4b02      	ldr	r3, [pc, #8]	@ (800334c <HAL_RCC_GetHCLKFreq+0x10>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	20000000 	.word	0x20000000

08003350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003354:	f7ff fff2 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4903      	ldr	r1, [pc, #12]	@ (8003374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	0800848c 	.word	0x0800848c

08003378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800337c:	f7ff ffde 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	0adb      	lsrs	r3, r3, #11
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	@ (800339c <HAL_RCC_GetPCLK2Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40021000 	.word	0x40021000
 800339c:	0800848c 	.word	0x0800848c

080033a0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	220f      	movs	r2, #15
 80033ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033b0:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <HAL_RCC_GetClockConfig+0x58>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0203 	and.w	r2, r3, #3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033bc:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <HAL_RCC_GetClockConfig+0x58>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033c8:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <HAL_RCC_GetClockConfig+0x58>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80033d4:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <HAL_RCC_GetClockConfig+0x58>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	08db      	lsrs	r3, r3, #3
 80033da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033e2:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <HAL_RCC_GetClockConfig+0x5c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0207 	and.w	r2, r3, #7
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40022000 	.word	0x40022000

08003400 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003408:	4b0a      	ldr	r3, [pc, #40]	@ (8003434 <RCC_Delay+0x34>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0a      	ldr	r2, [pc, #40]	@ (8003438 <RCC_Delay+0x38>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	0a5b      	lsrs	r3, r3, #9
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800341c:	bf00      	nop
  }
  while (Delay --);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1e5a      	subs	r2, r3, #1
 8003422:	60fa      	str	r2, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f9      	bne.n	800341c <RCC_Delay+0x1c>
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	20000000 	.word	0x20000000
 8003438:	10624dd3 	.word	0x10624dd3

0800343c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d07d      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003458:	2300      	movs	r3, #0
 800345a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800345c:	4b4f      	ldr	r3, [pc, #316]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10d      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003468:	4b4c      	ldr	r3, [pc, #304]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	4a4b      	ldr	r2, [pc, #300]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003472:	61d3      	str	r3, [r2, #28]
 8003474:	4b49      	ldr	r3, [pc, #292]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003480:	2301      	movs	r3, #1
 8003482:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003484:	4b46      	ldr	r3, [pc, #280]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d118      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003490:	4b43      	ldr	r3, [pc, #268]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a42      	ldr	r2, [pc, #264]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800349a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800349c:	f7fd fff0 	bl	8001480 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a2:	e008      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a4:	f7fd ffec 	bl	8001480 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	@ 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e06d      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b6:	4b3a      	ldr	r3, [pc, #232]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034c2:	4b36      	ldr	r3, [pc, #216]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d02e      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d027      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034e0:	4b2e      	ldr	r3, [pc, #184]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ea:	4b2e      	ldr	r3, [pc, #184]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034f0:	4b2c      	ldr	r3, [pc, #176]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034f6:	4a29      	ldr	r2, [pc, #164]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d014      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003506:	f7fd ffbb 	bl	8001480 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350c:	e00a      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350e:	f7fd ffb7 	bl	8001480 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d901      	bls.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e036      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003524:	4b1d      	ldr	r3, [pc, #116]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0ee      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003530:	4b1a      	ldr	r3, [pc, #104]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4917      	ldr	r1, [pc, #92]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353e:	4313      	orrs	r3, r2
 8003540:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003548:	4b14      	ldr	r3, [pc, #80]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	4a13      	ldr	r2, [pc, #76]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003552:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003560:	4b0e      	ldr	r3, [pc, #56]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	490b      	ldr	r1, [pc, #44]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800357e:	4b07      	ldr	r3, [pc, #28]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	4904      	ldr	r1, [pc, #16]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	40007000 	.word	0x40007000
 80035a4:	42420440 	.word	0x42420440

080035a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b10      	cmp	r3, #16
 80035ce:	f200 808a 	bhi.w	80036e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d045      	beq.n	8003664 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d075      	beq.n	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80035de:	e082      	b.n	80036e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80035e0:	4b46      	ldr	r3, [pc, #280]	@ (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80035e6:	4b45      	ldr	r3, [pc, #276]	@ (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d07b      	beq.n	80036ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	0c9b      	lsrs	r3, r3, #18
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	4a41      	ldr	r2, [pc, #260]	@ (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80035fc:	5cd3      	ldrb	r3, [r2, r3]
 80035fe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d015      	beq.n	8003636 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800360a:	4b3c      	ldr	r3, [pc, #240]	@ (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	0c5b      	lsrs	r3, r3, #17
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	4a3b      	ldr	r2, [pc, #236]	@ (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003616:	5cd3      	ldrb	r3, [r2, r3]
 8003618:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003624:	4a38      	ldr	r2, [pc, #224]	@ (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	fbb2 f2f3 	udiv	r2, r2, r3
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	e004      	b.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4a34      	ldr	r2, [pc, #208]	@ (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003640:	4b2e      	ldr	r3, [pc, #184]	@ (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003648:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800364c:	d102      	bne.n	8003654 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	61bb      	str	r3, [r7, #24]
      break;
 8003652:	e04a      	b.n	80036ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4a2d      	ldr	r2, [pc, #180]	@ (8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	085b      	lsrs	r3, r3, #1
 8003660:	61bb      	str	r3, [r7, #24]
      break;
 8003662:	e042      	b.n	80036ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003664:	4b25      	ldr	r3, [pc, #148]	@ (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003670:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003674:	d108      	bne.n	8003688 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003680:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	e01f      	b.n	80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800368e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003692:	d109      	bne.n	80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003694:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80036a0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	e00f      	b.n	80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036b2:	d11c      	bne.n	80036ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80036b4:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d016      	beq.n	80036ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80036c0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80036c4:	61bb      	str	r3, [r7, #24]
      break;
 80036c6:	e012      	b.n	80036ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80036c8:	e011      	b.n	80036ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80036ca:	f7ff fe55 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 80036ce:	4602      	mov	r2, r0
 80036d0:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	0b9b      	lsrs	r3, r3, #14
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	3301      	adds	r3, #1
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e2:	61bb      	str	r3, [r7, #24]
      break;
 80036e4:	e004      	b.n	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036e6:	bf00      	nop
 80036e8:	e002      	b.n	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036ee:	bf00      	nop
    }
  }
  return (frequency);
 80036f0:	69bb      	ldr	r3, [r7, #24]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	080084a8 	.word	0x080084a8
 8003704:	080084b8 	.word	0x080084b8
 8003708:	007a1200 	.word	0x007a1200
 800370c:	003d0900 	.word	0x003d0900
 8003710:	aaaaaaab 	.word	0xaaaaaaab

08003714 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e07a      	b.n	8003820 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7c5b      	ldrb	r3, [r3, #17]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d105      	bne.n	8003740 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd f8f0 	bl	8000920 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 faea 	bl	8003d20 <HAL_RTC_WaitForSynchro>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d004      	beq.n	800375c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2204      	movs	r2, #4
 8003756:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e061      	b.n	8003820 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fba3 	bl	8003ea8 <RTC_EnterInitMode>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d004      	beq.n	8003772 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2204      	movs	r2, #4
 800376c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e056      	b.n	8003820 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0207 	bic.w	r2, r2, #7
 8003780:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800378a:	4b27      	ldr	r3, [pc, #156]	@ (8003828 <HAL_RTC_Init+0x114>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	4a26      	ldr	r2, [pc, #152]	@ (8003828 <HAL_RTC_Init+0x114>)
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003796:	4b24      	ldr	r3, [pc, #144]	@ (8003828 <HAL_RTC_Init+0x114>)
 8003798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	4921      	ldr	r1, [pc, #132]	@ (8003828 <HAL_RTC_Init+0x114>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d003      	beq.n	80037ba <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e00e      	b.n	80037d8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80037ba:	2001      	movs	r0, #1
 80037bc:	f7ff fef4 	bl	80035a8 <HAL_RCCEx_GetPeriphCLKFreq>
 80037c0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2204      	movs	r2, #4
 80037cc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e026      	b.n	8003820 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	0c1a      	lsrs	r2, r3, #16
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f002 020f 	and.w	r2, r2, #15
 80037e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	b292      	uxth	r2, r2
 80037ee:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fb81 	bl	8003ef8 <RTC_ExitInitMode>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2204      	movs	r2, #4
 8003800:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e00c      	b.n	8003820 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800381e:	2300      	movs	r3, #0
  }
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40006c00 	.word	0x40006c00

0800382c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	2300      	movs	r3, #0
 800383e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_RTC_SetTime+0x20>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e080      	b.n	8003952 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	7c1b      	ldrb	r3, [r3, #16]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_RTC_SetTime+0x30>
 8003858:	2302      	movs	r3, #2
 800385a:	e07a      	b.n	8003952 <HAL_RTC_SetTime+0x126>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2202      	movs	r2, #2
 8003866:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d113      	bne.n	8003896 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003878:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	785b      	ldrb	r3, [r3, #1]
 8003880:	4619      	mov	r1, r3
 8003882:	460b      	mov	r3, r1
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	1a5b      	subs	r3, r3, r1
 8003888:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800388a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003890:	4413      	add	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	e01e      	b.n	80038d4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fb71 	bl	8003f82 <RTC_Bcd2ToByte>
 80038a0:	4603      	mov	r3, r0
 80038a2:	461a      	mov	r2, r3
 80038a4:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80038a8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	785b      	ldrb	r3, [r3, #1]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fb66 	bl	8003f82 <RTC_Bcd2ToByte>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	4613      	mov	r3, r2
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80038c2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	789b      	ldrb	r3, [r3, #2]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fb5a 	bl	8003f82 <RTC_Bcd2ToByte>
 80038ce:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80038d0:	4423      	add	r3, r4
 80038d2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80038d4:	6979      	ldr	r1, [r7, #20]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fa7f 	bl	8003dda <RTC_WriteTimeCounter>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2204      	movs	r2, #4
 80038e6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e02f      	b.n	8003952 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0205 	bic.w	r2, r2, #5
 8003900:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fa90 	bl	8003e28 <RTC_ReadAlarmCounter>
 8003908:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d018      	beq.n	8003944 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	429a      	cmp	r2, r3
 8003918:	d214      	bcs.n	8003944 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003920:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003924:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003926:	6939      	ldr	r1, [r7, #16]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fa96 	bl	8003e5a <RTC_WriteAlarmCounter>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2204      	movs	r2, #4
 8003938:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e006      	b.n	8003952 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003950:	2300      	movs	r3, #0
  }
}
 8003952:	4618      	mov	r0, r3
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	bd90      	pop	{r4, r7, pc}
	...

0800395c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	2300      	movs	r3, #0
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	2300      	movs	r3, #0
 8003976:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_RTC_GetTime+0x28>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0b5      	b.n	8003af4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0ac      	b.n	8003af4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f9ed 	bl	8003d7a <RTC_ReadTimeCounter>
 80039a0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	4a55      	ldr	r2, [pc, #340]	@ (8003afc <HAL_RTC_GetTime+0x1a0>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	0adb      	lsrs	r3, r3, #11
 80039ac:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4b52      	ldr	r3, [pc, #328]	@ (8003afc <HAL_RTC_GetTime+0x1a0>)
 80039b2:	fba3 1302 	umull	r1, r3, r3, r2
 80039b6:	0adb      	lsrs	r3, r3, #11
 80039b8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	4a4f      	ldr	r2, [pc, #316]	@ (8003b00 <HAL_RTC_GetTime+0x1a4>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	4a4a      	ldr	r2, [pc, #296]	@ (8003afc <HAL_RTC_GetTime+0x1a0>)
 80039d4:	fba2 1203 	umull	r1, r2, r2, r3
 80039d8:	0ad2      	lsrs	r2, r2, #11
 80039da:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80039de:	fb01 f202 	mul.w	r2, r1, r2
 80039e2:	1a9a      	subs	r2, r3, r2
 80039e4:	4b46      	ldr	r3, [pc, #280]	@ (8003b00 <HAL_RTC_GetTime+0x1a4>)
 80039e6:	fba3 1302 	umull	r1, r3, r3, r2
 80039ea:	0959      	lsrs	r1, r3, #5
 80039ec:	460b      	mov	r3, r1
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	1a5b      	subs	r3, r3, r1
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	1ad1      	subs	r1, r2, r3
 80039f6:	b2ca      	uxtb	r2, r1
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	2b17      	cmp	r3, #23
 8003a00:	d955      	bls.n	8003aae <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4a3f      	ldr	r2, [pc, #252]	@ (8003b04 <HAL_RTC_GetTime+0x1a8>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003a0e:	6939      	ldr	r1, [r7, #16]
 8003a10:	4b3c      	ldr	r3, [pc, #240]	@ (8003b04 <HAL_RTC_GetTime+0x1a8>)
 8003a12:	fba3 2301 	umull	r2, r3, r3, r1
 8003a16:	091a      	lsrs	r2, r3, #4
 8003a18:	4613      	mov	r3, r2
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	4413      	add	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	1aca      	subs	r2, r1, r3
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f9fd 	bl	8003e28 <RTC_ReadAlarmCounter>
 8003a2e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a36:	d008      	beq.n	8003a4a <HAL_RTC_GetTime+0xee>
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d904      	bls.n	8003a4a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	e002      	b.n	8003a50 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	4a2d      	ldr	r2, [pc, #180]	@ (8003b08 <HAL_RTC_GetTime+0x1ac>)
 8003a54:	fb02 f303 	mul.w	r3, r2, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003a5e:	69b9      	ldr	r1, [r7, #24]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f9ba 	bl	8003dda <RTC_WriteTimeCounter>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e041      	b.n	8003af4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a76:	d00c      	beq.n	8003a92 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003a80:	69f9      	ldr	r1, [r7, #28]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f9e9 	bl	8003e5a <RTC_WriteAlarmCounter>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e030      	b.n	8003af4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003a92:	69f9      	ldr	r1, [r7, #28]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f9e0 	bl	8003e5a <RTC_WriteAlarmCounter>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e027      	b.n	8003af4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003aa4:	6979      	ldr	r1, [r7, #20]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fa88 	bl	8003fbc <RTC_DateUpdate>
 8003aac:	e003      	b.n	8003ab6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01a      	beq.n	8003af2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fa41 	bl	8003f48 <RTC_ByteToBcd2>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	785b      	ldrb	r3, [r3, #1]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fa38 	bl	8003f48 <RTC_ByteToBcd2>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	461a      	mov	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	789b      	ldrb	r3, [r3, #2]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fa2f 	bl	8003f48 <RTC_ByteToBcd2>
 8003aea:	4603      	mov	r3, r0
 8003aec:	461a      	mov	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	91a2b3c5 	.word	0x91a2b3c5
 8003b00:	88888889 	.word	0x88888889
 8003b04:	aaaaaaab 	.word	0xaaaaaaab
 8003b08:	00015180 	.word	0x00015180

08003b0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_RTC_SetDate+0x24>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e097      	b.n	8003c64 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	7c1b      	ldrb	r3, [r3, #16]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_RTC_SetDate+0x34>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e091      	b.n	8003c64 <HAL_RTC_SetDate+0x158>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10c      	bne.n	8003b6c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	78da      	ldrb	r2, [r3, #3]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	785a      	ldrb	r2, [r3, #1]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	789a      	ldrb	r2, [r3, #2]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	739a      	strb	r2, [r3, #14]
 8003b6a:	e01a      	b.n	8003ba2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	78db      	ldrb	r3, [r3, #3]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fa06 	bl	8003f82 <RTC_Bcd2ToByte>
 8003b76:	4603      	mov	r3, r0
 8003b78:	461a      	mov	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	785b      	ldrb	r3, [r3, #1]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f9fd 	bl	8003f82 <RTC_Bcd2ToByte>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	789b      	ldrb	r3, [r3, #2]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 f9f4 	bl	8003f82 <RTC_Bcd2ToByte>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	7bdb      	ldrb	r3, [r3, #15]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	7b59      	ldrb	r1, [r3, #13]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	7b9b      	ldrb	r3, [r3, #14]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f000 fadf 	bl	8004174 <RTC_WeekDayNum>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	7b1a      	ldrb	r2, [r3, #12]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f8d7 	bl	8003d7a <RTC_ReadTimeCounter>
 8003bcc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4a26      	ldr	r2, [pc, #152]	@ (8003c6c <HAL_RTC_SetDate+0x160>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	0adb      	lsrs	r3, r3, #11
 8003bd8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b18      	cmp	r3, #24
 8003bde:	d93a      	bls.n	8003c56 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	4a23      	ldr	r2, [pc, #140]	@ (8003c70 <HAL_RTC_SetDate+0x164>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	4a22      	ldr	r2, [pc, #136]	@ (8003c74 <HAL_RTC_SetDate+0x168>)
 8003bec:	fb02 f303 	mul.w	r3, r2, r3
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003bf6:	69f9      	ldr	r1, [r7, #28]
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f8ee 	bl	8003dda <RTC_WriteTimeCounter>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2204      	movs	r2, #4
 8003c08:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e027      	b.n	8003c64 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f907 	bl	8003e28 <RTC_ReadAlarmCounter>
 8003c1a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c22:	d018      	beq.n	8003c56 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d214      	bcs.n	8003c56 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003c32:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003c36:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003c38:	69b9      	ldr	r1, [r7, #24]
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f90d 	bl	8003e5a <RTC_WriteAlarmCounter>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2204      	movs	r2, #4
 8003c4a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e006      	b.n	8003c64 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3720      	adds	r7, #32
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	91a2b3c5 	.word	0x91a2b3c5
 8003c70:	aaaaaaab 	.word	0xaaaaaaab
 8003c74:	00015180 	.word	0x00015180

08003c78 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	2100      	movs	r1, #0
 8003c8a:	460a      	mov	r2, r1
 8003c8c:	801a      	strh	r2, [r3, #0]
 8003c8e:	460a      	mov	r2, r1
 8003c90:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_RTC_GetDate+0x26>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e03a      	b.n	8003d18 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003ca2:	f107 0314 	add.w	r3, r7, #20
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	4619      	mov	r1, r3
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff fe56 	bl	800395c <HAL_RTC_GetTime>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e02e      	b.n	8003d18 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	7b1a      	ldrb	r2, [r3, #12]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	7bda      	ldrb	r2, [r3, #15]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	7b5a      	ldrb	r2, [r3, #13]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	7b9a      	ldrb	r2, [r3, #14]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01a      	beq.n	8003d16 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	78db      	ldrb	r3, [r3, #3]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 f92f 	bl	8003f48 <RTC_ByteToBcd2>
 8003cea:	4603      	mov	r3, r0
 8003cec:	461a      	mov	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	785b      	ldrb	r3, [r3, #1]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f926 	bl	8003f48 <RTC_ByteToBcd2>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	789b      	ldrb	r3, [r3, #2]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 f91d 	bl	8003f48 <RTC_ByteToBcd2>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	461a      	mov	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e01d      	b.n	8003d72 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0208 	bic.w	r2, r2, #8
 8003d44:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003d46:	f7fd fb9b 	bl	8001480 <HAL_GetTick>
 8003d4a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003d4c:	e009      	b.n	8003d62 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d4e:	f7fd fb97 	bl	8001480 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d5c:	d901      	bls.n	8003d62 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e007      	b.n	8003d72 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0ee      	beq.n	8003d4e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b087      	sub	sp, #28
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	827b      	strh	r3, [r7, #18]
 8003d86:	2300      	movs	r3, #0
 8003d88:	823b      	strh	r3, [r7, #16]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003daa:	8a7a      	ldrh	r2, [r7, #18]
 8003dac:	8a3b      	ldrh	r3, [r7, #16]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d008      	beq.n	8003dc4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003db2:	8a3b      	ldrh	r3, [r7, #16]
 8003db4:	041a      	lsls	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e004      	b.n	8003dce <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003dc4:	8a7b      	ldrh	r3, [r7, #18]
 8003dc6:	041a      	lsls	r2, r3, #16
 8003dc8:	89fb      	ldrh	r3, [r7, #14]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003dce:	697b      	ldr	r3, [r7, #20]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f85d 	bl	8003ea8 <RTC_EnterInitMode>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
 8003df8:	e011      	b.n	8003e1e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	0c12      	lsrs	r2, r2, #16
 8003e02:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	b292      	uxth	r2, r2
 8003e0c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f872 	bl	8003ef8 <RTC_ExitInitMode>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	81fb      	strh	r3, [r7, #14]
 8003e34:	2300      	movs	r3, #0
 8003e36:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003e48:	89fb      	ldrh	r3, [r7, #14]
 8003e4a:	041a      	lsls	r2, r3, #16
 8003e4c:	89bb      	ldrh	r3, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f81d 	bl	8003ea8 <RTC_EnterInitMode>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	e011      	b.n	8003e9e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	0c12      	lsrs	r2, r2, #16
 8003e82:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	b292      	uxth	r2, r2
 8003e8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f832 	bl	8003ef8 <RTC_ExitInitMode>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003eb4:	f7fd fae4 	bl	8001480 <HAL_GetTick>
 8003eb8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003eba:	e009      	b.n	8003ed0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ebc:	f7fd fae0 	bl	8001480 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003eca:	d901      	bls.n	8003ed0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e00f      	b.n	8003ef0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0ee      	beq.n	8003ebc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0210 	orr.w	r2, r2, #16
 8003eec:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0210 	bic.w	r2, r2, #16
 8003f12:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003f14:	f7fd fab4 	bl	8001480 <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003f1a:	e009      	b.n	8003f30 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003f1c:	f7fd fab0 	bl	8001480 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f2a:	d901      	bls.n	8003f30 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e007      	b.n	8003f40 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0ee      	beq.n	8003f1c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003f56:	e005      	b.n	8003f64 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	3b0a      	subs	r3, #10
 8003f62:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	2b09      	cmp	r3, #9
 8003f68:	d8f6      	bhi.n	8003f58 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	b2db      	uxtb	r3, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	4603      	mov	r3, r0
 8003f8a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003f90:	79fb      	ldrb	r3, [r7, #7]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	b2db      	uxtb	r3, r3
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	7bdb      	ldrb	r3, [r3, #15]
 8003fda:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	7b5b      	ldrb	r3, [r3, #13]
 8003fe0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	7b9b      	ldrb	r3, [r3, #14]
 8003fe6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	e06f      	b.n	80040ce <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d011      	beq.n	8004018 <RTC_DateUpdate+0x5c>
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d00e      	beq.n	8004018 <RTC_DateUpdate+0x5c>
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b05      	cmp	r3, #5
 8003ffe:	d00b      	beq.n	8004018 <RTC_DateUpdate+0x5c>
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b07      	cmp	r3, #7
 8004004:	d008      	beq.n	8004018 <RTC_DateUpdate+0x5c>
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d005      	beq.n	8004018 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b0a      	cmp	r3, #10
 8004010:	d002      	beq.n	8004018 <RTC_DateUpdate+0x5c>
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b0c      	cmp	r3, #12
 8004016:	d117      	bne.n	8004048 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b1e      	cmp	r3, #30
 800401c:	d803      	bhi.n	8004026 <RTC_DateUpdate+0x6a>
      {
        day++;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3301      	adds	r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004024:	e050      	b.n	80040c8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b0c      	cmp	r3, #12
 800402a:	d005      	beq.n	8004038 <RTC_DateUpdate+0x7c>
        {
          month++;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	3301      	adds	r3, #1
 8004030:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004032:	2301      	movs	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004036:	e047      	b.n	80040c8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004038:	2301      	movs	r3, #1
 800403a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800403c:	2301      	movs	r3, #1
 800403e:	60fb      	str	r3, [r7, #12]
          year++;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	3301      	adds	r3, #1
 8004044:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004046:	e03f      	b.n	80040c8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b04      	cmp	r3, #4
 800404c:	d008      	beq.n	8004060 <RTC_DateUpdate+0xa4>
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b06      	cmp	r3, #6
 8004052:	d005      	beq.n	8004060 <RTC_DateUpdate+0xa4>
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	2b09      	cmp	r3, #9
 8004058:	d002      	beq.n	8004060 <RTC_DateUpdate+0xa4>
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b0b      	cmp	r3, #11
 800405e:	d10c      	bne.n	800407a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b1d      	cmp	r3, #29
 8004064:	d803      	bhi.n	800406e <RTC_DateUpdate+0xb2>
      {
        day++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3301      	adds	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800406c:	e02c      	b.n	80040c8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	3301      	adds	r3, #1
 8004072:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004074:	2301      	movs	r3, #1
 8004076:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004078:	e026      	b.n	80040c8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d123      	bne.n	80040c8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b1b      	cmp	r3, #27
 8004084:	d803      	bhi.n	800408e <RTC_DateUpdate+0xd2>
      {
        day++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3301      	adds	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e01c      	b.n	80040c8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b1c      	cmp	r3, #28
 8004092:	d111      	bne.n	80040b8 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	b29b      	uxth	r3, r3
 8004098:	4618      	mov	r0, r3
 800409a:	f000 f839 	bl	8004110 <RTC_IsLeapYear>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <RTC_DateUpdate+0xf0>
        {
          day++;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3301      	adds	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	e00d      	b.n	80040c8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	3301      	adds	r3, #1
 80040b0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80040b2:	2301      	movs	r3, #1
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	e007      	b.n	80040c8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b1d      	cmp	r3, #29
 80040bc:	d104      	bne.n	80040c8 <RTC_DateUpdate+0x10c>
      {
        month++;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	3301      	adds	r3, #1
 80040c2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80040c4:	2301      	movs	r3, #1
 80040c6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	3301      	adds	r3, #1
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d38b      	bcc.n	8003fee <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	4619      	mov	r1, r3
 80040f8:	6978      	ldr	r0, [r7, #20]
 80040fa:	f000 f83b 	bl	8004174 <RTC_WeekDayNum>
 80040fe:	4603      	mov	r3, r0
 8004100:	461a      	mov	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	731a      	strb	r2, [r3, #12]
}
 8004106:	bf00      	nop
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	e01d      	b.n	8004166 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	4a10      	ldr	r2, [pc, #64]	@ (8004170 <RTC_IsLeapYear+0x60>)
 800412e:	fba2 1203 	umull	r1, r2, r2, r3
 8004132:	0952      	lsrs	r2, r2, #5
 8004134:	2164      	movs	r1, #100	@ 0x64
 8004136:	fb01 f202 	mul.w	r2, r1, r2
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004142:	2301      	movs	r3, #1
 8004144:	e00f      	b.n	8004166 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	4a09      	ldr	r2, [pc, #36]	@ (8004170 <RTC_IsLeapYear+0x60>)
 800414a:	fba2 1203 	umull	r1, r2, r2, r3
 800414e:	09d2      	lsrs	r2, r2, #7
 8004150:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004154:	fb01 f202 	mul.w	r2, r1, r2
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004164:	2300      	movs	r3, #0
  }
}
 8004166:	4618      	mov	r0, r3
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	51eb851f 	.word	0x51eb851f

08004174 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	70fb      	strb	r3, [r7, #3]
 8004180:	4613      	mov	r3, r2
 8004182:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8004192:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d82d      	bhi.n	80041f6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800419a:	78fa      	ldrb	r2, [r7, #3]
 800419c:	4613      	mov	r3, r2
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4413      	add	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004258 <RTC_WeekDayNum+0xe4>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	085a      	lsrs	r2, r3, #1
 80041ae:	78bb      	ldrb	r3, [r7, #2]
 80041b0:	441a      	add	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	441a      	add	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	089b      	lsrs	r3, r3, #2
 80041bc:	441a      	add	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	4926      	ldr	r1, [pc, #152]	@ (800425c <RTC_WeekDayNum+0xe8>)
 80041c4:	fba1 1303 	umull	r1, r3, r1, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	1ad2      	subs	r2, r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	4922      	ldr	r1, [pc, #136]	@ (800425c <RTC_WeekDayNum+0xe8>)
 80041d2:	fba1 1303 	umull	r1, r3, r1, r3
 80041d6:	09db      	lsrs	r3, r3, #7
 80041d8:	4413      	add	r3, r2
 80041da:	1d1a      	adds	r2, r3, #4
 80041dc:	4b20      	ldr	r3, [pc, #128]	@ (8004260 <RTC_WeekDayNum+0xec>)
 80041de:	fba3 1302 	umull	r1, r3, r3, r2
 80041e2:	1ad1      	subs	r1, r2, r3
 80041e4:	0849      	lsrs	r1, r1, #1
 80041e6:	440b      	add	r3, r1
 80041e8:	0899      	lsrs	r1, r3, #2
 80041ea:	460b      	mov	r3, r1
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	1a5b      	subs	r3, r3, r1
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e029      	b.n	800424a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	4613      	mov	r3, r2
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	4413      	add	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	4a15      	ldr	r2, [pc, #84]	@ (8004258 <RTC_WeekDayNum+0xe4>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	085a      	lsrs	r2, r3, #1
 800420a:	78bb      	ldrb	r3, [r7, #2]
 800420c:	441a      	add	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	441a      	add	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	441a      	add	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4910      	ldr	r1, [pc, #64]	@ (800425c <RTC_WeekDayNum+0xe8>)
 800421c:	fba1 1303 	umull	r1, r3, r1, r3
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	1ad2      	subs	r2, r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	490d      	ldr	r1, [pc, #52]	@ (800425c <RTC_WeekDayNum+0xe8>)
 8004228:	fba1 1303 	umull	r1, r3, r1, r3
 800422c:	09db      	lsrs	r3, r3, #7
 800422e:	4413      	add	r3, r2
 8004230:	1c9a      	adds	r2, r3, #2
 8004232:	4b0b      	ldr	r3, [pc, #44]	@ (8004260 <RTC_WeekDayNum+0xec>)
 8004234:	fba3 1302 	umull	r1, r3, r3, r2
 8004238:	1ad1      	subs	r1, r2, r3
 800423a:	0849      	lsrs	r1, r1, #1
 800423c:	440b      	add	r3, r1
 800423e:	0899      	lsrs	r1, r3, #2
 8004240:	460b      	mov	r3, r1
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	1a5b      	subs	r3, r3, r1
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	b2db      	uxtb	r3, r3
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr
 8004258:	38e38e39 	.word	0x38e38e39
 800425c:	51eb851f 	.word	0x51eb851f
 8004260:	24924925 	.word	0x24924925

08004264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e041      	b.n	80042fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f839 	bl	8004302 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3304      	adds	r3, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f000 f99c 	bl	80045e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	d001      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e03a      	b.n	80043a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a18      	ldr	r2, [pc, #96]	@ (80043ac <HAL_TIM_Base_Start_IT+0x98>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00e      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x58>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004356:	d009      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x58>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a14      	ldr	r2, [pc, #80]	@ (80043b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d004      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x58>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a13      	ldr	r2, [pc, #76]	@ (80043b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d111      	bne.n	8004390 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b06      	cmp	r3, #6
 800437c:	d010      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0201 	orr.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438e:	e007      	b.n	80043a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800

080043b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d020      	beq.n	800441c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01b      	beq.n	800441c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0202 	mvn.w	r2, #2
 80043ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f8d1 	bl	80045aa <HAL_TIM_IC_CaptureCallback>
 8004408:	e005      	b.n	8004416 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f8c4 	bl	8004598 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f8d3 	bl	80045bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d020      	beq.n	8004468 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01b      	beq.n	8004468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0204 	mvn.w	r2, #4
 8004438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f8ab 	bl	80045aa <HAL_TIM_IC_CaptureCallback>
 8004454:	e005      	b.n	8004462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f89e 	bl	8004598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f8ad 	bl	80045bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d020      	beq.n	80044b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01b      	beq.n	80044b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0208 	mvn.w	r2, #8
 8004484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2204      	movs	r2, #4
 800448a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f885 	bl	80045aa <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f878 	bl	8004598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f887 	bl	80045bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d020      	beq.n	8004500 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01b      	beq.n	8004500 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0210 	mvn.w	r2, #16
 80044d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2208      	movs	r2, #8
 80044d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f85f 	bl	80045aa <HAL_TIM_IC_CaptureCallback>
 80044ec:	e005      	b.n	80044fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f852 	bl	8004598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f861 	bl	80045bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00c      	beq.n	8004524 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0201 	mvn.w	r2, #1
 800451c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fc f958 	bl	80007d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00c      	beq.n	8004548 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f8c3 	bl	80046ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00c      	beq.n	800456c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f831 	bl	80045ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00c      	beq.n	8004590 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0220 	mvn.w	r2, #32
 8004588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f896 	bl	80046bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr

080045aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr

080045bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr

080045ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr

080045e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a2f      	ldr	r2, [pc, #188]	@ (80046b0 <TIM_Base_SetConfig+0xd0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00b      	beq.n	8004610 <TIM_Base_SetConfig+0x30>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045fe:	d007      	beq.n	8004610 <TIM_Base_SetConfig+0x30>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a2c      	ldr	r2, [pc, #176]	@ (80046b4 <TIM_Base_SetConfig+0xd4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_Base_SetConfig+0x30>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a2b      	ldr	r2, [pc, #172]	@ (80046b8 <TIM_Base_SetConfig+0xd8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d108      	bne.n	8004622 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a22      	ldr	r2, [pc, #136]	@ (80046b0 <TIM_Base_SetConfig+0xd0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00b      	beq.n	8004642 <TIM_Base_SetConfig+0x62>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004630:	d007      	beq.n	8004642 <TIM_Base_SetConfig+0x62>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a1f      	ldr	r2, [pc, #124]	@ (80046b4 <TIM_Base_SetConfig+0xd4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d003      	beq.n	8004642 <TIM_Base_SetConfig+0x62>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a1e      	ldr	r2, [pc, #120]	@ (80046b8 <TIM_Base_SetConfig+0xd8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d108      	bne.n	8004654 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a0d      	ldr	r2, [pc, #52]	@ (80046b0 <TIM_Base_SetConfig+0xd0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d103      	bne.n	8004688 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f023 0201 	bic.w	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	611a      	str	r2, [r3, #16]
  }
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr
 80046b0:	40012c00 	.word	0x40012c00
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800

080046bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e042      	b.n	8004778 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc f92e 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2224      	movs	r2, #36	@ 0x24
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fd09 	bl	800513c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	4613      	mov	r3, r2
 800478c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b20      	cmp	r3, #32
 8004798:	d121      	bne.n	80047de <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_UART_Transmit_IT+0x26>
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e01a      	b.n	80047e0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	88fa      	ldrh	r2, [r7, #6]
 80047b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	88fa      	ldrh	r2, [r7, #6]
 80047ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2221      	movs	r2, #33	@ 0x21
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80047d8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e000      	b.n	80047e0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80047de:	2302      	movs	r3, #2
  }
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr

080047ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	4613      	mov	r3, r2
 80047f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b20      	cmp	r3, #32
 8004802:	d112      	bne.n	800482a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_UART_Receive_IT+0x26>
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e00b      	b.n	800482c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	461a      	mov	r2, r3
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fab6 	bl	8004d92 <UART_Start_Receive_IT>
 8004826:	4603      	mov	r3, r0
 8004828:	e000      	b.n	800482c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800482a:	2302      	movs	r3, #2
  }
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b0ba      	sub	sp, #232	@ 0xe8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800485a:	2300      	movs	r3, #0
 800485c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004860:	2300      	movs	r3, #0
 8004862:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10f      	bne.n	800489a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <HAL_UART_IRQHandler+0x66>
 8004886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fb93 	bl	8004fbe <UART_Receive_IT>
      return;
 8004898:	e25b      	b.n	8004d52 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800489a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80de 	beq.w	8004a60 <HAL_UART_IRQHandler+0x22c>
 80048a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d106      	bne.n	80048be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 80d1 	beq.w	8004a60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <HAL_UART_IRQHandler+0xae>
 80048ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	f043 0201 	orr.w	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00b      	beq.n	8004906 <HAL_UART_IRQHandler+0xd2>
 80048ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fe:	f043 0202 	orr.w	r2, r3, #2
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_UART_IRQHandler+0xf6>
 8004912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d005      	beq.n	800492a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004922:	f043 0204 	orr.w	r2, r3, #4
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800492a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d011      	beq.n	800495a <HAL_UART_IRQHandler+0x126>
 8004936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d105      	bne.n	800494e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004952:	f043 0208 	orr.w	r2, r3, #8
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 81f2 	beq.w	8004d48 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_UART_IRQHandler+0x14e>
 8004970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fb1e 	bl	8004fbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	bf14      	ite	ne
 8004990:	2301      	movne	r3, #1
 8004992:	2300      	moveq	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <HAL_UART_IRQHandler+0x17a>
 80049a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d04f      	beq.n	8004a4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa28 	bl	8004e04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d041      	beq.n	8004a46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3314      	adds	r3, #20
 80049c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3314      	adds	r3, #20
 80049ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1d9      	bne.n	80049c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d013      	beq.n	8004a3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c14 <HAL_UART_IRQHandler+0x3e0>)
 8004a1c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fd fc90 	bl	8002348 <HAL_DMA_Abort_IT>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d016      	beq.n	8004a5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3c:	e00e      	b.n	8004a5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f993 	bl	8004d6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a44:	e00a      	b.n	8004a5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f98f 	bl	8004d6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4c:	e006      	b.n	8004a5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f98b 	bl	8004d6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a5a:	e175      	b.n	8004d48 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	bf00      	nop
    return;
 8004a5e:	e173      	b.n	8004d48 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	f040 814f 	bne.w	8004d08 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a6e:	f003 0310 	and.w	r3, r3, #16
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 8148 	beq.w	8004d08 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 8141 	beq.w	8004d08 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a86:	2300      	movs	r3, #0
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60bb      	str	r3, [r7, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80b6 	beq.w	8004c18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ab8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8145 	beq.w	8004d4c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aca:	429a      	cmp	r2, r3
 8004acc:	f080 813e 	bcs.w	8004d4c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ad6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	2b20      	cmp	r3, #32
 8004ae0:	f000 8088 	beq.w	8004bf4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004afe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004b10:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1d9      	bne.n	8004ae4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3314      	adds	r3, #20
 8004b36:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b42:	f023 0301 	bic.w	r3, r3, #1
 8004b46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3314      	adds	r3, #20
 8004b50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b54:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b58:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e1      	bne.n	8004b30 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3314      	adds	r3, #20
 8004b72:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3314      	adds	r3, #20
 8004b8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b90:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b92:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b96:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e3      	bne.n	8004b6c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	330c      	adds	r3, #12
 8004bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bc4:	f023 0310 	bic.w	r3, r3, #16
 8004bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004bd6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004bd8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e3      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fd fb6f 	bl	80022d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8b6 	bl	8004d7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c10:	e09c      	b.n	8004d4c <HAL_UART_IRQHandler+0x518>
 8004c12:	bf00      	nop
 8004c14:	08004ec9 	.word	0x08004ec9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 808e 	beq.w	8004d50 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 8089 	beq.w	8004d50 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c62:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e3      	bne.n	8004c3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3314      	adds	r3, #20
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	623b      	str	r3, [r7, #32]
   return(result);
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3314      	adds	r3, #20
 8004c96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e3      	bne.n	8004c76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0310 	bic.w	r3, r3, #16
 8004cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	330c      	adds	r3, #12
 8004cdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ce0:	61fa      	str	r2, [r7, #28]
 8004ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	69b9      	ldr	r1, [r7, #24]
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	617b      	str	r3, [r7, #20]
   return(result);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e3      	bne.n	8004cbc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f83b 	bl	8004d7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d06:	e023      	b.n	8004d50 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d009      	beq.n	8004d28 <HAL_UART_IRQHandler+0x4f4>
 8004d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f8e5 	bl	8004ef0 <UART_Transmit_IT>
    return;
 8004d26:	e014      	b.n	8004d52 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <HAL_UART_IRQHandler+0x51e>
 8004d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f924 	bl	8004f8e <UART_EndTransmit_IT>
    return;
 8004d46:	e004      	b.n	8004d52 <HAL_UART_IRQHandler+0x51e>
    return;
 8004d48:	bf00      	nop
 8004d4a:	e002      	b.n	8004d52 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d4c:	bf00      	nop
 8004d4e:	e000      	b.n	8004d52 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d50:	bf00      	nop
  }
}
 8004d52:	37e8      	adds	r7, #232	@ 0xe8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bc80      	pop	{r7}
 8004d68:	4770      	bx	lr

08004d6a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr

08004d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr

08004d92 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b085      	sub	sp, #20
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	88fa      	ldrh	r2, [r7, #6]
 8004daa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	88fa      	ldrh	r2, [r7, #6]
 8004db0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2222      	movs	r2, #34	@ 0x22
 8004dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dd6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0220 	orr.w	r2, r2, #32
 8004df6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr

08004e04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b095      	sub	sp, #84	@ 0x54
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	330c      	adds	r3, #12
 8004e12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e16:	e853 3f00 	ldrex	r3, [r3]
 8004e1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e5      	bne.n	8004e0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3314      	adds	r3, #20
 8004e46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3314      	adds	r3, #20
 8004e5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e5      	bne.n	8004e40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d119      	bne.n	8004eb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	330c      	adds	r3, #12
 8004e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	e853 3f00 	ldrex	r3, [r3]
 8004e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f023 0310 	bic.w	r3, r3, #16
 8004e92:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e9c:	61ba      	str	r2, [r7, #24]
 8004e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	6979      	ldr	r1, [r7, #20]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	e841 2300 	strex	r3, r2, [r1]
 8004ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e5      	bne.n	8004e7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ebe:	bf00      	nop
 8004ec0:	3754      	adds	r7, #84	@ 0x54
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr

08004ec8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7ff ff41 	bl	8004d6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b21      	cmp	r3, #33	@ 0x21
 8004f02:	d13e      	bne.n	8004f82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f0c:	d114      	bne.n	8004f38 <UART_Transmit_IT+0x48>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d110      	bne.n	8004f38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	1c9a      	adds	r2, r3, #2
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	621a      	str	r2, [r3, #32]
 8004f36:	e008      	b.n	8004f4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	1c59      	adds	r1, r3, #1
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6211      	str	r1, [r2, #32]
 8004f42:	781a      	ldrb	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	4619      	mov	r1, r3
 8004f58:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10f      	bne.n	8004f7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e000      	b.n	8004f84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f82:	2302      	movs	r3, #2
  }
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	4770      	bx	lr

08004f8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff fed2 	bl	8004d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b08c      	sub	sp, #48	@ 0x30
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b22      	cmp	r3, #34	@ 0x22
 8004fd0:	f040 80ae 	bne.w	8005130 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fdc:	d117      	bne.n	800500e <UART_Receive_IT+0x50>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d113      	bne.n	800500e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005000:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005006:	1c9a      	adds	r2, r3, #2
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	629a      	str	r2, [r3, #40]	@ 0x28
 800500c:	e026      	b.n	800505c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005012:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005014:	2300      	movs	r3, #0
 8005016:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005020:	d007      	beq.n	8005032 <UART_Receive_IT+0x74>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10a      	bne.n	8005040 <UART_Receive_IT+0x82>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	b2da      	uxtb	r2, r3
 800503a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	e008      	b.n	8005052 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800504c:	b2da      	uxtb	r2, r3
 800504e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005050:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29b      	uxth	r3, r3
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	4619      	mov	r1, r3
 800506a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800506c:	2b00      	cmp	r3, #0
 800506e:	d15d      	bne.n	800512c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0220 	bic.w	r2, r2, #32
 800507e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800508e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0201 	bic.w	r2, r2, #1
 800509e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d135      	bne.n	8005122 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	330c      	adds	r3, #12
 80050c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	613b      	str	r3, [r7, #16]
   return(result);
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f023 0310 	bic.w	r3, r3, #16
 80050d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	330c      	adds	r3, #12
 80050da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050dc:	623a      	str	r2, [r7, #32]
 80050de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	69f9      	ldr	r1, [r7, #28]
 80050e2:	6a3a      	ldr	r2, [r7, #32]
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e5      	bne.n	80050bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b10      	cmp	r3, #16
 80050fc:	d10a      	bne.n	8005114 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005118:	4619      	mov	r1, r3
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff fe2e 	bl	8004d7c <HAL_UARTEx_RxEventCallback>
 8005120:	e002      	b.n	8005128 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fcac 	bl	8005a80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	e002      	b.n	8005132 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	e000      	b.n	8005132 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005130:	2302      	movs	r3, #2
  }
}
 8005132:	4618      	mov	r0, r3
 8005134:	3730      	adds	r7, #48	@ 0x30
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005176:	f023 030c 	bic.w	r3, r3, #12
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	68b9      	ldr	r1, [r7, #8]
 8005180:	430b      	orrs	r3, r1
 8005182:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a2c      	ldr	r2, [pc, #176]	@ (8005250 <UART_SetConfig+0x114>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d103      	bne.n	80051ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051a4:	f7fe f8e8 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	e002      	b.n	80051b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051ac:	f7fe f8d0 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 80051b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	009a      	lsls	r2, r3, #2
 80051bc:	441a      	add	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c8:	4a22      	ldr	r2, [pc, #136]	@ (8005254 <UART_SetConfig+0x118>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	0119      	lsls	r1, r3, #4
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	009a      	lsls	r2, r3, #2
 80051dc:	441a      	add	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80051e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005254 <UART_SetConfig+0x118>)
 80051ea:	fba3 0302 	umull	r0, r3, r3, r2
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	2064      	movs	r0, #100	@ 0x64
 80051f2:	fb00 f303 	mul.w	r3, r0, r3
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	3332      	adds	r3, #50	@ 0x32
 80051fc:	4a15      	ldr	r2, [pc, #84]	@ (8005254 <UART_SetConfig+0x118>)
 80051fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005208:	4419      	add	r1, r3
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	009a      	lsls	r2, r3, #2
 8005214:	441a      	add	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005220:	4b0c      	ldr	r3, [pc, #48]	@ (8005254 <UART_SetConfig+0x118>)
 8005222:	fba3 0302 	umull	r0, r3, r3, r2
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	2064      	movs	r0, #100	@ 0x64
 800522a:	fb00 f303 	mul.w	r3, r0, r3
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	3332      	adds	r3, #50	@ 0x32
 8005234:	4a07      	ldr	r2, [pc, #28]	@ (8005254 <UART_SetConfig+0x118>)
 8005236:	fba2 2303 	umull	r2, r3, r2, r3
 800523a:	095b      	lsrs	r3, r3, #5
 800523c:	f003 020f 	and.w	r2, r3, #15
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	440a      	add	r2, r1
 8005246:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005248:	bf00      	nop
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40013800 	.word	0x40013800
 8005254:	51eb851f 	.word	0x51eb851f

08005258 <StartCANReceiveTask>:
/**
 * @brief  Task to process received CAN messages.
 *         Dispatches frames to the appropriate subsystem queues.
 */
static void StartCANReceiveTask(void *pvParameters)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08c      	sub	sp, #48	@ 0x30
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
    CanRxMessage_t Msg;

    for (;;)
    {
        /** Wait indefinitely for next CAN Rx message **/
        if (xQueueReceive(xCanRxQueue, &Msg, portMAX_DELAY) == pdTRUE)
 8005260:	4b16      	ldr	r3, [pc, #88]	@ (80052bc <StartCANReceiveTask+0x64>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f107 010c 	add.w	r1, r7, #12
 8005268:	f04f 32ff 	mov.w	r2, #4294967295
 800526c:	4618      	mov	r0, r3
 800526e:	f000 ff87 	bl	8006180 <xQueueReceive>
 8005272:	4603      	mov	r3, r0
 8005274:	2b01      	cmp	r3, #1
 8005276:	d1f3      	bne.n	8005260 <StartCANReceiveTask+0x8>
        {
            switch (Msg.header.StdId)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f240 3201 	movw	r2, #769	@ 0x301
 800527e:	4293      	cmp	r3, r2
 8005280:	d803      	bhi.n	800528a <StartCANReceiveTask+0x32>
 8005282:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005286:	d20e      	bcs.n	80052a6 <StartCANReceiveTask+0x4e>
                    xQueueSend(xSensorQueue, &Msg, 0);
                    break;

                default:
                    /** Unknown CAN ID: ignore **/
                    break;
 8005288:	e016      	b.n	80052b8 <StartCANReceiveTask+0x60>
            switch (Msg.header.StdId)
 800528a:	f5b3 6ffc 	cmp.w	r3, #2016	@ 0x7e0
 800528e:	d113      	bne.n	80052b8 <StartCANReceiveTask+0x60>
                    xQueueSend(xDiagQueue, &Msg.data, 0);
 8005290:	4b0b      	ldr	r3, [pc, #44]	@ (80052c0 <StartCANReceiveTask+0x68>)
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	f107 030c 	add.w	r3, r7, #12
 8005298:	f103 011c 	add.w	r1, r3, #28
 800529c:	2300      	movs	r3, #0
 800529e:	2200      	movs	r2, #0
 80052a0:	f000 fdb6 	bl	8005e10 <xQueueGenericSend>
                    break;
 80052a4:	e009      	b.n	80052ba <StartCANReceiveTask+0x62>
                    xQueueSend(xSensorQueue, &Msg, 0);
 80052a6:	4b07      	ldr	r3, [pc, #28]	@ (80052c4 <StartCANReceiveTask+0x6c>)
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	f107 010c 	add.w	r1, r7, #12
 80052ae:	2300      	movs	r3, #0
 80052b0:	2200      	movs	r2, #0
 80052b2:	f000 fdad 	bl	8005e10 <xQueueGenericSend>
                    break;
 80052b6:	e000      	b.n	80052ba <StartCANReceiveTask+0x62>
                    break;
 80052b8:	bf00      	nop
        if (xQueueReceive(xCanRxQueue, &Msg, portMAX_DELAY) == pdTRUE)
 80052ba:	e7d1      	b.n	8005260 <StartCANReceiveTask+0x8>
 80052bc:	20000128 	.word	0x20000128
 80052c0:	2000013c 	.word	0x2000013c
 80052c4:	20000130 	.word	0x20000130

080052c8 <InitCANReceiveTask>:
/**
 * @brief  Initializes the CAN receive queue and task.
 *         Must be called before vTaskStartScheduler().
 */
void InitCANReceiveTask(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af02      	add	r7, sp, #8
    /** Create queue to hold up to 20 CAN Rx messages **/
    xCanRxQueue = xQueueCreate(20, sizeof(CanRxMessage_t));
 80052ce:	2200      	movs	r2, #0
 80052d0:	2124      	movs	r1, #36	@ 0x24
 80052d2:	2014      	movs	r0, #20
 80052d4:	f000 fd2a 	bl	8005d2c <xQueueGenericCreate>
 80052d8:	4603      	mov	r3, r0
 80052da:	4a0a      	ldr	r2, [pc, #40]	@ (8005304 <InitCANReceiveTask+0x3c>)
 80052dc:	6013      	str	r3, [r2, #0]

    /** Activate CAN RX FIFO0 interrupt notifications **/
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80052de:	2102      	movs	r1, #2
 80052e0:	4809      	ldr	r0, [pc, #36]	@ (8005308 <InitCANReceiveTask+0x40>)
 80052e2:	f7fc fccf 	bl	8001c84 <HAL_CAN_ActivateNotification>

    /** Create the CAN receive task at high priority **/
    xTaskCreate(
 80052e6:	2300      	movs	r3, #0
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	2303      	movs	r3, #3
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	2300      	movs	r3, #0
 80052f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052f4:	4905      	ldr	r1, [pc, #20]	@ (800530c <InitCANReceiveTask+0x44>)
 80052f6:	4806      	ldr	r0, [pc, #24]	@ (8005310 <InitCANReceiveTask+0x48>)
 80052f8:	f001 f9b6 	bl	8006668 <xTaskCreate>
        256,                        /** Stack size in words **/
        NULL,                       /** No parameters **/
        tskIDLE_PRIORITY + 3,       /** High priority **/
        NULL                        /** No task handle required **/
    );
}
 80052fc:	bf00      	nop
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000128 	.word	0x20000128
 8005308:	20000034 	.word	0x20000034
 800530c:	08008428 	.word	0x08008428
 8005310:	08005259 	.word	0x08005259

08005314 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
 * @brief  CAN Rx ISR: reads pending message and enqueues it
 *         to xCanRxQueue for processing by the receive task.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08c      	sub	sp, #48	@ 0x30
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
    CanRxMessage_t msg;
    BaseType_t xWoken = pdFALSE;
 800531c:	2300      	movs	r3, #0
 800531e:	60bb      	str	r3, [r7, #8]

    /** Retrieve CAN message from FIFO0 **/
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &msg.header, msg.data);
 8005320:	f107 030c 	add.w	r3, r7, #12
 8005324:	331c      	adds	r3, #28
 8005326:	f107 020c 	add.w	r2, r7, #12
 800532a:	2100      	movs	r1, #0
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7fc fb88 	bl	8001a42 <HAL_CAN_GetRxMessage>

    /** Enqueue for deferred processing in task context **/
    xQueueSendFromISR(xCanRxQueue, &msg, &xWoken);
 8005332:	4b0c      	ldr	r3, [pc, #48]	@ (8005364 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8005334:	6818      	ldr	r0, [r3, #0]
 8005336:	f107 0208 	add.w	r2, r7, #8
 800533a:	f107 010c 	add.w	r1, r7, #12
 800533e:	2300      	movs	r3, #0
 8005340:	f000 fe68 	bl	8006014 <xQueueGenericSendFromISR>
    portYIELD_FROM_ISR(xWoken);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d007      	beq.n	800535a <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
 800534a:	4b07      	ldr	r3, [pc, #28]	@ (8005368 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800534c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	f3bf 8f6f 	isb	sy
}
 800535a:	bf00      	nop
 800535c:	3730      	adds	r7, #48	@ 0x30
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000128 	.word	0x20000128
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <StartCANTransmitTask>:
/**
 * @brief  Task: dequeues CAN messages and transmits them on the bus.
 * @param  pvParameters  Not used
 */
static void StartCANTransmitTask(void *pvParameters)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08e      	sub	sp, #56	@ 0x38
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
    uint32_t txMailbox;

    for (;;)
    {
        /** Block until a CAN message is enqueued **/
        if (xQueueReceive(xCanTxQueue, &msg, portMAX_DELAY) == pdTRUE)
 8005374:	4b10      	ldr	r3, [pc, #64]	@ (80053b8 <StartCANTransmitTask+0x4c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800537c:	f04f 32ff 	mov.w	r2, #4294967295
 8005380:	4618      	mov	r0, r3
 8005382:	f000 fefd 	bl	8006180 <xQueueReceive>
 8005386:	4603      	mov	r3, r0
 8005388:	2b01      	cmp	r3, #1
 800538a:	d1f3      	bne.n	8005374 <StartCANTransmitTask+0x8>
        {
            /** Populate CAN Tx header **/
            txHeader.StdId = msg.StdId;      /** Standard ID **/
 800538c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538e:	613b      	str	r3, [r7, #16]
            txHeader.IDE   = CAN_ID_STD;     /** Standard frame **/
 8005390:	2300      	movs	r3, #0
 8005392:	61bb      	str	r3, [r7, #24]
            txHeader.RTR   = CAN_RTR_DATA;   /** Data frame **/
 8005394:	2300      	movs	r3, #0
 8005396:	61fb      	str	r3, [r7, #28]
            txHeader.DLC   = msg.DLC;        /** Payload length **/
 8005398:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800539c:	623b      	str	r3, [r7, #32]

            /** Send the CAN frame **/
            HAL_CAN_AddTxMessage(&hcan, &txHeader, msg.Data, &txMailbox);
 800539e:	f107 000c 	add.w	r0, r7, #12
 80053a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80053a6:	1d5a      	adds	r2, r3, #5
 80053a8:	f107 0110 	add.w	r1, r7, #16
 80053ac:	4603      	mov	r3, r0
 80053ae:	4803      	ldr	r0, [pc, #12]	@ (80053bc <StartCANTransmitTask+0x50>)
 80053b0:	f7fc fa78 	bl	80018a4 <HAL_CAN_AddTxMessage>
        if (xQueueReceive(xCanTxQueue, &msg, portMAX_DELAY) == pdTRUE)
 80053b4:	e7de      	b.n	8005374 <StartCANTransmitTask+0x8>
 80053b6:	bf00      	nop
 80053b8:	2000012c 	.word	0x2000012c
 80053bc:	20000034 	.word	0x20000034

080053c0 <InitCANTransmitTask>:
/**
 * @brief  Initializes the CAN transmit queue and task.
 *         Call this before vTaskStartScheduler().
 */
void InitCANTransmitTask(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af02      	add	r7, sp, #8
    /** Create queue for up to 20 CAN messages **/
    xCanTxQueue = xQueueCreate(20, sizeof(CanTxMessage_t));
 80053c6:	2200      	movs	r2, #0
 80053c8:	2110      	movs	r1, #16
 80053ca:	2014      	movs	r0, #20
 80053cc:	f000 fcae 	bl	8005d2c <xQueueGenericCreate>
 80053d0:	4603      	mov	r3, r0
 80053d2:	4a07      	ldr	r2, [pc, #28]	@ (80053f0 <InitCANTransmitTask+0x30>)
 80053d4:	6013      	str	r3, [r2, #0]

    /** Create the CAN Transmit task at high priority **/
    xTaskCreate(
 80053d6:	2300      	movs	r3, #0
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	2303      	movs	r3, #3
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	2300      	movs	r3, #0
 80053e0:	2280      	movs	r2, #128	@ 0x80
 80053e2:	4904      	ldr	r1, [pc, #16]	@ (80053f4 <InitCANTransmitTask+0x34>)
 80053e4:	4804      	ldr	r0, [pc, #16]	@ (80053f8 <InitCANTransmitTask+0x38>)
 80053e6:	f001 f93f 	bl	8006668 <xTaskCreate>
        128,                      /** Stack depth (words) **/
        NULL,                     /** No parameters **/
        tskIDLE_PRIORITY + 3,     /** High priority **/
        NULL                      /** No task handle required **/
    );
}
 80053ea:	bf00      	nop
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	2000012c 	.word	0x2000012c
 80053f4:	08008434 	.word	0x08008434
 80053f8:	0800536d 	.word	0x0800536d

080053fc <StartControlTask>:
/**
 * @brief  Control task: processes sensor data and issues motor safety commands.
 * @param  pvParameters  Not used
 */
static void StartControlTask(void *pvParameters)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b092      	sub	sp, #72	@ 0x48
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
    CanRxMessage_t RXMsg;
    CanTxMessage_t  TXMsg;
    uint16_t DistInt;

    /** Prepare motor command CAN header **/
    TXMsg.StdId = MOTOR_CMD_ID;
 8005404:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005408:	60fb      	str	r3, [r7, #12]
    TXMsg.DLC   = 2;  /** direction + speed **/
 800540a:	2302      	movs	r3, #2
 800540c:	743b      	strb	r3, [r7, #16]

    for (;;)
    {
        /** Wait indefinitely for sensor data message **/
        if (xQueueReceive(xSensorQueue, &RXMsg, portMAX_DELAY) == pdTRUE)
 800540e:	4b47      	ldr	r3, [pc, #284]	@ (800552c <StartControlTask+0x130>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f107 011c 	add.w	r1, r7, #28
 8005416:	f04f 32ff 	mov.w	r2, #4294967295
 800541a:	4618      	mov	r0, r3
 800541c:	f000 feb0 	bl	8006180 <xQueueReceive>
 8005420:	4603      	mov	r3, r0
 8005422:	2b01      	cmp	r3, #1
 8005424:	d1f3      	bne.n	800540e <StartControlTask+0x12>
        {
            switch (RXMsg.header.StdId)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800542c:	d004      	beq.n	8005438 <StartControlTask+0x3c>
 800542e:	f240 3201 	movw	r2, #769	@ 0x301
 8005432:	4293      	cmp	r3, r2
 8005434:	d02b      	beq.n	800548e <StartControlTask+0x92>
                    }
                    break;

                default:
                    /** Unhandled ID: ignore **/
                    break;
 8005436:	e077      	b.n	8005528 <StartControlTask+0x12c>
                    LatestTemp = (float)(RXMsg.data[0] | (RXMsg.data[1] << 8));
 8005438:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800543c:	461a      	mov	r2, r3
 800543e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	4313      	orrs	r3, r2
 8005446:	4618      	mov	r0, r3
 8005448:	f7fa ff3c 	bl	80002c4 <__aeabi_i2f>
 800544c:	4603      	mov	r3, r0
 800544e:	4a38      	ldr	r2, [pc, #224]	@ (8005530 <StartControlTask+0x134>)
 8005450:	6013      	str	r3, [r2, #0]
                    if (LatestTemp > TEMP_THRESHOLD)
 8005452:	4b37      	ldr	r3, [pc, #220]	@ (8005530 <StartControlTask+0x134>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4937      	ldr	r1, [pc, #220]	@ (8005534 <StartControlTask+0x138>)
 8005458:	4618      	mov	r0, r3
 800545a:	f7fa fff3 	bl	8000444 <__aeabi_fcmpgt>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d004      	beq.n	800546e <StartControlTask+0x72>
                    	WriteDTCListToFlash(DTC_OVER_TEMPERATURE);
 8005464:	f24f 2061 	movw	r0, #62049	@ 0xf261
 8005468:	f7fb fc2a 	bl	8000cc0 <WriteDTCListToFlash>
                    break;
 800546c:	e05c      	b.n	8005528 <StartControlTask+0x12c>
                    else if (LatestTemp == 0)
 800546e:	4b30      	ldr	r3, [pc, #192]	@ (8005530 <StartControlTask+0x134>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f04f 0100 	mov.w	r1, #0
 8005476:	4618      	mov	r0, r3
 8005478:	f7fa ffbc 	bl	80003f4 <__aeabi_fcmpeq>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d100      	bne.n	8005484 <StartControlTask+0x88>
                    break;
 8005482:	e051      	b.n	8005528 <StartControlTask+0x12c>
                    	WriteDTCListToFlash(DTC_TEMP_SENSOR_FAILURE);
 8005484:	f24f 2060 	movw	r0, #62048	@ 0xf260
 8005488:	f7fb fc1a 	bl	8000cc0 <WriteDTCListToFlash>
                    break;
 800548c:	e04c      	b.n	8005528 <StartControlTask+0x12c>
                    DistInt     = (uint16_t)(RXMsg.data[0] | (RXMsg.data[1] << 8));
 800548e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005492:	b21a      	sxth	r2, r3
 8005494:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	b21b      	sxth	r3, r3
 800549c:	4313      	orrs	r3, r2
 800549e:	b21b      	sxth	r3, r3
 80054a0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
                    LatestDist = (float)DistInt;
 80054a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fa ff07 	bl	80002bc <__aeabi_ui2f>
 80054ae:	4603      	mov	r3, r0
 80054b0:	4a21      	ldr	r2, [pc, #132]	@ (8005538 <StartControlTask+0x13c>)
 80054b2:	6013      	str	r3, [r2, #0]
                    if (LatestDist < MOTOR_BLOCK_DISTANCE_CM)
 80054b4:	4b20      	ldr	r3, [pc, #128]	@ (8005538 <StartControlTask+0x13c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4920      	ldr	r1, [pc, #128]	@ (800553c <StartControlTask+0x140>)
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fa ffa4 	bl	8000408 <__aeabi_fcmplt>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d020      	beq.n	8005508 <StartControlTask+0x10c>
                        TXMsg.Data[0] = MOTOR_DIR_STOP;
 80054c6:	2300      	movs	r3, #0
 80054c8:	747b      	strb	r3, [r7, #17]
                        TXMsg.Data[1] = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	74bb      	strb	r3, [r7, #18]
                        for (int i = 2; i < 8; i++) { TXMsg.Data[i] = 0U; }
 80054ce:	2302      	movs	r3, #2
 80054d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054d2:	e008      	b.n	80054e6 <StartControlTask+0xea>
 80054d4:	f107 0211 	add.w	r2, r7, #17
 80054d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054da:	4413      	add	r3, r2
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054e2:	3301      	adds	r3, #1
 80054e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054e8:	2b07      	cmp	r3, #7
 80054ea:	ddf3      	ble.n	80054d4 <StartControlTask+0xd8>
                        xQueueSend(xCanTxQueue, &TXMsg, portMAX_DELAY);
 80054ec:	4b14      	ldr	r3, [pc, #80]	@ (8005540 <StartControlTask+0x144>)
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	f107 010c 	add.w	r1, r7, #12
 80054f4:	2300      	movs	r3, #0
 80054f6:	f04f 32ff 	mov.w	r2, #4294967295
 80054fa:	f000 fc89 	bl	8005e10 <xQueueGenericSend>
                        WriteDTCListToFlash(DTC_ULTRASONIC_BLOCKED);
 80054fe:	f24f 2051 	movw	r0, #62033	@ 0xf251
 8005502:	f7fb fbdd 	bl	8000cc0 <WriteDTCListToFlash>
                    break;
 8005506:	e00e      	b.n	8005526 <StartControlTask+0x12a>
                    else if (LatestDist == 0)
 8005508:	4b0b      	ldr	r3, [pc, #44]	@ (8005538 <StartControlTask+0x13c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f04f 0100 	mov.w	r1, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f7fa ff6f 	bl	80003f4 <__aeabi_fcmpeq>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d100      	bne.n	800551e <StartControlTask+0x122>
                    break;
 800551c:	e003      	b.n	8005526 <StartControlTask+0x12a>
                        WriteDTCListToFlash(DTC_ULTRASONIC_FAILURE);
 800551e:	f24f 2050 	movw	r0, #62032	@ 0xf250
 8005522:	f7fb fbcd 	bl	8000cc0 <WriteDTCListToFlash>
                    break;
 8005526:	bf00      	nop
        if (xQueueReceive(xSensorQueue, &RXMsg, portMAX_DELAY) == pdTRUE)
 8005528:	e771      	b.n	800540e <StartControlTask+0x12>
 800552a:	bf00      	nop
 800552c:	20000130 	.word	0x20000130
 8005530:	20000134 	.word	0x20000134
 8005534:	420c0000 	.word	0x420c0000
 8005538:	20000138 	.word	0x20000138
 800553c:	40a00000 	.word	0x40a00000
 8005540:	2000012c 	.word	0x2000012c

08005544 <InitControlTask>:
/**
 * @brief  Initializes the control task and its sensor queue.
 *         Call before vTaskStartScheduler().
 */
void InitControlTask(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af02      	add	r7, sp, #8
    /** Create queue for sensor CAN messages (up to 10) **/
    xSensorQueue = xQueueCreate(10, sizeof(CanRxMessage_t));
 800554a:	2200      	movs	r2, #0
 800554c:	2124      	movs	r1, #36	@ 0x24
 800554e:	200a      	movs	r0, #10
 8005550:	f000 fbec 	bl	8005d2c <xQueueGenericCreate>
 8005554:	4603      	mov	r3, r0
 8005556:	4a08      	ldr	r2, [pc, #32]	@ (8005578 <InitControlTask+0x34>)
 8005558:	6013      	str	r3, [r2, #0]

    /** Create control task at high priority **/
    xTaskCreate(
 800555a:	2300      	movs	r3, #0
 800555c:	9301      	str	r3, [sp, #4]
 800555e:	2304      	movs	r3, #4
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	2300      	movs	r3, #0
 8005564:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005568:	4904      	ldr	r1, [pc, #16]	@ (800557c <InitControlTask+0x38>)
 800556a:	4805      	ldr	r0, [pc, #20]	@ (8005580 <InitControlTask+0x3c>)
 800556c:	f001 f87c 	bl	8006668 <xTaskCreate>
        256,                           /** Stack depth in words **/
        NULL,                          /** No parameters **/
        tskIDLE_PRIORITY + 4,          /** Very high priority **/
        NULL                           /** No handle required **/
    );
}
 8005570:	bf00      	nop
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000130 	.word	0x20000130
 800557c:	0800843c 	.word	0x0800843c
 8005580:	080053fd 	.word	0x080053fd

08005584 <StartDiagnosticsTask>:
/**
 * @brief  Task that processes diagnostic requests directly.
 *         Receives frames from xDiagQueue and handles each service ID.
 */
static void StartDiagnosticsTask(void *pvParameters)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
    uint8_t Data[8]={0};     /**< Buffer for received CAN frame data **/
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	2300      	movs	r3, #0
 8005592:	613b      	str	r3, [r7, #16]
    uint8_t DLC = 8;     /**< Default Data Length Code (all 8 bytes) **/
 8005594:	2308      	movs	r3, #8
 8005596:	75fb      	strb	r3, [r7, #23]

    for (;;)
    {
        /** Wait indefinitely for a diagnostic request frame **/
        if (xQueueReceive(xDiagQueue, Data, portMAX_DELAY) == pdTRUE)
 8005598:	4b47      	ldr	r3, [pc, #284]	@ (80056b8 <StartDiagnosticsTask+0x134>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f107 010c 	add.w	r1, r7, #12
 80055a0:	f04f 32ff 	mov.w	r2, #4294967295
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fdeb 	bl	8006180 <xQueueReceive>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d1f3      	bne.n	8005598 <StartDiagnosticsTask+0x14>
        {
            uint8_t SID = Data[0];  /**< Service ID byte **/
 80055b0:	7b3b      	ldrb	r3, [r7, #12]
 80055b2:	75bb      	strb	r3, [r7, #22]
            uint8_t Sub = Data[1];  /**< Sub-function byte **/
 80055b4:	7b7b      	ldrb	r3, [r7, #13]
 80055b6:	757b      	strb	r3, [r7, #21]

            switch (SID)
 80055b8:	7dbb      	ldrb	r3, [r7, #22]
 80055ba:	3b10      	subs	r3, #16
 80055bc:	2b24      	cmp	r3, #36	@ 0x24
 80055be:	d874      	bhi.n	80056aa <StartDiagnosticsTask+0x126>
 80055c0:	a201      	add	r2, pc, #4	@ (adr r2, 80055c8 <StartDiagnosticsTask+0x44>)
 80055c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c6:	bf00      	nop
 80055c8:	0800565d 	.word	0x0800565d
 80055cc:	080056ab 	.word	0x080056ab
 80055d0:	080056ab 	.word	0x080056ab
 80055d4:	080056ab 	.word	0x080056ab
 80055d8:	08005691 	.word	0x08005691
 80055dc:	080056ab 	.word	0x080056ab
 80055e0:	080056ab 	.word	0x080056ab
 80055e4:	080056ab 	.word	0x080056ab
 80055e8:	080056ab 	.word	0x080056ab
 80055ec:	08005687 	.word	0x08005687
 80055f0:	080056ab 	.word	0x080056ab
 80055f4:	080056ab 	.word	0x080056ab
 80055f8:	080056ab 	.word	0x080056ab
 80055fc:	080056ab 	.word	0x080056ab
 8005600:	080056ab 	.word	0x080056ab
 8005604:	080056ab 	.word	0x080056ab
 8005608:	080056ab 	.word	0x080056ab
 800560c:	080056ab 	.word	0x080056ab
 8005610:	08005677 	.word	0x08005677
 8005614:	080056ab 	.word	0x080056ab
 8005618:	080056ab 	.word	0x080056ab
 800561c:	080056ab 	.word	0x080056ab
 8005620:	080056ab 	.word	0x080056ab
 8005624:	08005667 	.word	0x08005667
 8005628:	080056ab 	.word	0x080056ab
 800562c:	080056ab 	.word	0x080056ab
 8005630:	080056ab 	.word	0x080056ab
 8005634:	080056ab 	.word	0x080056ab
 8005638:	080056ab 	.word	0x080056ab
 800563c:	080056ab 	.word	0x080056ab
 8005640:	080056ab 	.word	0x080056ab
 8005644:	080056ab 	.word	0x080056ab
 8005648:	080056ab 	.word	0x080056ab
 800564c:	080056ab 	.word	0x080056ab
 8005650:	080056ab 	.word	0x080056ab
 8005654:	080056ab 	.word	0x080056ab
 8005658:	0800569b 	.word	0x0800569b
            {
                case SID_DIAG_SESSION_CTRL:
                    /** Process session control request **/
                    ProcessSessionControl(Sub);
 800565c:	7d7b      	ldrb	r3, [r7, #21]
 800565e:	4618      	mov	r0, r3
 8005660:	f7fb fcbc 	bl	8000fdc <ProcessSessionControl>
                    break;
 8005664:	e027      	b.n	80056b6 <StartDiagnosticsTask+0x132>

                case SID_SECURITY_ACCESS:
                    /** Process security access (password) **/
                    ProcessSecurityAccess(Sub, Data, DLC);
 8005666:	7dfa      	ldrb	r2, [r7, #23]
 8005668:	f107 010c 	add.w	r1, r7, #12
 800566c:	7d7b      	ldrb	r3, [r7, #21]
 800566e:	4618      	mov	r0, r3
 8005670:	f7fb fcea 	bl	8001048 <ProcessSecurityAccess>
                    break;
 8005674:	e01f      	b.n	80056b6 <StartDiagnosticsTask+0x132>

                case SID_READ_DATA_BY_ID:
                    /** Process read sensor data by identifier **/
                    ProcessReadDataById(Sub, Data);
 8005676:	f107 020c 	add.w	r2, r7, #12
 800567a:	7d7b      	ldrb	r3, [r7, #21]
 800567c:	4611      	mov	r1, r2
 800567e:	4618      	mov	r0, r3
 8005680:	f7fb fd1a 	bl	80010b8 <ProcessReadDataById>
                    break;
 8005684:	e017      	b.n	80056b6 <StartDiagnosticsTask+0x132>

                case SID_READ_DTC:
                    /** Process read DTC list request **/
                    ProcessReadDTC(Sub);
 8005686:	7d7b      	ldrb	r3, [r7, #21]
 8005688:	4618      	mov	r0, r3
 800568a:	f7fb fd7d 	bl	8001188 <ProcessReadDTC>
                    break;
 800568e:	e012      	b.n	80056b6 <StartDiagnosticsTask+0x132>

                case SID_CLEAR_DTC:
                    /** Process clear DTC list request **/
                    ProcessClearDTC(Sub);
 8005690:	7d7b      	ldrb	r3, [r7, #21]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fb fe84 	bl	80013a0 <ProcessClearDTC>
                    break;
 8005698:	e00d      	b.n	80056b6 <StartDiagnosticsTask+0x132>

                case SID_REQUEST_DOWNLOAD:
                    /** Process OTA firmware download request **/
                    ProcessRequestDownload(Sub,Data);
 800569a:	f107 020c 	add.w	r2, r7, #12
 800569e:	7d7b      	ldrb	r3, [r7, #21]
 80056a0:	4611      	mov	r1, r2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fb fe9e 	bl	80013e4 <ProcessRequestDownload>
                    break;
 80056a8:	e005      	b.n	80056b6 <StartDiagnosticsTask+0x132>

                default:
                    /** Unsupported service, send negative response **/
                    SendNegative(SID, NRC_SERVICE_NOT_SUPP);
 80056aa:	7dbb      	ldrb	r3, [r7, #22]
 80056ac:	2111      	movs	r1, #17
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fb fc64 	bl	8000f7c <SendNegative>
                    break;
 80056b4:	bf00      	nop
        if (xQueueReceive(xDiagQueue, Data, portMAX_DELAY) == pdTRUE)
 80056b6:	e76f      	b.n	8005598 <StartDiagnosticsTask+0x14>
 80056b8:	2000013c 	.word	0x2000013c

080056bc <InitDiagnosticsTask>:
/**
 * @brief  Initialize the diagnostics task and its request queue.
 *         Must be called before starting the FreeRTOS scheduler.
 */
void InitDiagnosticsTask(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af02      	add	r7, sp, #8
    /** Create queue for up to 10 diagnostic frames (8 bytes each) **/
    xDiagQueue = xQueueCreate(10, sizeof(uint8_t[8]));
 80056c2:	2200      	movs	r2, #0
 80056c4:	2108      	movs	r1, #8
 80056c6:	200a      	movs	r0, #10
 80056c8:	f000 fb30 	bl	8005d2c <xQueueGenericCreate>
 80056cc:	4603      	mov	r3, r0
 80056ce:	4a08      	ldr	r2, [pc, #32]	@ (80056f0 <InitDiagnosticsTask+0x34>)
 80056d0:	6013      	str	r3, [r2, #0]

    /** Create the Diagnostics task at medium priority **/
    xTaskCreate(
 80056d2:	2300      	movs	r3, #0
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	2302      	movs	r3, #2
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	2300      	movs	r3, #0
 80056dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056e0:	4904      	ldr	r1, [pc, #16]	@ (80056f4 <InitDiagnosticsTask+0x38>)
 80056e2:	4805      	ldr	r0, [pc, #20]	@ (80056f8 <InitDiagnosticsTask+0x3c>)
 80056e4:	f000 ffc0 	bl	8006668 <xTaskCreate>
        256,                        /**< Stack depth in words **/
        NULL,                       /**< Task parameter       **/
        tskIDLE_PRIORITY + 2,      /**< Task priority        **/
        NULL                        /**< Task handle (unused) **/
    );
}
 80056e8:	bf00      	nop
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	2000013c 	.word	0x2000013c
 80056f4:	08008444 	.word	0x08008444
 80056f8:	08005585 	.word	0x08005585

080056fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005700:	f3bf 8f4f 	dsb	sy
}
 8005704:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005706:	4b06      	ldr	r3, [pc, #24]	@ (8005720 <__NVIC_SystemReset+0x24>)
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800570e:	4904      	ldr	r1, [pc, #16]	@ (8005720 <__NVIC_SystemReset+0x24>)
 8005710:	4b04      	ldr	r3, [pc, #16]	@ (8005724 <__NVIC_SystemReset+0x28>)
 8005712:	4313      	orrs	r3, r2
 8005714:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005716:	f3bf 8f4f 	dsb	sy
}
 800571a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800571c:	bf00      	nop
 800571e:	e7fd      	b.n	800571c <__NVIC_SystemReset+0x20>
 8005720:	e000ed00 	.word	0xe000ed00
 8005724:	05fa0004 	.word	0x05fa0004

08005728 <StartOTAManagerTask>:
 *         sets metadata pending flag, then resets MCU to
 *         enter bootloader for firmware reception.
 * @param  pvParameters  Not used
 */
static void StartOTAManagerTask(void *pvParameters)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08c      	sub	sp, #48	@ 0x30
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
    CanRxMessage_t msg;

    for (;;)
    {
        /** Wait indefinitely for OTA trigger message **/
        if (xQueueReceive(xOtaQueue, &msg, portMAX_DELAY) == pdTRUE)
 8005730:	4b0b      	ldr	r3, [pc, #44]	@ (8005760 <StartOTAManagerTask+0x38>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f107 010c 	add.w	r1, r7, #12
 8005738:	f04f 32ff 	mov.w	r2, #4294967295
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fd1f 	bl	8006180 <xQueueReceive>
 8005742:	4603      	mov	r3, r0
 8005744:	2b01      	cmp	r3, #1
 8005746:	d1f3      	bne.n	8005730 <StartOTAManagerTask+0x8>
        {

			/** Set pending flag to 1 in metadata **/
			ReadMetadata(); /** read current metadata **/
 8005748:	f000 f82c 	bl	80057a4 <ReadMetadata>
			MetaData.pending = 1U; /** mark update pending **/
 800574c:	4b05      	ldr	r3, [pc, #20]	@ (8005764 <StartOTAManagerTask+0x3c>)
 800574e:	2201      	movs	r2, #1
 8005750:	60da      	str	r2, [r3, #12]
			WriteMetadata(); /** write back to flash **/
 8005752:	f000 f84f 	bl	80057f4 <WriteMetadata>

			/** Short delay to ensure flash write completes **/
			vTaskDelay(50);
 8005756:	2032      	movs	r0, #50	@ 0x32
 8005758:	f001 f8f2 	bl	8006940 <vTaskDelay>

			/** Perform system reset to jump into bootloader **/
			NVIC_SystemReset();
 800575c:	f7ff ffce 	bl	80056fc <__NVIC_SystemReset>
 8005760:	20000150 	.word	0x20000150
 8005764:	20000140 	.word	0x20000140

08005768 <InitOTAManagerTask>:
/**
 * @brief  Initializes the OTA manager task and its queue.
 *         Call before vTaskStartScheduler().
 */
void InitOTAManagerTask(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af02      	add	r7, sp, #8
    /** Create queue for OTA messages (holding one CanRxMessage_t) **/
    xOtaQueue = xQueueCreate(1, sizeof(CanRxMessage_t));
 800576e:	2200      	movs	r2, #0
 8005770:	2124      	movs	r1, #36	@ 0x24
 8005772:	2001      	movs	r0, #1
 8005774:	f000 fada 	bl	8005d2c <xQueueGenericCreate>
 8005778:	4603      	mov	r3, r0
 800577a:	4a07      	ldr	r2, [pc, #28]	@ (8005798 <InitOTAManagerTask+0x30>)
 800577c:	6013      	str	r3, [r2, #0]

    /** Create the OTA manager task at medium priority **/
    xTaskCreate(
 800577e:	2300      	movs	r3, #0
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	2300      	movs	r3, #0
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	2300      	movs	r3, #0
 8005788:	2280      	movs	r2, #128	@ 0x80
 800578a:	4904      	ldr	r1, [pc, #16]	@ (800579c <InitOTAManagerTask+0x34>)
 800578c:	4804      	ldr	r0, [pc, #16]	@ (80057a0 <InitOTAManagerTask+0x38>)
 800578e:	f000 ff6b 	bl	8006668 <xTaskCreate>
        128,                       /** Stack depth in words **/
        NULL,                      /** No parameters **/
        tskIDLE_PRIORITY + 0,      /** height priority **/
        NULL                       /** No task handle required **/
    );
}
 8005792:	bf00      	nop
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000150 	.word	0x20000150
 800579c:	08008450 	.word	0x08008450
 80057a0:	08005729 	.word	0x08005729

080057a4 <ReadMetadata>:


/** Read metadata from flash; if invalid, initialize defaults **/
void ReadMetadata(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
    metadata_t *pMetaDataAdd = (metadata_t *)FLASH_METADATA_ADDR;
 80057aa:	4b10      	ldr	r3, [pc, #64]	@ (80057ec <ReadMetadata+0x48>)
 80057ac:	607b      	str	r3, [r7, #4]
    if (pMetaDataAdd->magic != METADATA_MAGIC)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 80057b6:	d00f      	beq.n	80057d8 <ReadMetadata+0x34>
    {
        /** First boot: set defaults **/
    	MetaData.magic = METADATA_MAGIC;
 80057b8:	4b0d      	ldr	r3, [pc, #52]	@ (80057f0 <ReadMetadata+0x4c>)
 80057ba:	f04f 32a5 	mov.w	r2, #2779096485	@ 0xa5a5a5a5
 80057be:	601a      	str	r2, [r3, #0]
    	MetaData.active_app = 1U;
 80057c0:	4b0b      	ldr	r3, [pc, #44]	@ (80057f0 <ReadMetadata+0x4c>)
 80057c2:	2201      	movs	r2, #1
 80057c4:	605a      	str	r2, [r3, #4]
    	MetaData.version = 0U;
 80057c6:	4b0a      	ldr	r3, [pc, #40]	@ (80057f0 <ReadMetadata+0x4c>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	609a      	str	r2, [r3, #8]
    	MetaData.pending = 0U;
 80057cc:	4b08      	ldr	r3, [pc, #32]	@ (80057f0 <ReadMetadata+0x4c>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	60da      	str	r2, [r3, #12]
        WriteMetadata();
 80057d2:	f000 f80f 	bl	80057f4 <WriteMetadata>
    }
    else
    {
        memcpy(&MetaData, pMetaDataAdd, sizeof(metadata_t));
    }
}
 80057d6:	e004      	b.n	80057e2 <ReadMetadata+0x3e>
        memcpy(&MetaData, pMetaDataAdd, sizeof(metadata_t));
 80057d8:	2210      	movs	r2, #16
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	4804      	ldr	r0, [pc, #16]	@ (80057f0 <ReadMetadata+0x4c>)
 80057de:	f002 fe09 	bl	80083f4 <memcpy>
}
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	0800f000 	.word	0x0800f000
 80057f0:	20000140 	.word	0x20000140

080057f4 <WriteMetadata>:

/** Write current metadata to reserved flash page **/
void WriteMetadata(void)
{
 80057f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057f8:	b088      	sub	sp, #32
 80057fa:	af00      	add	r7, sp, #0
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t PageError;

    /* Unlock flash */
    HAL_FLASH_Unlock();
 80057fc:	f7fc fe8c 	bl	8002518 <HAL_FLASH_Unlock>

    /** Erase metadata page **/
    EraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
    EraseInit.PageAddress = FLASH_METADATA_ADDR;
 8005804:	4b22      	ldr	r3, [pc, #136]	@ (8005890 <WriteMetadata+0x9c>)
 8005806:	617b      	str	r3, [r7, #20]
    EraseInit.NbPages     = 1;
 8005808:	2301      	movs	r3, #1
 800580a:	61bb      	str	r3, [r7, #24]
    HAL_FLASHEx_Erase(&EraseInit, &PageError);
 800580c:	f107 0208 	add.w	r2, r7, #8
 8005810:	f107 030c 	add.w	r3, r7, #12
 8005814:	4611      	mov	r1, r2
 8005816:	4618      	mov	r0, r3
 8005818:	f7fc ff66 	bl	80026e8 <HAL_FLASHEx_Erase>

    /** Program metadata words **/
    uint32_t Address = FLASH_METADATA_ADDR;
 800581c:	4b1c      	ldr	r3, [pc, #112]	@ (8005890 <WriteMetadata+0x9c>)
 800581e:	61fb      	str	r3, [r7, #28]
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address,       MetaData.magic);
 8005820:	4b1c      	ldr	r3, [pc, #112]	@ (8005894 <WriteMetadata+0xa0>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2200      	movs	r2, #0
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	607a      	str	r2, [r7, #4]
 800582a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800582e:	69f9      	ldr	r1, [r7, #28]
 8005830:	2002      	movs	r0, #2
 8005832:	f7fc fe01 	bl	8002438 <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 4U,  MetaData.active_app);
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	1d19      	adds	r1, r3, #4
 800583a:	4b16      	ldr	r3, [pc, #88]	@ (8005894 <WriteMetadata+0xa0>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	469a      	mov	sl, r3
 8005842:	4693      	mov	fp, r2
 8005844:	4652      	mov	r2, sl
 8005846:	465b      	mov	r3, fp
 8005848:	2002      	movs	r0, #2
 800584a:	f7fc fdf5 	bl	8002438 <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 8U,  MetaData.version);
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	f103 0108 	add.w	r1, r3, #8
 8005854:	4b0f      	ldr	r3, [pc, #60]	@ (8005894 <WriteMetadata+0xa0>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2200      	movs	r2, #0
 800585a:	4698      	mov	r8, r3
 800585c:	4691      	mov	r9, r2
 800585e:	4642      	mov	r2, r8
 8005860:	464b      	mov	r3, r9
 8005862:	2002      	movs	r0, #2
 8005864:	f7fc fde8 	bl	8002438 <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 12U, MetaData.pending);
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	f103 010c 	add.w	r1, r3, #12
 800586e:	4b09      	ldr	r3, [pc, #36]	@ (8005894 <WriteMetadata+0xa0>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	461c      	mov	r4, r3
 8005876:	4615      	mov	r5, r2
 8005878:	4622      	mov	r2, r4
 800587a:	462b      	mov	r3, r5
 800587c:	2002      	movs	r0, #2
 800587e:	f7fc fddb 	bl	8002438 <HAL_FLASH_Program>

    /* Lock flash */
    HAL_FLASH_Lock();
 8005882:	f7fc fe6f 	bl	8002564 <HAL_FLASH_Lock>
}
 8005886:	bf00      	nop
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005890:	0800f000 	.word	0x0800f000
 8005894:	20000140 	.word	0x20000140

08005898 <FreeRTOS_Init>:

#include "TaskHandle.h"

/* Initialize FreeRTOS queues and tasks */
void FreeRTOS_Init(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
    InitCANReceiveTask();    /** Receive CAN frames **/
 800589c:	f7ff fd14 	bl	80052c8 <InitCANReceiveTask>
    InitCANTransmitTask();   /** Transmit CAN frames **/
 80058a0:	f7ff fd8e 	bl	80053c0 <InitCANTransmitTask>
    InitControlTask();       /** Sensor processing and motor safety **/
 80058a4:	f7ff fe4e 	bl	8005544 <InitControlTask>
    InitDiagnosticsTask();   /** UDS diagnostic services **/
 80058a8:	f7ff ff08 	bl	80056bc <InitDiagnosticsTask>
    InitOTAManagerTask();    /** Manage OTA trigger **/
 80058ac:	f7ff ff5c 	bl	8005768 <InitOTAManagerTask>
    InitUARTReceiveTask();
 80058b0:	f000 f8be 	bl	8005a30 <InitUARTReceiveTask>
}
 80058b4:	bf00      	nop
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <Start_Scheduler>:

void Start_Scheduler(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
    /* Start FreeRTOS scheduler */
    vTaskStartScheduler();
 80058bc:	f001 f876 	bl	80069ac <vTaskStartScheduler>
}
 80058c0:	bf00      	nop
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <StartUARTReceiveTask>:
/**
 * @brief  Control task: processes sensor data from UART and sends motor commands via UART.
 * @param  pvParameters  Not used
 */
static void StartUARTReceiveTask(void *pvParameters)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	@ 0x28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
	uint8_t Msg[4] ={0};
 80058cc:	2300      	movs	r3, #0
 80058ce:	61fb      	str	r3, [r7, #28]
    uint8_t motorCmdFrame[4];  /* [0..1] = MOTOR_CMD_ID, [2] = direction, [3] = speed */

    for (;;)
    {
        /** Wait for a UART sensor message (4 bytes) **/
        if (xQueueReceive(xUartQueue, Msg, portMAX_DELAY) == pdTRUE)
 80058d0:	4b50      	ldr	r3, [pc, #320]	@ (8005a14 <StartUARTReceiveTask+0x150>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f107 011c 	add.w	r1, r7, #28
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fc4f 	bl	8006180 <xQueueReceive>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d1f3      	bne.n	80058d0 <StartUARTReceiveTask+0xc>
        {
            /** Parse little-endian sensor ID and value **/
            sensorId    = (uint16_t)(Msg[0] | (Msg[1] << 8));
 80058e8:	7f3b      	ldrb	r3, [r7, #28]
 80058ea:	b21a      	sxth	r2, r3
 80058ec:	7f7b      	ldrb	r3, [r7, #29]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	b21b      	sxth	r3, r3
 80058f2:	4313      	orrs	r3, r2
 80058f4:	b21b      	sxth	r3, r3
 80058f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            sensorValue = (uint16_t)(Msg[2] | (Msg[3] << 8));
 80058f8:	7fbb      	ldrb	r3, [r7, #30]
 80058fa:	b21a      	sxth	r2, r3
 80058fc:	7ffb      	ldrb	r3, [r7, #31]
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	b21b      	sxth	r3, r3
 8005902:	4313      	orrs	r3, r2
 8005904:	b21b      	sxth	r3, r3
 8005906:	84bb      	strh	r3, [r7, #36]	@ 0x24

            switch (sensorId)
 8005908:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800590a:	f240 4201 	movw	r2, #1025	@ 0x401
 800590e:	4293      	cmp	r3, r2
 8005910:	d064      	beq.n	80059dc <StartUARTReceiveTask+0x118>
 8005912:	f240 4201 	movw	r2, #1025	@ 0x401
 8005916:	4293      	cmp	r3, r2
 8005918:	dc79      	bgt.n	8005a0e <StartUARTReceiveTask+0x14a>
 800591a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800591e:	d004      	beq.n	800592a <StartUARTReceiveTask+0x66>
 8005920:	f240 3201 	movw	r2, #769	@ 0x301
 8005924:	4293      	cmp	r3, r2
 8005926:	d025      	beq.n	8005974 <StartUARTReceiveTask+0xb0>
                    xQueueSend(xCanTxQueue, &TXMsg, portMAX_DELAY);

                    break;

                default:
                    break;
 8005928:	e071      	b.n	8005a0e <StartUARTReceiveTask+0x14a>
                    LatestTemp = (float)sensorValue;
 800592a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800592c:	4618      	mov	r0, r3
 800592e:	f7fa fcc5 	bl	80002bc <__aeabi_ui2f>
 8005932:	4603      	mov	r3, r0
 8005934:	4a38      	ldr	r2, [pc, #224]	@ (8005a18 <StartUARTReceiveTask+0x154>)
 8005936:	6013      	str	r3, [r2, #0]
                    if (LatestTemp > TEMP_THRESHOLD)
 8005938:	4b37      	ldr	r3, [pc, #220]	@ (8005a18 <StartUARTReceiveTask+0x154>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4937      	ldr	r1, [pc, #220]	@ (8005a1c <StartUARTReceiveTask+0x158>)
 800593e:	4618      	mov	r0, r3
 8005940:	f7fa fd80 	bl	8000444 <__aeabi_fcmpgt>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d004      	beq.n	8005954 <StartUARTReceiveTask+0x90>
                        WriteDTCListToFlash(DTC_OVER_TEMPERATURE);
 800594a:	f24f 2061 	movw	r0, #62049	@ 0xf261
 800594e:	f7fb f9b7 	bl	8000cc0 <WriteDTCListToFlash>
                    break;
 8005952:	e05d      	b.n	8005a10 <StartUARTReceiveTask+0x14c>
                    else if (LatestTemp == 0)
 8005954:	4b30      	ldr	r3, [pc, #192]	@ (8005a18 <StartUARTReceiveTask+0x154>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f04f 0100 	mov.w	r1, #0
 800595c:	4618      	mov	r0, r3
 800595e:	f7fa fd49 	bl	80003f4 <__aeabi_fcmpeq>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d100      	bne.n	800596a <StartUARTReceiveTask+0xa6>
                    break;
 8005968:	e052      	b.n	8005a10 <StartUARTReceiveTask+0x14c>
                        WriteDTCListToFlash(DTC_TEMP_SENSOR_FAILURE);
 800596a:	f24f 2060 	movw	r0, #62048	@ 0xf260
 800596e:	f7fb f9a7 	bl	8000cc0 <WriteDTCListToFlash>
                    break;
 8005972:	e04d      	b.n	8005a10 <StartUARTReceiveTask+0x14c>
                    LatestDist = (float)sensorValue;
 8005974:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005976:	4618      	mov	r0, r3
 8005978:	f7fa fca0 	bl	80002bc <__aeabi_ui2f>
 800597c:	4603      	mov	r3, r0
 800597e:	4a28      	ldr	r2, [pc, #160]	@ (8005a20 <StartUARTReceiveTask+0x15c>)
 8005980:	6013      	str	r3, [r2, #0]
                    if (LatestDist < MOTOR_BLOCK_DISTANCE_CM)
 8005982:	4b27      	ldr	r3, [pc, #156]	@ (8005a20 <StartUARTReceiveTask+0x15c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4927      	ldr	r1, [pc, #156]	@ (8005a24 <StartUARTReceiveTask+0x160>)
 8005988:	4618      	mov	r0, r3
 800598a:	f7fa fd3d 	bl	8000408 <__aeabi_fcmplt>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d013      	beq.n	80059bc <StartUARTReceiveTask+0xf8>
                        motorCmdFrame[0] = (uint8_t)(MOTOR_CMD_ID & 0xFF);
 8005994:	2300      	movs	r3, #0
 8005996:	723b      	strb	r3, [r7, #8]
                        motorCmdFrame[1] = (uint8_t)((MOTOR_CMD_ID >> 8) & 0xFF);
 8005998:	2304      	movs	r3, #4
 800599a:	727b      	strb	r3, [r7, #9]
                        motorCmdFrame[2] = MOTOR_DIR_STOP;
 800599c:	2300      	movs	r3, #0
 800599e:	72bb      	strb	r3, [r7, #10]
                        motorCmdFrame[3] = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	72fb      	strb	r3, [r7, #11]
                        HAL_UART_Transmit_IT(&huart2, motorCmdFrame, 4);
 80059a4:	f107 0308 	add.w	r3, r7, #8
 80059a8:	2204      	movs	r2, #4
 80059aa:	4619      	mov	r1, r3
 80059ac:	481e      	ldr	r0, [pc, #120]	@ (8005a28 <StartUARTReceiveTask+0x164>)
 80059ae:	f7fe fee7 	bl	8004780 <HAL_UART_Transmit_IT>
                        WriteDTCListToFlash(DTC_ULTRASONIC_BLOCKED);
 80059b2:	f24f 2051 	movw	r0, #62033	@ 0xf251
 80059b6:	f7fb f983 	bl	8000cc0 <WriteDTCListToFlash>
                    break;
 80059ba:	e029      	b.n	8005a10 <StartUARTReceiveTask+0x14c>
                    else if (LatestDist == 0)
 80059bc:	4b18      	ldr	r3, [pc, #96]	@ (8005a20 <StartUARTReceiveTask+0x15c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f04f 0100 	mov.w	r1, #0
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fa fd15 	bl	80003f4 <__aeabi_fcmpeq>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d100      	bne.n	80059d2 <StartUARTReceiveTask+0x10e>
                    break;
 80059d0:	e01e      	b.n	8005a10 <StartUARTReceiveTask+0x14c>
                        WriteDTCListToFlash(DTC_ULTRASONIC_FAILURE);
 80059d2:	f24f 2050 	movw	r0, #62032	@ 0xf250
 80059d6:	f7fb f973 	bl	8000cc0 <WriteDTCListToFlash>
                    break;
 80059da:	e019      	b.n	8005a10 <StartUARTReceiveTask+0x14c>
                	SpeedValue = sensorValue;
 80059dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80059de:	847b      	strh	r3, [r7, #34]	@ 0x22
                    TXMsg.StdId = SPEED_ID;
 80059e0:	f240 4301 	movw	r3, #1025	@ 0x401
 80059e4:	60fb      	str	r3, [r7, #12]
                    TXMsg.DLC   = 2;
 80059e6:	2302      	movs	r3, #2
 80059e8:	743b      	strb	r3, [r7, #16]
                    TXMsg.Data[0] = (uint8_t)(SpeedValue & 0xFF);
 80059ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	747b      	strb	r3, [r7, #17]
                    TXMsg.Data[1] = (uint8_t)((SpeedValue >> 8) & 0xFF);
 80059f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80059f2:	0a1b      	lsrs	r3, r3, #8
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	74bb      	strb	r3, [r7, #18]
                    xQueueSend(xCanTxQueue, &TXMsg, portMAX_DELAY);
 80059fa:	4b0c      	ldr	r3, [pc, #48]	@ (8005a2c <StartUARTReceiveTask+0x168>)
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	f107 010c 	add.w	r1, r7, #12
 8005a02:	2300      	movs	r3, #0
 8005a04:	f04f 32ff 	mov.w	r2, #4294967295
 8005a08:	f000 fa02 	bl	8005e10 <xQueueGenericSend>
                    break;
 8005a0c:	e000      	b.n	8005a10 <StartUARTReceiveTask+0x14c>
                    break;
 8005a0e:	bf00      	nop
        if (xQueueReceive(xUartQueue, Msg, portMAX_DELAY) == pdTRUE)
 8005a10:	e75e      	b.n	80058d0 <StartUARTReceiveTask+0xc>
 8005a12:	bf00      	nop
 8005a14:	20000154 	.word	0x20000154
 8005a18:	20000134 	.word	0x20000134
 8005a1c:	420c0000 	.word	0x420c0000
 8005a20:	20000138 	.word	0x20000138
 8005a24:	40a00000 	.word	0x40a00000
 8005a28:	20000070 	.word	0x20000070
 8005a2c:	2000012c 	.word	0x2000012c

08005a30 <InitUARTReceiveTask>:
/**
 * @brief  Initializes the UART receive queue and task.
 *         Must be called before vTaskStartScheduler().
 */
void InitUARTReceiveTask(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af02      	add	r7, sp, #8
    /** Create queue to hold up to 20 UART Rx messages **/
	xUartQueue = xQueueCreate(20, 4);
 8005a36:	2200      	movs	r2, #0
 8005a38:	2104      	movs	r1, #4
 8005a3a:	2014      	movs	r0, #20
 8005a3c:	f000 f976 	bl	8005d2c <xQueueGenericCreate>
 8005a40:	4603      	mov	r3, r0
 8005a42:	4a0a      	ldr	r2, [pc, #40]	@ (8005a6c <InitUARTReceiveTask+0x3c>)
 8005a44:	6013      	str	r3, [r2, #0]

    /** Activate UART RX interrupt notifications **/
    HAL_UART_Receive_IT(&huart2, RXMsg, 4);
 8005a46:	2204      	movs	r2, #4
 8005a48:	4909      	ldr	r1, [pc, #36]	@ (8005a70 <InitUARTReceiveTask+0x40>)
 8005a4a:	480a      	ldr	r0, [pc, #40]	@ (8005a74 <InitUARTReceiveTask+0x44>)
 8005a4c:	f7fe fecd 	bl	80047ea <HAL_UART_Receive_IT>

    /** Create the CAN receive task at high priority **/
    xTaskCreate(
 8005a50:	2300      	movs	r3, #0
 8005a52:	9301      	str	r3, [sp, #4]
 8005a54:	2303      	movs	r3, #3
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2280      	movs	r2, #128	@ 0x80
 8005a5c:	4906      	ldr	r1, [pc, #24]	@ (8005a78 <InitUARTReceiveTask+0x48>)
 8005a5e:	4807      	ldr	r0, [pc, #28]	@ (8005a7c <InitUARTReceiveTask+0x4c>)
 8005a60:	f000 fe02 	bl	8006668 <xTaskCreate>
        128,                        /** Stack size in words **/
        NULL,                       /** No parameters **/
        tskIDLE_PRIORITY + 3,       /** High priority **/
        NULL                        /** No task handle required **/
    );
}
 8005a64:	bf00      	nop
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000154 	.word	0x20000154
 8005a70:	20000158 	.word	0x20000158
 8005a74:	20000070 	.word	0x20000070
 8005a78:	08008458 	.word	0x08008458
 8005a7c:	080058c5 	.word	0x080058c5

08005a80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a12      	ldr	r2, [pc, #72]	@ (8005ad8 <HAL_UART_RxCpltCallback+0x58>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d11d      	bne.n	8005ace <HAL_UART_RxCpltCallback+0x4e>
    {
        BaseType_t xWoken = pdFALSE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]

        /** Enqueue for deferred processing in task context **/
        xQueueSendFromISR(xUartQueue, RXMsg, &xWoken);
 8005a96:	4b11      	ldr	r3, [pc, #68]	@ (8005adc <HAL_UART_RxCpltCallback+0x5c>)
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	f107 020c 	add.w	r2, r7, #12
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	490f      	ldr	r1, [pc, #60]	@ (8005ae0 <HAL_UART_RxCpltCallback+0x60>)
 8005aa2:	f000 fab7 	bl	8006014 <xQueueGenericSendFromISR>

        /* Restart UART receive interrupt */
        HAL_UART_Receive_IT(&huart2, RXMsg, 4);
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	490d      	ldr	r1, [pc, #52]	@ (8005ae0 <HAL_UART_RxCpltCallback+0x60>)
 8005aaa:	480e      	ldr	r0, [pc, #56]	@ (8005ae4 <HAL_UART_RxCpltCallback+0x64>)
 8005aac:	f7fe fe9d 	bl	80047ea <HAL_UART_Receive_IT>
        //HAL_Delay(500);
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8005ab0:	2120      	movs	r1, #32
 8005ab2:	480d      	ldr	r0, [pc, #52]	@ (8005ae8 <HAL_UART_RxCpltCallback+0x68>)
 8005ab4:	f7fd f85c 	bl	8002b70 <HAL_GPIO_TogglePin>

        portYIELD_FROM_ISR(xWoken);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d007      	beq.n	8005ace <HAL_UART_RxCpltCallback+0x4e>
 8005abe:	4b0b      	ldr	r3, [pc, #44]	@ (8005aec <HAL_UART_RxCpltCallback+0x6c>)
 8005ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	f3bf 8f6f 	isb	sy
    }
}
 8005ace:	bf00      	nop
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40004400 	.word	0x40004400
 8005adc:	20000154 	.word	0x20000154
 8005ae0:	20000158 	.word	0x20000158
 8005ae4:	20000070 	.word	0x20000070
 8005ae8:	40010c00 	.word	0x40010c00
 8005aec:	e000ed04 	.word	0xe000ed04

08005af0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f103 0208 	add.w	r2, r3, #8
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f04f 32ff 	mov.w	r2, #4294967295
 8005b08:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f103 0208 	add.w	r2, r3, #8
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f103 0208 	add.w	r2, r3, #8
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bc80      	pop	{r7}
 8005b2c:	4770      	bx	lr

08005b2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005b46:	b480      	push	{r7}
 8005b48:	b085      	sub	sp, #20
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5c:	d103      	bne.n	8005b66 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e00c      	b.n	8005b80 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	e002      	b.n	8005b74 <vListInsert+0x2e>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d2f6      	bcs.n	8005b6e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	601a      	str	r2, [r3, #0]
}
 8005bac:	bf00      	nop
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr

08005bb6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6892      	ldr	r2, [r2, #8]
 8005bcc:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6852      	ldr	r2, [r2, #4]
 8005bd6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d103      	bne.n	8005bea <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	1e5a      	subs	r2, r3, #1
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr

08005c08 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005c12:	2301      	movs	r3, #1
 8005c14:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8005c32:	bf00      	nop
 8005c34:	bf00      	nop
 8005c36:	e7fd      	b.n	8005c34 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d05d      	beq.n	8005cfa <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d059      	beq.n	8005cfa <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4e:	2100      	movs	r1, #0
 8005c50:	fba3 2302 	umull	r2, r3, r3, r2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d000      	beq.n	8005c5a <xQueueGenericReset+0x52>
 8005c58:	2101      	movs	r1, #1
 8005c5a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d14c      	bne.n	8005cfa <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8005c60:	f002 f8c6 	bl	8007df0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6c:	6939      	ldr	r1, [r7, #16]
 8005c6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c70:	fb01 f303 	mul.w	r3, r1, r3
 8005c74:	441a      	add	r2, r3
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c90:	3b01      	subs	r3, #1
 8005c92:	6939      	ldr	r1, [r7, #16]
 8005c94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c96:	fb01 f303 	mul.w	r3, r1, r3
 8005c9a:	441a      	add	r2, r3
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	22ff      	movs	r2, #255	@ 0xff
 8005ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	22ff      	movs	r2, #255	@ 0xff
 8005cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d114      	bne.n	8005ce0 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d01a      	beq.n	8005cf4 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	3310      	adds	r3, #16
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 f9c6 	bl	8007054 <xTaskRemoveFromEventList>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d012      	beq.n	8005cf4 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005cce:	4b16      	ldr	r3, [pc, #88]	@ (8005d28 <xQueueGenericReset+0x120>)
 8005cd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	e009      	b.n	8005cf4 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	3310      	adds	r3, #16
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff ff03 	bl	8005af0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	3324      	adds	r3, #36	@ 0x24
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fefe 	bl	8005af0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005cf4:	f002 f8ac 	bl	8007e50 <vPortExitCritical>
 8005cf8:	e001      	b.n	8005cfe <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10b      	bne.n	8005d1c <xQueueGenericReset+0x114>
        __asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	60bb      	str	r3, [r7, #8]
    }
 8005d16:	bf00      	nop
 8005d18:	bf00      	nop
 8005d1a:	e7fd      	b.n	8005d18 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005d1c:	697b      	ldr	r3, [r7, #20]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	e000ed04 	.word	0xe000ed04

08005d2c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08a      	sub	sp, #40	@ 0x28
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	4613      	mov	r3, r2
 8005d38:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d02e      	beq.n	8005da2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005d44:	2100      	movs	r1, #0
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d000      	beq.n	8005d54 <xQueueGenericCreate+0x28>
 8005d52:	2101      	movs	r1, #1
 8005d54:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d123      	bne.n	8005da2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005d62:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8005d66:	d81c      	bhi.n	8005da2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	fb02 f303 	mul.w	r3, r2, r3
 8005d70:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	3350      	adds	r3, #80	@ 0x50
 8005d76:	4618      	mov	r0, r3
 8005d78:	f002 f942 	bl	8008000 <pvPortMalloc>
 8005d7c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01d      	beq.n	8005dc0 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	3350      	adds	r3, #80	@ 0x50
 8005d8c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d8e:	79fa      	ldrb	r2, [r7, #7]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	4613      	mov	r3, r2
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 f815 	bl	8005dca <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005da0:	e00e      	b.n	8005dc0 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10b      	bne.n	8005dc0 <xQueueGenericCreate+0x94>
        __asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	613b      	str	r3, [r7, #16]
    }
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
 8005dbe:	e7fd      	b.n	8005dbc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005dc0:	69fb      	ldr	r3, [r7, #28]
    }
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3720      	adds	r7, #32
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
 8005dd6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d103      	bne.n	8005de6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	e002      	b.n	8005dec <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005df8:	2101      	movs	r1, #1
 8005dfa:	69b8      	ldr	r0, [r7, #24]
 8005dfc:	f7ff ff04 	bl	8005c08 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	78fa      	ldrb	r2, [r7, #3]
 8005e04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005e08:	bf00      	nop
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08e      	sub	sp, #56	@ 0x38
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8005e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10b      	bne.n	8005e44 <xQueueGenericSend+0x34>
        __asm volatile
 8005e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005e3e:	bf00      	nop
 8005e40:	bf00      	nop
 8005e42:	e7fd      	b.n	8005e40 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <xQueueGenericSend+0x42>
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <xQueueGenericSend+0x46>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <xQueueGenericSend+0x48>
 8005e56:	2300      	movs	r3, #0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10b      	bne.n	8005e74 <xQueueGenericSend+0x64>
        __asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	e7fd      	b.n	8005e70 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d103      	bne.n	8005e82 <xQueueGenericSend+0x72>
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <xQueueGenericSend+0x76>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <xQueueGenericSend+0x78>
 8005e86:	2300      	movs	r3, #0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10b      	bne.n	8005ea4 <xQueueGenericSend+0x94>
        __asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	623b      	str	r3, [r7, #32]
    }
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	e7fd      	b.n	8005ea0 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ea4:	f001 fae6 	bl	8007474 <xTaskGetSchedulerState>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <xQueueGenericSend+0xa4>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <xQueueGenericSend+0xa8>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <xQueueGenericSend+0xaa>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10b      	bne.n	8005ed6 <xQueueGenericSend+0xc6>
        __asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	61fb      	str	r3, [r7, #28]
    }
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	e7fd      	b.n	8005ed2 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005ed6:	f001 ff8b 	bl	8007df0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d302      	bcc.n	8005eec <xQueueGenericSend+0xdc>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d129      	bne.n	8005f40 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ef2:	f000 fa27 	bl	8006344 <prvCopyDataToQueue>
 8005ef6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d010      	beq.n	8005f22 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f02:	3324      	adds	r3, #36	@ 0x24
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 f8a5 	bl	8007054 <xTaskRemoveFromEventList>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d013      	beq.n	8005f38 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005f10:	4b3f      	ldr	r3, [pc, #252]	@ (8006010 <xQueueGenericSend+0x200>)
 8005f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	e00a      	b.n	8005f38 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8005f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d007      	beq.n	8005f38 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8005f28:	4b39      	ldr	r3, [pc, #228]	@ (8006010 <xQueueGenericSend+0x200>)
 8005f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005f38:	f001 ff8a 	bl	8007e50 <vPortExitCritical>
                return pdPASS;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e063      	b.n	8006008 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005f46:	f001 ff83 	bl	8007e50 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e05c      	b.n	8006008 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d106      	bne.n	8005f62 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005f54:	f107 0314 	add.w	r3, r7, #20
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f001 f951 	bl	8007200 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005f62:	f001 ff75 	bl	8007e50 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005f66:	f000 fd73 	bl	8006a50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005f6a:	f001 ff41 	bl	8007df0 <vPortEnterCritical>
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f74:	b25b      	sxtb	r3, r3
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d103      	bne.n	8005f84 <xQueueGenericSend+0x174>
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f8a:	b25b      	sxtb	r3, r3
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d103      	bne.n	8005f9a <xQueueGenericSend+0x18a>
 8005f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f9a:	f001 ff59 	bl	8007e50 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f9e:	1d3a      	adds	r2, r7, #4
 8005fa0:	f107 0314 	add.w	r3, r7, #20
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f001 f940 	bl	800722c <xTaskCheckForTimeOut>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d124      	bne.n	8005ffc <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005fb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fb4:	f000 fabe 	bl	8006534 <prvIsQueueFull>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d018      	beq.n	8005ff0 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc0:	3310      	adds	r3, #16
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 ffd8 	bl	8006f7c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005fcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fce:	f000 fa49 	bl	8006464 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005fd2:	f000 fd4b 	bl	8006a6c <xTaskResumeAll>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f47f af7c 	bne.w	8005ed6 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8005fde:	4b0c      	ldr	r3, [pc, #48]	@ (8006010 <xQueueGenericSend+0x200>)
 8005fe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	e772      	b.n	8005ed6 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005ff0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ff2:	f000 fa37 	bl	8006464 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005ff6:	f000 fd39 	bl	8006a6c <xTaskResumeAll>
 8005ffa:	e76c      	b.n	8005ed6 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005ffc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ffe:	f000 fa31 	bl	8006464 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006002:	f000 fd33 	bl	8006a6c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8006006:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006008:	4618      	mov	r0, r3
 800600a:	3738      	adds	r7, #56	@ 0x38
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	e000ed04 	.word	0xe000ed04

08006014 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b092      	sub	sp, #72	@ 0x48
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 8006026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10b      	bne.n	8006044 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 800603e:	bf00      	nop
 8006040:	bf00      	nop
 8006042:	e7fd      	b.n	8006040 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d103      	bne.n	8006052 <xQueueGenericSendFromISR+0x3e>
 800604a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <xQueueGenericSendFromISR+0x42>
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <xQueueGenericSendFromISR+0x44>
 8006056:	2300      	movs	r3, #0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d103      	bne.n	8006082 <xQueueGenericSendFromISR+0x6e>
 800607a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800607c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <xQueueGenericSendFromISR+0x72>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <xQueueGenericSendFromISR+0x74>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10b      	bne.n	80060a4 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
 80060a2:	e7fd      	b.n	80060a0 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060a4:	f001 ff6c 	bl	8007f80 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80060a8:	f3ef 8211 	mrs	r2, BASEPRI
 80060ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	623a      	str	r2, [r7, #32]
 80060be:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80060c0:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d302      	bcc.n	80060d6 <xQueueGenericSendFromISR+0xc2>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d147      	bne.n	8006166 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80060d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060dc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e4:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80060ec:	f000 f92a 	bl	8006344 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80060f0:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d112      	bne.n	8006120 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d02e      	beq.n	8006160 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006104:	3324      	adds	r3, #36	@ 0x24
 8006106:	4618      	mov	r0, r3
 8006108:	f000 ffa4 	bl	8007054 <xTaskRemoveFromEventList>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d026      	beq.n	8006160 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d023      	beq.n	8006160 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e01f      	b.n	8006160 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8006120:	f000 fdae 	bl	8006c80 <uxTaskGetNumberOfTasks>
 8006124:	6338      	str	r0, [r7, #48]	@ 0x30
 8006126:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800612a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800612c:	429a      	cmp	r2, r3
 800612e:	d917      	bls.n	8006160 <xQueueGenericSendFromISR+0x14c>
 8006130:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8006134:	2b7f      	cmp	r3, #127	@ 0x7f
 8006136:	d10b      	bne.n	8006150 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	61bb      	str	r3, [r7, #24]
    }
 800614a:	bf00      	nop
 800614c:	bf00      	nop
 800614e:	e7fd      	b.n	800614c <xQueueGenericSendFromISR+0x138>
 8006150:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006154:	3301      	adds	r3, #1
 8006156:	b2db      	uxtb	r3, r3
 8006158:	b25a      	sxtb	r2, r3
 800615a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800615c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8006160:	2301      	movs	r3, #1
 8006162:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8006164:	e001      	b.n	800616a <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006166:	2300      	movs	r3, #0
 8006168:	647b      	str	r3, [r7, #68]	@ 0x44
 800616a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800616c:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006174:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8006178:	4618      	mov	r0, r3
 800617a:	3748      	adds	r7, #72	@ 0x48
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08c      	sub	sp, #48	@ 0x30
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800618c:	2300      	movs	r3, #0
 800618e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <xQueueReceive+0x32>
        __asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	623b      	str	r3, [r7, #32]
    }
 80061ac:	bf00      	nop
 80061ae:	bf00      	nop
 80061b0:	e7fd      	b.n	80061ae <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d103      	bne.n	80061c0 <xQueueReceive+0x40>
 80061b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <xQueueReceive+0x44>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <xQueueReceive+0x46>
 80061c4:	2300      	movs	r3, #0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10b      	bne.n	80061e2 <xQueueReceive+0x62>
        __asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	61fb      	str	r3, [r7, #28]
    }
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	e7fd      	b.n	80061de <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061e2:	f001 f947 	bl	8007474 <xTaskGetSchedulerState>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d102      	bne.n	80061f2 <xQueueReceive+0x72>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <xQueueReceive+0x76>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <xQueueReceive+0x78>
 80061f6:	2300      	movs	r3, #0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10b      	bne.n	8006214 <xQueueReceive+0x94>
        __asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	61bb      	str	r3, [r7, #24]
    }
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006214:	f001 fdec 	bl	8007df0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01f      	beq.n	8006264 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006228:	f000 f8f6 	bl	8006418 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	1e5a      	subs	r2, r3, #1
 8006230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006232:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00f      	beq.n	800625c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800623c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623e:	3310      	adds	r3, #16
 8006240:	4618      	mov	r0, r3
 8006242:	f000 ff07 	bl	8007054 <xTaskRemoveFromEventList>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d007      	beq.n	800625c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800624c:	4b3c      	ldr	r3, [pc, #240]	@ (8006340 <xQueueReceive+0x1c0>)
 800624e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800625c:	f001 fdf8 	bl	8007e50 <vPortExitCritical>
                return pdPASS;
 8006260:	2301      	movs	r3, #1
 8006262:	e069      	b.n	8006338 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d103      	bne.n	8006272 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800626a:	f001 fdf1 	bl	8007e50 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800626e:	2300      	movs	r3, #0
 8006270:	e062      	b.n	8006338 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006278:	f107 0310 	add.w	r3, r7, #16
 800627c:	4618      	mov	r0, r3
 800627e:	f000 ffbf 	bl	8007200 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006282:	2301      	movs	r3, #1
 8006284:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006286:	f001 fde3 	bl	8007e50 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800628a:	f000 fbe1 	bl	8006a50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800628e:	f001 fdaf 	bl	8007df0 <vPortEnterCritical>
 8006292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006294:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006298:	b25b      	sxtb	r3, r3
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629e:	d103      	bne.n	80062a8 <xQueueReceive+0x128>
 80062a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062ae:	b25b      	sxtb	r3, r3
 80062b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b4:	d103      	bne.n	80062be <xQueueReceive+0x13e>
 80062b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062be:	f001 fdc7 	bl	8007e50 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062c2:	1d3a      	adds	r2, r7, #4
 80062c4:	f107 0310 	add.w	r3, r7, #16
 80062c8:	4611      	mov	r1, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 ffae 	bl	800722c <xTaskCheckForTimeOut>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d123      	bne.n	800631e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062d8:	f000 f916 	bl	8006508 <prvIsQueueEmpty>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d017      	beq.n	8006312 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e4:	3324      	adds	r3, #36	@ 0x24
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	4611      	mov	r1, r2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fe46 	bl	8006f7c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80062f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062f2:	f000 f8b7 	bl	8006464 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80062f6:	f000 fbb9 	bl	8006a6c <xTaskResumeAll>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d189      	bne.n	8006214 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8006300:	4b0f      	ldr	r3, [pc, #60]	@ (8006340 <xQueueReceive+0x1c0>)
 8006302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	e780      	b.n	8006214 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006314:	f000 f8a6 	bl	8006464 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006318:	f000 fba8 	bl	8006a6c <xTaskResumeAll>
 800631c:	e77a      	b.n	8006214 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800631e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006320:	f000 f8a0 	bl	8006464 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006324:	f000 fba2 	bl	8006a6c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800632a:	f000 f8ed 	bl	8006508 <prvIsQueueEmpty>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	f43f af6f 	beq.w	8006214 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006336:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006338:	4618      	mov	r0, r3
 800633a:	3730      	adds	r7, #48	@ 0x30
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	e000ed04 	.word	0xe000ed04

08006344 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006358:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10d      	bne.n	800637e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d14d      	bne.n	8006406 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	4618      	mov	r0, r3
 8006370:	f001 f89e 	bl	80074b0 <xTaskPriorityDisinherit>
 8006374:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	609a      	str	r2, [r3, #8]
 800637c:	e043      	b.n	8006406 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d119      	bne.n	80063b8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6858      	ldr	r0, [r3, #4]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638c:	461a      	mov	r2, r3
 800638e:	68b9      	ldr	r1, [r7, #8]
 8006390:	f002 f830 	bl	80083f4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639c:	441a      	add	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d32b      	bcc.n	8006406 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	605a      	str	r2, [r3, #4]
 80063b6:	e026      	b.n	8006406 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	68d8      	ldr	r0, [r3, #12]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c0:	461a      	mov	r2, r3
 80063c2:	68b9      	ldr	r1, [r7, #8]
 80063c4:	f002 f816 	bl	80083f4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d0:	425b      	negs	r3, r3
 80063d2:	441a      	add	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d207      	bcs.n	80063f4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ec:	425b      	negs	r3, r3
 80063ee:	441a      	add	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d105      	bne.n	8006406 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	3b01      	subs	r3, #1
 8006404:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800640e:	697b      	ldr	r3, [r7, #20]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	d018      	beq.n	800645c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	441a      	add	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	429a      	cmp	r2, r3
 8006442:	d303      	bcc.n	800644c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68d9      	ldr	r1, [r3, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006454:	461a      	mov	r2, r3
 8006456:	6838      	ldr	r0, [r7, #0]
 8006458:	f001 ffcc 	bl	80083f4 <memcpy>
    }
}
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800646c:	f001 fcc0 	bl	8007df0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006476:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006478:	e011      	b.n	800649e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647e:	2b00      	cmp	r3, #0
 8006480:	d012      	beq.n	80064a8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3324      	adds	r3, #36	@ 0x24
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fde4 	bl	8007054 <xTaskRemoveFromEventList>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006492:	f000 ff33 	bl	80072fc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	3b01      	subs	r3, #1
 800649a:	b2db      	uxtb	r3, r3
 800649c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800649e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	dce9      	bgt.n	800647a <prvUnlockQueue+0x16>
 80064a6:	e000      	b.n	80064aa <prvUnlockQueue+0x46>
                    break;
 80064a8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	22ff      	movs	r2, #255	@ 0xff
 80064ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80064b2:	f001 fccd 	bl	8007e50 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80064b6:	f001 fc9b 	bl	8007df0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064c0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80064c2:	e011      	b.n	80064e8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d012      	beq.n	80064f2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3310      	adds	r3, #16
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 fdbf 	bl	8007054 <xTaskRemoveFromEventList>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80064dc:	f000 ff0e 	bl	80072fc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80064e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	dce9      	bgt.n	80064c4 <prvUnlockQueue+0x60>
 80064f0:	e000      	b.n	80064f4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80064f2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	22ff      	movs	r2, #255	@ 0xff
 80064f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80064fc:	f001 fca8 	bl	8007e50 <vPortExitCritical>
}
 8006500:	bf00      	nop
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006510:	f001 fc6e 	bl	8007df0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006518:	2b00      	cmp	r3, #0
 800651a:	d102      	bne.n	8006522 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800651c:	2301      	movs	r3, #1
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e001      	b.n	8006526 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006526:	f001 fc93 	bl	8007e50 <vPortExitCritical>

    return xReturn;
 800652a:	68fb      	ldr	r3, [r7, #12]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800653c:	f001 fc58 	bl	8007df0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006548:	429a      	cmp	r2, r3
 800654a:	d102      	bne.n	8006552 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800654c:	2301      	movs	r3, #1
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e001      	b.n	8006556 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006552:	2300      	movs	r3, #0
 8006554:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006556:	f001 fc7b 	bl	8007e50 <vPortExitCritical>

    return xReturn;
 800655a:	68fb      	ldr	r3, [r7, #12]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800656e:	2300      	movs	r3, #0
 8006570:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10b      	bne.n	8006590 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	60fb      	str	r3, [r7, #12]
    }
 800658a:	bf00      	nop
 800658c:	bf00      	nop
 800658e:	e7fd      	b.n	800658c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d024      	beq.n	80065e0 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006596:	2300      	movs	r3, #0
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	e01e      	b.n	80065da <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800659c:	4a17      	ldr	r2, [pc, #92]	@ (80065fc <vQueueAddToRegistry+0x98>)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	4413      	add	r3, r2
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d105      	bne.n	80065b8 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	4a12      	ldr	r2, [pc, #72]	@ (80065fc <vQueueAddToRegistry+0x98>)
 80065b2:	4413      	add	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
                    break;
 80065b6:	e013      	b.n	80065e0 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10a      	bne.n	80065d4 <vQueueAddToRegistry+0x70>
 80065be:	4a0f      	ldr	r2, [pc, #60]	@ (80065fc <vQueueAddToRegistry+0x98>)
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	4a0b      	ldr	r2, [pc, #44]	@ (80065fc <vQueueAddToRegistry+0x98>)
 80065d0:	4413      	add	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	3301      	adds	r3, #1
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d9dd      	bls.n	800659c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80065f2:	bf00      	nop
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr
 80065fc:	2000015c 	.word	0x2000015c

08006600 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006610:	f001 fbee 	bl	8007df0 <vPortEnterCritical>
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800661a:	b25b      	sxtb	r3, r3
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d103      	bne.n	800662a <vQueueWaitForMessageRestricted+0x2a>
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006630:	b25b      	sxtb	r3, r3
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d103      	bne.n	8006640 <vQueueWaitForMessageRestricted+0x40>
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006640:	f001 fc06 	bl	8007e50 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	3324      	adds	r3, #36	@ 0x24
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fcb7 	bl	8006fc8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800665a:	6978      	ldr	r0, [r7, #20]
 800665c:	f7ff ff02 	bl	8006464 <prvUnlockQueue>
    }
 8006660:	bf00      	nop
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006668:	b580      	push	{r7, lr}
 800666a:	b08c      	sub	sp, #48	@ 0x30
 800666c:	af04      	add	r7, sp, #16
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	4613      	mov	r3, r2
 8006676:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006678:	88fb      	ldrh	r3, [r7, #6]
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4618      	mov	r0, r3
 800667e:	f001 fcbf 	bl	8008000 <pvPortMalloc>
 8006682:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d013      	beq.n	80066b2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800668a:	2058      	movs	r0, #88	@ 0x58
 800668c:	f001 fcb8 	bl	8008000 <pvPortMalloc>
 8006690:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d008      	beq.n	80066aa <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8006698:	2258      	movs	r2, #88	@ 0x58
 800669a:	2100      	movs	r1, #0
 800669c:	69f8      	ldr	r0, [r7, #28]
 800669e:	f001 fe7d 	bl	800839c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80066a8:	e005      	b.n	80066b6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80066aa:	6978      	ldr	r0, [r7, #20]
 80066ac:	f001 fd64 	bl	8008178 <vPortFree>
 80066b0:	e001      	b.n	80066b6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d013      	beq.n	80066e4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066bc:	88fa      	ldrh	r2, [r7, #6]
 80066be:	2300      	movs	r3, #0
 80066c0:	9303      	str	r3, [sp, #12]
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	9302      	str	r3, [sp, #8]
 80066c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 f80e 	bl	80066f4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80066d8:	69f8      	ldr	r0, [r7, #28]
 80066da:	f000 f89b 	bl	8006814 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80066de:	2301      	movs	r3, #1
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	e002      	b.n	80066ea <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066e4:	f04f 33ff 	mov.w	r3, #4294967295
 80066e8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80066ea:	69bb      	ldr	r3, [r7, #24]
    }
 80066ec:	4618      	mov	r0, r3
 80066ee:	3720      	adds	r7, #32
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	461a      	mov	r2, r3
 800670c:	21a5      	movs	r1, #165	@ 0xa5
 800670e:	f001 fe45 	bl	800839c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800671c:	3b01      	subs	r3, #1
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	f023 0307 	bic.w	r3, r3, #7
 800672a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00b      	beq.n	800674e <prvInitialiseNewTask+0x5a>
        __asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	617b      	str	r3, [r7, #20]
    }
 8006748:	bf00      	nop
 800674a:	bf00      	nop
 800674c:	e7fd      	b.n	800674a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01e      	beq.n	8006792 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006754:	2300      	movs	r3, #0
 8006756:	61fb      	str	r3, [r7, #28]
 8006758:	e012      	b.n	8006780 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	4413      	add	r3, r2
 8006760:	7819      	ldrb	r1, [r3, #0]
 8006762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	4413      	add	r3, r2
 8006768:	3334      	adds	r3, #52	@ 0x34
 800676a:	460a      	mov	r2, r1
 800676c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	4413      	add	r3, r2
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d006      	beq.n	8006788 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	3301      	adds	r3, #1
 800677e:	61fb      	str	r3, [r7, #28]
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	2b09      	cmp	r3, #9
 8006784:	d9e9      	bls.n	800675a <prvInitialiseNewTask+0x66>
 8006786:	e000      	b.n	800678a <prvInitialiseNewTask+0x96>
            {
                break;
 8006788:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	2200      	movs	r2, #0
 800678e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8006792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006794:	2b05      	cmp	r3, #5
 8006796:	d90b      	bls.n	80067b0 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	613b      	str	r3, [r7, #16]
    }
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
 80067ae:	e7fd      	b.n	80067ac <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	2b05      	cmp	r3, #5
 80067b4:	d901      	bls.n	80067ba <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067b6:	2305      	movs	r3, #5
 80067b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80067ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067be:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067c4:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	3304      	adds	r3, #4
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff f9af 	bl	8005b2e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d2:	3318      	adds	r3, #24
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff f9aa 	bl	8005b2e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067de:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e2:	f1c3 0206 	rsb	r2, r3, #6
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067ee:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	68f9      	ldr	r1, [r7, #12]
 80067f4:	69b8      	ldr	r0, [r7, #24]
 80067f6:	f001 fa09 	bl	8007c0c <pxPortInitialiseStack>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fe:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800680a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800680c:	bf00      	nop
 800680e:	3720      	adds	r7, #32
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800681c:	f001 fae8 	bl	8007df0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006820:	4b40      	ldr	r3, [pc, #256]	@ (8006924 <prvAddNewTaskToReadyList+0x110>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3301      	adds	r3, #1
 8006826:	4a3f      	ldr	r2, [pc, #252]	@ (8006924 <prvAddNewTaskToReadyList+0x110>)
 8006828:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800682a:	4b3f      	ldr	r3, [pc, #252]	@ (8006928 <prvAddNewTaskToReadyList+0x114>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006832:	4a3d      	ldr	r2, [pc, #244]	@ (8006928 <prvAddNewTaskToReadyList+0x114>)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006838:	4b3a      	ldr	r3, [pc, #232]	@ (8006924 <prvAddNewTaskToReadyList+0x110>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d110      	bne.n	8006862 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006840:	f000 fd80 	bl	8007344 <prvInitialiseTaskLists>
 8006844:	e00d      	b.n	8006862 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006846:	4b39      	ldr	r3, [pc, #228]	@ (800692c <prvAddNewTaskToReadyList+0x118>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d109      	bne.n	8006862 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800684e:	4b36      	ldr	r3, [pc, #216]	@ (8006928 <prvAddNewTaskToReadyList+0x114>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006858:	429a      	cmp	r2, r3
 800685a:	d802      	bhi.n	8006862 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800685c:	4a32      	ldr	r2, [pc, #200]	@ (8006928 <prvAddNewTaskToReadyList+0x114>)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006862:	4b33      	ldr	r3, [pc, #204]	@ (8006930 <prvAddNewTaskToReadyList+0x11c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3301      	adds	r3, #1
 8006868:	4a31      	ldr	r2, [pc, #196]	@ (8006930 <prvAddNewTaskToReadyList+0x11c>)
 800686a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800686c:	4b30      	ldr	r3, [pc, #192]	@ (8006930 <prvAddNewTaskToReadyList+0x11c>)
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006878:	2201      	movs	r2, #1
 800687a:	409a      	lsls	r2, r3
 800687c:	4b2d      	ldr	r3, [pc, #180]	@ (8006934 <prvAddNewTaskToReadyList+0x120>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4313      	orrs	r3, r2
 8006882:	4a2c      	ldr	r2, [pc, #176]	@ (8006934 <prvAddNewTaskToReadyList+0x120>)
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800688a:	492b      	ldr	r1, [pc, #172]	@ (8006938 <prvAddNewTaskToReadyList+0x124>)
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	440b      	add	r3, r1
 8006896:	3304      	adds	r3, #4
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	609a      	str	r2, [r3, #8]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	60da      	str	r2, [r3, #12]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	3204      	adds	r2, #4
 80068b2:	605a      	str	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	1d1a      	adds	r2, r3, #4
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	609a      	str	r2, [r3, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006938 <prvAddNewTaskToReadyList+0x124>)
 80068ca:	441a      	add	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	615a      	str	r2, [r3, #20]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d4:	4918      	ldr	r1, [pc, #96]	@ (8006938 <prvAddNewTaskToReadyList+0x124>)
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	440b      	add	r3, r1
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	1c59      	adds	r1, r3, #1
 80068e4:	4814      	ldr	r0, [pc, #80]	@ (8006938 <prvAddNewTaskToReadyList+0x124>)
 80068e6:	4613      	mov	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4403      	add	r3, r0
 80068f0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80068f2:	f001 faad 	bl	8007e50 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80068f6:	4b0d      	ldr	r3, [pc, #52]	@ (800692c <prvAddNewTaskToReadyList+0x118>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00e      	beq.n	800691c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006928 <prvAddNewTaskToReadyList+0x114>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	429a      	cmp	r2, r3
 800690a:	d207      	bcs.n	800691c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800690c:	4b0b      	ldr	r3, [pc, #44]	@ (800693c <prvAddNewTaskToReadyList+0x128>)
 800690e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800691c:	bf00      	nop
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20000268 	.word	0x20000268
 8006928:	2000017c 	.word	0x2000017c
 800692c:	20000274 	.word	0x20000274
 8006930:	20000284 	.word	0x20000284
 8006934:	20000270 	.word	0x20000270
 8006938:	20000180 	.word	0x20000180
 800693c:	e000ed04 	.word	0xe000ed04

08006940 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d018      	beq.n	8006984 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8006952:	4b14      	ldr	r3, [pc, #80]	@ (80069a4 <vTaskDelay+0x64>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00b      	beq.n	8006972 <vTaskDelay+0x32>
        __asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	60bb      	str	r3, [r7, #8]
    }
 800696c:	bf00      	nop
 800696e:	bf00      	nop
 8006970:	e7fd      	b.n	800696e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8006972:	f000 f86d 	bl	8006a50 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006976:	2100      	movs	r1, #0
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fe3f 	bl	80075fc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800697e:	f000 f875 	bl	8006a6c <xTaskResumeAll>
 8006982:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d107      	bne.n	800699a <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 800698a:	4b07      	ldr	r3, [pc, #28]	@ (80069a8 <vTaskDelay+0x68>)
 800698c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000290 	.word	0x20000290
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80069b2:	4b20      	ldr	r3, [pc, #128]	@ (8006a34 <vTaskStartScheduler+0x88>)
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	2300      	movs	r3, #0
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	2300      	movs	r3, #0
 80069bc:	2264      	movs	r2, #100	@ 0x64
 80069be:	491e      	ldr	r1, [pc, #120]	@ (8006a38 <vTaskStartScheduler+0x8c>)
 80069c0:	481e      	ldr	r0, [pc, #120]	@ (8006a3c <vTaskStartScheduler+0x90>)
 80069c2:	f7ff fe51 	bl	8006668 <xTaskCreate>
 80069c6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d102      	bne.n	80069d4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80069ce:	f000 fe95 	bl	80076fc <xTimerCreateTimerTask>
 80069d2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d116      	bne.n	8006a08 <vTaskStartScheduler+0x5c>
        __asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	60bb      	str	r3, [r7, #8]
    }
 80069ec:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80069ee:	4b14      	ldr	r3, [pc, #80]	@ (8006a40 <vTaskStartScheduler+0x94>)
 80069f0:	f04f 32ff 	mov.w	r2, #4294967295
 80069f4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80069f6:	4b13      	ldr	r3, [pc, #76]	@ (8006a44 <vTaskStartScheduler+0x98>)
 80069f8:	2201      	movs	r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069fc:	4b12      	ldr	r3, [pc, #72]	@ (8006a48 <vTaskStartScheduler+0x9c>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8006a02:	f001 f983 	bl	8007d0c <xPortStartScheduler>
 8006a06:	e00f      	b.n	8006a28 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0e:	d10b      	bne.n	8006a28 <vTaskStartScheduler+0x7c>
        __asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	607b      	str	r3, [r7, #4]
    }
 8006a22:	bf00      	nop
 8006a24:	bf00      	nop
 8006a26:	e7fd      	b.n	8006a24 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006a28:	4b08      	ldr	r3, [pc, #32]	@ (8006a4c <vTaskStartScheduler+0xa0>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
}
 8006a2c:	bf00      	nop
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	2000028c 	.word	0x2000028c
 8006a38:	08008464 	.word	0x08008464
 8006a3c:	08007315 	.word	0x08007315
 8006a40:	20000288 	.word	0x20000288
 8006a44:	20000274 	.word	0x20000274
 8006a48:	2000026c 	.word	0x2000026c
 8006a4c:	2000000c 	.word	0x2000000c

08006a50 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006a54:	4b04      	ldr	r3, [pc, #16]	@ (8006a68 <vTaskSuspendAll+0x18>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	4a03      	ldr	r2, [pc, #12]	@ (8006a68 <vTaskSuspendAll+0x18>)
 8006a5c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006a5e:	bf00      	nop
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bc80      	pop	{r7}
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	20000290 	.word	0x20000290

08006a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006a76:	2300      	movs	r3, #0
 8006a78:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006a7a:	4b71      	ldr	r3, [pc, #452]	@ (8006c40 <xTaskResumeAll+0x1d4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10b      	bne.n	8006a9a <xTaskResumeAll+0x2e>
        __asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	607b      	str	r3, [r7, #4]
    }
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006a9a:	f001 f9a9 	bl	8007df0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006a9e:	4b68      	ldr	r3, [pc, #416]	@ (8006c40 <xTaskResumeAll+0x1d4>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	4a66      	ldr	r2, [pc, #408]	@ (8006c40 <xTaskResumeAll+0x1d4>)
 8006aa6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aa8:	4b65      	ldr	r3, [pc, #404]	@ (8006c40 <xTaskResumeAll+0x1d4>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f040 80c0 	bne.w	8006c32 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ab2:	4b64      	ldr	r3, [pc, #400]	@ (8006c44 <xTaskResumeAll+0x1d8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 80bb 	beq.w	8006c32 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006abc:	e08a      	b.n	8006bd4 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006abe:	4b62      	ldr	r3, [pc, #392]	@ (8006c48 <xTaskResumeAll+0x1dc>)
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	6a12      	ldr	r2, [r2, #32]
 8006ad4:	609a      	str	r2, [r3, #8]
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	69fa      	ldr	r2, [r7, #28]
 8006adc:	69d2      	ldr	r2, [r2, #28]
 8006ade:	605a      	str	r2, [r3, #4]
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	3318      	adds	r3, #24
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d103      	bne.n	8006af4 <xTaskResumeAll+0x88>
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	6a1a      	ldr	r2, [r3, #32]
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	605a      	str	r2, [r3, #4]
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	2200      	movs	r2, #0
 8006af8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	1e5a      	subs	r2, r3, #1
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	68d2      	ldr	r2, [r2, #12]
 8006b12:	609a      	str	r2, [r3, #8]
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	6892      	ldr	r2, [r2, #8]
 8006b1c:	605a      	str	r2, [r3, #4]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	3304      	adds	r3, #4
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d103      	bne.n	8006b32 <xTaskResumeAll+0xc6>
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	605a      	str	r2, [r3, #4]
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	2200      	movs	r2, #0
 8006b36:	615a      	str	r2, [r3, #20]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	1e5a      	subs	r2, r3, #1
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b46:	2201      	movs	r2, #1
 8006b48:	409a      	lsls	r2, r3
 8006b4a:	4b40      	ldr	r3, [pc, #256]	@ (8006c4c <xTaskResumeAll+0x1e0>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	4a3e      	ldr	r2, [pc, #248]	@ (8006c4c <xTaskResumeAll+0x1e0>)
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b58:	493d      	ldr	r1, [pc, #244]	@ (8006c50 <xTaskResumeAll+0x1e4>)
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	440b      	add	r3, r1
 8006b64:	3304      	adds	r3, #4
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	60bb      	str	r3, [r7, #8]
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	609a      	str	r2, [r3, #8]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	60da      	str	r2, [r3, #12]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	69fa      	ldr	r2, [r7, #28]
 8006b7e:	3204      	adds	r2, #4
 8006b80:	605a      	str	r2, [r3, #4]
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	1d1a      	adds	r2, r3, #4
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	609a      	str	r2, [r3, #8]
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4a2e      	ldr	r2, [pc, #184]	@ (8006c50 <xTaskResumeAll+0x1e4>)
 8006b98:	441a      	add	r2, r3
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	615a      	str	r2, [r3, #20]
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba2:	492b      	ldr	r1, [pc, #172]	@ (8006c50 <xTaskResumeAll+0x1e4>)
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	1c59      	adds	r1, r3, #1
 8006bb2:	4827      	ldr	r0, [pc, #156]	@ (8006c50 <xTaskResumeAll+0x1e4>)
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4403      	add	r3, r0
 8006bbe:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc4:	4b23      	ldr	r3, [pc, #140]	@ (8006c54 <xTaskResumeAll+0x1e8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d302      	bcc.n	8006bd4 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8006bce:	4b22      	ldr	r3, [pc, #136]	@ (8006c58 <xTaskResumeAll+0x1ec>)
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c48 <xTaskResumeAll+0x1dc>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f47f af70 	bne.w	8006abe <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006be4:	f000 fc2c 	bl	8007440 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006be8:	4b1c      	ldr	r3, [pc, #112]	@ (8006c5c <xTaskResumeAll+0x1f0>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d010      	beq.n	8006c16 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006bf4:	f000 f84e 	bl	8006c94 <xTaskIncrementTick>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8006bfe:	4b16      	ldr	r3, [pc, #88]	@ (8006c58 <xTaskResumeAll+0x1ec>)
 8006c00:	2201      	movs	r2, #1
 8006c02:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1f1      	bne.n	8006bf4 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8006c10:	4b12      	ldr	r3, [pc, #72]	@ (8006c5c <xTaskResumeAll+0x1f0>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006c16:	4b10      	ldr	r3, [pc, #64]	@ (8006c58 <xTaskResumeAll+0x1ec>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d009      	beq.n	8006c32 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006c22:	4b0f      	ldr	r3, [pc, #60]	@ (8006c60 <xTaskResumeAll+0x1f4>)
 8006c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006c32:	f001 f90d 	bl	8007e50 <vPortExitCritical>

    return xAlreadyYielded;
 8006c36:	69bb      	ldr	r3, [r7, #24]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3720      	adds	r7, #32
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20000290 	.word	0x20000290
 8006c44:	20000268 	.word	0x20000268
 8006c48:	20000228 	.word	0x20000228
 8006c4c:	20000270 	.word	0x20000270
 8006c50:	20000180 	.word	0x20000180
 8006c54:	2000017c 	.word	0x2000017c
 8006c58:	2000027c 	.word	0x2000027c
 8006c5c:	20000278 	.word	0x20000278
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006c6a:	4b04      	ldr	r3, [pc, #16]	@ (8006c7c <xTaskGetTickCount+0x18>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006c70:	687b      	ldr	r3, [r7, #4]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bc80      	pop	{r7}
 8006c7a:	4770      	bx	lr
 8006c7c:	2000026c 	.word	0x2000026c

08006c80 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8006c84:	4b02      	ldr	r3, [pc, #8]	@ (8006c90 <uxTaskGetNumberOfTasks+0x10>)
 8006c86:	681b      	ldr	r3, [r3, #0]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr
 8006c90:	20000268 	.word	0x20000268

08006c94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08a      	sub	sp, #40	@ 0x28
 8006c98:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c9e:	4b7e      	ldr	r3, [pc, #504]	@ (8006e98 <xTaskIncrementTick+0x204>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f040 80ed 	bne.w	8006e82 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ca8:	4b7c      	ldr	r3, [pc, #496]	@ (8006e9c <xTaskIncrementTick+0x208>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3301      	adds	r3, #1
 8006cae:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006cb0:	4a7a      	ldr	r2, [pc, #488]	@ (8006e9c <xTaskIncrementTick+0x208>)
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d121      	bne.n	8006d00 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8006cbc:	4b78      	ldr	r3, [pc, #480]	@ (8006ea0 <xTaskIncrementTick+0x20c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00b      	beq.n	8006cde <xTaskIncrementTick+0x4a>
        __asm volatile
 8006cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	607b      	str	r3, [r7, #4]
    }
 8006cd8:	bf00      	nop
 8006cda:	bf00      	nop
 8006cdc:	e7fd      	b.n	8006cda <xTaskIncrementTick+0x46>
 8006cde:	4b70      	ldr	r3, [pc, #448]	@ (8006ea0 <xTaskIncrementTick+0x20c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	61fb      	str	r3, [r7, #28]
 8006ce4:	4b6f      	ldr	r3, [pc, #444]	@ (8006ea4 <xTaskIncrementTick+0x210>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a6d      	ldr	r2, [pc, #436]	@ (8006ea0 <xTaskIncrementTick+0x20c>)
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	4a6d      	ldr	r2, [pc, #436]	@ (8006ea4 <xTaskIncrementTick+0x210>)
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8006ea8 <xTaskIncrementTick+0x214>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	4a6b      	ldr	r2, [pc, #428]	@ (8006ea8 <xTaskIncrementTick+0x214>)
 8006cfa:	6013      	str	r3, [r2, #0]
 8006cfc:	f000 fba0 	bl	8007440 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006d00:	4b6a      	ldr	r3, [pc, #424]	@ (8006eac <xTaskIncrementTick+0x218>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6a3a      	ldr	r2, [r7, #32]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	f0c0 80a6 	bcc.w	8006e58 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d0c:	4b64      	ldr	r3, [pc, #400]	@ (8006ea0 <xTaskIncrementTick+0x20c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d104      	bne.n	8006d20 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d16:	4b65      	ldr	r3, [pc, #404]	@ (8006eac <xTaskIncrementTick+0x218>)
 8006d18:	f04f 32ff 	mov.w	r2, #4294967295
 8006d1c:	601a      	str	r2, [r3, #0]
                    break;
 8006d1e:	e09b      	b.n	8006e58 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d20:	4b5f      	ldr	r3, [pc, #380]	@ (8006ea0 <xTaskIncrementTick+0x20c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006d30:	6a3a      	ldr	r2, [r7, #32]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d203      	bcs.n	8006d40 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006d38:	4a5c      	ldr	r2, [pc, #368]	@ (8006eac <xTaskIncrementTick+0x218>)
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8006d3e:	e08b      	b.n	8006e58 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	68d2      	ldr	r2, [r2, #12]
 8006d4e:	609a      	str	r2, [r3, #8]
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	6892      	ldr	r2, [r2, #8]
 8006d58:	605a      	str	r2, [r3, #4]
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	3304      	adds	r3, #4
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d103      	bne.n	8006d6e <xTaskIncrementTick+0xda>
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	605a      	str	r2, [r3, #4]
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2200      	movs	r2, #0
 8006d72:	615a      	str	r2, [r3, #20]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	1e5a      	subs	r2, r3, #1
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d01e      	beq.n	8006dc4 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	6a12      	ldr	r2, [r2, #32]
 8006d94:	609a      	str	r2, [r3, #8]
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	69d2      	ldr	r2, [r2, #28]
 8006d9e:	605a      	str	r2, [r3, #4]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	3318      	adds	r3, #24
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d103      	bne.n	8006db4 <xTaskIncrementTick+0x120>
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	6a1a      	ldr	r2, [r3, #32]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	605a      	str	r2, [r3, #4]
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2200      	movs	r2, #0
 8006db8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	1e5a      	subs	r2, r3, #1
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc8:	2201      	movs	r2, #1
 8006dca:	409a      	lsls	r2, r3
 8006dcc:	4b38      	ldr	r3, [pc, #224]	@ (8006eb0 <xTaskIncrementTick+0x21c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	4a37      	ldr	r2, [pc, #220]	@ (8006eb0 <xTaskIncrementTick+0x21c>)
 8006dd4:	6013      	str	r3, [r2, #0]
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dda:	4936      	ldr	r1, [pc, #216]	@ (8006eb4 <xTaskIncrementTick+0x220>)
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	440b      	add	r3, r1
 8006de6:	3304      	adds	r3, #4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60bb      	str	r3, [r7, #8]
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	609a      	str	r2, [r3, #8]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	60da      	str	r2, [r3, #12]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	3204      	adds	r2, #4
 8006e02:	605a      	str	r2, [r3, #4]
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	1d1a      	adds	r2, r3, #4
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	609a      	str	r2, [r3, #8]
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4a26      	ldr	r2, [pc, #152]	@ (8006eb4 <xTaskIncrementTick+0x220>)
 8006e1a:	441a      	add	r2, r3
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	615a      	str	r2, [r3, #20]
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e24:	4923      	ldr	r1, [pc, #140]	@ (8006eb4 <xTaskIncrementTick+0x220>)
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	440b      	add	r3, r1
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	1c59      	adds	r1, r3, #1
 8006e34:	481f      	ldr	r0, [pc, #124]	@ (8006eb4 <xTaskIncrementTick+0x220>)
 8006e36:	4613      	mov	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4403      	add	r3, r0
 8006e40:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e46:	4b1c      	ldr	r3, [pc, #112]	@ (8006eb8 <xTaskIncrementTick+0x224>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	f67f af5d 	bls.w	8006d0c <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8006e52:	2301      	movs	r3, #1
 8006e54:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e56:	e759      	b.n	8006d0c <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e58:	4b17      	ldr	r3, [pc, #92]	@ (8006eb8 <xTaskIncrementTick+0x224>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e5e:	4915      	ldr	r1, [pc, #84]	@ (8006eb4 <xTaskIncrementTick+0x220>)
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	440b      	add	r3, r1
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d901      	bls.n	8006e74 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8006e70:	2301      	movs	r3, #1
 8006e72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006e74:	4b11      	ldr	r3, [pc, #68]	@ (8006ebc <xTaskIncrementTick+0x228>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d007      	beq.n	8006e8c <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e80:	e004      	b.n	8006e8c <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006e82:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec0 <xTaskIncrementTick+0x22c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3301      	adds	r3, #1
 8006e88:	4a0d      	ldr	r2, [pc, #52]	@ (8006ec0 <xTaskIncrementTick+0x22c>)
 8006e8a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3728      	adds	r7, #40	@ 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000290 	.word	0x20000290
 8006e9c:	2000026c 	.word	0x2000026c
 8006ea0:	20000220 	.word	0x20000220
 8006ea4:	20000224 	.word	0x20000224
 8006ea8:	20000280 	.word	0x20000280
 8006eac:	20000288 	.word	0x20000288
 8006eb0:	20000270 	.word	0x20000270
 8006eb4:	20000180 	.word	0x20000180
 8006eb8:	2000017c 	.word	0x2000017c
 8006ebc:	2000027c 	.word	0x2000027c
 8006ec0:	20000278 	.word	0x20000278

08006ec4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006eca:	4b27      	ldr	r3, [pc, #156]	@ (8006f68 <vTaskSwitchContext+0xa4>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006ed2:	4b26      	ldr	r3, [pc, #152]	@ (8006f6c <vTaskSwitchContext+0xa8>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006ed8:	e040      	b.n	8006f5c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8006eda:	4b24      	ldr	r3, [pc, #144]	@ (8006f6c <vTaskSwitchContext+0xa8>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee0:	4b23      	ldr	r3, [pc, #140]	@ (8006f70 <vTaskSwitchContext+0xac>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	fab3 f383 	clz	r3, r3
 8006eec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	f1c3 031f 	rsb	r3, r3, #31
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	491f      	ldr	r1, [pc, #124]	@ (8006f74 <vTaskSwitchContext+0xb0>)
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10b      	bne.n	8006f22 <vTaskSwitchContext+0x5e>
        __asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	607b      	str	r3, [r7, #4]
    }
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	e7fd      	b.n	8006f1e <vTaskSwitchContext+0x5a>
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4a11      	ldr	r2, [pc, #68]	@ (8006f74 <vTaskSwitchContext+0xb0>)
 8006f2e:	4413      	add	r3, r2
 8006f30:	613b      	str	r3, [r7, #16]
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	605a      	str	r2, [r3, #4]
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	3308      	adds	r3, #8
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d104      	bne.n	8006f52 <vTaskSwitchContext+0x8e>
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	605a      	str	r2, [r3, #4]
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	4a07      	ldr	r2, [pc, #28]	@ (8006f78 <vTaskSwitchContext+0xb4>)
 8006f5a:	6013      	str	r3, [r2, #0]
}
 8006f5c:	bf00      	nop
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bc80      	pop	{r7}
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	20000290 	.word	0x20000290
 8006f6c:	2000027c 	.word	0x2000027c
 8006f70:	20000270 	.word	0x20000270
 8006f74:	20000180 	.word	0x20000180
 8006f78:	2000017c 	.word	0x2000017c

08006f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10b      	bne.n	8006fa4 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	60fb      	str	r3, [r7, #12]
    }
 8006f9e:	bf00      	nop
 8006fa0:	bf00      	nop
 8006fa2:	e7fd      	b.n	8006fa0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fa4:	4b07      	ldr	r3, [pc, #28]	@ (8006fc4 <vTaskPlaceOnEventList+0x48>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3318      	adds	r3, #24
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fe fdca 	bl	8005b46 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	6838      	ldr	r0, [r7, #0]
 8006fb6:	f000 fb21 	bl	80075fc <prvAddCurrentTaskToDelayedList>
}
 8006fba:	bf00      	nop
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	2000017c 	.word	0x2000017c

08006fc8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10b      	bne.n	8006ff2 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	613b      	str	r3, [r7, #16]
    }
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	e7fd      	b.n	8006fee <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	4b15      	ldr	r3, [pc, #84]	@ (8007050 <vTaskPlaceOnEventListRestricted+0x88>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	61da      	str	r2, [r3, #28]
 8007000:	4b13      	ldr	r3, [pc, #76]	@ (8007050 <vTaskPlaceOnEventListRestricted+0x88>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	6892      	ldr	r2, [r2, #8]
 8007008:	621a      	str	r2, [r3, #32]
 800700a:	4b11      	ldr	r3, [pc, #68]	@ (8007050 <vTaskPlaceOnEventListRestricted+0x88>)
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	3218      	adds	r2, #24
 8007014:	605a      	str	r2, [r3, #4]
 8007016:	4b0e      	ldr	r3, [pc, #56]	@ (8007050 <vTaskPlaceOnEventListRestricted+0x88>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f103 0218 	add.w	r2, r3, #24
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	609a      	str	r2, [r3, #8]
 8007022:	4b0b      	ldr	r3, [pc, #44]	@ (8007050 <vTaskPlaceOnEventListRestricted+0x88>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	629a      	str	r2, [r3, #40]	@ 0x28
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800703a:	f04f 33ff 	mov.w	r3, #4294967295
 800703e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	68b8      	ldr	r0, [r7, #8]
 8007044:	f000 fada 	bl	80075fc <prvAddCurrentTaskToDelayedList>
    }
 8007048:	bf00      	nop
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	2000017c 	.word	0x2000017c

08007054 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007054:	b480      	push	{r7}
 8007056:	b08b      	sub	sp, #44	@ 0x2c
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10b      	bne.n	8007082 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	60fb      	str	r3, [r7, #12]
    }
 800707c:	bf00      	nop
 800707e:	bf00      	nop
 8007080:	e7fd      	b.n	800707e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	6a3a      	ldr	r2, [r7, #32]
 800708e:	6a12      	ldr	r2, [r2, #32]
 8007090:	609a      	str	r2, [r3, #8]
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	6a3a      	ldr	r2, [r7, #32]
 8007098:	69d2      	ldr	r2, [r2, #28]
 800709a:	605a      	str	r2, [r3, #4]
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	3318      	adds	r3, #24
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d103      	bne.n	80070b0 <xTaskRemoveFromEventList+0x5c>
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	6a1a      	ldr	r2, [r3, #32]
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	605a      	str	r2, [r3, #4]
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	2200      	movs	r2, #0
 80070b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	1e5a      	subs	r2, r3, #1
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070c0:	4b49      	ldr	r3, [pc, #292]	@ (80071e8 <xTaskRemoveFromEventList+0x194>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d15e      	bne.n	8007186 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	6a3a      	ldr	r2, [r7, #32]
 80070d4:	68d2      	ldr	r2, [r2, #12]
 80070d6:	609a      	str	r2, [r3, #8]
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	6a3a      	ldr	r2, [r7, #32]
 80070de:	6892      	ldr	r2, [r2, #8]
 80070e0:	605a      	str	r2, [r3, #4]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	3304      	adds	r3, #4
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d103      	bne.n	80070f6 <xTaskRemoveFromEventList+0xa2>
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	605a      	str	r2, [r3, #4]
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	2200      	movs	r2, #0
 80070fa:	615a      	str	r2, [r3, #20]
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	1e5a      	subs	r2, r3, #1
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710a:	2201      	movs	r2, #1
 800710c:	409a      	lsls	r2, r3
 800710e:	4b37      	ldr	r3, [pc, #220]	@ (80071ec <xTaskRemoveFromEventList+0x198>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4313      	orrs	r3, r2
 8007114:	4a35      	ldr	r2, [pc, #212]	@ (80071ec <xTaskRemoveFromEventList+0x198>)
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800711c:	4934      	ldr	r1, [pc, #208]	@ (80071f0 <xTaskRemoveFromEventList+0x19c>)
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	440b      	add	r3, r1
 8007128:	3304      	adds	r3, #4
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	613b      	str	r3, [r7, #16]
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	609a      	str	r2, [r3, #8]
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	60da      	str	r2, [r3, #12]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	6a3a      	ldr	r2, [r7, #32]
 8007142:	3204      	adds	r2, #4
 8007144:	605a      	str	r2, [r3, #4]
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	1d1a      	adds	r2, r3, #4
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	609a      	str	r2, [r3, #8]
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4a25      	ldr	r2, [pc, #148]	@ (80071f0 <xTaskRemoveFromEventList+0x19c>)
 800715c:	441a      	add	r2, r3
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	615a      	str	r2, [r3, #20]
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007166:	4922      	ldr	r1, [pc, #136]	@ (80071f0 <xTaskRemoveFromEventList+0x19c>)
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	440b      	add	r3, r1
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	1c59      	adds	r1, r3, #1
 8007176:	481e      	ldr	r0, [pc, #120]	@ (80071f0 <xTaskRemoveFromEventList+0x19c>)
 8007178:	4613      	mov	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4403      	add	r3, r0
 8007182:	6019      	str	r1, [r3, #0]
 8007184:	e01b      	b.n	80071be <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007186:	4b1b      	ldr	r3, [pc, #108]	@ (80071f4 <xTaskRemoveFromEventList+0x1a0>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	61bb      	str	r3, [r7, #24]
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	61da      	str	r2, [r3, #28]
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	621a      	str	r2, [r3, #32]
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	6a3a      	ldr	r2, [r7, #32]
 80071a0:	3218      	adds	r2, #24
 80071a2:	605a      	str	r2, [r3, #4]
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	f103 0218 	add.w	r2, r3, #24
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	609a      	str	r2, [r3, #8]
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	4a10      	ldr	r2, [pc, #64]	@ (80071f4 <xTaskRemoveFromEventList+0x1a0>)
 80071b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80071b4:	4b0f      	ldr	r3, [pc, #60]	@ (80071f4 <xTaskRemoveFromEventList+0x1a0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3301      	adds	r3, #1
 80071ba:	4a0e      	ldr	r2, [pc, #56]	@ (80071f4 <xTaskRemoveFromEventList+0x1a0>)
 80071bc:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c2:	4b0d      	ldr	r3, [pc, #52]	@ (80071f8 <xTaskRemoveFromEventList+0x1a4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d905      	bls.n	80071d8 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80071cc:	2301      	movs	r3, #1
 80071ce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80071d0:	4b0a      	ldr	r3, [pc, #40]	@ (80071fc <xTaskRemoveFromEventList+0x1a8>)
 80071d2:	2201      	movs	r2, #1
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	e001      	b.n	80071dc <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 80071d8:	2300      	movs	r3, #0
 80071da:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80071dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071de:	4618      	mov	r0, r3
 80071e0:	372c      	adds	r7, #44	@ 0x2c
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bc80      	pop	{r7}
 80071e6:	4770      	bx	lr
 80071e8:	20000290 	.word	0x20000290
 80071ec:	20000270 	.word	0x20000270
 80071f0:	20000180 	.word	0x20000180
 80071f4:	20000228 	.word	0x20000228
 80071f8:	2000017c 	.word	0x2000017c
 80071fc:	2000027c 	.word	0x2000027c

08007200 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007208:	4b06      	ldr	r3, [pc, #24]	@ (8007224 <vTaskInternalSetTimeOutState+0x24>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007210:	4b05      	ldr	r3, [pc, #20]	@ (8007228 <vTaskInternalSetTimeOutState+0x28>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	605a      	str	r2, [r3, #4]
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000280 	.word	0x20000280
 8007228:	2000026c 	.word	0x2000026c

0800722c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10b      	bne.n	8007254 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	613b      	str	r3, [r7, #16]
    }
 800724e:	bf00      	nop
 8007250:	bf00      	nop
 8007252:	e7fd      	b.n	8007250 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10b      	bne.n	8007272 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	60fb      	str	r3, [r7, #12]
    }
 800726c:	bf00      	nop
 800726e:	bf00      	nop
 8007270:	e7fd      	b.n	800726e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8007272:	f000 fdbd 	bl	8007df0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007276:	4b1f      	ldr	r3, [pc, #124]	@ (80072f4 <xTaskCheckForTimeOut+0xc8>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728e:	d102      	bne.n	8007296 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007290:	2300      	movs	r3, #0
 8007292:	61fb      	str	r3, [r7, #28]
 8007294:	e026      	b.n	80072e4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	4b17      	ldr	r3, [pc, #92]	@ (80072f8 <xTaskCheckForTimeOut+0xcc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d00a      	beq.n	80072b8 <xTaskCheckForTimeOut+0x8c>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d305      	bcc.n	80072b8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	e015      	b.n	80072e4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d20b      	bcs.n	80072da <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	1ad2      	subs	r2, r2, r3
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff ff96 	bl	8007200 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61fb      	str	r3, [r7, #28]
 80072d8:	e004      	b.n	80072e4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80072e0:	2301      	movs	r3, #1
 80072e2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80072e4:	f000 fdb4 	bl	8007e50 <vPortExitCritical>

    return xReturn;
 80072e8:	69fb      	ldr	r3, [r7, #28]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3720      	adds	r7, #32
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	2000026c 	.word	0x2000026c
 80072f8:	20000280 	.word	0x20000280

080072fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007300:	4b03      	ldr	r3, [pc, #12]	@ (8007310 <vTaskMissedYield+0x14>)
 8007302:	2201      	movs	r2, #1
 8007304:	601a      	str	r2, [r3, #0]
}
 8007306:	bf00      	nop
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	2000027c 	.word	0x2000027c

08007314 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800731c:	f000 f852 	bl	80073c4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007320:	4b06      	ldr	r3, [pc, #24]	@ (800733c <prvIdleTask+0x28>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d9f9      	bls.n	800731c <prvIdleTask+0x8>
            {
                taskYIELD();
 8007328:	4b05      	ldr	r3, [pc, #20]	@ (8007340 <prvIdleTask+0x2c>)
 800732a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007338:	e7f0      	b.n	800731c <prvIdleTask+0x8>
 800733a:	bf00      	nop
 800733c:	20000180 	.word	0x20000180
 8007340:	e000ed04 	.word	0xe000ed04

08007344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800734a:	2300      	movs	r3, #0
 800734c:	607b      	str	r3, [r7, #4]
 800734e:	e00c      	b.n	800736a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	4613      	mov	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4a12      	ldr	r2, [pc, #72]	@ (80073a4 <prvInitialiseTaskLists+0x60>)
 800735c:	4413      	add	r3, r2
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe fbc6 	bl	8005af0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3301      	adds	r3, #1
 8007368:	607b      	str	r3, [r7, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b05      	cmp	r3, #5
 800736e:	d9ef      	bls.n	8007350 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007370:	480d      	ldr	r0, [pc, #52]	@ (80073a8 <prvInitialiseTaskLists+0x64>)
 8007372:	f7fe fbbd 	bl	8005af0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007376:	480d      	ldr	r0, [pc, #52]	@ (80073ac <prvInitialiseTaskLists+0x68>)
 8007378:	f7fe fbba 	bl	8005af0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800737c:	480c      	ldr	r0, [pc, #48]	@ (80073b0 <prvInitialiseTaskLists+0x6c>)
 800737e:	f7fe fbb7 	bl	8005af0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8007382:	480c      	ldr	r0, [pc, #48]	@ (80073b4 <prvInitialiseTaskLists+0x70>)
 8007384:	f7fe fbb4 	bl	8005af0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8007388:	480b      	ldr	r0, [pc, #44]	@ (80073b8 <prvInitialiseTaskLists+0x74>)
 800738a:	f7fe fbb1 	bl	8005af0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800738e:	4b0b      	ldr	r3, [pc, #44]	@ (80073bc <prvInitialiseTaskLists+0x78>)
 8007390:	4a05      	ldr	r2, [pc, #20]	@ (80073a8 <prvInitialiseTaskLists+0x64>)
 8007392:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007394:	4b0a      	ldr	r3, [pc, #40]	@ (80073c0 <prvInitialiseTaskLists+0x7c>)
 8007396:	4a05      	ldr	r2, [pc, #20]	@ (80073ac <prvInitialiseTaskLists+0x68>)
 8007398:	601a      	str	r2, [r3, #0]
}
 800739a:	bf00      	nop
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20000180 	.word	0x20000180
 80073a8:	200001f8 	.word	0x200001f8
 80073ac:	2000020c 	.word	0x2000020c
 80073b0:	20000228 	.word	0x20000228
 80073b4:	2000023c 	.word	0x2000023c
 80073b8:	20000254 	.word	0x20000254
 80073bc:	20000220 	.word	0x20000220
 80073c0:	20000224 	.word	0x20000224

080073c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073ca:	e019      	b.n	8007400 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80073cc:	f000 fd10 	bl	8007df0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073d0:	4b10      	ldr	r3, [pc, #64]	@ (8007414 <prvCheckTasksWaitingTermination+0x50>)
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3304      	adds	r3, #4
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fe fbea 	bl	8005bb6 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80073e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007418 <prvCheckTasksWaitingTermination+0x54>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	4a0b      	ldr	r2, [pc, #44]	@ (8007418 <prvCheckTasksWaitingTermination+0x54>)
 80073ea:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80073ec:	4b0b      	ldr	r3, [pc, #44]	@ (800741c <prvCheckTasksWaitingTermination+0x58>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	4a0a      	ldr	r2, [pc, #40]	@ (800741c <prvCheckTasksWaitingTermination+0x58>)
 80073f4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80073f6:	f000 fd2b 	bl	8007e50 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f810 	bl	8007420 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007400:	4b06      	ldr	r3, [pc, #24]	@ (800741c <prvCheckTasksWaitingTermination+0x58>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e1      	bne.n	80073cc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007408:	bf00      	nop
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	2000023c 	.word	0x2000023c
 8007418:	20000268 	.word	0x20000268
 800741c:	20000250 	.word	0x20000250

08007420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fea3 	bl	8008178 <vPortFree>
            vPortFree( pxTCB );
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fea0 	bl	8008178 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007438:	bf00      	nop
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007444:	4b09      	ldr	r3, [pc, #36]	@ (800746c <prvResetNextTaskUnblockTime+0x2c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d104      	bne.n	8007458 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800744e:	4b08      	ldr	r3, [pc, #32]	@ (8007470 <prvResetNextTaskUnblockTime+0x30>)
 8007450:	f04f 32ff 	mov.w	r2, #4294967295
 8007454:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007456:	e005      	b.n	8007464 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007458:	4b04      	ldr	r3, [pc, #16]	@ (800746c <prvResetNextTaskUnblockTime+0x2c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a03      	ldr	r2, [pc, #12]	@ (8007470 <prvResetNextTaskUnblockTime+0x30>)
 8007462:	6013      	str	r3, [r2, #0]
}
 8007464:	bf00      	nop
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr
 800746c:	20000220 	.word	0x20000220
 8007470:	20000288 	.word	0x20000288

08007474 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800747a:	4b0b      	ldr	r3, [pc, #44]	@ (80074a8 <xTaskGetSchedulerState+0x34>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d102      	bne.n	8007488 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007482:	2301      	movs	r3, #1
 8007484:	607b      	str	r3, [r7, #4]
 8007486:	e008      	b.n	800749a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007488:	4b08      	ldr	r3, [pc, #32]	@ (80074ac <xTaskGetSchedulerState+0x38>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007490:	2302      	movs	r3, #2
 8007492:	607b      	str	r3, [r7, #4]
 8007494:	e001      	b.n	800749a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007496:	2300      	movs	r3, #0
 8007498:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800749a:	687b      	ldr	r3, [r7, #4]
    }
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	20000274 	.word	0x20000274
 80074ac:	20000290 	.word	0x20000290

080074b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b088      	sub	sp, #32
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80074bc:	2300      	movs	r3, #0
 80074be:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 808e 	beq.w	80075e4 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80074c8:	4b49      	ldr	r3, [pc, #292]	@ (80075f0 <xTaskPriorityDisinherit+0x140>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d00b      	beq.n	80074ea <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	613b      	str	r3, [r7, #16]
    }
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop
 80074e8:	e7fd      	b.n	80074e6 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10b      	bne.n	800750a <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	60fb      	str	r3, [r7, #12]
    }
 8007504:	bf00      	nop
 8007506:	bf00      	nop
 8007508:	e7fd      	b.n	8007506 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800750e:	1e5a      	subs	r2, r3, #1
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800751c:	429a      	cmp	r2, r3
 800751e:	d061      	beq.n	80075e4 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007524:	2b00      	cmp	r3, #0
 8007526:	d15d      	bne.n	80075e4 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	3304      	adds	r3, #4
 800752c:	4618      	mov	r0, r3
 800752e:	f7fe fb42 	bl	8005bb6 <uxListRemove>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753c:	2201      	movs	r2, #1
 800753e:	fa02 f303 	lsl.w	r3, r2, r3
 8007542:	43da      	mvns	r2, r3
 8007544:	4b2b      	ldr	r3, [pc, #172]	@ (80075f4 <xTaskPriorityDisinherit+0x144>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4013      	ands	r3, r2
 800754a:	4a2a      	ldr	r2, [pc, #168]	@ (80075f4 <xTaskPriorityDisinherit+0x144>)
 800754c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755a:	f1c3 0206 	rsb	r2, r3, #6
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007566:	2201      	movs	r2, #1
 8007568:	409a      	lsls	r2, r3
 800756a:	4b22      	ldr	r3, [pc, #136]	@ (80075f4 <xTaskPriorityDisinherit+0x144>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4313      	orrs	r3, r2
 8007570:	4a20      	ldr	r2, [pc, #128]	@ (80075f4 <xTaskPriorityDisinherit+0x144>)
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007578:	491f      	ldr	r1, [pc, #124]	@ (80075f8 <xTaskPriorityDisinherit+0x148>)
 800757a:	4613      	mov	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	440b      	add	r3, r1
 8007584:	3304      	adds	r3, #4
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	617b      	str	r3, [r7, #20]
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	609a      	str	r2, [r3, #8]
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	60da      	str	r2, [r3, #12]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	3204      	adds	r2, #4
 80075a0:	605a      	str	r2, [r3, #4]
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	1d1a      	adds	r2, r3, #4
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	609a      	str	r2, [r3, #8]
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4a10      	ldr	r2, [pc, #64]	@ (80075f8 <xTaskPriorityDisinherit+0x148>)
 80075b8:	441a      	add	r2, r3
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	615a      	str	r2, [r3, #20]
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c2:	490d      	ldr	r1, [pc, #52]	@ (80075f8 <xTaskPriorityDisinherit+0x148>)
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	1c59      	adds	r1, r3, #1
 80075d2:	4809      	ldr	r0, [pc, #36]	@ (80075f8 <xTaskPriorityDisinherit+0x148>)
 80075d4:	4613      	mov	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4403      	add	r3, r0
 80075de:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80075e0:	2301      	movs	r3, #1
 80075e2:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80075e4:	69fb      	ldr	r3, [r7, #28]
    }
 80075e6:	4618      	mov	r0, r3
 80075e8:	3720      	adds	r7, #32
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	2000017c 	.word	0x2000017c
 80075f4:	20000270 	.word	0x20000270
 80075f8:	20000180 	.word	0x20000180

080075fc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007606:	4b36      	ldr	r3, [pc, #216]	@ (80076e0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800760c:	4b35      	ldr	r3, [pc, #212]	@ (80076e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3304      	adds	r3, #4
 8007612:	4618      	mov	r0, r3
 8007614:	f7fe facf 	bl	8005bb6 <uxListRemove>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10b      	bne.n	8007636 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800761e:	4b31      	ldr	r3, [pc, #196]	@ (80076e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007624:	2201      	movs	r2, #1
 8007626:	fa02 f303 	lsl.w	r3, r2, r3
 800762a:	43da      	mvns	r2, r3
 800762c:	4b2e      	ldr	r3, [pc, #184]	@ (80076e8 <prvAddCurrentTaskToDelayedList+0xec>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4013      	ands	r3, r2
 8007632:	4a2d      	ldr	r2, [pc, #180]	@ (80076e8 <prvAddCurrentTaskToDelayedList+0xec>)
 8007634:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763c:	d124      	bne.n	8007688 <prvAddCurrentTaskToDelayedList+0x8c>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d021      	beq.n	8007688 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007644:	4b29      	ldr	r3, [pc, #164]	@ (80076ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	613b      	str	r3, [r7, #16]
 800764a:	4b26      	ldr	r3, [pc, #152]	@ (80076e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	609a      	str	r2, [r3, #8]
 8007652:	4b24      	ldr	r3, [pc, #144]	@ (80076e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	6892      	ldr	r2, [r2, #8]
 800765a:	60da      	str	r2, [r3, #12]
 800765c:	4b21      	ldr	r3, [pc, #132]	@ (80076e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	3204      	adds	r2, #4
 8007666:	605a      	str	r2, [r3, #4]
 8007668:	4b1e      	ldr	r3, [pc, #120]	@ (80076e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	1d1a      	adds	r2, r3, #4
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	609a      	str	r2, [r3, #8]
 8007672:	4b1c      	ldr	r3, [pc, #112]	@ (80076e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a1d      	ldr	r2, [pc, #116]	@ (80076ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8007678:	615a      	str	r2, [r3, #20]
 800767a:	4b1c      	ldr	r3, [pc, #112]	@ (80076ec <prvAddCurrentTaskToDelayedList+0xf0>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3301      	adds	r3, #1
 8007680:	4a1a      	ldr	r2, [pc, #104]	@ (80076ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007686:	e026      	b.n	80076d6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4413      	add	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007690:	4b14      	ldr	r3, [pc, #80]	@ (80076e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	429a      	cmp	r2, r3
 800769e:	d209      	bcs.n	80076b4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076a0:	4b13      	ldr	r3, [pc, #76]	@ (80076f0 <prvAddCurrentTaskToDelayedList+0xf4>)
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	4b0f      	ldr	r3, [pc, #60]	@ (80076e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3304      	adds	r3, #4
 80076aa:	4619      	mov	r1, r3
 80076ac:	4610      	mov	r0, r2
 80076ae:	f7fe fa4a 	bl	8005b46 <vListInsert>
}
 80076b2:	e010      	b.n	80076d6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076b4:	4b0f      	ldr	r3, [pc, #60]	@ (80076f4 <prvAddCurrentTaskToDelayedList+0xf8>)
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	4b0a      	ldr	r3, [pc, #40]	@ (80076e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3304      	adds	r3, #4
 80076be:	4619      	mov	r1, r3
 80076c0:	4610      	mov	r0, r2
 80076c2:	f7fe fa40 	bl	8005b46 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80076c6:	4b0c      	ldr	r3, [pc, #48]	@ (80076f8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d202      	bcs.n	80076d6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80076d0:	4a09      	ldr	r2, [pc, #36]	@ (80076f8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6013      	str	r3, [r2, #0]
}
 80076d6:	bf00      	nop
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	2000026c 	.word	0x2000026c
 80076e4:	2000017c 	.word	0x2000017c
 80076e8:	20000270 	.word	0x20000270
 80076ec:	20000254 	.word	0x20000254
 80076f0:	20000224 	.word	0x20000224
 80076f4:	20000220 	.word	0x20000220
 80076f8:	20000288 	.word	0x20000288

080076fc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007702:	2300      	movs	r3, #0
 8007704:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007706:	f000 fa4b 	bl	8007ba0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800770a:	4b11      	ldr	r3, [pc, #68]	@ (8007750 <xTimerCreateTimerTask+0x54>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00a      	beq.n	8007728 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8007712:	4b10      	ldr	r3, [pc, #64]	@ (8007754 <xTimerCreateTimerTask+0x58>)
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	2302      	movs	r3, #2
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	2300      	movs	r3, #0
 800771c:	22c8      	movs	r2, #200	@ 0xc8
 800771e:	490e      	ldr	r1, [pc, #56]	@ (8007758 <xTimerCreateTimerTask+0x5c>)
 8007720:	480e      	ldr	r0, [pc, #56]	@ (800775c <xTimerCreateTimerTask+0x60>)
 8007722:	f7fe ffa1 	bl	8006668 <xTaskCreate>
 8007726:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10b      	bne.n	8007746 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	603b      	str	r3, [r7, #0]
    }
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	e7fd      	b.n	8007742 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8007746:	687b      	ldr	r3, [r7, #4]
    }
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	200002c4 	.word	0x200002c4
 8007754:	200002c8 	.word	0x200002c8
 8007758:	0800846c 	.word	0x0800846c
 800775c:	08007805 	.word	0x08007805

08007760 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800776c:	e008      	b.n	8007780 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	4413      	add	r3, r2
 8007776:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	699a      	ldr	r2, [r3, #24]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	18d1      	adds	r1, r2, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 f8dd 	bl	800794c <prvInsertTimerInActiveList>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1ea      	bne.n	800776e <prvReloadTimer+0xe>
        }
    }
 8007798:	bf00      	nop
 800779a:	bf00      	nop
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ae:	4b14      	ldr	r3, [pc, #80]	@ (8007800 <prvProcessExpiredTimer+0x5c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fe f9fa 	bl	8005bb6 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d005      	beq.n	80077dc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7ff ffc3 	bl	8007760 <prvReloadTimer>
 80077da:	e008      	b.n	80077ee <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077e2:	f023 0301 	bic.w	r3, r3, #1
 80077e6:	b2da      	uxtb	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	4798      	blx	r3
    }
 80077f6:	bf00      	nop
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	200002bc 	.word	0x200002bc

08007804 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800780c:	f107 0308 	add.w	r3, r7, #8
 8007810:	4618      	mov	r0, r3
 8007812:	f000 f859 	bl	80078c8 <prvGetNextExpireTime>
 8007816:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	4619      	mov	r1, r3
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f805 	bl	800782c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007822:	f000 f8d5 	bl	80079d0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007826:	bf00      	nop
 8007828:	e7f0      	b.n	800780c <prvTimerTask+0x8>
	...

0800782c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007836:	f7ff f90b 	bl	8006a50 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800783a:	f107 0308 	add.w	r3, r7, #8
 800783e:	4618      	mov	r0, r3
 8007840:	f000 f864 	bl	800790c <prvSampleTimeNow>
 8007844:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d130      	bne.n	80078ae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10a      	bne.n	8007868 <prvProcessTimerOrBlockTask+0x3c>
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	429a      	cmp	r2, r3
 8007858:	d806      	bhi.n	8007868 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800785a:	f7ff f907 	bl	8006a6c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800785e:	68f9      	ldr	r1, [r7, #12]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff ff9f 	bl	80077a4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007866:	e024      	b.n	80078b2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d008      	beq.n	8007880 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800786e:	4b13      	ldr	r3, [pc, #76]	@ (80078bc <prvProcessTimerOrBlockTask+0x90>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <prvProcessTimerOrBlockTask+0x50>
 8007878:	2301      	movs	r3, #1
 800787a:	e000      	b.n	800787e <prvProcessTimerOrBlockTask+0x52>
 800787c:	2300      	movs	r3, #0
 800787e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007880:	4b0f      	ldr	r3, [pc, #60]	@ (80078c0 <prvProcessTimerOrBlockTask+0x94>)
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	4619      	mov	r1, r3
 800788e:	f7fe feb7 	bl	8006600 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007892:	f7ff f8eb 	bl	8006a6c <xTaskResumeAll>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10a      	bne.n	80078b2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800789c:	4b09      	ldr	r3, [pc, #36]	@ (80078c4 <prvProcessTimerOrBlockTask+0x98>)
 800789e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	f3bf 8f6f 	isb	sy
    }
 80078ac:	e001      	b.n	80078b2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80078ae:	f7ff f8dd 	bl	8006a6c <xTaskResumeAll>
    }
 80078b2:	bf00      	nop
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	200002c0 	.word	0x200002c0
 80078c0:	200002c4 	.word	0x200002c4
 80078c4:	e000ed04 	.word	0xe000ed04

080078c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007908 <prvGetNextExpireTime+0x40>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <prvGetNextExpireTime+0x16>
 80078da:	2201      	movs	r2, #1
 80078dc:	e000      	b.n	80078e0 <prvGetNextExpireTime+0x18>
 80078de:	2200      	movs	r2, #0
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d105      	bne.n	80078f8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078ec:	4b06      	ldr	r3, [pc, #24]	@ (8007908 <prvGetNextExpireTime+0x40>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	e001      	b.n	80078fc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80078fc:	68fb      	ldr	r3, [r7, #12]
    }
 80078fe:	4618      	mov	r0, r3
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr
 8007908:	200002bc 	.word	0x200002bc

0800790c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007914:	f7ff f9a6 	bl	8006c64 <xTaskGetTickCount>
 8007918:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800791a:	4b0b      	ldr	r3, [pc, #44]	@ (8007948 <prvSampleTimeNow+0x3c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	429a      	cmp	r2, r3
 8007922:	d205      	bcs.n	8007930 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007924:	f000 f916 	bl	8007b54 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	e002      	b.n	8007936 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007936:	4a04      	ldr	r2, [pc, #16]	@ (8007948 <prvSampleTimeNow+0x3c>)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800793c:	68fb      	ldr	r3, [r7, #12]
    }
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	200002cc 	.word	0x200002cc

0800794c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800795a:	2300      	movs	r3, #0
 800795c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	429a      	cmp	r2, r3
 8007970:	d812      	bhi.n	8007998 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	1ad2      	subs	r2, r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	429a      	cmp	r2, r3
 800797e:	d302      	bcc.n	8007986 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007980:	2301      	movs	r3, #1
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	e01b      	b.n	80079be <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007986:	4b10      	ldr	r3, [pc, #64]	@ (80079c8 <prvInsertTimerInActiveList+0x7c>)
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	3304      	adds	r3, #4
 800798e:	4619      	mov	r1, r3
 8007990:	4610      	mov	r0, r2
 8007992:	f7fe f8d8 	bl	8005b46 <vListInsert>
 8007996:	e012      	b.n	80079be <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d206      	bcs.n	80079ae <prvInsertTimerInActiveList+0x62>
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d302      	bcc.n	80079ae <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80079a8:	2301      	movs	r3, #1
 80079aa:	617b      	str	r3, [r7, #20]
 80079ac:	e007      	b.n	80079be <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079ae:	4b07      	ldr	r3, [pc, #28]	@ (80079cc <prvInsertTimerInActiveList+0x80>)
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3304      	adds	r3, #4
 80079b6:	4619      	mov	r1, r3
 80079b8:	4610      	mov	r0, r2
 80079ba:	f7fe f8c4 	bl	8005b46 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80079be:	697b      	ldr	r3, [r7, #20]
    }
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	200002c0 	.word	0x200002c0
 80079cc:	200002bc 	.word	0x200002bc

080079d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079d6:	e0a9      	b.n	8007b2c <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f2c0 80a6 	blt.w	8007b2c <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	3304      	adds	r3, #4
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fe f8e0 	bl	8005bb6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079f6:	1d3b      	adds	r3, r7, #4
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7ff ff87 	bl	800790c <prvSampleTimeNow>
 80079fe:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	2b08      	cmp	r3, #8
 8007a06:	f200 808e 	bhi.w	8007b26 <prvProcessReceivedCommands+0x156>
 8007a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a10 <prvProcessReceivedCommands+0x40>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a35 	.word	0x08007a35
 8007a14:	08007a35 	.word	0x08007a35
 8007a18:	08007a9d 	.word	0x08007a9d
 8007a1c:	08007ab1 	.word	0x08007ab1
 8007a20:	08007afd 	.word	0x08007afd
 8007a24:	08007a35 	.word	0x08007a35
 8007a28:	08007a35 	.word	0x08007a35
 8007a2c:	08007a9d 	.word	0x08007a9d
 8007a30:	08007ab1 	.word	0x08007ab1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a3a:	f043 0301 	orr.w	r3, r3, #1
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	18d1      	adds	r1, r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	69f8      	ldr	r0, [r7, #28]
 8007a54:	f7ff ff7a 	bl	800794c <prvInsertTimerInActiveList>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d065      	beq.n	8007b2a <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d009      	beq.n	8007a80 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	4413      	add	r3, r2
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	4619      	mov	r1, r3
 8007a78:	69f8      	ldr	r0, [r7, #28]
 8007a7a:	f7ff fe71 	bl	8007760 <prvReloadTimer>
 8007a7e:	e008      	b.n	8007a92 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a86:	f023 0301 	bic.w	r3, r3, #1
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	69f8      	ldr	r0, [r7, #28]
 8007a98:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007a9a:	e046      	b.n	8007b2a <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007aa2:	f023 0301 	bic.w	r3, r3, #1
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007aae:	e03d      	b.n	8007b2c <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ab6:	f043 0301 	orr.w	r3, r3, #1
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10b      	bne.n	8007ae8 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	617b      	str	r3, [r7, #20]
    }
 8007ae2:	bf00      	nop
 8007ae4:	bf00      	nop
 8007ae6:	e7fd      	b.n	8007ae4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	699a      	ldr	r2, [r3, #24]
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	18d1      	adds	r1, r2, r3
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	69f8      	ldr	r0, [r7, #28]
 8007af6:	f7ff ff29 	bl	800794c <prvInsertTimerInActiveList>
                        break;
 8007afa:	e017      	b.n	8007b2c <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d103      	bne.n	8007b12 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8007b0a:	69f8      	ldr	r0, [r7, #28]
 8007b0c:	f000 fb34 	bl	8008178 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007b10:	e00c      	b.n	8007b2c <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b18:	f023 0301 	bic.w	r3, r3, #1
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007b24:	e002      	b.n	8007b2c <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007b26:	bf00      	nop
 8007b28:	e000      	b.n	8007b2c <prvProcessReceivedCommands+0x15c>
                        break;
 8007b2a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b2c:	4b08      	ldr	r3, [pc, #32]	@ (8007b50 <prvProcessReceivedCommands+0x180>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f107 0108 	add.w	r1, r7, #8
 8007b34:	2200      	movs	r2, #0
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe fb22 	bl	8006180 <xQueueReceive>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f47f af4a 	bne.w	80079d8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	3720      	adds	r7, #32
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	200002c4 	.word	0x200002c4

08007b54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b5a:	e009      	b.n	8007b70 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007b98 <prvSwitchTimerLists+0x44>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007b66:	f04f 31ff 	mov.w	r1, #4294967295
 8007b6a:	6838      	ldr	r0, [r7, #0]
 8007b6c:	f7ff fe1a 	bl	80077a4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b70:	4b09      	ldr	r3, [pc, #36]	@ (8007b98 <prvSwitchTimerLists+0x44>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1f0      	bne.n	8007b5c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007b7a:	4b07      	ldr	r3, [pc, #28]	@ (8007b98 <prvSwitchTimerLists+0x44>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8007b80:	4b06      	ldr	r3, [pc, #24]	@ (8007b9c <prvSwitchTimerLists+0x48>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a04      	ldr	r2, [pc, #16]	@ (8007b98 <prvSwitchTimerLists+0x44>)
 8007b86:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007b88:	4a04      	ldr	r2, [pc, #16]	@ (8007b9c <prvSwitchTimerLists+0x48>)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6013      	str	r3, [r2, #0]
    }
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	200002bc 	.word	0x200002bc
 8007b9c:	200002c0 	.word	0x200002c0

08007ba0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007ba4:	f000 f924 	bl	8007df0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007ba8:	4b12      	ldr	r3, [pc, #72]	@ (8007bf4 <prvCheckForValidListAndQueue+0x54>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d11d      	bne.n	8007bec <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007bb0:	4811      	ldr	r0, [pc, #68]	@ (8007bf8 <prvCheckForValidListAndQueue+0x58>)
 8007bb2:	f7fd ff9d 	bl	8005af0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007bb6:	4811      	ldr	r0, [pc, #68]	@ (8007bfc <prvCheckForValidListAndQueue+0x5c>)
 8007bb8:	f7fd ff9a 	bl	8005af0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007bbc:	4b10      	ldr	r3, [pc, #64]	@ (8007c00 <prvCheckForValidListAndQueue+0x60>)
 8007bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8007bf8 <prvCheckForValidListAndQueue+0x58>)
 8007bc0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007bc2:	4b10      	ldr	r3, [pc, #64]	@ (8007c04 <prvCheckForValidListAndQueue+0x64>)
 8007bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8007bfc <prvCheckForValidListAndQueue+0x5c>)
 8007bc6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007bc8:	2200      	movs	r2, #0
 8007bca:	210c      	movs	r1, #12
 8007bcc:	2008      	movs	r0, #8
 8007bce:	f7fe f8ad 	bl	8005d2c <xQueueGenericCreate>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	4a07      	ldr	r2, [pc, #28]	@ (8007bf4 <prvCheckForValidListAndQueue+0x54>)
 8007bd6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007bd8:	4b06      	ldr	r3, [pc, #24]	@ (8007bf4 <prvCheckForValidListAndQueue+0x54>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d005      	beq.n	8007bec <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007be0:	4b04      	ldr	r3, [pc, #16]	@ (8007bf4 <prvCheckForValidListAndQueue+0x54>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4908      	ldr	r1, [pc, #32]	@ (8007c08 <prvCheckForValidListAndQueue+0x68>)
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fe fcbc 	bl	8006564 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007bec:	f000 f930 	bl	8007e50 <vPortExitCritical>
    }
 8007bf0:	bf00      	nop
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	200002c4 	.word	0x200002c4
 8007bf8:	20000294 	.word	0x20000294
 8007bfc:	200002a8 	.word	0x200002a8
 8007c00:	200002bc 	.word	0x200002bc
 8007c04:	200002c0 	.word	0x200002c0
 8007c08:	08008474 	.word	0x08008474

08007c0c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3b04      	subs	r3, #4
 8007c1c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007c24:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3b04      	subs	r3, #4
 8007c2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f023 0201 	bic.w	r2, r3, #1
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3b04      	subs	r3, #4
 8007c3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007c3c:	4a08      	ldr	r2, [pc, #32]	@ (8007c60 <pxPortInitialiseStack+0x54>)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3b14      	subs	r3, #20
 8007c46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3b20      	subs	r3, #32
 8007c52:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007c54:	68fb      	ldr	r3, [r7, #12]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bc80      	pop	{r7}
 8007c5e:	4770      	bx	lr
 8007c60:	08007c65 	.word	0x08007c65

08007c64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007c6e:	4b12      	ldr	r3, [pc, #72]	@ (8007cb8 <prvTaskExitError+0x54>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c76:	d00b      	beq.n	8007c90 <prvTaskExitError+0x2c>
        __asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	60fb      	str	r3, [r7, #12]
    }
 8007c8a:	bf00      	nop
 8007c8c:	bf00      	nop
 8007c8e:	e7fd      	b.n	8007c8c <prvTaskExitError+0x28>
        __asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	60bb      	str	r3, [r7, #8]
    }
 8007ca2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007ca4:	bf00      	nop
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0fc      	beq.n	8007ca6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bc80      	pop	{r7}
 8007cb6:	4770      	bx	lr
 8007cb8:	20000010 	.word	0x20000010
 8007cbc:	00000000 	.word	0x00000000

08007cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007cc0:	4b07      	ldr	r3, [pc, #28]	@ (8007ce0 <pxCurrentTCBConst2>)
 8007cc2:	6819      	ldr	r1, [r3, #0]
 8007cc4:	6808      	ldr	r0, [r1, #0]
 8007cc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007cca:	f380 8809 	msr	PSP, r0
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f04f 0000 	mov.w	r0, #0
 8007cd6:	f380 8811 	msr	BASEPRI, r0
 8007cda:	f04e 0e0d 	orr.w	lr, lr, #13
 8007cde:	4770      	bx	lr

08007ce0 <pxCurrentTCBConst2>:
 8007ce0:	2000017c 	.word	0x2000017c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007ce4:	bf00      	nop
 8007ce6:	bf00      	nop

08007ce8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8007ce8:	4806      	ldr	r0, [pc, #24]	@ (8007d04 <prvPortStartFirstTask+0x1c>)
 8007cea:	6800      	ldr	r0, [r0, #0]
 8007cec:	6800      	ldr	r0, [r0, #0]
 8007cee:	f380 8808 	msr	MSP, r0
 8007cf2:	b662      	cpsie	i
 8007cf4:	b661      	cpsie	f
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	df00      	svc	0
 8007d00:	bf00      	nop
 8007d02:	0000      	.short	0x0000
 8007d04:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop

08007d0c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d12:	4b32      	ldr	r3, [pc, #200]	@ (8007ddc <xPortStartScheduler+0xd0>)
 8007d14:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	22ff      	movs	r2, #255	@ 0xff
 8007d22:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	4b2a      	ldr	r3, [pc, #168]	@ (8007de0 <xPortStartScheduler+0xd4>)
 8007d38:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8007de4 <xPortStartScheduler+0xd8>)
 8007d3c:	2207      	movs	r2, #7
 8007d3e:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d40:	e009      	b.n	8007d56 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8007d42:	4b28      	ldr	r3, [pc, #160]	@ (8007de4 <xPortStartScheduler+0xd8>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	4a26      	ldr	r2, [pc, #152]	@ (8007de4 <xPortStartScheduler+0xd8>)
 8007d4a:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d4c:	78fb      	ldrb	r3, [r7, #3]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d56:	78fb      	ldrb	r3, [r7, #3]
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5e:	2b80      	cmp	r3, #128	@ 0x80
 8007d60:	d0ef      	beq.n	8007d42 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d62:	4b20      	ldr	r3, [pc, #128]	@ (8007de4 <xPortStartScheduler+0xd8>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f1c3 0307 	rsb	r3, r3, #7
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	d00b      	beq.n	8007d86 <xPortStartScheduler+0x7a>
        __asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	60bb      	str	r3, [r7, #8]
    }
 8007d80:	bf00      	nop
 8007d82:	bf00      	nop
 8007d84:	e7fd      	b.n	8007d82 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d86:	4b17      	ldr	r3, [pc, #92]	@ (8007de4 <xPortStartScheduler+0xd8>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	021b      	lsls	r3, r3, #8
 8007d8c:	4a15      	ldr	r2, [pc, #84]	@ (8007de4 <xPortStartScheduler+0xd8>)
 8007d8e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d90:	4b14      	ldr	r3, [pc, #80]	@ (8007de4 <xPortStartScheduler+0xd8>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d98:	4a12      	ldr	r2, [pc, #72]	@ (8007de4 <xPortStartScheduler+0xd8>)
 8007d9a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007da4:	4b10      	ldr	r3, [pc, #64]	@ (8007de8 <xPortStartScheduler+0xdc>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a0f      	ldr	r2, [pc, #60]	@ (8007de8 <xPortStartScheduler+0xdc>)
 8007daa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007dae:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007db0:	4b0d      	ldr	r3, [pc, #52]	@ (8007de8 <xPortStartScheduler+0xdc>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a0c      	ldr	r2, [pc, #48]	@ (8007de8 <xPortStartScheduler+0xdc>)
 8007db6:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007dba:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007dbc:	f000 f8be 	bl	8007f3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8007dec <xPortStartScheduler+0xe0>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007dc6:	f7ff ff8f 	bl	8007ce8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007dca:	f7ff f87b 	bl	8006ec4 <vTaskSwitchContext>
    prvTaskExitError();
 8007dce:	f7ff ff49 	bl	8007c64 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	e000e400 	.word	0xe000e400
 8007de0:	200002d0 	.word	0x200002d0
 8007de4:	200002d4 	.word	0x200002d4
 8007de8:	e000ed20 	.word	0xe000ed20
 8007dec:	20000010 	.word	0x20000010

08007df0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
        __asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	607b      	str	r3, [r7, #4]
    }
 8007e08:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8007e48 <vPortEnterCritical+0x58>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	4a0d      	ldr	r2, [pc, #52]	@ (8007e48 <vPortEnterCritical+0x58>)
 8007e12:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007e14:	4b0c      	ldr	r3, [pc, #48]	@ (8007e48 <vPortEnterCritical+0x58>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d110      	bne.n	8007e3e <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e4c <vPortEnterCritical+0x5c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00b      	beq.n	8007e3e <vPortEnterCritical+0x4e>
        __asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	603b      	str	r3, [r7, #0]
    }
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	e7fd      	b.n	8007e3a <vPortEnterCritical+0x4a>
    }
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bc80      	pop	{r7}
 8007e46:	4770      	bx	lr
 8007e48:	20000010 	.word	0x20000010
 8007e4c:	e000ed04 	.word	0xe000ed04

08007e50 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007e56:	4b12      	ldr	r3, [pc, #72]	@ (8007ea0 <vPortExitCritical+0x50>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10b      	bne.n	8007e76 <vPortExitCritical+0x26>
        __asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	607b      	str	r3, [r7, #4]
    }
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	e7fd      	b.n	8007e72 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007e76:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea0 <vPortExitCritical+0x50>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	4a08      	ldr	r2, [pc, #32]	@ (8007ea0 <vPortExitCritical+0x50>)
 8007e7e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007e80:	4b07      	ldr	r3, [pc, #28]	@ (8007ea0 <vPortExitCritical+0x50>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d105      	bne.n	8007e94 <vPortExitCritical+0x44>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	f383 8811 	msr	BASEPRI, r3
    }
 8007e92:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bc80      	pop	{r7}
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	20000010 	.word	0x20000010
	...

08007eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007eb0:	f3ef 8009 	mrs	r0, PSP
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef0 <pxCurrentTCBConst>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ec0:	6010      	str	r0, [r2, #0]
 8007ec2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007ec6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007eca:	f380 8811 	msr	BASEPRI, r0
 8007ece:	f7fe fff9 	bl	8006ec4 <vTaskSwitchContext>
 8007ed2:	f04f 0000 	mov.w	r0, #0
 8007ed6:	f380 8811 	msr	BASEPRI, r0
 8007eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007ede:	6819      	ldr	r1, [r3, #0]
 8007ee0:	6808      	ldr	r0, [r1, #0]
 8007ee2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ee6:	f380 8809 	msr	PSP, r0
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	4770      	bx	lr

08007ef0 <pxCurrentTCBConst>:
 8007ef0:	2000017c 	.word	0x2000017c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop

08007ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
        __asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	607b      	str	r3, [r7, #4]
    }
 8007f10:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007f12:	f7fe febf 	bl	8006c94 <xTaskIncrementTick>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f1c:	4b06      	ldr	r3, [pc, #24]	@ (8007f38 <SysTick_Handler+0x40>)
 8007f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	2300      	movs	r3, #0
 8007f26:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	f383 8811 	msr	BASEPRI, r3
    }
 8007f2e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8007f30:	bf00      	nop
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	e000ed04 	.word	0xe000ed04

08007f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f40:	4b0a      	ldr	r3, [pc, #40]	@ (8007f6c <vPortSetupTimerInterrupt+0x30>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f46:	4b0a      	ldr	r3, [pc, #40]	@ (8007f70 <vPortSetupTimerInterrupt+0x34>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f4c:	4b09      	ldr	r3, [pc, #36]	@ (8007f74 <vPortSetupTimerInterrupt+0x38>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a09      	ldr	r2, [pc, #36]	@ (8007f78 <vPortSetupTimerInterrupt+0x3c>)
 8007f52:	fba2 2303 	umull	r2, r3, r2, r3
 8007f56:	099b      	lsrs	r3, r3, #6
 8007f58:	4a08      	ldr	r2, [pc, #32]	@ (8007f7c <vPortSetupTimerInterrupt+0x40>)
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f5e:	4b03      	ldr	r3, [pc, #12]	@ (8007f6c <vPortSetupTimerInterrupt+0x30>)
 8007f60:	2207      	movs	r2, #7
 8007f62:	601a      	str	r2, [r3, #0]
}
 8007f64:	bf00      	nop
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr
 8007f6c:	e000e010 	.word	0xe000e010
 8007f70:	e000e018 	.word	0xe000e018
 8007f74:	20000000 	.word	0x20000000
 8007f78:	10624dd3 	.word	0x10624dd3
 8007f7c:	e000e014 	.word	0xe000e014

08007f80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007f86:	f3ef 8305 	mrs	r3, IPSR
 8007f8a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b0f      	cmp	r3, #15
 8007f90:	d915      	bls.n	8007fbe <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f92:	4a17      	ldr	r2, [pc, #92]	@ (8007ff0 <vPortValidateInterruptPriority+0x70>)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f9c:	4b15      	ldr	r3, [pc, #84]	@ (8007ff4 <vPortValidateInterruptPriority+0x74>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	7afa      	ldrb	r2, [r7, #11]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d20b      	bcs.n	8007fbe <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	607b      	str	r3, [r7, #4]
    }
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
 8007fbc:	e7fd      	b.n	8007fba <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff8 <vPortValidateInterruptPriority+0x78>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ffc <vPortValidateInterruptPriority+0x7c>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d90b      	bls.n	8007fe6 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	603b      	str	r3, [r7, #0]
    }
 8007fe0:	bf00      	nop
 8007fe2:	bf00      	nop
 8007fe4:	e7fd      	b.n	8007fe2 <vPortValidateInterruptPriority+0x62>
    }
 8007fe6:	bf00      	nop
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr
 8007ff0:	e000e3f0 	.word	0xe000e3f0
 8007ff4:	200002d0 	.word	0x200002d0
 8007ff8:	e000ed0c 	.word	0xe000ed0c
 8007ffc:	200002d4 	.word	0x200002d4

08008000 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08a      	sub	sp, #40	@ 0x28
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008008:	2300      	movs	r3, #0
 800800a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800800c:	f7fe fd20 	bl	8006a50 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008010:	4b54      	ldr	r3, [pc, #336]	@ (8008164 <pvPortMalloc+0x164>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008018:	f000 f90c 	bl	8008234 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d012      	beq.n	8008048 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8008022:	2208      	movs	r2, #8
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	3308      	adds	r3, #8
 800802e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	43db      	mvns	r3, r3
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	429a      	cmp	r2, r3
 8008038:	d804      	bhi.n	8008044 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	4413      	add	r3, r2
 8008040:	607b      	str	r3, [r7, #4]
 8008042:	e001      	b.n	8008048 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	db71      	blt.n	8008132 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d06e      	beq.n	8008132 <pvPortMalloc+0x132>
 8008054:	4b44      	ldr	r3, [pc, #272]	@ (8008168 <pvPortMalloc+0x168>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	429a      	cmp	r2, r3
 800805c:	d869      	bhi.n	8008132 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800805e:	4b43      	ldr	r3, [pc, #268]	@ (800816c <pvPortMalloc+0x16c>)
 8008060:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008062:	4b42      	ldr	r3, [pc, #264]	@ (800816c <pvPortMalloc+0x16c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008068:	e004      	b.n	8008074 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	429a      	cmp	r2, r3
 800807c:	d903      	bls.n	8008086 <pvPortMalloc+0x86>
 800807e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1f1      	bne.n	800806a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008086:	4b37      	ldr	r3, [pc, #220]	@ (8008164 <pvPortMalloc+0x164>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800808c:	429a      	cmp	r2, r3
 800808e:	d050      	beq.n	8008132 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2208      	movs	r2, #8
 8008096:	4413      	add	r3, r2
 8008098:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	1ad2      	subs	r2, r2, r3
 80080aa:	2308      	movs	r3, #8
 80080ac:	005b      	lsls	r3, r3, #1
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d920      	bls.n	80080f4 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4413      	add	r3, r2
 80080b8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f003 0307 	and.w	r3, r3, #7
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00b      	beq.n	80080dc <pvPortMalloc+0xdc>
        __asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	613b      	str	r3, [r7, #16]
    }
 80080d6:	bf00      	nop
 80080d8:	bf00      	nop
 80080da:	e7fd      	b.n	80080d8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	1ad2      	subs	r2, r2, r3
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80080e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080ee:	6978      	ldr	r0, [r7, #20]
 80080f0:	f000 f8fc 	bl	80082ec <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008168 <pvPortMalloc+0x168>)
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	4a1a      	ldr	r2, [pc, #104]	@ (8008168 <pvPortMalloc+0x168>)
 8008100:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008102:	4b19      	ldr	r3, [pc, #100]	@ (8008168 <pvPortMalloc+0x168>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	4b1a      	ldr	r3, [pc, #104]	@ (8008170 <pvPortMalloc+0x170>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	429a      	cmp	r2, r3
 800810c:	d203      	bcs.n	8008116 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800810e:	4b16      	ldr	r3, [pc, #88]	@ (8008168 <pvPortMalloc+0x168>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a17      	ldr	r2, [pc, #92]	@ (8008170 <pvPortMalloc+0x170>)
 8008114:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8008116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008120:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008124:	2200      	movs	r2, #0
 8008126:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008128:	4b12      	ldr	r3, [pc, #72]	@ (8008174 <pvPortMalloc+0x174>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3301      	adds	r3, #1
 800812e:	4a11      	ldr	r2, [pc, #68]	@ (8008174 <pvPortMalloc+0x174>)
 8008130:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008132:	f7fe fc9b 	bl	8006a6c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	f003 0307 	and.w	r3, r3, #7
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00b      	beq.n	8008158 <pvPortMalloc+0x158>
        __asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	60fb      	str	r3, [r7, #12]
    }
 8008152:	bf00      	nop
 8008154:	bf00      	nop
 8008156:	e7fd      	b.n	8008154 <pvPortMalloc+0x154>
    return pvReturn;
 8008158:	69fb      	ldr	r3, [r7, #28]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3728      	adds	r7, #40	@ 0x28
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20002ae0 	.word	0x20002ae0
 8008168:	20002ae4 	.word	0x20002ae4
 800816c:	20002ad8 	.word	0x20002ad8
 8008170:	20002ae8 	.word	0x20002ae8
 8008174:	20002aec 	.word	0x20002aec

08008178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d04b      	beq.n	8008222 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800818a:	2308      	movs	r3, #8
 800818c:	425b      	negs	r3, r3
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	4413      	add	r3, r2
 8008192:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	db0b      	blt.n	80081b8 <vPortFree+0x40>
        __asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	60fb      	str	r3, [r7, #12]
    }
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	e7fd      	b.n	80081b4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00b      	beq.n	80081d8 <vPortFree+0x60>
        __asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	60bb      	str	r3, [r7, #8]
    }
 80081d2:	bf00      	nop
 80081d4:	bf00      	nop
 80081d6:	e7fd      	b.n	80081d4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	0fdb      	lsrs	r3, r3, #31
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01c      	beq.n	8008222 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d118      	bne.n	8008222 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80081fc:	f7fe fc28 	bl	8006a50 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	4b09      	ldr	r3, [pc, #36]	@ (800822c <vPortFree+0xb4>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4413      	add	r3, r2
 800820a:	4a08      	ldr	r2, [pc, #32]	@ (800822c <vPortFree+0xb4>)
 800820c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800820e:	6938      	ldr	r0, [r7, #16]
 8008210:	f000 f86c 	bl	80082ec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008214:	4b06      	ldr	r3, [pc, #24]	@ (8008230 <vPortFree+0xb8>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3301      	adds	r3, #1
 800821a:	4a05      	ldr	r2, [pc, #20]	@ (8008230 <vPortFree+0xb8>)
 800821c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800821e:	f7fe fc25 	bl	8006a6c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008222:	bf00      	nop
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20002ae4 	.word	0x20002ae4
 8008230:	20002af0 	.word	0x20002af0

08008234 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800823a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800823e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008240:	4b25      	ldr	r3, [pc, #148]	@ (80082d8 <prvHeapInit+0xa4>)
 8008242:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00c      	beq.n	8008268 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3307      	adds	r3, #7
 8008252:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 0307 	bic.w	r3, r3, #7
 800825a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	4a1d      	ldr	r2, [pc, #116]	@ (80082d8 <prvHeapInit+0xa4>)
 8008264:	4413      	add	r3, r2
 8008266:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800826c:	4a1b      	ldr	r2, [pc, #108]	@ (80082dc <prvHeapInit+0xa8>)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008272:	4b1a      	ldr	r3, [pc, #104]	@ (80082dc <prvHeapInit+0xa8>)
 8008274:	2200      	movs	r2, #0
 8008276:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	4413      	add	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008280:	2208      	movs	r2, #8
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	1a9b      	subs	r3, r3, r2
 8008286:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 0307 	bic.w	r3, r3, #7
 800828e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4a13      	ldr	r2, [pc, #76]	@ (80082e0 <prvHeapInit+0xac>)
 8008294:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008296:	4b12      	ldr	r3, [pc, #72]	@ (80082e0 <prvHeapInit+0xac>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2200      	movs	r2, #0
 800829c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800829e:	4b10      	ldr	r3, [pc, #64]	@ (80082e0 <prvHeapInit+0xac>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	1ad2      	subs	r2, r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082b4:	4b0a      	ldr	r3, [pc, #40]	@ (80082e0 <prvHeapInit+0xac>)
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	4a08      	ldr	r2, [pc, #32]	@ (80082e4 <prvHeapInit+0xb0>)
 80082c2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	4a07      	ldr	r2, [pc, #28]	@ (80082e8 <prvHeapInit+0xb4>)
 80082ca:	6013      	str	r3, [r2, #0]
}
 80082cc:	bf00      	nop
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bc80      	pop	{r7}
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	200002d8 	.word	0x200002d8
 80082dc:	20002ad8 	.word	0x20002ad8
 80082e0:	20002ae0 	.word	0x20002ae0
 80082e4:	20002ae8 	.word	0x20002ae8
 80082e8:	20002ae4 	.word	0x20002ae4

080082ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082f4:	4b27      	ldr	r3, [pc, #156]	@ (8008394 <prvInsertBlockIntoFreeList+0xa8>)
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	e002      	b.n	8008300 <prvInsertBlockIntoFreeList+0x14>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	429a      	cmp	r2, r3
 8008308:	d8f7      	bhi.n	80082fa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	4413      	add	r3, r2
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	429a      	cmp	r2, r3
 800831a:	d108      	bne.n	800832e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	441a      	add	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	441a      	add	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	429a      	cmp	r2, r3
 8008340:	d118      	bne.n	8008374 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	4b14      	ldr	r3, [pc, #80]	@ (8008398 <prvInsertBlockIntoFreeList+0xac>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d00d      	beq.n	800836a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685a      	ldr	r2, [r3, #4]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	441a      	add	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	e008      	b.n	800837c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800836a:	4b0b      	ldr	r3, [pc, #44]	@ (8008398 <prvInsertBlockIntoFreeList+0xac>)
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	e003      	b.n	800837c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	429a      	cmp	r2, r3
 8008382:	d002      	beq.n	800838a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800838a:	bf00      	nop
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	bc80      	pop	{r7}
 8008392:	4770      	bx	lr
 8008394:	20002ad8 	.word	0x20002ad8
 8008398:	20002ae0 	.word	0x20002ae0

0800839c <memset>:
 800839c:	4603      	mov	r3, r0
 800839e:	4402      	add	r2, r0
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d100      	bne.n	80083a6 <memset+0xa>
 80083a4:	4770      	bx	lr
 80083a6:	f803 1b01 	strb.w	r1, [r3], #1
 80083aa:	e7f9      	b.n	80083a0 <memset+0x4>

080083ac <__libc_init_array>:
 80083ac:	b570      	push	{r4, r5, r6, lr}
 80083ae:	2600      	movs	r6, #0
 80083b0:	4d0c      	ldr	r5, [pc, #48]	@ (80083e4 <__libc_init_array+0x38>)
 80083b2:	4c0d      	ldr	r4, [pc, #52]	@ (80083e8 <__libc_init_array+0x3c>)
 80083b4:	1b64      	subs	r4, r4, r5
 80083b6:	10a4      	asrs	r4, r4, #2
 80083b8:	42a6      	cmp	r6, r4
 80083ba:	d109      	bne.n	80083d0 <__libc_init_array+0x24>
 80083bc:	f000 f828 	bl	8008410 <_init>
 80083c0:	2600      	movs	r6, #0
 80083c2:	4d0a      	ldr	r5, [pc, #40]	@ (80083ec <__libc_init_array+0x40>)
 80083c4:	4c0a      	ldr	r4, [pc, #40]	@ (80083f0 <__libc_init_array+0x44>)
 80083c6:	1b64      	subs	r4, r4, r5
 80083c8:	10a4      	asrs	r4, r4, #2
 80083ca:	42a6      	cmp	r6, r4
 80083cc:	d105      	bne.n	80083da <__libc_init_array+0x2e>
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d4:	4798      	blx	r3
 80083d6:	3601      	adds	r6, #1
 80083d8:	e7ee      	b.n	80083b8 <__libc_init_array+0xc>
 80083da:	f855 3b04 	ldr.w	r3, [r5], #4
 80083de:	4798      	blx	r3
 80083e0:	3601      	adds	r6, #1
 80083e2:	e7f2      	b.n	80083ca <__libc_init_array+0x1e>
 80083e4:	080084bc 	.word	0x080084bc
 80083e8:	080084bc 	.word	0x080084bc
 80083ec:	080084bc 	.word	0x080084bc
 80083f0:	080084c0 	.word	0x080084c0

080083f4 <memcpy>:
 80083f4:	440a      	add	r2, r1
 80083f6:	4291      	cmp	r1, r2
 80083f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80083fc:	d100      	bne.n	8008400 <memcpy+0xc>
 80083fe:	4770      	bx	lr
 8008400:	b510      	push	{r4, lr}
 8008402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008406:	4291      	cmp	r1, r2
 8008408:	f803 4f01 	strb.w	r4, [r3, #1]!
 800840c:	d1f9      	bne.n	8008402 <memcpy+0xe>
 800840e:	bd10      	pop	{r4, pc}

08008410 <_init>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	bf00      	nop
 8008414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008416:	bc08      	pop	{r3}
 8008418:	469e      	mov	lr, r3
 800841a:	4770      	bx	lr

0800841c <_fini>:
 800841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841e:	bf00      	nop
 8008420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008422:	bc08      	pop	{r3}
 8008424:	469e      	mov	lr, r3
 8008426:	4770      	bx	lr
