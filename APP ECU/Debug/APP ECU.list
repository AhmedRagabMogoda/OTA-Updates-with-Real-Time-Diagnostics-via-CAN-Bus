
APP ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053fc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800550c  0800550c  0000650c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005594  08005594  00007044  2**0
                  CONTENTS
  4 .ARM          00000000  08005594  08005594  00007044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005594  08005594  00007044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005594  08005594  00006594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005598  08005598  00006598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000044  20000000  0800559c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bdc  20000044  080055e0  00007044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c20  080055e0  00007c20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022b2f  00000000  00000000  0000706d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b67  00000000  00000000  00029b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000b5cd  00000000  00000000  0002f703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  0003acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001506  00000000  00000000  0003c258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b7f8  00000000  00000000  0003d75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026116  00000000  00000000  00058f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ba90  00000000  00000000  0007f06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011aafc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037d8  00000000  00000000  0011ab40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0011e318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000044 	.word	0x20000044
 800012c:	00000000 	.word	0x00000000
 8000130:	080054f4 	.word	0x080054f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000048 	.word	0x20000048
 800014c:	080054f4 	.word	0x080054f4

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2uiz>:
 800060c:	0042      	lsls	r2, r0, #1
 800060e:	d20e      	bcs.n	800062e <__aeabi_f2uiz+0x22>
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000614:	d30b      	bcc.n	800062e <__aeabi_f2uiz+0x22>
 8000616:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d409      	bmi.n	8000634 <__aeabi_f2uiz+0x28>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	4770      	bx	lr
 800062e:	f04f 0000 	mov.w	r0, #0
 8000632:	4770      	bx	lr
 8000634:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000638:	d101      	bne.n	800063e <__aeabi_f2uiz+0x32>
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	d102      	bne.n	8000644 <__aeabi_f2uiz+0x38>
 800063e:	f04f 30ff 	mov.w	r0, #4294967295
 8000642:	4770      	bx	lr
 8000644:	f04f 0000 	mov.w	r0, #0
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b530      	push	{r4, r5, lr}
 800064e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000650:	2220      	movs	r2, #32
 8000652:	2100      	movs	r1, #0
 8000654:	a80b      	add	r0, sp, #44	@ 0x2c
 8000656:	f004 ff13 	bl	8005480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065a:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065c:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065e:	2100      	movs	r1, #0
 8000660:	eb0d 0002 	add.w	r0, sp, r2
 8000664:	f004 ff0c 	bl	8005480 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000668:	462a      	mov	r2, r5
 800066a:	2100      	movs	r1, #0
 800066c:	a801      	add	r0, sp, #4
 800066e:	f004 ff07 	bl	8005480 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000672:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	e9cd 350e 	strd	r3, r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800067a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	940a      	str	r4, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000684:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f001 fa9f 	bl	8001bc8 <HAL_RCC_OscConfig>
 800068a:	b108      	cbz	r0, 8000690 <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068e:	e7fe      	b.n	800068e <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a0:	4621      	mov	r1, r4
 80006a2:	a805      	add	r0, sp, #20
 80006a4:	f001 fc52 	bl	8001f4c <HAL_RCC_ClockConfig>
 80006a8:	b108      	cbz	r0, 80006ae <SystemClock_Config+0x62>
 80006aa:	b672      	cpsid	i
  while (1)
 80006ac:	e7fe      	b.n	80006ac <SystemClock_Config+0x60>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80006ae:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006b4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80006b6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b8:	f001 fd22 	bl	8002100 <HAL_RCCEx_PeriphCLKConfig>
 80006bc:	b108      	cbz	r0, 80006c2 <SystemClock_Config+0x76>
 80006be:	b672      	cpsid	i
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <SystemClock_Config+0x74>
}
 80006c2:	b015      	add	sp, #84	@ 0x54
 80006c4:	bd30      	pop	{r4, r5, pc}
	...

080006c8 <CAN_FilterConfig_AppECU>:
{
 80006c8:	b500      	push	{lr}
 80006ca:	b08b      	sub	sp, #44	@ 0x2c
    CAN_FilterTypeDef filter = {0};
 80006cc:	2218      	movs	r2, #24
 80006ce:	2100      	movs	r1, #0
 80006d0:	a801      	add	r0, sp, #4
 80006d2:	f004 fed5 	bl	8005480 <memset>
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80006d6:	2301      	movs	r3, #1
    filter.FilterIdHigh = (0x400U << 5) & 0xFFFF;
 80006d8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80006dc:	9307      	str	r3, [sp, #28]
    filter.FilterIdHigh = (0x400U << 5) & 0xFFFF;
 80006de:	9200      	str	r2, [sp, #0]
    filter.FilterActivation = ENABLE;
 80006e0:	9308      	str	r3, [sp, #32]
    filter.FilterMaskIdHigh = 0xFFFF;  /** match all ID bits **/
 80006e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
    filter.SlaveStartFilterBank = 14;   /** default for single CAN */
 80006e6:	230e      	movs	r3, #14
    HAL_CAN_ConfigFilter(&hcan, &filter);
 80006e8:	4669      	mov	r1, sp
 80006ea:	4804      	ldr	r0, [pc, #16]	@ (80006fc <CAN_FilterConfig_AppECU+0x34>)
    filter.FilterMaskIdHigh = 0xFFFF;  /** match all ID bits **/
 80006ec:	9202      	str	r2, [sp, #8]
    filter.SlaveStartFilterBank = 14;   /** default for single CAN */
 80006ee:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_CAN_ConfigFilter(&hcan, &filter);
 80006f0:	f000 fe54 	bl	800139c <HAL_CAN_ConfigFilter>
}
 80006f4:	b00b      	add	sp, #44	@ 0x2c
 80006f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80006fa:	bf00      	nop
 80006fc:	20000180 	.word	0x20000180

08000700 <main>:
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	@ 0x30
  HAL_Init();
 8000704:	f000 fb70 	bl	8000de8 <HAL_Init>
  SystemClock_Config();
 8000708:	f7ff ffa0 	bl	800064c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	2210      	movs	r2, #16
 800070e:	2100      	movs	r1, #0
 8000710:	a805      	add	r0, sp, #20
 8000712:	f004 feb5 	bl	8005480 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b7a      	ldr	r3, [pc, #488]	@ (8000900 <main+0x200>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000718:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800071e:	4879      	ldr	r0, [pc, #484]	@ (8000904 <main+0x204>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	f042 0204 	orr.w	r2, r2, #4
 8000724:	619a      	str	r2, [r3, #24]
 8000726:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	f002 0204 	and.w	r2, r2, #4
 800072e:	9201      	str	r2, [sp, #4]
 8000730:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2500      	movs	r5, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	f042 0208 	orr.w	r2, r2, #8
 800073a:	619a      	str	r2, [r3, #24]
 800073c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	9302      	str	r3, [sp, #8]
 8000746:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000748:	f001 fa38 	bl	8001bbc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000750:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000756:	486b      	ldr	r0, [pc, #428]	@ (8000904 <main+0x204>)
 8000758:	a905      	add	r1, sp, #20
  hadc1.Instance = ADC1;
 800075a:	4c6b      	ldr	r4, [pc, #428]	@ (8000908 <main+0x208>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	e9cd 5307 	strd	r5, r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000760:	f001 f954 	bl	8001a0c <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8000764:	4b69      	ldr	r3, [pc, #420]	@ (800090c <main+0x20c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000766:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8000768:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076a:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	e9cd 5505 	strd	r5, r5, [sp, #20]
 8000772:	9507      	str	r5, [sp, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000774:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000776:	7325      	strb	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000778:	7525      	strb	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077a:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077c:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 800077e:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000780:	f000 fd12 	bl	80011a8 <HAL_ADC_Init>
 8000784:	b108      	cbz	r0, 800078a <main+0x8a>
 8000786:	b672      	cpsid	i
  while (1)
 8000788:	e7fe      	b.n	8000788 <main+0x88>
  sConfig.Channel = ADC_CHANNEL_7;
 800078a:	2307      	movs	r3, #7
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800078c:	9007      	str	r0, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078e:	a905      	add	r1, sp, #20
 8000790:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000792:	e9cd 3605 	strd	r3, r6, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000796:	f000 fbc1 	bl	8000f1c <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	b108      	cbz	r0, 80007a2 <main+0xa2>
 800079e:	b672      	cpsid	i
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <main+0xa0>
  hcan.Init.Prescaler = 4;
 80007a2:	2704      	movs	r7, #4
  hcan.Instance = CAN1;
 80007a4:	485a      	ldr	r0, [pc, #360]	@ (8000910 <main+0x210>)
  hcan.Init.Prescaler = 4;
 80007a6:	4a5b      	ldr	r2, [pc, #364]	@ (8000914 <main+0x214>)
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007a8:	f44f 2e40 	mov.w	lr, #786432	@ 0xc0000
  hcan.Init.Prescaler = 4;
 80007ac:	e9c0 2700 	strd	r2, r7, [r0]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007b4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007b8:	e9c0 e204 	strd	lr, r2, [r0, #16]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007bc:	6183      	str	r3, [r0, #24]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007be:	8383      	strh	r3, [r0, #28]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007c0:	f000 fd71 	bl	80012a6 <HAL_CAN_Init>
 80007c4:	4605      	mov	r5, r0
 80007c6:	b108      	cbz	r0, 80007cc <main+0xcc>
 80007c8:	b672      	cpsid	i
  while (1)
 80007ca:	e7fe      	b.n	80007ca <main+0xca>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007cc:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ce:	e9cd 0003 	strd	r0, r0, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d2:	221c      	movs	r2, #28
 80007d4:	a805      	add	r0, sp, #20
 80007d6:	f004 fe53 	bl	8005480 <memset>
  htim2.Init.Prescaler = 63;
 80007da:	233f      	movs	r3, #63	@ 0x3f
 80007dc:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
  htim2.Instance = TIM2;
 80007e0:	4c4d      	ldr	r4, [pc, #308]	@ (8000918 <main+0x218>)
  htim2.Init.Prescaler = 63;
 80007e2:	e9c4 c300 	strd	ip, r3, [r4]
  htim2.Init.Period = 999;
 80007e6:	f240 33e7 	movw	r3, #999	@ 0x3e7
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007ea:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ec:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007f4:	f001 feb8 	bl	8002568 <HAL_TIM_PWM_Init>
 80007f8:	b108      	cbz	r0, 80007fe <main+0xfe>
 80007fa:	b672      	cpsid	i
  while (1)
 80007fc:	e7fe      	b.n	80007fc <main+0xfc>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	e9cd 0003 	strd	r0, r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000802:	a903      	add	r1, sp, #12
 8000804:	4620      	mov	r0, r4
 8000806:	f002 f917 	bl	8002a38 <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4602      	mov	r2, r0
 800080c:	b108      	cbz	r0, 8000812 <main+0x112>
 800080e:	b672      	cpsid	i
  while (1)
 8000810:	e7fe      	b.n	8000810 <main+0x110>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000812:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000814:	9007      	str	r0, [sp, #28]
  sConfigOC.Pulse = 0;
 8000816:	e9cd 3005 	strd	r3, r0, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081a:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081c:	a905      	add	r1, sp, #20
 800081e:	4620      	mov	r0, r4
 8000820:	f001 ff26 	bl	8002670 <HAL_TIM_PWM_ConfigChannel>
 8000824:	b108      	cbz	r0, 800082a <main+0x12a>
 8000826:	b672      	cpsid	i
  while (1)
 8000828:	e7fe      	b.n	8000828 <main+0x128>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800082a:	463a      	mov	r2, r7
 800082c:	4620      	mov	r0, r4
 800082e:	a905      	add	r1, sp, #20
 8000830:	f001 ff1e 	bl	8002670 <HAL_TIM_PWM_ConfigChannel>
 8000834:	4605      	mov	r5, r0
 8000836:	b108      	cbz	r0, 800083c <main+0x13c>
 8000838:	b672      	cpsid	i
  while (1)
 800083a:	e7fe      	b.n	800083a <main+0x13a>
  HAL_TIM_MspPostInit(&htim2);
 800083c:	4620      	mov	r0, r4
 800083e:	f000 f975 	bl	8000b2c <HAL_TIM_MspPostInit>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000842:	2210      	movs	r2, #16
 8000844:	4629      	mov	r1, r5
 8000846:	a805      	add	r0, sp, #20
  htim3.Instance = TIM3;
 8000848:	4c34      	ldr	r4, [pc, #208]	@ (800091c <main+0x21c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084a:	e9cd 5503 	strd	r5, r5, [sp, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800084e:	f004 fe17 	bl	8005480 <memset>
  htim3.Instance = TIM3;
 8000852:	4b33      	ldr	r3, [pc, #204]	@ (8000920 <main+0x220>)
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000854:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 0;
 8000856:	e9c4 3500 	strd	r3, r5, [r4]
  htim3.Init.Period = 65535;
 800085a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	60a5      	str	r5, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000864:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000866:	f001 feab 	bl	80025c0 <HAL_TIM_IC_Init>
 800086a:	b108      	cbz	r0, 8000870 <main+0x170>
 800086c:	b672      	cpsid	i
  while (1)
 800086e:	e7fe      	b.n	800086e <main+0x16e>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	e9cd 0003 	strd	r0, r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000874:	a903      	add	r1, sp, #12
 8000876:	4620      	mov	r0, r4
 8000878:	f002 f8de 	bl	8002a38 <HAL_TIMEx_MasterConfigSynchronization>
 800087c:	4602      	mov	r2, r0
 800087e:	b108      	cbz	r0, 8000884 <main+0x184>
 8000880:	b672      	cpsid	i
  while (1)
 8000882:	e7fe      	b.n	8000882 <main+0x182>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000884:	e9cd 0605 	strd	r0, r6, [sp, #20]
  sConfigIC.ICFilter = 0;
 8000888:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800088c:	a905      	add	r1, sp, #20
 800088e:	4620      	mov	r0, r4
 8000890:	f001 ff70 	bl	8002774 <HAL_TIM_IC_ConfigChannel>
 8000894:	b108      	cbz	r0, 800089a <main+0x19a>
 8000896:	b672      	cpsid	i
  while (1)
 8000898:	e7fe      	b.n	8000898 <main+0x198>
  huart1.Init.BaudRate = 9600;
 800089a:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
  huart1.Instance = USART1;
 800089e:	4821      	ldr	r0, [pc, #132]	@ (8000924 <main+0x224>)
  huart1.Init.BaudRate = 9600;
 80008a0:	4c21      	ldr	r4, [pc, #132]	@ (8000928 <main+0x228>)
 80008a2:	e9c0 4300 	strd	r4, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a8:	240c      	movs	r4, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008aa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b2:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b6:	f002 f957 	bl	8002b68 <HAL_UART_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b108      	cbz	r0, 80008c2 <main+0x1c2>
 80008be:	b672      	cpsid	i
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <main+0x1c0>
  huart2.Init.BaudRate = 115200;
 80008c2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
  huart2.Instance = USART2;
 80008c6:	4819      	ldr	r0, [pc, #100]	@ (800092c <main+0x22c>)
  huart2.Init.BaudRate = 115200;
 80008c8:	4919      	ldr	r1, [pc, #100]	@ (8000930 <main+0x230>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ca:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80008ce:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d2:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008da:	f002 f945 	bl	8002b68 <HAL_UART_Init>
 80008de:	b108      	cbz	r0, 80008e4 <main+0x1e4>
 80008e0:	b672      	cpsid	i
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <main+0x1e2>
  CAN_FilterConfig_AppECU();
 80008e4:	f7ff fef0 	bl	80006c8 <CAN_FilterConfig_AppECU>
  HAL_CAN_Start(&hcan);
 80008e8:	4809      	ldr	r0, [pc, #36]	@ (8000910 <main+0x210>)
 80008ea:	f000 fdc7 	bl	800147c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80008ee:	2102      	movs	r1, #2
 80008f0:	4807      	ldr	r0, [pc, #28]	@ (8000910 <main+0x210>)
 80008f2:	f000 feb3 	bl	800165c <HAL_CAN_ActivateNotification>
  FreeRTOS_Init();
 80008f6:	f002 fea3 	bl	8003640 <FreeRTOS_Init>
  Start_Scheduler();
 80008fa:	f002 feb4 	bl	8003666 <Start_Scheduler>
  while (1)
 80008fe:	e7fe      	b.n	80008fe <main+0x1fe>
 8000900:	40021000 	.word	0x40021000
 8000904:	40010c00 	.word	0x40010c00
 8000908:	200001a8 	.word	0x200001a8
 800090c:	40012400 	.word	0x40012400
 8000910:	20000180 	.word	0x20000180
 8000914:	40006400 	.word	0x40006400
 8000918:	20000138 	.word	0x20000138
 800091c:	200000f0 	.word	0x200000f0
 8000920:	40000400 	.word	0x40000400
 8000924:	200000a8 	.word	0x200000a8
 8000928:	40013800 	.word	0x40013800
 800092c:	20000060 	.word	0x20000060
 8000930:	40004400 	.word	0x40004400

08000934 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8000934:	6802      	ldr	r2, [r0, #0]
 8000936:	4b03      	ldr	r3, [pc, #12]	@ (8000944 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000938:	429a      	cmp	r2, r3
 800093a:	d101      	bne.n	8000940 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800093c:	f000 ba66 	b.w	8000e0c <HAL_IncTick>
}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40012c00 	.word	0x40012c00

08000948 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000948:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <HAL_MspInit+0x3c>)
{
 800094a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800094c:	699a      	ldr	r2, [r3, #24]
 800094e:	f042 0201 	orr.w	r2, r2, #1
 8000952:	619a      	str	r2, [r3, #24]
 8000954:	699a      	ldr	r2, [r3, #24]
 8000956:	f002 0201 	and.w	r2, r2, #1
 800095a:	9200      	str	r2, [sp, #0]
 800095c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	69da      	ldr	r2, [r3, #28]
 8000960:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000964:	61da      	str	r2, [r3, #28]
 8000966:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000968:	4a07      	ldr	r2, [pc, #28]	@ (8000988 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000972:	6853      	ldr	r3, [r2, #4]
 8000974:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000978:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800097c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	b002      	add	sp, #8
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000
 8000988:	40010000 	.word	0x40010000

0800098c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800098c:	b510      	push	{r4, lr}
 800098e:	4604      	mov	r4, r0
 8000990:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	2210      	movs	r2, #16
 8000994:	2100      	movs	r1, #0
 8000996:	a802      	add	r0, sp, #8
 8000998:	f004 fd72 	bl	8005480 <memset>
  if(hadc->Instance==ADC1)
 800099c:	6822      	ldr	r2, [r4, #0]
 800099e:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <HAL_ADC_MspInit+0x64>)
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d123      	bne.n	80009ec <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009a4:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 80009a8:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	4812      	ldr	r0, [pc, #72]	@ (80009f4 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80009b0:	619a      	str	r2, [r3, #24]
 80009b2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009b6:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80009ba:	9200      	str	r2, [sp, #0]
 80009bc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	699a      	ldr	r2, [r3, #24]
 80009c0:	f042 0204 	orr.w	r2, r2, #4
 80009c4:	619a      	str	r2, [r3, #24]
 80009c6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d2:	2303      	movs	r3, #3
 80009d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f001 f818 	bl	8001a0c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 7, 0);
 80009dc:	2012      	movs	r0, #18
 80009de:	2200      	movs	r2, #0
 80009e0:	2107      	movs	r1, #7
 80009e2:	f000 ff6f 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80009e6:	2012      	movs	r0, #18
 80009e8:	f000 ff9c 	bl	8001924 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009ec:	b006      	add	sp, #24
 80009ee:	bd10      	pop	{r4, pc}
 80009f0:	40012400 	.word	0x40012400
 80009f4:	40010800 	.word	0x40010800

080009f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009f8:	b510      	push	{r4, lr}
 80009fa:	4604      	mov	r4, r0
 80009fc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	2210      	movs	r2, #16
 8000a00:	2100      	movs	r1, #0
 8000a02:	a802      	add	r0, sp, #8
 8000a04:	f004 fd3c 	bl	8005480 <memset>
  if(hcan->Instance==CAN1)
 8000a08:	6822      	ldr	r2, [r4, #0]
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <HAL_CAN_MspInit+0x88>)
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d135      	bne.n	8000a7c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a10:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
 8000a14:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	481b      	ldr	r0, [pc, #108]	@ (8000a84 <HAL_CAN_MspInit+0x8c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a18:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8000a1c:	61da      	str	r2, [r3, #28]
 8000a1e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a22:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8000a26:	9200      	str	r2, [sp, #0]
 8000a28:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	699a      	ldr	r2, [r3, #24]
 8000a2c:	f042 0204 	orr.w	r2, r2, #4
 8000a30:	619a      	str	r2, [r3, #24]
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a40:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f000 ffe3 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a50:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <HAL_CAN_MspInit+0x8c>)
 8000a54:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a56:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f000 ffd8 	bl	8001a0c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 7, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2107      	movs	r1, #7
 8000a60:	2013      	movs	r0, #19
 8000a62:	f000 ff2f 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000a66:	2013      	movs	r0, #19
 8000a68:	f000 ff5c 	bl	8001924 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 7, 0);
 8000a6c:	2014      	movs	r0, #20
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2107      	movs	r1, #7
 8000a72:	f000 ff27 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000a76:	2014      	movs	r0, #20
 8000a78:	f000 ff54 	bl	8001924 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a7c:	b006      	add	sp, #24
 8000a7e:	bd10      	pop	{r4, pc}
 8000a80:	40006400 	.word	0x40006400
 8000a84:	40010800 	.word	0x40010800

08000a88 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8000a88:	6803      	ldr	r3, [r0, #0]
{
 8000a8a:	b507      	push	{r0, r1, r2, lr}
  if(htim_pwm->Instance==TIM2)
 8000a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a90:	d115      	bne.n	8000abe <HAL_TIM_PWM_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a92:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000a96:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 8000a98:	2107      	movs	r1, #7
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a9a:	f042 0201 	orr.w	r2, r2, #1
 8000a9e:	61da      	str	r2, [r3, #28]
 8000aa0:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 8000aa2:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 8000aaa:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 8000aae:	f000 ff09 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ab2:	201c      	movs	r0, #28

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ab4:	b003      	add	sp, #12
 8000ab6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000aba:	f000 bf33 	b.w	8001924 <HAL_NVIC_EnableIRQ>
}
 8000abe:	b003      	add	sp, #12
 8000ac0:	f85d fb04 	ldr.w	pc, [sp], #4

08000ac4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000ac4:	b510      	push	{r4, lr}
 8000ac6:	4604      	mov	r4, r0
 8000ac8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	2210      	movs	r2, #16
 8000acc:	2100      	movs	r1, #0
 8000ace:	a802      	add	r0, sp, #8
 8000ad0:	f004 fcd6 	bl	8005480 <memset>
  if(htim_ic->Instance==TIM3)
 8000ad4:	6822      	ldr	r2, [r4, #0]
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <HAL_TIM_IC_MspInit+0x60>)
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d121      	bne.n	8000b20 <HAL_TIM_IC_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000adc:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8000ae0:	69da      	ldr	r2, [r3, #28]
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	4811      	ldr	r0, [pc, #68]	@ (8000b28 <HAL_TIM_IC_MspInit+0x64>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ae4:	f042 0202 	orr.w	r2, r2, #2
 8000ae8:	61da      	str	r2, [r3, #28]
 8000aea:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aee:	f002 0202 	and.w	r2, r2, #2
 8000af2:	9200      	str	r2, [sp, #0]
 8000af4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	699a      	ldr	r2, [r3, #24]
 8000af8:	f042 0204 	orr.w	r2, r2, #4
 8000afc:	619a      	str	r2, [r3, #24]
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b08:	2340      	movs	r3, #64	@ 0x40
 8000b0a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f000 ff7e 	bl	8001a0c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 7, 0);
 8000b10:	201d      	movs	r0, #29
 8000b12:	2200      	movs	r2, #0
 8000b14:	2107      	movs	r1, #7
 8000b16:	f000 fed5 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b1a:	201d      	movs	r0, #29
 8000b1c:	f000 ff02 	bl	8001924 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000b20:	b006      	add	sp, #24
 8000b22:	bd10      	pop	{r4, pc}
 8000b24:	40000400 	.word	0x40000400
 8000b28:	40010800 	.word	0x40010800

08000b2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b2c:	b510      	push	{r4, lr}
 8000b2e:	4604      	mov	r4, r0
 8000b30:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	2210      	movs	r2, #16
 8000b34:	2100      	movs	r1, #0
 8000b36:	a802      	add	r0, sp, #8
 8000b38:	f004 fca2 	bl	8005480 <memset>
  if(htim->Instance==TIM2)
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b42:	d12f      	bne.n	8000ba4 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000b48:	699a      	ldr	r2, [r3, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	f042 0204 	orr.w	r2, r2, #4
 8000b50:	619a      	str	r2, [r3, #24]
 8000b52:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	4814      	ldr	r0, [pc, #80]	@ (8000ba8 <HAL_TIM_MspPostInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	f002 0204 	and.w	r2, r2, #4
 8000b5a:	9200      	str	r2, [sp, #0]
 8000b5c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	f042 0208 	orr.w	r2, r2, #8
 8000b66:	619a      	str	r2, [r3, #24]
 8000b68:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b78:	e9cd 3402 	strd	r3, r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f000 ff46 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b80:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	480a      	ldr	r0, [pc, #40]	@ (8000bac <HAL_TIM_MspPostInit+0x80>)
 8000b84:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f000 ff3d 	bl	8001a0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000b92:	4a07      	ldr	r2, [pc, #28]	@ (8000bb0 <HAL_TIM_MspPostInit+0x84>)
 8000b94:	6853      	ldr	r3, [r2, #4]
 8000b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000b9a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ba2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ba4:	b006      	add	sp, #24
 8000ba6:	bd10      	pop	{r4, pc}
 8000ba8:	40010800 	.word	0x40010800
 8000bac:	40010c00 	.word	0x40010c00
 8000bb0:	40010000 	.word	0x40010000

08000bb4 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	2210      	movs	r2, #16
{
 8000bb6:	b510      	push	{r4, lr}
 8000bb8:	4604      	mov	r4, r0
 8000bba:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	eb0d 0002 	add.w	r0, sp, r2
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f004 fc5d 	bl	8005480 <memset>
  if(huart->Instance==USART1)
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	4a32      	ldr	r2, [pc, #200]	@ (8000c94 <HAL_UART_MspInit+0xe0>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d131      	bne.n	8000c32 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bce:	4b32      	ldr	r3, [pc, #200]	@ (8000c98 <HAL_UART_MspInit+0xe4>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bd4:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	4831      	ldr	r0, [pc, #196]	@ (8000c9c <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000bdc:	619a      	str	r2, [r3, #24]
 8000bde:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000be6:	9200      	str	r2, [sp, #0]
 8000be8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	699a      	ldr	r2, [r3, #24]
 8000bec:	f042 0204 	orr.w	r2, r2, #4
 8000bf0:	619a      	str	r2, [r3, #24]
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	9301      	str	r3, [sp, #4]
 8000bfa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c02:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c06:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f000 ff00 	bl	8001a0c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	4822      	ldr	r0, [pc, #136]	@ (8000c9c <HAL_UART_MspInit+0xe8>)
 8000c12:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f000 fef7 	bl	8001a0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8000c1e:	2025      	movs	r0, #37	@ 0x25
 8000c20:	4622      	mov	r2, r4
 8000c22:	2107      	movs	r1, #7
 8000c24:	f000 fe4e 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c28:	2025      	movs	r0, #37	@ 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c2a:	f000 fe7b 	bl	8001924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c2e:	b008      	add	sp, #32
 8000c30:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8000c32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <HAL_UART_MspInit+0xec>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d1fa      	bne.n	8000c2e <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c38:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <HAL_UART_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	4818      	ldr	r0, [pc, #96]	@ (8000c9c <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c40:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000c44:	61da      	str	r2, [r3, #28]
 8000c46:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4a:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000c4e:	9202      	str	r2, [sp, #8]
 8000c50:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	699a      	ldr	r2, [r3, #24]
 8000c54:	f042 0204 	orr.w	r2, r2, #4
 8000c58:	619a      	str	r2, [r3, #24]
 8000c5a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	9303      	str	r3, [sp, #12]
 8000c64:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f000 fecc 	bl	8001a0c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c74:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	4809      	ldr	r0, [pc, #36]	@ (8000c9c <HAL_UART_MspInit+0xe8>)
 8000c78:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f000 fec4 	bl	8001a0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8000c84:	2026      	movs	r0, #38	@ 0x26
 8000c86:	4622      	mov	r2, r4
 8000c88:	2107      	movs	r1, #7
 8000c8a:	f000 fe1b 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c8e:	2026      	movs	r0, #38	@ 0x26
 8000c90:	e7cb      	b.n	8000c2a <HAL_UART_MspInit+0x76>
 8000c92:	bf00      	nop
 8000c94:	40013800 	.word	0x40013800
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010800 	.word	0x40010800
 8000ca0:	40004400 	.word	0x40004400

08000ca4 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <HAL_InitTick+0x7c>)
{
 8000ca6:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ca8:	699a      	ldr	r2, [r3, #24]
{
 8000caa:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000cb0:	619a      	str	r2, [r3, #24]
 8000cb2:	699b      	ldr	r3, [r3, #24]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb4:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cba:	9302      	str	r3, [sp, #8]
{
 8000cbc:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cbe:	a803      	add	r0, sp, #12

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cc0:	4d18      	ldr	r5, [pc, #96]	@ (8000d24 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cc2:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc4:	f001 f9fe 	bl	80020c4 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cc8:	f001 f9ec 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8000ccc:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <HAL_InitTick+0x84>)
 8000cce:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cd0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000cd4:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <HAL_InitTick+0x88>)
 8000cd8:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8000cdc:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cde:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ce0:	6068      	str	r0, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8000ce2:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 8000ce4:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 8000cea:	f001 fc11 	bl	8002510 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000cee:	4604      	mov	r4, r0
 8000cf0:	b980      	cbnz	r0, 8000d14 <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000cf2:	4628      	mov	r0, r5
 8000cf4:	f001 faf4 	bl	80022e0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	b958      	cbnz	r0, 8000d14 <HAL_InitTick+0x70>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cfc:	2019      	movs	r0, #25
 8000cfe:	f000 fe11 	bl	8001924 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	2e0f      	cmp	r6, #15
 8000d04:	d809      	bhi.n	8000d1a <HAL_InitTick+0x76>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000d06:	4622      	mov	r2, r4
 8000d08:	4631      	mov	r1, r6
 8000d0a:	2019      	movs	r0, #25
 8000d0c:	f000 fdda 	bl	80018c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <HAL_InitTick+0x8c>)
 8000d12:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8000d14:	4620      	mov	r0, r4
 8000d16:	b008      	add	sp, #32
 8000d18:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 8000d1a:	2401      	movs	r4, #1
 8000d1c:	e7fa      	b.n	8000d14 <HAL_InitTick+0x70>
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000
 8000d24:	200001d8 	.word	0x200001d8
 8000d28:	40012c00 	.word	0x40012c00
 8000d2c:	000f4240 	.word	0x000f4240
 8000d30:	20000008 	.word	0x20000008

08000d34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler>

08000d36 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler>

08000d38 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler>

08000d3a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler>

08000d3c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler>

08000d3e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3e:	4770      	bx	lr

08000d40 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d40:	4801      	ldr	r0, [pc, #4]	@ (8000d48 <ADC1_2_IRQHandler+0x8>)
 8000d42:	f000 b879 	b.w	8000e38 <HAL_ADC_IRQHandler>
 8000d46:	bf00      	nop
 8000d48:	200001a8 	.word	0x200001a8

08000d4c <USB_HP_CAN1_TX_IRQHandler>:
void USB_HP_CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d4c:	4801      	ldr	r0, [pc, #4]	@ (8000d54 <USB_HP_CAN1_TX_IRQHandler+0x8>)
 8000d4e:	f000 bca2 	b.w	8001696 <HAL_CAN_IRQHandler>
 8000d52:	bf00      	nop
 8000d54:	20000180 	.word	0x20000180

08000d58 <USB_LP_CAN1_RX0_IRQHandler>:
}

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
 8000d58:	f7ff bff8 	b.w	8000d4c <USB_HP_CAN1_TX_IRQHandler>

08000d5c <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d5c:	4801      	ldr	r0, [pc, #4]	@ (8000d64 <TIM1_UP_IRQHandler+0x8>)
 8000d5e:	f001 bb02 	b.w	8002366 <HAL_TIM_IRQHandler>
 8000d62:	bf00      	nop
 8000d64:	200001d8 	.word	0x200001d8

08000d68 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d68:	4801      	ldr	r0, [pc, #4]	@ (8000d70 <TIM2_IRQHandler+0x8>)
 8000d6a:	f001 bafc 	b.w	8002366 <HAL_TIM_IRQHandler>
 8000d6e:	bf00      	nop
 8000d70:	20000138 	.word	0x20000138

08000d74 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d74:	4801      	ldr	r0, [pc, #4]	@ (8000d7c <TIM3_IRQHandler+0x8>)
 8000d76:	f001 baf6 	b.w	8002366 <HAL_TIM_IRQHandler>
 8000d7a:	bf00      	nop
 8000d7c:	200000f0 	.word	0x200000f0

08000d80 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d80:	4801      	ldr	r0, [pc, #4]	@ (8000d88 <USART1_IRQHandler+0x8>)
 8000d82:	f001 bf9f 	b.w	8002cc4 <HAL_UART_IRQHandler>
 8000d86:	bf00      	nop
 8000d88:	200000a8 	.word	0x200000a8

08000d8c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d8c:	4801      	ldr	r0, [pc, #4]	@ (8000d94 <USART2_IRQHandler+0x8>)
 8000d8e:	f001 bf99 	b.w	8002cc4 <HAL_UART_IRQHandler>
 8000d92:	bf00      	nop
 8000d94:	20000060 	.word	0x20000060

08000d98 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	4770      	bx	lr
	...

08000d9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d9c:	f7ff fffc 	bl	8000d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da0:	480b      	ldr	r0, [pc, #44]	@ (8000dd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000da2:	490c      	ldr	r1, [pc, #48]	@ (8000dd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000da4:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a09      	ldr	r2, [pc, #36]	@ (8000ddc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000db8:	4c09      	ldr	r4, [pc, #36]	@ (8000de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f004 fb63 	bl	8005490 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dca:	f7ff fc99 	bl	8000700 <main>
  bx lr
 8000dce:	4770      	bx	lr
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8000dd8:	0800559c 	.word	0x0800559c
  ldr r2, =_sbss
 8000ddc:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8000de0:	20002c20 	.word	0x20002c20

08000de4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <CAN1_RX1_IRQHandler>
	...

08000de8 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4a07      	ldr	r2, [pc, #28]	@ (8000e08 <HAL_Init+0x20>)
{
 8000dea:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dee:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	f043 0310 	orr.w	r3, r3, #16
 8000df4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df6:	f000 fd53 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	200f      	movs	r0, #15
 8000dfc:	f7ff ff52 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fda2 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000e04:	2000      	movs	r0, #0
 8000e06:	bd08      	pop	{r3, pc}
 8000e08:	40022000 	.word	0x40022000

08000e0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e0c:	4a03      	ldr	r2, [pc, #12]	@ (8000e1c <HAL_IncTick+0x10>)
 8000e0e:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <HAL_IncTick+0x14>)
 8000e10:	6811      	ldr	r1, [r2, #0]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	440b      	add	r3, r1
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000220 	.word	0x20000220
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e24:	4b01      	ldr	r3, [pc, #4]	@ (8000e2c <HAL_GetTick+0x8>)
 8000e26:	6818      	ldr	r0, [r3, #0]
}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000220 	.word	0x20000220

08000e30 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e30:	6803      	ldr	r3, [r0, #0]
 8000e32:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8000e34:	4770      	bx	lr

08000e36 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8000e36:	4770      	bx	lr

08000e38 <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 8000e38:	6803      	ldr	r3, [r0, #0]
{
 8000e3a:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 8000e3c:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000e3e:	685e      	ldr	r6, [r3, #4]
{
 8000e40:	4604      	mov	r4, r0
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000e42:	06b0      	lsls	r0, r6, #26
 8000e44:	d526      	bpl.n	8000e94 <HAL_ADC_IRQHandler+0x5c>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000e46:	07a9      	lsls	r1, r5, #30
 8000e48:	d524      	bpl.n	8000e94 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e4a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000e4c:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e4e:	bf5e      	ittt	pl
 8000e50:	6aa2      	ldrpl	r2, [r4, #40]	@ 0x28
 8000e52:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 8000e56:	62a2      	strpl	r2, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8000e5e:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8000e62:	d110      	bne.n	8000e86 <HAL_ADC_IRQHandler+0x4e>
 8000e64:	7b22      	ldrb	r2, [r4, #12]
 8000e66:	b972      	cbnz	r2, 8000e86 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	f022 0220 	bic.w	r2, r2, #32
 8000e6e:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e70:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000e72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e76:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e78:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000e7a:	04d8      	lsls	r0, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e7c:	bf5e      	ittt	pl
 8000e7e:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8000e80:	f043 0301 	orrpl.w	r3, r3, #1
 8000e84:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8000e86:	4620      	mov	r0, r4
 8000e88:	f002 f8ec 	bl	8003064 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e8c:	f06f 0212 	mvn.w	r2, #18
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000e94:	0631      	lsls	r1, r6, #24
 8000e96:	d530      	bpl.n	8000efa <HAL_ADC_IRQHandler+0xc2>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000e98:	076a      	lsls	r2, r5, #29
 8000e9a:	d52e      	bpl.n	8000efa <HAL_ADC_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e9c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000e9e:	06db      	lsls	r3, r3, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ea0:	bf5e      	ittt	pl
 8000ea2:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8000ea4:	f443 5300 	orrpl.w	r3, r3, #8192	@ 0x2000
 8000ea8:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000eaa:	6823      	ldr	r3, [r4, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
 8000eb2:	f5b2 4fe0 	cmp.w	r2, #28672	@ 0x7000
 8000eb6:	d00a      	beq.n	8000ece <HAL_ADC_IRQHandler+0x96>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000eb8:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000eba:	0550      	lsls	r0, r2, #21
 8000ebc:	d416      	bmi.n	8000eec <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ec4:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8000ec8:	d110      	bne.n	8000eec <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000eca:	7b22      	ldrb	r2, [r4, #12]
 8000ecc:	b972      	cbnz	r2, 8000eec <HAL_ADC_IRQHandler+0xb4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ed4:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000ed6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000ed8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000edc:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000ede:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000ee0:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ee2:	bf5e      	ittt	pl
 8000ee4:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8000ee6:	f043 0301 	orrpl.w	r3, r3, #1
 8000eea:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000eec:	4620      	mov	r0, r4
 8000eee:	f000 f9d9 	bl	80012a4 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ef2:	f06f 020c 	mvn.w	r2, #12
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000efa:	0672      	lsls	r2, r6, #25
 8000efc:	d50c      	bpl.n	8000f18 <HAL_ADC_IRQHandler+0xe0>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000efe:	07eb      	lsls	r3, r5, #31
 8000f00:	d50a      	bpl.n	8000f18 <HAL_ADC_IRQHandler+0xe0>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f02:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f04:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f0a:	62a3      	str	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f0c:	f7ff ff93 	bl	8000e36 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000f10:	f06f 0201 	mvn.w	r2, #1
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f1c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000f1c:	2300      	movs	r3, #0
{ 
 8000f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000f20:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f22:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{ 
 8000f26:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d06c      	beq.n	8001006 <HAL_ADC_ConfigChannel+0xea>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f32:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f34:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8000f36:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f38:	6808      	ldr	r0, [r1, #0]
 8000f3a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8000f3e:	d822      	bhi.n	8000f86 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f40:	261f      	movs	r6, #31
 8000f42:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8000f44:	3b05      	subs	r3, #5
 8000f46:	409e      	lsls	r6, r3
 8000f48:	ea25 0506 	bic.w	r5, r5, r6
 8000f4c:	fa00 f303 	lsl.w	r3, r0, r3
 8000f50:	432b      	orrs	r3, r5
 8000f52:	6353      	str	r3, [r2, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f54:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f56:	688b      	ldr	r3, [r1, #8]
 8000f58:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8000f5c:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f60:	d929      	bls.n	8000fb6 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f62:	68d6      	ldr	r6, [r2, #12]
 8000f64:	3d1e      	subs	r5, #30
 8000f66:	40a9      	lsls	r1, r5
 8000f68:	ea26 0101 	bic.w	r1, r6, r1
 8000f6c:	40ab      	lsls	r3, r5
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f72:	f1a0 0310 	sub.w	r3, r0, #16
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d925      	bls.n	8000fc6 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f7a:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000f82:	b002      	add	sp, #8
 8000f84:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000f86:	2d0c      	cmp	r5, #12
 8000f88:	f04f 051f 	mov.w	r5, #31
 8000f8c:	d809      	bhi.n	8000fa2 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f8e:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8000f90:	3b23      	subs	r3, #35	@ 0x23
 8000f92:	409d      	lsls	r5, r3
 8000f94:	ea26 0505 	bic.w	r5, r6, r5
 8000f98:	fa00 f303 	lsl.w	r3, r0, r3
 8000f9c:	432b      	orrs	r3, r5
 8000f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa0:	e7d8      	b.n	8000f54 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fa2:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 8000fa4:	3b41      	subs	r3, #65	@ 0x41
 8000fa6:	409d      	lsls	r5, r3
 8000fa8:	ea26 0505 	bic.w	r5, r6, r5
 8000fac:	fa00 f303 	lsl.w	r3, r0, r3
 8000fb0:	432b      	orrs	r3, r5
 8000fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fb4:	e7ce      	b.n	8000f54 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fb6:	6910      	ldr	r0, [r2, #16]
 8000fb8:	40a9      	lsls	r1, r5
 8000fba:	ea20 0101 	bic.w	r1, r0, r1
 8000fbe:	40ab      	lsls	r3, r5
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fc4:	e7d9      	b.n	8000f7a <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8000fc6:	4b11      	ldr	r3, [pc, #68]	@ (800100c <HAL_ADC_ConfigChannel+0xf0>)
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d116      	bne.n	8000ffa <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fcc:	6893      	ldr	r3, [r2, #8]
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	d4d3      	bmi.n	8000f7a <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fd2:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fd4:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fd6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000fda:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fdc:	d1cd      	bne.n	8000f7a <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <HAL_ADC_ConfigChannel+0xf4>)
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	@ (8001014 <HAL_ADC_ConfigChannel+0xf8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fe8:	220a      	movs	r2, #10
 8000fea:	4353      	muls	r3, r2
            wait_loop_index--;
 8000fec:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000fee:	9b01      	ldr	r3, [sp, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0c2      	beq.n	8000f7a <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8000ff4:	9b01      	ldr	r3, [sp, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	e7f8      	b.n	8000fec <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ffa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8000ffc:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ffe:	f043 0320 	orr.w	r3, r3, #32
 8001002:	62a3      	str	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8001004:	e7ba      	b.n	8000f7c <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8001006:	2002      	movs	r0, #2
 8001008:	e7bb      	b.n	8000f82 <HAL_ADC_ConfigChannel+0x66>
 800100a:	bf00      	nop
 800100c:	40012400 	.word	0x40012400
 8001010:	20000000 	.word	0x20000000
 8001014:	000f4240 	.word	0x000f4240

08001018 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001018:	2300      	movs	r3, #0
{
 800101a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 800101c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800101e:	6803      	ldr	r3, [r0, #0]
{
 8001020:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	07d2      	lsls	r2, r2, #31
 8001026:	d502      	bpl.n	800102e <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001028:	2000      	movs	r0, #0
}
 800102a:	b003      	add	sp, #12
 800102c:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	f042 0201 	orr.w	r2, r2, #1
 8001034:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001036:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <ADC_Enable+0x70>)
 8001038:	4a14      	ldr	r2, [pc, #80]	@ (800108c <ADC_Enable+0x74>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001040:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001042:	9b01      	ldr	r3, [sp, #4]
 8001044:	b9e3      	cbnz	r3, 8001080 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8001046:	f7ff feed 	bl	8000e24 <HAL_GetTick>
 800104a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	07db      	lsls	r3, r3, #31
 8001052:	d4e9      	bmi.n	8001028 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001054:	f7ff fee6 	bl	8000e24 <HAL_GetTick>
 8001058:	1b40      	subs	r0, r0, r5
 800105a:	2802      	cmp	r0, #2
 800105c:	d9f6      	bls.n	800104c <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f013 0301 	ands.w	r3, r3, #1
 8001066:	d1f1      	bne.n	800104c <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001068:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          return HAL_ERROR;
 800106a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106c:	f042 0210 	orr.w	r2, r2, #16
 8001070:	62a2      	str	r2, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001072:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8001074:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001078:	f042 0201 	orr.w	r2, r2, #1
 800107c:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800107e:	e7d4      	b.n	800102a <ADC_Enable+0x12>
      wait_loop_index--;
 8001080:	9b01      	ldr	r3, [sp, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	e7dc      	b.n	8001040 <ADC_Enable+0x28>
 8001086:	bf00      	nop
 8001088:	20000000 	.word	0x20000000
 800108c:	000f4240 	.word	0x000f4240

08001090 <HAL_ADC_Start_IT>:
{
 8001090:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001092:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8001096:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001098:	2b01      	cmp	r3, #1
 800109a:	d058      	beq.n	800114e <HAL_ADC_Start_IT+0xbe>
 800109c:	2301      	movs	r3, #1
 800109e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80010a2:	f7ff ffb9 	bl	8001018 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80010a6:	2800      	cmp	r0, #0
 80010a8:	d14d      	bne.n	8001146 <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 80010aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010ac:	4a29      	ldr	r2, [pc, #164]	@ (8001154 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ba:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	4293      	cmp	r3, r2
 80010c0:	d104      	bne.n	80010cc <HAL_ADC_Start_IT+0x3c>
 80010c2:	4925      	ldr	r1, [pc, #148]	@ (8001158 <HAL_ADC_Start_IT+0xc8>)
 80010c4:	684a      	ldr	r2, [r1, #4]
 80010c6:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 80010ca:	d132      	bne.n	8001132 <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010cc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80010ce:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80010d2:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010d4:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010d6:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010d8:	bf41      	itttt	mi
 80010da:	6aa2      	ldrmi	r2, [r4, #40]	@ 0x28
 80010dc:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 80010e0:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 80010e4:	62a2      	strmi	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80010e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010ec:	bf1c      	itt	ne
 80010ee:	6ae2      	ldrne	r2, [r4, #44]	@ 0x2c
 80010f0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80010f4:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80010fc:	f06f 0202 	mvn.w	r2, #2
 8001100:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	f042 0220 	orr.w	r2, r2, #32
 8001108:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001110:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8001114:	d113      	bne.n	800113e <HAL_ADC_Start_IT+0xae>
 8001116:	4a0f      	ldr	r2, [pc, #60]	@ (8001154 <HAL_ADC_Start_IT+0xc4>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d105      	bne.n	8001128 <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800111c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8001120:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001122:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8001126:	d10a      	bne.n	800113e <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800112e:	609a      	str	r2, [r3, #8]
}
 8001130:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001132:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001134:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001138:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800113a:	684a      	ldr	r2, [r1, #4]
 800113c:	e7cb      	b.n	80010d6 <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001144:	e7f3      	b.n	800112e <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 8001146:	2300      	movs	r3, #0
 8001148:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800114c:	e7f0      	b.n	8001130 <HAL_ADC_Start_IT+0xa0>
  __HAL_LOCK(hadc);
 800114e:	2002      	movs	r0, #2
 8001150:	e7ee      	b.n	8001130 <HAL_ADC_Start_IT+0xa0>
 8001152:	bf00      	nop
 8001154:	40012800 	.word	0x40012800
 8001158:	40012400 	.word	0x40012400

0800115c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800115c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800115e:	6803      	ldr	r3, [r0, #0]
{
 8001160:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	07d1      	lsls	r1, r2, #31
 8001166:	d401      	bmi.n	800116c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001168:	2000      	movs	r0, #0
}
 800116a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001174:	f7ff fe56 	bl	8000e24 <HAL_GetTick>
 8001178:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	07db      	lsls	r3, r3, #31
 8001180:	d5f2      	bpl.n	8001168 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001182:	f7ff fe4f 	bl	8000e24 <HAL_GetTick>
 8001186:	1b40      	subs	r0, r0, r5
 8001188:	2802      	cmp	r0, #2
 800118a:	d9f6      	bls.n	800117a <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	07da      	lsls	r2, r3, #31
 8001192:	d5f2      	bpl.n	800117a <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001194:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8001196:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001198:	f043 0310 	orr.w	r3, r3, #16
 800119c:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800119e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80011a6:	e7e0      	b.n	800116a <ADC_ConversionStop_Disable+0xe>

080011a8 <HAL_ADC_Init>:
{
 80011a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80011aa:	4604      	mov	r4, r0
 80011ac:	2800      	cmp	r0, #0
 80011ae:	d06d      	beq.n	800128c <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011b0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80011b2:	b923      	cbnz	r3, 80011be <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80011b4:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80011b6:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 80011ba:	f7ff fbe7 	bl	800098c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011be:	4620      	mov	r0, r4
 80011c0:	f7ff ffcc 	bl	800115c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80011c6:	f013 0310 	ands.w	r3, r3, #16
 80011ca:	d161      	bne.n	8001290 <HAL_ADC_Init+0xe8>
 80011cc:	2800      	cmp	r0, #0
 80011ce:	d15f      	bne.n	8001290 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 80011d0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011d2:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80011d4:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80011d8:	f022 0202 	bic.w	r2, r2, #2
 80011dc:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011e0:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011e2:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80011e4:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011e6:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011e8:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011ea:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011ee:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011f2:	d036      	beq.n	8001262 <HAL_ADC_Init+0xba>
 80011f4:	1e77      	subs	r7, r6, #1
 80011f6:	427d      	negs	r5, r7
 80011f8:	417d      	adcs	r5, r7
 80011fa:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011fc:	7d27      	ldrb	r7, [r4, #20]
 80011fe:	2f01      	cmp	r7, #1
 8001200:	d106      	bne.n	8001210 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001202:	bb82      	cbnz	r2, 8001266 <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001204:	69a2      	ldr	r2, [r4, #24]
 8001206:	3a01      	subs	r2, #1
 8001208:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 800120c:	f442 6500 	orr.w	r5, r2, #2048	@ 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001210:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001212:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001216:	6857      	ldr	r7, [r2, #4]
 8001218:	f427 4769 	bic.w	r7, r7, #59648	@ 0xe900
 800121c:	ea45 0507 	orr.w	r5, r5, r7
 8001220:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001222:	6897      	ldr	r7, [r2, #8]
 8001224:	4d1d      	ldr	r5, [pc, #116]	@ (800129c <HAL_ADC_Init+0xf4>)
 8001226:	ea05 0507 	and.w	r5, r5, r7
 800122a:	ea45 0501 	orr.w	r5, r5, r1
 800122e:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001230:	d001      	beq.n	8001236 <HAL_ADC_Init+0x8e>
 8001232:	2e01      	cmp	r6, #1
 8001234:	d102      	bne.n	800123c <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001236:	6923      	ldr	r3, [r4, #16]
 8001238:	3b01      	subs	r3, #1
 800123a:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800123c:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800123e:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
 8001242:	432b      	orrs	r3, r5
 8001244:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001246:	6892      	ldr	r2, [r2, #8]
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <HAL_ADC_Init+0xf8>)
 800124a:	4013      	ands	r3, r2
 800124c:	4299      	cmp	r1, r3
 800124e:	d113      	bne.n	8001278 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8001250:	2300      	movs	r3, #0
 8001252:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001254:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001256:	f023 0303 	bic.w	r3, r3, #3
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8001260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001262:	4635      	mov	r5, r6
 8001264:	e7ca      	b.n	80011fc <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001266:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001268:	f042 0220 	orr.w	r2, r2, #32
 800126c:	62a2      	str	r2, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001270:	f042 0201 	orr.w	r2, r2, #1
 8001274:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8001276:	e7cb      	b.n	8001210 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8001278:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800127a:	f023 0312 	bic.w	r3, r3, #18
 800127e:	f043 0310 	orr.w	r3, r3, #16
 8001282:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001284:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return HAL_ERROR;
 800128c:	2001      	movs	r0, #1
 800128e:	e7e7      	b.n	8001260 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001290:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8001298:	e7f8      	b.n	800128c <HAL_ADC_Init+0xe4>
 800129a:	bf00      	nop
 800129c:	ffe1f7fd 	.word	0xffe1f7fd
 80012a0:	ff1f0efe 	.word	0xff1f0efe

080012a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80012a4:	4770      	bx	lr

080012a6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012a6:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012a8:	4604      	mov	r4, r0
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d06e      	beq.n	800138c <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012ae:	f890 3020 	ldrb.w	r3, [r0, #32]
 80012b2:	b90b      	cbnz	r3, 80012b8 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012b4:	f7ff fba0 	bl	80009f8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012b8:	6822      	ldr	r2, [r4, #0]
 80012ba:	6813      	ldr	r3, [r2, #0]
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c2:	f7ff fdaf 	bl	8000e24 <HAL_GetTick>
 80012c6:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	07d1      	lsls	r1, r2, #31
 80012ce:	d551      	bpl.n	8001374 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	f022 0202 	bic.w	r2, r2, #2
 80012d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d8:	f7ff fda4 	bl	8000e24 <HAL_GetTick>
 80012dc:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	0792      	lsls	r2, r2, #30
 80012e4:	d454      	bmi.n	8001390 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012e6:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012e8:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012ea:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	bf0c      	ite	eq
 80012f0:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012f4:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 80012f8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80012fa:	7e62      	ldrb	r2, [r4, #25]
 80012fc:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	bf0c      	ite	eq
 8001302:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001306:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 800130a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800130c:	7ea2      	ldrb	r2, [r4, #26]
 800130e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	bf0c      	ite	eq
 8001314:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001318:	f022 0220 	bicne.w	r2, r2, #32
 800131c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800131e:	7ee2      	ldrb	r2, [r4, #27]
 8001320:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	bf0c      	ite	eq
 8001326:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800132a:	f042 0210 	orrne.w	r2, r2, #16
 800132e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001330:	7f22      	ldrb	r2, [r4, #28]
 8001332:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	bf0c      	ite	eq
 8001338:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800133c:	f022 0208 	bicne.w	r2, r2, #8
 8001340:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001342:	7f62      	ldrb	r2, [r4, #29]
 8001344:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	bf0c      	ite	eq
 800134a:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800134e:	f022 0204 	bicne.w	r2, r2, #4
 8001352:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001354:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8001358:	430a      	orrs	r2, r1
 800135a:	6921      	ldr	r1, [r4, #16]
 800135c:	430a      	orrs	r2, r1
 800135e:	6961      	ldr	r1, [r4, #20]
 8001360:	430a      	orrs	r2, r1
 8001362:	6861      	ldr	r1, [r4, #4]
 8001364:	3901      	subs	r1, #1
 8001366:	430a      	orrs	r2, r1
 8001368:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800136a:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800136c:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800136e:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8001372:	e00c      	b.n	800138e <HAL_CAN_Init+0xe8>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001374:	f7ff fd56 	bl	8000e24 <HAL_GetTick>
 8001378:	1b40      	subs	r0, r0, r5
 800137a:	280a      	cmp	r0, #10
 800137c:	d9a4      	bls.n	80012c8 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800137e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001384:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001386:	2305      	movs	r3, #5
 8001388:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800138c:	2001      	movs	r0, #1
}
 800138e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001390:	f7ff fd48 	bl	8000e24 <HAL_GetTick>
 8001394:	1b40      	subs	r0, r0, r5
 8001396:	280a      	cmp	r0, #10
 8001398:	d9a1      	bls.n	80012de <HAL_CAN_Init+0x38>
 800139a:	e7f0      	b.n	800137e <HAL_CAN_Init+0xd8>

0800139c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800139c:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 800139e:	f890 2020 	ldrb.w	r2, [r0, #32]
  CAN_TypeDef *can_ip = hcan->Instance;
 80013a2:	6803      	ldr	r3, [r0, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80013a4:	3a01      	subs	r2, #1
 80013a6:	2a01      	cmp	r2, #1
 80013a8:	d862      	bhi.n	8001470 <HAL_CAN_ConfigFilter+0xd4>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013aa:	2001      	movs	r0, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80013b0:	f042 0201 	orr.w	r2, r2, #1
 80013b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013b8:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013ba:	f8d3 521c 	ldr.w	r5, [r3, #540]	@ 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013be:	f002 041f 	and.w	r4, r2, #31
 80013c2:	40a0      	lsls	r0, r4
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013c4:	ea25 0500 	bic.w	r5, r5, r0
 80013c8:	f8c3 521c 	str.w	r5, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013cc:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013ce:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013d0:	bb95      	cbnz	r5, 8001438 <HAL_CAN_ConfigFilter+0x9c>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013d2:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013d6:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013d8:	4025      	ands	r5, r4
 80013da:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013de:	888d      	ldrh	r5, [r1, #4]
 80013e0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013e4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013e8:	f8c2 5240 	str.w	r5, [r2, #576]	@ 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ec:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013ee:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013f0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013f4:	f8c2 5244 	str.w	r5, [r2, #580]	@ 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013f8:	698a      	ldr	r2, [r1, #24]
 80013fa:	bb7a      	cbnz	r2, 800145c <HAL_CAN_ConfigFilter+0xc0>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001400:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001402:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001406:	690a      	ldr	r2, [r1, #16]
 8001408:	bb62      	cbnz	r2, 8001464 <HAL_CAN_ConfigFilter+0xc8>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800140a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800140e:	4014      	ands	r4, r2
 8001410:	f8c3 4214 	str.w	r4, [r3, #532]	@ 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001414:	6a0a      	ldr	r2, [r1, #32]
 8001416:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001418:	bf04      	itt	eq
 800141a:	f8d3 221c 	ldreq.w	r2, [r3, #540]	@ 0x21c
 800141e:	4302      	orreq	r2, r0

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8001420:	f04f 0000 	mov.w	r0, #0
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001424:	bf08      	it	eq
 8001426:	f8c3 221c 	streq.w	r2, [r3, #540]	@ 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800142a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8001436:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001438:	2d01      	cmp	r5, #1
 800143a:	d1dd      	bne.n	80013f8 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800143c:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001440:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001442:	4305      	orrs	r5, r0
 8001444:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001448:	888d      	ldrh	r5, [r1, #4]
 800144a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800144e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001452:	f8c2 5240 	str.w	r5, [r2, #576]	@ 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001456:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001458:	898d      	ldrh	r5, [r1, #12]
 800145a:	e7c9      	b.n	80013f0 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800145c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001460:	4302      	orrs	r2, r0
 8001462:	e7ce      	b.n	8001402 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001464:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001468:	4302      	orrs	r2, r0
 800146a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800146e:	e7d1      	b.n	8001414 <HAL_CAN_ConfigFilter+0x78>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001470:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001472:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001476:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8001478:	2001      	movs	r0, #1
 800147a:	e7dc      	b.n	8001436 <HAL_CAN_ConfigFilter+0x9a>

0800147c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800147c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800147e:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001482:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8001484:	2b01      	cmp	r3, #1
 8001486:	d11f      	bne.n	80014c8 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001488:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800148a:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 800148c:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001490:	6813      	ldr	r3, [r2, #0]
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001498:	f7ff fcc4 	bl	8000e24 <HAL_GetTick>
 800149c:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	6858      	ldr	r0, [r3, #4]
 80014a2:	f010 0001 	ands.w	r0, r0, #1
 80014a6:	d101      	bne.n	80014ac <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014a8:	6260      	str	r0, [r4, #36]	@ 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 80014aa:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014ac:	f7ff fcba 	bl	8000e24 <HAL_GetTick>
 80014b0:	1b40      	subs	r0, r0, r5
 80014b2:	280a      	cmp	r0, #10
 80014b4:	d9f3      	bls.n	800149e <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014bc:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80014be:	2305      	movs	r3, #5
 80014c0:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80014c4:	2001      	movs	r0, #1
 80014c6:	e7f0      	b.n	80014aa <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014c8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80014ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014ce:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 80014d0:	e7f8      	b.n	80014c4 <HAL_CAN_Start+0x48>

080014d2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80014d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014d4:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014d8:	6804      	ldr	r4, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014da:	3d01      	subs	r5, #1
 80014dc:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014de:	68a6      	ldr	r6, [r4, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80014e0:	d83c      	bhi.n	800155c <HAL_CAN_AddTxMessage+0x8a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014e2:	f016 5fe0 	tst.w	r6, #469762048	@ 0x1c000000
 80014e6:	d033      	beq.n	8001550 <HAL_CAN_AddTxMessage+0x7e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014e8:	2501      	movs	r5, #1
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014ea:	f3c6 6001 	ubfx	r0, r6, #24, #2
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014ee:	4085      	lsls	r5, r0
 80014f0:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014f2:	e9d1 5702 	ldrd	r5, r7, [r1, #8]
 80014f6:	f100 0318 	add.w	r3, r0, #24
 80014fa:	bb15      	cbnz	r5, 8001542 <HAL_CAN_AddTxMessage+0x70>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014fc:	680d      	ldr	r5, [r1, #0]
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	ea47 5745 	orr.w	r7, r7, r5, lsl #21
 8001504:	50e7      	str	r7, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001506:	eb04 1300 	add.w	r3, r4, r0, lsl #4
 800150a:	0105      	lsls	r5, r0, #4

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);

      /* Return function status */
      return HAL_OK;
 800150c:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800150e:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001510:	442c      	add	r4, r5
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001512:	f8c3 6184 	str.w	r6, [r3, #388]	@ 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001516:	7d09      	ldrb	r1, [r1, #20]
 8001518:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800151a:	bf02      	ittt	eq
 800151c:	f8d3 1184 	ldreq.w	r1, [r3, #388]	@ 0x184
 8001520:	f441 7180 	orreq.w	r1, r1, #256	@ 0x100
 8001524:	f8c3 1184 	streq.w	r1, [r3, #388]	@ 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001528:	6851      	ldr	r1, [r2, #4]
 800152a:	f8c4 118c 	str.w	r1, [r4, #396]	@ 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001534:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8001538:	f042 0201 	orr.w	r2, r2, #1
 800153c:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8001540:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001542:	684e      	ldr	r6, [r1, #4]
                                                           pHeader->IDE |
 8001544:	433d      	orrs	r5, r7
 8001546:	ea45 05c6 	orr.w	r5, r5, r6, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	50e5      	str	r5, [r4, r3]
 800154e:	e7da      	b.n	8001506 <HAL_CAN_AddTxMessage+0x34>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001550:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001552:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001556:	6243      	str	r3, [r0, #36]	@ 0x24
      return HAL_ERROR;
 8001558:	2001      	movs	r0, #1
 800155a:	e7f1      	b.n	8001540 <HAL_CAN_AddTxMessage+0x6e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800155c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800155e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001562:	e7f8      	b.n	8001556 <HAL_CAN_AddTxMessage+0x84>

08001564 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8001566:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800156a:	3c01      	subs	r4, #1
 800156c:	2c01      	cmp	r4, #1
 800156e:	d871      	bhi.n	8001654 <HAL_CAN_GetRxMessage+0xf0>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001570:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001572:	b941      	cbnz	r1, 8001586 <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001574:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001576:	07a4      	lsls	r4, r4, #30
 8001578:	d107      	bne.n	800158a <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800157a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800157c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001580:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 8001582:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8001584:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001586:	6934      	ldr	r4, [r6, #16]
 8001588:	e7f5      	b.n	8001576 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800158a:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 800158e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 8001592:	010c      	lsls	r4, r1, #4
 8001594:	f007 0704 	and.w	r7, r7, #4
 8001598:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800159a:	2f00      	cmp	r7, #0
 800159c:	d150      	bne.n	8001640 <HAL_CAN_GetRxMessage+0xdc>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800159e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 80015a2:	0d7f      	lsrs	r7, r7, #21
 80015a4:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80015a6:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015aa:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80015ac:	f007 0702 	and.w	r7, r7, #2
 80015b0:	60d7      	str	r7, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80015b2:	f8d5 71b4 	ldr.w	r7, [r5, #436]	@ 0x1b4
 80015b6:	073f      	lsls	r7, r7, #28
      pHeader->DLC = 8U;
 80015b8:	bf4e      	itee	mi
 80015ba:	2708      	movmi	r7, #8
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015bc:	f8d5 71b4 	ldrpl.w	r7, [r5, #436]	@ 0x1b4
 80015c0:	f007 070f 	andpl.w	r7, r7, #15
 80015c4:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015c6:	f8d5 71b4 	ldr.w	r7, [r5, #436]	@ 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015ca:	f8d5 51b4 	ldr.w	r5, [r5, #436]	@ 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015ce:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015d2:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015d4:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015d6:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015d8:	f8d6 21b8 	ldr.w	r2, [r6, #440]	@ 0x1b8
 80015dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015de:	6802      	ldr	r2, [r0, #0]
 80015e0:	4422      	add	r2, r4
 80015e2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80015e6:	0a12      	lsrs	r2, r2, #8
 80015e8:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015ea:	6802      	ldr	r2, [r0, #0]
 80015ec:	4422      	add	r2, r4
 80015ee:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80015f2:	0c12      	lsrs	r2, r2, #16
 80015f4:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80015f6:	6802      	ldr	r2, [r0, #0]
 80015f8:	4422      	add	r2, r4
 80015fa:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80015fe:	0e12      	lsrs	r2, r2, #24
 8001600:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001602:	6802      	ldr	r2, [r0, #0]
 8001604:	4422      	add	r2, r4
 8001606:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800160a:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800160c:	6802      	ldr	r2, [r0, #0]
 800160e:	4422      	add	r2, r4
 8001610:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8001614:	0a12      	lsrs	r2, r2, #8
 8001616:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001618:	6802      	ldr	r2, [r0, #0]
 800161a:	4422      	add	r2, r4
 800161c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8001620:	0c12      	lsrs	r2, r2, #16
 8001622:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001624:	6802      	ldr	r2, [r0, #0]
 8001626:	4422      	add	r2, r4
 8001628:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800162c:	0e12      	lsrs	r2, r2, #24
 800162e:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001630:	6803      	ldr	r3, [r0, #0]
 8001632:	b951      	cbnz	r1, 800164a <HAL_CAN_GetRxMessage+0xe6>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	f042 0220 	orr.w	r2, r2, #32
 800163a:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 800163c:	2000      	movs	r0, #0
 800163e:	e7a1      	b.n	8001584 <HAL_CAN_GetRxMessage+0x20>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001640:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 8001644:	08ff      	lsrs	r7, r7, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001646:	6057      	str	r7, [r2, #4]
 8001648:	e7ad      	b.n	80015a6 <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	f042 0220 	orr.w	r2, r2, #32
 8001650:	611a      	str	r2, [r3, #16]
 8001652:	e7f3      	b.n	800163c <HAL_CAN_GetRxMessage+0xd8>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001654:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001656:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800165a:	e791      	b.n	8001580 <HAL_CAN_GetRxMessage+0x1c>

0800165c <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800165c:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001660:	3b01      	subs	r3, #1
 8001662:	2b01      	cmp	r3, #1
 8001664:	d805      	bhi.n	8001672 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001666:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8001668:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800166a:	6953      	ldr	r3, [r2, #20]
 800166c:	4319      	orrs	r1, r3
 800166e:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001670:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001672:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001678:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800167a:	2001      	movs	r0, #1
  }
}
 800167c:	4770      	bx	lr

0800167e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 800167e:	4770      	bx	lr

08001680 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 8001680:	4770      	bx	lr

08001682 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 8001682:	4770      	bx	lr

08001684 <HAL_CAN_TxMailbox0AbortCallback>:
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
 8001684:	4770      	bx	lr

08001686 <HAL_CAN_TxMailbox1AbortCallback>:
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
 8001686:	4770      	bx	lr

08001688 <HAL_CAN_TxMailbox2AbortCallback>:
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
 8001688:	4770      	bx	lr

0800168a <HAL_CAN_RxFifo0FullCallback>:
  * @brief  Rx FIFO 0 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 800168a:	4770      	bx	lr

0800168c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 800168c:	4770      	bx	lr

0800168e <HAL_CAN_RxFifo1FullCallback>:
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
 800168e:	4770      	bx	lr

08001690 <HAL_CAN_SleepCallback>:
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
 8001690:	4770      	bx	lr

08001692 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
 8001692:	4770      	bx	lr

08001694 <HAL_CAN_ErrorCallback>:
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
 8001694:	4770      	bx	lr

08001696 <HAL_CAN_IRQHandler>:
{
 8001696:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800169a:	6803      	ldr	r3, [r0, #0]
{
 800169c:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800169e:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016a0:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016a4:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016a8:	f8d3 8008 	ldr.w	r8, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016ac:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016b0:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016b4:	699f      	ldr	r7, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016b6:	d027      	beq.n	8001708 <HAL_CAN_IRQHandler+0x72>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016b8:	f018 0f01 	tst.w	r8, #1
 80016bc:	d007      	beq.n	80016ce <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016be:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016c0:	f018 0f02 	tst.w	r8, #2
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016c4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016c6:	f000 80a6 	beq.w	8001816 <HAL_CAN_IRQHandler+0x180>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016ca:	f7ff ffd8 	bl	800167e <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016ce:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016d0:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80016d4:	d00a      	beq.n	80016ec <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016da:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016dc:	f418 7f00 	tst.w	r8, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016e0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016e2:	f000 80a7 	beq.w	8001834 <HAL_CAN_IRQHandler+0x19e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016e6:	4628      	mov	r0, r5
 80016e8:	f7ff ffca 	bl	8001680 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016ec:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
 80016f0:	d00a      	beq.n	8001708 <HAL_CAN_IRQHandler+0x72>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016f6:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80016f8:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016fc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80016fe:	f000 80a9 	beq.w	8001854 <HAL_CAN_IRQHandler+0x1be>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001702:	4628      	mov	r0, r5
 8001704:	f7ff ffbd 	bl	8001682 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001708:	0730      	lsls	r0, r6, #28
 800170a:	d507      	bpl.n	800171c <HAL_CAN_IRQHandler+0x86>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800170c:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001710:	bf1f      	itttt	ne
 8001712:	2210      	movne	r2, #16
 8001714:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001716:	f444 7400 	orrne.w	r4, r4, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800171a:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800171c:	0771      	lsls	r1, r6, #29
 800171e:	d508      	bpl.n	8001732 <HAL_CAN_IRQHandler+0x9c>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001720:	f01b 0f08 	tst.w	fp, #8
 8001724:	d005      	beq.n	8001732 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001726:	2208      	movs	r2, #8
 8001728:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800172a:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800172c:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800172e:	f7ff ffac 	bl	800168a <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001732:	07b2      	lsls	r2, r6, #30
 8001734:	d506      	bpl.n	8001744 <HAL_CAN_IRQHandler+0xae>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001736:	682b      	ldr	r3, [r5, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	079b      	lsls	r3, r3, #30
 800173c:	d002      	beq.n	8001744 <HAL_CAN_IRQHandler+0xae>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800173e:	4628      	mov	r0, r5
 8001740:	f001 feba 	bl	80034b8 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001744:	0670      	lsls	r0, r6, #25
 8001746:	d507      	bpl.n	8001758 <HAL_CAN_IRQHandler+0xc2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001748:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800174c:	bf1f      	itttt	ne
 800174e:	2210      	movne	r2, #16
 8001750:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001752:	f444 6480 	orrne.w	r4, r4, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001756:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001758:	06b1      	lsls	r1, r6, #26
 800175a:	d508      	bpl.n	800176e <HAL_CAN_IRQHandler+0xd8>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800175c:	f01a 0f08 	tst.w	sl, #8
 8001760:	d005      	beq.n	800176e <HAL_CAN_IRQHandler+0xd8>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001762:	2208      	movs	r2, #8
 8001764:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001766:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001768:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800176a:	f7ff ff90 	bl	800168e <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800176e:	06f2      	lsls	r2, r6, #27
 8001770:	d506      	bpl.n	8001780 <HAL_CAN_IRQHandler+0xea>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001772:	682b      	ldr	r3, [r5, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	079b      	lsls	r3, r3, #30
 8001778:	d002      	beq.n	8001780 <HAL_CAN_IRQHandler+0xea>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800177a:	4628      	mov	r0, r5
 800177c:	f7ff ff86 	bl	800168c <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001780:	03b0      	lsls	r0, r6, #14
 8001782:	d508      	bpl.n	8001796 <HAL_CAN_IRQHandler+0x100>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001784:	f019 0f10 	tst.w	r9, #16
 8001788:	d005      	beq.n	8001796 <HAL_CAN_IRQHandler+0x100>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800178a:	2210      	movs	r2, #16
 800178c:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 800178e:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001790:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001792:	f7ff ff7d 	bl	8001690 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001796:	03f1      	lsls	r1, r6, #15
 8001798:	d508      	bpl.n	80017ac <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800179a:	f019 0f08 	tst.w	r9, #8
 800179e:	d005      	beq.n	80017ac <HAL_CAN_IRQHandler+0x116>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017a0:	2208      	movs	r2, #8
 80017a2:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017a4:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017a6:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017a8:	f7ff ff73 	bl	8001692 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017ac:	0432      	lsls	r2, r6, #16
 80017ae:	d529      	bpl.n	8001804 <HAL_CAN_IRQHandler+0x16e>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017b0:	f019 0f04 	tst.w	r9, #4
 80017b4:	682a      	ldr	r2, [r5, #0]
 80017b6:	d023      	beq.n	8001800 <HAL_CAN_IRQHandler+0x16a>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017b8:	05f3      	lsls	r3, r6, #23
 80017ba:	d503      	bpl.n	80017c4 <HAL_CAN_IRQHandler+0x12e>
 80017bc:	07f8      	lsls	r0, r7, #31
        errorcode |= HAL_CAN_ERROR_EWG;
 80017be:	bf48      	it	mi
 80017c0:	f044 0401 	orrmi.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017c4:	05b1      	lsls	r1, r6, #22
 80017c6:	d503      	bpl.n	80017d0 <HAL_CAN_IRQHandler+0x13a>
 80017c8:	07bb      	lsls	r3, r7, #30
        errorcode |= HAL_CAN_ERROR_EPV;
 80017ca:	bf48      	it	mi
 80017cc:	f044 0402 	orrmi.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017d0:	0570      	lsls	r0, r6, #21
 80017d2:	d503      	bpl.n	80017dc <HAL_CAN_IRQHandler+0x146>
 80017d4:	0779      	lsls	r1, r7, #29
        errorcode |= HAL_CAN_ERROR_BOF;
 80017d6:	bf48      	it	mi
 80017d8:	f044 0404 	orrmi.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017dc:	0533      	lsls	r3, r6, #20
 80017de:	d50f      	bpl.n	8001800 <HAL_CAN_IRQHandler+0x16a>
 80017e0:	f017 0370 	ands.w	r3, r7, #112	@ 0x70
 80017e4:	d00c      	beq.n	8001800 <HAL_CAN_IRQHandler+0x16a>
        switch (esrflags & CAN_ESR_LEC)
 80017e6:	2b40      	cmp	r3, #64	@ 0x40
 80017e8:	d054      	beq.n	8001894 <HAL_CAN_IRQHandler+0x1fe>
 80017ea:	d843      	bhi.n	8001874 <HAL_CAN_IRQHandler+0x1de>
 80017ec:	2b20      	cmp	r3, #32
 80017ee:	d04b      	beq.n	8001888 <HAL_CAN_IRQHandler+0x1f2>
 80017f0:	2b30      	cmp	r3, #48	@ 0x30
 80017f2:	d04c      	beq.n	800188e <HAL_CAN_IRQHandler+0x1f8>
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d044      	beq.n	8001882 <HAL_CAN_IRQHandler+0x1ec>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017f8:	6993      	ldr	r3, [r2, #24]
 80017fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017fe:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001800:	2304      	movs	r3, #4
 8001802:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001804:	b12c      	cbz	r4, 8001812 <HAL_CAN_IRQHandler+0x17c>
    hcan->ErrorCode |= errorcode;
 8001806:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001808:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 800180a:	4323      	orrs	r3, r4
 800180c:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 800180e:	f7ff ff41 	bl	8001694 <HAL_CAN_ErrorCallback>
}
 8001812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001816:	f018 0f04 	tst.w	r8, #4
 800181a:	d105      	bne.n	8001828 <HAL_CAN_IRQHandler+0x192>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800181c:	f018 0f08 	tst.w	r8, #8
 8001820:	d105      	bne.n	800182e <HAL_CAN_IRQHandler+0x198>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001822:	f7ff ff2f 	bl	8001684 <HAL_CAN_TxMailbox0AbortCallback>
 8001826:	e752      	b.n	80016ce <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001828:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800182c:	e750      	b.n	80016d0 <HAL_CAN_IRQHandler+0x3a>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800182e:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8001832:	e74d      	b.n	80016d0 <HAL_CAN_IRQHandler+0x3a>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001834:	f418 6f80 	tst.w	r8, #1024	@ 0x400
 8001838:	d002      	beq.n	8001840 <HAL_CAN_IRQHandler+0x1aa>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800183a:	f444 5400 	orr.w	r4, r4, #8192	@ 0x2000
 800183e:	e755      	b.n	80016ec <HAL_CAN_IRQHandler+0x56>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001840:	f418 6f00 	tst.w	r8, #2048	@ 0x800
 8001844:	d002      	beq.n	800184c <HAL_CAN_IRQHandler+0x1b6>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001846:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800184a:	e74f      	b.n	80016ec <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800184c:	4628      	mov	r0, r5
 800184e:	f7ff ff1a 	bl	8001686 <HAL_CAN_TxMailbox1AbortCallback>
 8001852:	e74b      	b.n	80016ec <HAL_CAN_IRQHandler+0x56>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001854:	f418 2f80 	tst.w	r8, #262144	@ 0x40000
 8001858:	d002      	beq.n	8001860 <HAL_CAN_IRQHandler+0x1ca>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800185a:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 800185e:	e753      	b.n	8001708 <HAL_CAN_IRQHandler+0x72>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001860:	f418 2f00 	tst.w	r8, #524288	@ 0x80000
 8001864:	d002      	beq.n	800186c <HAL_CAN_IRQHandler+0x1d6>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001866:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 800186a:	e74d      	b.n	8001708 <HAL_CAN_IRQHandler+0x72>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800186c:	4628      	mov	r0, r5
 800186e:	f7ff ff0b 	bl	8001688 <HAL_CAN_TxMailbox2AbortCallback>
 8001872:	e749      	b.n	8001708 <HAL_CAN_IRQHandler+0x72>
        switch (esrflags & CAN_ESR_LEC)
 8001874:	2b50      	cmp	r3, #80	@ 0x50
 8001876:	d010      	beq.n	800189a <HAL_CAN_IRQHandler+0x204>
 8001878:	2b60      	cmp	r3, #96	@ 0x60
 800187a:	d1bd      	bne.n	80017f8 <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_CRC;
 800187c:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
            break;
 8001880:	e7ba      	b.n	80017f8 <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_STF;
 8001882:	f044 0408 	orr.w	r4, r4, #8
            break;
 8001886:	e7b7      	b.n	80017f8 <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001888:	f044 0410 	orr.w	r4, r4, #16
            break;
 800188c:	e7b4      	b.n	80017f8 <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_ACK;
 800188e:	f044 0420 	orr.w	r4, r4, #32
            break;
 8001892:	e7b1      	b.n	80017f8 <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_BR;
 8001894:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
            break;
 8001898:	e7ae      	b.n	80017f8 <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_BD;
 800189a:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
            break;
 800189e:	e7ab      	b.n	80017f8 <HAL_CAN_IRQHandler+0x162>

080018a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4907      	ldr	r1, [pc, #28]	@ (80018c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018a2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018a6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80018ae:	0412      	lsls	r2, r2, #16
 80018b0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80018bc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b15      	ldr	r3, [pc, #84]	@ (800191c <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c6:	b530      	push	{r4, r5, lr}
 80018c8:	68dc      	ldr	r4, [r3, #12]
 80018ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	bf28      	it	cs
 80018d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e0:	bf94      	ite	ls
 80018e2:	2400      	movls	r4, #0
 80018e4:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e6:	fa05 f303 	lsl.w	r3, r5, r3
 80018ea:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ee:	40a5      	lsls	r5, r4
 80018f0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80018f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	bfac      	ite	ge
 80018fe:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	4a07      	ldrlt	r2, [pc, #28]	@ (8001920 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001908:	b2db      	uxtb	r3, r3
 800190a:	bfab      	itete	ge
 800190c:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800191a:	bd30      	pop	{r4, r5, pc}
 800191c:	e000ed00 	.word	0xe000ed00
 8001920:	e000ed14 	.word	0xe000ed14

08001924 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001924:	2800      	cmp	r0, #0
 8001926:	db07      	blt.n	8001938 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001928:	2301      	movs	r3, #1
 800192a:	0941      	lsrs	r1, r0, #5
 800192c:	4a03      	ldr	r2, [pc, #12]	@ (800193c <HAL_NVIC_EnableIRQ+0x18>)
 800192e:	f000 001f 	and.w	r0, r0, #31
 8001932:	4083      	lsls	r3, r0
 8001934:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000e100 	.word	0xe000e100

08001940 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001940:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 8001944:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001946:	2a02      	cmp	r2, #2
 8001948:	d006      	beq.n	8001958 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194a:	2204      	movs	r2, #4
 800194c:	6382      	str	r2, [r0, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 800194e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 8001956:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001958:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800195a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800195c:	6811      	ldr	r1, [r2, #0]
 800195e:	f021 010e 	bic.w	r1, r1, #14
 8001962:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001964:	6811      	ldr	r1, [r2, #0]
 8001966:	f021 0101 	bic.w	r1, r1, #1
 800196a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800196c:	2101      	movs	r1, #1
 800196e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001970:	fa01 f202 	lsl.w	r2, r1, r2
 8001974:	6042      	str	r2, [r0, #4]
  return status; 
 8001976:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001978:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 800197c:	e7e8      	b.n	8001950 <HAL_DMA_Abort+0x10>
	...

08001980 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001980:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001982:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8001986:	2b02      	cmp	r3, #2
 8001988:	d003      	beq.n	8001992 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198a:	2304      	movs	r3, #4
 800198c:	6383      	str	r3, [r0, #56]	@ 0x38
        
    status = HAL_ERROR;
 800198e:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001990:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001992:	6803      	ldr	r3, [r0, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	f022 020e 	bic.w	r2, r2, #14
 800199a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019a4:	4a17      	ldr	r2, [pc, #92]	@ (8001a04 <HAL_DMA_Abort_IT+0x84>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d01f      	beq.n	80019ea <HAL_DMA_Abort_IT+0x6a>
 80019aa:	3214      	adds	r2, #20
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d01e      	beq.n	80019ee <HAL_DMA_Abort_IT+0x6e>
 80019b0:	3214      	adds	r2, #20
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d01d      	beq.n	80019f2 <HAL_DMA_Abort_IT+0x72>
 80019b6:	3214      	adds	r2, #20
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d01d      	beq.n	80019f8 <HAL_DMA_Abort_IT+0x78>
 80019bc:	3214      	adds	r2, #20
 80019be:	4293      	cmp	r3, r2
 80019c0:	d01d      	beq.n	80019fe <HAL_DMA_Abort_IT+0x7e>
 80019c2:	3214      	adds	r2, #20
 80019c4:	4293      	cmp	r3, r2
 80019c6:	bf14      	ite	ne
 80019c8:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 80019cc:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <HAL_DMA_Abort_IT+0x88>)
 80019d2:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80019da:	2300      	movs	r3, #0
 80019dc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80019e0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80019e2:	b103      	cbz	r3, 80019e6 <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 80019e4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80019e6:	2000      	movs	r0, #0
 80019e8:	e7d2      	b.n	8001990 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019ea:	2301      	movs	r3, #1
 80019ec:	e7f0      	b.n	80019d0 <HAL_DMA_Abort_IT+0x50>
 80019ee:	2310      	movs	r3, #16
 80019f0:	e7ee      	b.n	80019d0 <HAL_DMA_Abort_IT+0x50>
 80019f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019f6:	e7eb      	b.n	80019d0 <HAL_DMA_Abort_IT+0x50>
 80019f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019fc:	e7e8      	b.n	80019d0 <HAL_DMA_Abort_IT+0x50>
 80019fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a02:	e7e5      	b.n	80019d0 <HAL_DMA_Abort_IT+0x50>
 8001a04:	40020008 	.word	0x40020008
 8001a08:	40020000 	.word	0x40020000

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a10:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001a12:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a14:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8001ba0 <HAL_GPIO_Init+0x194>
 8001a18:	4b62      	ldr	r3, [pc, #392]	@ (8001ba4 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 8001a1a:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8001ba8 <HAL_GPIO_Init+0x19c>
 8001a1e:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8001bac <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a22:	680a      	ldr	r2, [r1, #0]
 8001a24:	fa32 f506 	lsrs.w	r5, r2, r6
 8001a28:	d102      	bne.n	8001a30 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8001a2a:	b003      	add	sp, #12
 8001a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001a30:	2701      	movs	r7, #1
 8001a32:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a34:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8001a38:	ea37 0202 	bics.w	r2, r7, r2
 8001a3c:	d17a      	bne.n	8001b34 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8001a3e:	684a      	ldr	r2, [r1, #4]
 8001a40:	2a03      	cmp	r2, #3
 8001a42:	d807      	bhi.n	8001a54 <HAL_GPIO_Init+0x48>
 8001a44:	3a01      	subs	r2, #1
 8001a46:	2a02      	cmp	r2, #2
 8001a48:	f200 8083 	bhi.w	8001b52 <HAL_GPIO_Init+0x146>
 8001a4c:	e8df f002 	tbb	[pc, r2]
 8001a50:	9792      	.short	0x9792
 8001a52:	9d          	.byte	0x9d
 8001a53:	00          	.byte	0x00
 8001a54:	2a12      	cmp	r2, #18
 8001a56:	f000 8095 	beq.w	8001b84 <HAL_GPIO_Init+0x178>
 8001a5a:	d86d      	bhi.n	8001b38 <HAL_GPIO_Init+0x12c>
 8001a5c:	2a11      	cmp	r2, #17
 8001a5e:	f000 808b 	beq.w	8001b78 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a62:	2dff      	cmp	r5, #255	@ 0xff
 8001a64:	bf98      	it	ls
 8001a66:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a68:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a6c:	bf88      	it	hi
 8001a6e:	f100 0904 	addhi.w	r9, r0, #4
 8001a72:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a76:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a7a:	bf88      	it	hi
 8001a7c:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a7e:	fa0b fa02 	lsl.w	sl, fp, r2
 8001a82:	ea27 070a 	bic.w	r7, r7, sl
 8001a86:	fa04 f202 	lsl.w	r2, r4, r2
 8001a8a:	4317      	orrs	r7, r2
 8001a8c:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a90:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001a94:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8001a98:	d04c      	beq.n	8001b34 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a9a:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001a9e:	f026 0703 	bic.w	r7, r6, #3
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	f8cc 2018 	str.w	r2, [ip, #24]
 8001aaa:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001aae:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8001ab2:	f002 0201 	and.w	r2, r2, #1
 8001ab6:	9201      	str	r2, [sp, #4]
 8001ab8:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001abc:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac0:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ac2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001ac6:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ac8:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001acc:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ad0:	4a37      	ldr	r2, [pc, #220]	@ (8001bb0 <HAL_GPIO_Init+0x1a4>)
 8001ad2:	4290      	cmp	r0, r2
 8001ad4:	d05d      	beq.n	8001b92 <HAL_GPIO_Init+0x186>
 8001ad6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ada:	4290      	cmp	r0, r2
 8001adc:	d05b      	beq.n	8001b96 <HAL_GPIO_Init+0x18a>
 8001ade:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ae2:	4290      	cmp	r0, r2
 8001ae4:	d059      	beq.n	8001b9a <HAL_GPIO_Init+0x18e>
 8001ae6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001aea:	4290      	cmp	r0, r2
 8001aec:	bf14      	ite	ne
 8001aee:	2204      	movne	r2, #4
 8001af0:	2203      	moveq	r2, #3
 8001af2:	fa02 f20a 	lsl.w	r2, r2, sl
 8001af6:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8001afa:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001afc:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001afe:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b02:	bf14      	ite	ne
 8001b04:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b06:	43aa      	biceq	r2, r5
 8001b08:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b0a:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b0c:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b10:	bf14      	ite	ne
 8001b12:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b14:	43aa      	biceq	r2, r5
 8001b16:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8001b18:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1a:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001b1e:	bf14      	ite	ne
 8001b20:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b22:	43aa      	biceq	r2, r5
 8001b24:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001b26:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b28:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001b2c:	bf14      	ite	ne
 8001b2e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b30:	43aa      	biceq	r2, r5
 8001b32:	601a      	str	r2, [r3, #0]
	position++;
 8001b34:	3601      	adds	r6, #1
 8001b36:	e774      	b.n	8001a22 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8001b38:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8001bb4 <HAL_GPIO_Init+0x1a8>
 8001b3c:	454a      	cmp	r2, r9
 8001b3e:	d008      	beq.n	8001b52 <HAL_GPIO_Init+0x146>
 8001b40:	d810      	bhi.n	8001b64 <HAL_GPIO_Init+0x158>
 8001b42:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8001b46:	454a      	cmp	r2, r9
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x146>
 8001b4a:	4572      	cmp	r2, lr
 8001b4c:	d001      	beq.n	8001b52 <HAL_GPIO_Init+0x146>
 8001b4e:	4542      	cmp	r2, r8
 8001b50:	d187      	bne.n	8001a62 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b52:	688a      	ldr	r2, [r1, #8]
 8001b54:	b1da      	cbz	r2, 8001b8e <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b56:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b58:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8001b5c:	bf0c      	ite	eq
 8001b5e:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8001b60:	6147      	strne	r7, [r0, #20]
 8001b62:	e77e      	b.n	8001a62 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8001b64:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8001bb8 <HAL_GPIO_Init+0x1ac>
 8001b68:	454a      	cmp	r2, r9
 8001b6a:	d0f2      	beq.n	8001b52 <HAL_GPIO_Init+0x146>
 8001b6c:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8001b70:	454a      	cmp	r2, r9
 8001b72:	e7ed      	b.n	8001b50 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b74:	68cc      	ldr	r4, [r1, #12]
          break;
 8001b76:	e774      	b.n	8001a62 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b78:	68cc      	ldr	r4, [r1, #12]
 8001b7a:	3404      	adds	r4, #4
          break;
 8001b7c:	e771      	b.n	8001a62 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b7e:	68cc      	ldr	r4, [r1, #12]
 8001b80:	3408      	adds	r4, #8
          break;
 8001b82:	e76e      	b.n	8001a62 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b84:	68cc      	ldr	r4, [r1, #12]
 8001b86:	340c      	adds	r4, #12
          break;
 8001b88:	e76b      	b.n	8001a62 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8001b8a:	2400      	movs	r4, #0
 8001b8c:	e769      	b.n	8001a62 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b8e:	2404      	movs	r4, #4
 8001b90:	e767      	b.n	8001a62 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b92:	2200      	movs	r2, #0
 8001b94:	e7ad      	b.n	8001af2 <HAL_GPIO_Init+0xe6>
 8001b96:	2201      	movs	r2, #1
 8001b98:	e7ab      	b.n	8001af2 <HAL_GPIO_Init+0xe6>
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	e7a9      	b.n	8001af2 <HAL_GPIO_Init+0xe6>
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010400 	.word	0x40010400
 8001ba8:	10210000 	.word	0x10210000
 8001bac:	10110000 	.word	0x10110000
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	10220000 	.word	0x10220000
 8001bb8:	10310000 	.word	0x10310000

08001bbc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bbc:	b10a      	cbz	r2, 8001bc2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bbe:	6101      	str	r1, [r0, #16]
  }
}
 8001bc0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bc2:	0409      	lsls	r1, r1, #16
 8001bc4:	e7fb      	b.n	8001bbe <HAL_GPIO_WritePin+0x2>
	...

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bcc:	4605      	mov	r5, r0
 8001bce:	b338      	cbz	r0, 8001c20 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd0:	6803      	ldr	r3, [r0, #0]
 8001bd2:	07db      	lsls	r3, r3, #31
 8001bd4:	d410      	bmi.n	8001bf8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd6:	682b      	ldr	r3, [r5, #0]
 8001bd8:	079f      	lsls	r7, r3, #30
 8001bda:	d45e      	bmi.n	8001c9a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bdc:	682b      	ldr	r3, [r5, #0]
 8001bde:	0719      	lsls	r1, r3, #28
 8001be0:	f100 8095 	bmi.w	8001d0e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be4:	682b      	ldr	r3, [r5, #0]
 8001be6:	075a      	lsls	r2, r3, #29
 8001be8:	f100 80c1 	bmi.w	8001d6e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bec:	69eb      	ldr	r3, [r5, #28]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f040 812c 	bne.w	8001e4c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	e029      	b.n	8001c4c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf8:	4c90      	ldr	r4, [pc, #576]	@ (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001bfa:	6863      	ldr	r3, [r4, #4]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d007      	beq.n	8001c14 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c04:	6863      	ldr	r3, [r4, #4]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d10a      	bne.n	8001c24 <HAL_RCC_OscConfig+0x5c>
 8001c0e:	6863      	ldr	r3, [r4, #4]
 8001c10:	03de      	lsls	r6, r3, #15
 8001c12:	d507      	bpl.n	8001c24 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	039c      	lsls	r4, r3, #14
 8001c18:	d5dd      	bpl.n	8001bd6 <HAL_RCC_OscConfig+0xe>
 8001c1a:	686b      	ldr	r3, [r5, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1da      	bne.n	8001bd6 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8001c20:	2001      	movs	r0, #1
 8001c22:	e013      	b.n	8001c4c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c24:	686b      	ldr	r3, [r5, #4]
 8001c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2a:	d112      	bne.n	8001c52 <HAL_RCC_OscConfig+0x8a>
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c34:	f7ff f8f6 	bl	8000e24 <HAL_GetTick>
 8001c38:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	0398      	lsls	r0, r3, #14
 8001c3e:	d4ca      	bmi.n	8001bd6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff f8f0 	bl	8000e24 <HAL_GetTick>
 8001c44:	1b80      	subs	r0, r0, r6
 8001c46:	2864      	cmp	r0, #100	@ 0x64
 8001c48:	d9f7      	bls.n	8001c3a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001c4a:	2003      	movs	r0, #3
}
 8001c4c:	b002      	add	sp, #8
 8001c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c52:	b99b      	cbnz	r3, 8001c7c <HAL_RCC_OscConfig+0xb4>
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c5a:	6023      	str	r3, [r4, #0]
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c62:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c64:	f7ff f8de 	bl	8000e24 <HAL_GetTick>
 8001c68:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	6823      	ldr	r3, [r4, #0]
 8001c6c:	0399      	lsls	r1, r3, #14
 8001c6e:	d5b2      	bpl.n	8001bd6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff f8d8 	bl	8000e24 <HAL_GetTick>
 8001c74:	1b80      	subs	r0, r0, r6
 8001c76:	2864      	cmp	r0, #100	@ 0x64
 8001c78:	d9f7      	bls.n	8001c6a <HAL_RCC_OscConfig+0xa2>
 8001c7a:	e7e6      	b.n	8001c4a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	d103      	bne.n	8001c8c <HAL_RCC_OscConfig+0xc4>
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c88:	6023      	str	r3, [r4, #0]
 8001c8a:	e7cf      	b.n	8001c2c <HAL_RCC_OscConfig+0x64>
 8001c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c90:	6023      	str	r3, [r4, #0]
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c98:	e7cb      	b.n	8001c32 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9a:	4c68      	ldr	r4, [pc, #416]	@ (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c9c:	6863      	ldr	r3, [r4, #4]
 8001c9e:	f013 0f0c 	tst.w	r3, #12
 8001ca2:	d007      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ca4:	6863      	ldr	r3, [r4, #4]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d110      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x108>
 8001cae:	6863      	ldr	r3, [r4, #4]
 8001cb0:	03da      	lsls	r2, r3, #15
 8001cb2:	d40d      	bmi.n	8001cd0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	079b      	lsls	r3, r3, #30
 8001cb8:	d502      	bpl.n	8001cc0 <HAL_RCC_OscConfig+0xf8>
 8001cba:	692b      	ldr	r3, [r5, #16]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d1af      	bne.n	8001c20 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	696a      	ldr	r2, [r5, #20]
 8001cc4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001cc8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ccc:	6023      	str	r3, [r4, #0]
 8001cce:	e785      	b.n	8001bdc <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cd0:	692a      	ldr	r2, [r5, #16]
 8001cd2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e40 <HAL_RCC_OscConfig+0x278>)
 8001cd4:	b16a      	cbz	r2, 8001cf2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cda:	f7ff f8a3 	bl	8000e24 <HAL_GetTick>
 8001cde:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	079f      	lsls	r7, r3, #30
 8001ce4:	d4ec      	bmi.n	8001cc0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff f89d 	bl	8000e24 <HAL_GetTick>
 8001cea:	1b80      	subs	r0, r0, r6
 8001cec:	2802      	cmp	r0, #2
 8001cee:	d9f7      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x118>
 8001cf0:	e7ab      	b.n	8001c4a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001cf2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f896 	bl	8000e24 <HAL_GetTick>
 8001cf8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	0798      	lsls	r0, r3, #30
 8001cfe:	f57f af6d 	bpl.w	8001bdc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d02:	f7ff f88f 	bl	8000e24 <HAL_GetTick>
 8001d06:	1b80      	subs	r0, r0, r6
 8001d08:	2802      	cmp	r0, #2
 8001d0a:	d9f6      	bls.n	8001cfa <HAL_RCC_OscConfig+0x132>
 8001d0c:	e79d      	b.n	8001c4a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d0e:	69aa      	ldr	r2, [r5, #24]
 8001d10:	4e4a      	ldr	r6, [pc, #296]	@ (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001d12:	4b4b      	ldr	r3, [pc, #300]	@ (8001e40 <HAL_RCC_OscConfig+0x278>)
 8001d14:	b1e2      	cbz	r2, 8001d50 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001d16:	2201      	movs	r2, #1
 8001d18:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f882 	bl	8000e24 <HAL_GetTick>
 8001d20:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001d24:	079b      	lsls	r3, r3, #30
 8001d26:	d50d      	bpl.n	8001d44 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d28:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001d2c:	4b45      	ldr	r3, [pc, #276]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d34:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001d36:	bf00      	nop
  }
  while (Delay --);
 8001d38:	9b01      	ldr	r3, [sp, #4]
 8001d3a:	1e5a      	subs	r2, r3, #1
 8001d3c:	9201      	str	r2, [sp, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f9      	bne.n	8001d36 <HAL_RCC_OscConfig+0x16e>
 8001d42:	e74f      	b.n	8001be4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff f86e 	bl	8000e24 <HAL_GetTick>
 8001d48:	1b00      	subs	r0, r0, r4
 8001d4a:	2802      	cmp	r0, #2
 8001d4c:	d9e9      	bls.n	8001d22 <HAL_RCC_OscConfig+0x15a>
 8001d4e:	e77c      	b.n	8001c4a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001d50:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001d54:	f7ff f866 	bl	8000e24 <HAL_GetTick>
 8001d58:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001d5c:	079f      	lsls	r7, r3, #30
 8001d5e:	f57f af41 	bpl.w	8001be4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d62:	f7ff f85f 	bl	8000e24 <HAL_GetTick>
 8001d66:	1b00      	subs	r0, r0, r4
 8001d68:	2802      	cmp	r0, #2
 8001d6a:	d9f6      	bls.n	8001d5a <HAL_RCC_OscConfig+0x192>
 8001d6c:	e76d      	b.n	8001c4a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6e:	4c33      	ldr	r4, [pc, #204]	@ (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001d70:	69e3      	ldr	r3, [r4, #28]
 8001d72:	00d8      	lsls	r0, r3, #3
 8001d74:	d424      	bmi.n	8001dc0 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001d76:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	69e3      	ldr	r3, [r4, #28]
 8001d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d7e:	61e3      	str	r3, [r4, #28]
 8001d80:	69e3      	ldr	r3, [r4, #28]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	4e2f      	ldr	r6, [pc, #188]	@ (8001e48 <HAL_RCC_OscConfig+0x280>)
 8001d8c:	6833      	ldr	r3, [r6, #0]
 8001d8e:	05d9      	lsls	r1, r3, #23
 8001d90:	d518      	bpl.n	8001dc4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d92:	68eb      	ldr	r3, [r5, #12]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d126      	bne.n	8001de6 <HAL_RCC_OscConfig+0x21e>
 8001d98:	6a23      	ldr	r3, [r4, #32]
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001da0:	f7ff f840 	bl	8000e24 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001da8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001daa:	6a23      	ldr	r3, [r4, #32]
 8001dac:	079b      	lsls	r3, r3, #30
 8001dae:	d53f      	bpl.n	8001e30 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001db0:	2f00      	cmp	r7, #0
 8001db2:	f43f af1b 	beq.w	8001bec <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db6:	69e3      	ldr	r3, [r4, #28]
 8001db8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dbc:	61e3      	str	r3, [r4, #28]
 8001dbe:	e715      	b.n	8001bec <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001dc0:	2700      	movs	r7, #0
 8001dc2:	e7e2      	b.n	8001d8a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc4:	6833      	ldr	r3, [r6, #0]
 8001dc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dca:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f82a 	bl	8000e24 <HAL_GetTick>
 8001dd0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd2:	6833      	ldr	r3, [r6, #0]
 8001dd4:	05da      	lsls	r2, r3, #23
 8001dd6:	d4dc      	bmi.n	8001d92 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd8:	f7ff f824 	bl	8000e24 <HAL_GetTick>
 8001ddc:	eba0 0008 	sub.w	r0, r0, r8
 8001de0:	2864      	cmp	r0, #100	@ 0x64
 8001de2:	d9f6      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x20a>
 8001de4:	e731      	b.n	8001c4a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de6:	b9ab      	cbnz	r3, 8001e14 <HAL_RCC_OscConfig+0x24c>
 8001de8:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dee:	f023 0301 	bic.w	r3, r3, #1
 8001df2:	6223      	str	r3, [r4, #32]
 8001df4:	6a23      	ldr	r3, [r4, #32]
 8001df6:	f023 0304 	bic.w	r3, r3, #4
 8001dfa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001dfc:	f7ff f812 	bl	8000e24 <HAL_GetTick>
 8001e00:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e02:	6a23      	ldr	r3, [r4, #32]
 8001e04:	0798      	lsls	r0, r3, #30
 8001e06:	d5d3      	bpl.n	8001db0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7ff f80c 	bl	8000e24 <HAL_GetTick>
 8001e0c:	1b80      	subs	r0, r0, r6
 8001e0e:	4540      	cmp	r0, r8
 8001e10:	d9f7      	bls.n	8001e02 <HAL_RCC_OscConfig+0x23a>
 8001e12:	e71a      	b.n	8001c4a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	6a23      	ldr	r3, [r4, #32]
 8001e18:	d103      	bne.n	8001e22 <HAL_RCC_OscConfig+0x25a>
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6223      	str	r3, [r4, #32]
 8001e20:	e7ba      	b.n	8001d98 <HAL_RCC_OscConfig+0x1d0>
 8001e22:	f023 0301 	bic.w	r3, r3, #1
 8001e26:	6223      	str	r3, [r4, #32]
 8001e28:	6a23      	ldr	r3, [r4, #32]
 8001e2a:	f023 0304 	bic.w	r3, r3, #4
 8001e2e:	e7b6      	b.n	8001d9e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e30:	f7fe fff8 	bl	8000e24 <HAL_GetTick>
 8001e34:	1b80      	subs	r0, r0, r6
 8001e36:	4540      	cmp	r0, r8
 8001e38:	d9b7      	bls.n	8001daa <HAL_RCC_OscConfig+0x1e2>
 8001e3a:	e706      	b.n	8001c4a <HAL_RCC_OscConfig+0x82>
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	42420000 	.word	0x42420000
 8001e44:	20000000 	.word	0x20000000
 8001e48:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	4c2a      	ldr	r4, [pc, #168]	@ (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001e4e:	6862      	ldr	r2, [r4, #4]
 8001e50:	f002 020c 	and.w	r2, r2, #12
 8001e54:	2a08      	cmp	r2, #8
 8001e56:	d03e      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	4b27      	ldr	r3, [pc, #156]	@ (8001efc <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e60:	d12c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001e62:	f7fe ffdf 	bl	8000e24 <HAL_GetTick>
 8001e66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	0199      	lsls	r1, r3, #6
 8001e6c:	d420      	bmi.n	8001eb0 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e6e:	6a2b      	ldr	r3, [r5, #32]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e74:	d105      	bne.n	8001e82 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e76:	6862      	ldr	r2, [r4, #4]
 8001e78:	68a9      	ldr	r1, [r5, #8]
 8001e7a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e82:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001e84:	6862      	ldr	r2, [r4, #4]
 8001e86:	430b      	orrs	r3, r1
 8001e88:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8001e8c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001e8e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e90:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_RCC_OscConfig+0x334>)
 8001e94:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001e96:	f7fe ffc5 	bl	8000e24 <HAL_GetTick>
 8001e9a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	019a      	lsls	r2, r3, #6
 8001ea0:	f53f aea8 	bmi.w	8001bf4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7fe ffbe 	bl	8000e24 <HAL_GetTick>
 8001ea8:	1b40      	subs	r0, r0, r5
 8001eaa:	2802      	cmp	r0, #2
 8001eac:	d9f6      	bls.n	8001e9c <HAL_RCC_OscConfig+0x2d4>
 8001eae:	e6cc      	b.n	8001c4a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7fe ffb8 	bl	8000e24 <HAL_GetTick>
 8001eb4:	1b80      	subs	r0, r0, r6
 8001eb6:	2802      	cmp	r0, #2
 8001eb8:	d9d6      	bls.n	8001e68 <HAL_RCC_OscConfig+0x2a0>
 8001eba:	e6c6      	b.n	8001c4a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001ebc:	f7fe ffb2 	bl	8000e24 <HAL_GetTick>
 8001ec0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	019b      	lsls	r3, r3, #6
 8001ec6:	f57f ae95 	bpl.w	8001bf4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eca:	f7fe ffab 	bl	8000e24 <HAL_GetTick>
 8001ece:	1b40      	subs	r0, r0, r5
 8001ed0:	2802      	cmp	r0, #2
 8001ed2:	d9f6      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x2fa>
 8001ed4:	e6b9      	b.n	8001c4a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	f43f aea2 	beq.w	8001c20 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8001edc:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	6a2b      	ldr	r3, [r5, #32]
 8001ee0:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	f47f ae9b 	bne.w	8001c20 <HAL_RCC_OscConfig+0x58>
 8001eea:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eec:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef0:	1ac0      	subs	r0, r0, r3
 8001ef2:	bf18      	it	ne
 8001ef4:	2001      	movne	r0, #1
 8001ef6:	e6a9      	b.n	8001c4c <HAL_RCC_OscConfig+0x84>
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	42420000 	.word	0x42420000

08001f00 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001f00:	4a0d      	ldr	r2, [pc, #52]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x38>)
 8001f02:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001f04:	f003 010c 	and.w	r1, r3, #12
 8001f08:	2908      	cmp	r1, #8
 8001f0a:	d112      	bne.n	8001f32 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f0c:	480b      	ldr	r0, [pc, #44]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f0e:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f12:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f14:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f16:	d509      	bpl.n	8001f2c <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f18:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f1a:	4a09      	ldr	r2, [pc, #36]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f1c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f20:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f22:	4a08      	ldr	r2, [pc, #32]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x44>)
 8001f24:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f26:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f2a:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x48>)
 8001f2e:	4358      	muls	r0, r3
 8001f30:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001f32:	4803      	ldr	r0, [pc, #12]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08005526 	.word	0x08005526
 8001f40:	007a1200 	.word	0x007a1200
 8001f44:	08005524 	.word	0x08005524
 8001f48:	003d0900 	.word	0x003d0900

08001f4c <HAL_RCC_ClockConfig>:
{
 8001f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f50:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001f52:	4604      	mov	r4, r0
 8001f54:	b910      	cbnz	r0, 8001f5c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f56:	2001      	movs	r0, #1
}
 8001f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f5c:	4a44      	ldr	r2, [pc, #272]	@ (8002070 <HAL_RCC_ClockConfig+0x124>)
 8001f5e:	6813      	ldr	r3, [r2, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	428b      	cmp	r3, r1
 8001f66:	d328      	bcc.n	8001fba <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	6821      	ldr	r1, [r4, #0]
 8001f6a:	078e      	lsls	r6, r1, #30
 8001f6c:	d430      	bmi.n	8001fd0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	07ca      	lsls	r2, r1, #31
 8001f70:	d443      	bmi.n	8001ffa <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f72:	4a3f      	ldr	r2, [pc, #252]	@ (8002070 <HAL_RCC_ClockConfig+0x124>)
 8001f74:	6813      	ldr	r3, [r2, #0]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	42ab      	cmp	r3, r5
 8001f7c:	d865      	bhi.n	800204a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7e:	6822      	ldr	r2, [r4, #0]
 8001f80:	4d3c      	ldr	r5, [pc, #240]	@ (8002074 <HAL_RCC_ClockConfig+0x128>)
 8001f82:	f012 0f04 	tst.w	r2, #4
 8001f86:	d16c      	bne.n	8002062 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	0713      	lsls	r3, r2, #28
 8001f8a:	d506      	bpl.n	8001f9a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f8c:	686b      	ldr	r3, [r5, #4]
 8001f8e:	6922      	ldr	r2, [r4, #16]
 8001f90:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001f94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f98:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f9a:	f7ff ffb1 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001f9e:	686b      	ldr	r3, [r5, #4]
 8001fa0:	4a35      	ldr	r2, [pc, #212]	@ (8002078 <HAL_RCC_ClockConfig+0x12c>)
 8001fa2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	40d8      	lsrs	r0, r3
 8001faa:	4b34      	ldr	r3, [pc, #208]	@ (800207c <HAL_RCC_ClockConfig+0x130>)
 8001fac:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001fae:	4b34      	ldr	r3, [pc, #208]	@ (8002080 <HAL_RCC_ClockConfig+0x134>)
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	f7fe fe77 	bl	8000ca4 <HAL_InitTick>
  return HAL_OK;
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	e7ce      	b.n	8001f58 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	6813      	ldr	r3, [r2, #0]
 8001fbc:	f023 0307 	bic.w	r3, r3, #7
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc4:	6813      	ldr	r3, [r2, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	428b      	cmp	r3, r1
 8001fcc:	d1c3      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xa>
 8001fce:	e7cb      	b.n	8001f68 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	4b28      	ldr	r3, [pc, #160]	@ (8002074 <HAL_RCC_ClockConfig+0x128>)
 8001fd2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd6:	bf1e      	ittt	ne
 8001fd8:	685a      	ldrne	r2, [r3, #4]
 8001fda:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8001fde:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe2:	bf42      	ittt	mi
 8001fe4:	685a      	ldrmi	r2, [r3, #4]
 8001fe6:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001fea:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	68a0      	ldr	r0, [r4, #8]
 8001ff0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001ff4:	4302      	orrs	r2, r0
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	e7b9      	b.n	8001f6e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffa:	6862      	ldr	r2, [r4, #4]
 8001ffc:	4e1d      	ldr	r6, [pc, #116]	@ (8002074 <HAL_RCC_ClockConfig+0x128>)
 8001ffe:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002000:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	d11a      	bne.n	800203a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002004:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	d0a5      	beq.n	8001f56 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200c:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002010:	f023 0303 	bic.w	r3, r3, #3
 8002014:	4313      	orrs	r3, r2
 8002016:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002018:	f7fe ff04 	bl	8000e24 <HAL_GetTick>
 800201c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	6873      	ldr	r3, [r6, #4]
 8002020:	6862      	ldr	r2, [r4, #4]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800202a:	d0a2      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202c:	f7fe fefa 	bl	8000e24 <HAL_GetTick>
 8002030:	1bc0      	subs	r0, r0, r7
 8002032:	4540      	cmp	r0, r8
 8002034:	d9f3      	bls.n	800201e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002036:	2003      	movs	r0, #3
 8002038:	e78e      	b.n	8001f58 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203a:	2a02      	cmp	r2, #2
 800203c:	d102      	bne.n	8002044 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002042:	e7e1      	b.n	8002008 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002044:	f013 0f02 	tst.w	r3, #2
 8002048:	e7de      	b.n	8002008 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	6813      	ldr	r3, [r2, #0]
 800204c:	f023 0307 	bic.w	r3, r3, #7
 8002050:	432b      	orrs	r3, r5
 8002052:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002054:	6813      	ldr	r3, [r2, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	42ab      	cmp	r3, r5
 800205c:	f47f af7b 	bne.w	8001f56 <HAL_RCC_ClockConfig+0xa>
 8002060:	e78d      	b.n	8001f7e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002062:	686b      	ldr	r3, [r5, #4]
 8002064:	68e1      	ldr	r1, [r4, #12]
 8002066:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800206a:	430b      	orrs	r3, r1
 800206c:	606b      	str	r3, [r5, #4]
 800206e:	e78b      	b.n	8001f88 <HAL_RCC_ClockConfig+0x3c>
 8002070:	40022000 	.word	0x40022000
 8002074:	40021000 	.word	0x40021000
 8002078:	08005514 	.word	0x08005514
 800207c:	20000000 	.word	0x20000000
 8002080:	20000008 	.word	0x20000008

08002084 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002084:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002086:	4a05      	ldr	r2, [pc, #20]	@ (800209c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	4a03      	ldr	r2, [pc, #12]	@ (80020a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002092:	6810      	ldr	r0, [r2, #0]
}
 8002094:	40d8      	lsrs	r0, r3
 8002096:	4770      	bx	lr
 8002098:	40021000 	.word	0x40021000
 800209c:	0800550c 	.word	0x0800550c
 80020a0:	20000000 	.word	0x20000000

080020a4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020a4:	4b04      	ldr	r3, [pc, #16]	@ (80020b8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	4a03      	ldr	r2, [pc, #12]	@ (80020c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020b2:	6810      	ldr	r0, [r2, #0]
}
 80020b4:	40d8      	lsrs	r0, r3
 80020b6:	4770      	bx	lr
 80020b8:	40021000 	.word	0x40021000
 80020bc:	0800550c 	.word	0x0800550c
 80020c0:	20000000 	.word	0x20000000

080020c4 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020c4:	230f      	movs	r3, #15
 80020c6:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <HAL_RCC_GetClockConfig+0x34>)
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	f002 0203 	and.w	r2, r2, #3
 80020d0:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80020d8:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80020e0:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020ea:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <HAL_RCC_GetClockConfig+0x38>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	600b      	str	r3, [r1, #0]
}
 80020f6:	4770      	bx	lr
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40022000 	.word	0x40022000

08002100 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002100:	6803      	ldr	r3, [r0, #0]
{
 8002102:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002106:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002108:	07d8      	lsls	r0, r3, #31
 800210a:	d521      	bpl.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210c:	4c36      	ldr	r4, [pc, #216]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800210e:	69e3      	ldr	r3, [r4, #28]
 8002110:	00d9      	lsls	r1, r3, #3
 8002112:	d42b      	bmi.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002114:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	69e3      	ldr	r3, [r4, #28]
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800211c:	61e3      	str	r3, [r4, #28]
 800211e:	69e3      	ldr	r3, [r4, #28]
 8002120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4f30      	ldr	r7, [pc, #192]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	05da      	lsls	r2, r3, #23
 800212e:	d51f      	bpl.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002130:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002132:	686a      	ldr	r2, [r5, #4]
 8002134:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002138:	d12e      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800213a:	6a23      	ldr	r3, [r4, #32]
 800213c:	686a      	ldr	r2, [r5, #4]
 800213e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002142:	4313      	orrs	r3, r2
 8002144:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002146:	b11e      	cbz	r6, 8002150 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002148:	69e3      	ldr	r3, [r4, #28]
 800214a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800214e:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002150:	682a      	ldr	r2, [r5, #0]
 8002152:	0791      	lsls	r1, r2, #30
 8002154:	d506      	bpl.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002156:	4924      	ldr	r1, [pc, #144]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002158:	68a8      	ldr	r0, [r5, #8]
 800215a:	684b      	ldr	r3, [r1, #4]
 800215c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002160:	4303      	orrs	r3, r0
 8002162:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002164:	06d3      	lsls	r3, r2, #27
 8002166:	d436      	bmi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002168:	2000      	movs	r0, #0
 800216a:	e012      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 800216c:	2600      	movs	r6, #0
 800216e:	e7db      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002176:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002178:	f7fe fe54 	bl	8000e24 <HAL_GetTick>
 800217c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	05db      	lsls	r3, r3, #23
 8002182:	d4d5      	bmi.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002184:	f7fe fe4e 	bl	8000e24 <HAL_GetTick>
 8002188:	eba0 0008 	sub.w	r0, r0, r8
 800218c:	2864      	cmp	r0, #100	@ 0x64
 800218e:	d9f6      	bls.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8002190:	2003      	movs	r0, #3
}
 8002192:	b002      	add	sp, #8
 8002194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002198:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800219c:	429a      	cmp	r2, r3
 800219e:	d0cc      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80021a0:	2001      	movs	r0, #1
 80021a2:	4a13      	ldr	r2, [pc, #76]	@ (80021f0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021a4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80021a6:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021aa:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021b0:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021b2:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 80021b6:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021b8:	d5bf      	bpl.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80021ba:	f7fe fe33 	bl	8000e24 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80021c2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c4:	6a23      	ldr	r3, [r4, #32]
 80021c6:	0798      	lsls	r0, r3, #30
 80021c8:	d4b7      	bmi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe fe2b 	bl	8000e24 <HAL_GetTick>
 80021ce:	1bc0      	subs	r0, r0, r7
 80021d0:	4540      	cmp	r0, r8
 80021d2:	d9f7      	bls.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 80021d4:	e7dc      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021d6:	4a04      	ldr	r2, [pc, #16]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80021d8:	68e9      	ldr	r1, [r5, #12]
 80021da:	6853      	ldr	r3, [r2, #4]
 80021dc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80021e0:	430b      	orrs	r3, r1
 80021e2:	6053      	str	r3, [r2, #4]
 80021e4:	e7c0      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
 80021f0:	42420000 	.word	0x42420000

080021f4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021f4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021f6:	6a02      	ldr	r2, [r0, #32]
{
 80021f8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002200:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002202:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002204:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002206:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800220a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800220c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800220e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002212:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002214:	4d0a      	ldr	r5, [pc, #40]	@ (8002240 <TIM_OC1_SetConfig+0x4c>)
 8002216:	42a8      	cmp	r0, r5
 8002218:	d10b      	bne.n	8002232 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800221a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800221c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002220:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002222:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002226:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800222a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800222c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002230:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002232:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002234:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002236:	684a      	ldr	r2, [r1, #4]
 8002238:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800223a:	6203      	str	r3, [r0, #32]
}
 800223c:	bd70      	pop	{r4, r5, r6, pc}
 800223e:	bf00      	nop
 8002240:	40012c00 	.word	0x40012c00

08002244 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002244:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002246:	6a02      	ldr	r2, [r0, #32]
{
 8002248:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800224a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800224e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002250:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002252:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002254:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002256:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800225a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800225c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800225e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002262:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002266:	4d0b      	ldr	r5, [pc, #44]	@ (8002294 <TIM_OC3_SetConfig+0x50>)
 8002268:	42a8      	cmp	r0, r5
 800226a:	d10d      	bne.n	8002288 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800226c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800226e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002272:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002276:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800227a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800227e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002280:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002284:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002288:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800228a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800228c:	684a      	ldr	r2, [r1, #4]
 800228e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002290:	6203      	str	r3, [r0, #32]
}
 8002292:	bd70      	pop	{r4, r5, r6, pc}
 8002294:	40012c00 	.word	0x40012c00

08002298 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002298:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800229a:	6a02      	ldr	r2, [r0, #32]
{
 800229c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800229e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022a2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022a6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022aa:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022b2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80022b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022b8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022bc:	4d06      	ldr	r5, [pc, #24]	@ (80022d8 <TIM_OC4_SetConfig+0x40>)
 80022be:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022c0:	bf02      	ittt	eq
 80022c2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022c4:	f424 4480 	biceq.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022c8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022cc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022ce:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022d0:	684a      	ldr	r2, [r1, #4]
 80022d2:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022d4:	6203      	str	r3, [r0, #32]
}
 80022d6:	bd30      	pop	{r4, r5, pc}
 80022d8:	40012c00 	.word	0x40012c00

080022dc <HAL_TIM_Base_MspInit>:
}
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80022e0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d120      	bne.n	800232a <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	2302      	movs	r3, #2
 80022ea:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022ee:	6803      	ldr	r3, [r0, #0]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002330 <HAL_TIM_Base_Start_IT+0x50>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00a      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x34>
 80022fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002302:	d007      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x34>
 8002304:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002308:	4293      	cmp	r3, r2
 800230a:	d003      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x34>
 800230c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002310:	4293      	cmp	r3, r2
 8002312:	d104      	bne.n	800231e <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231a:	2a06      	cmp	r2, #6
 800231c:	d003      	beq.n	8002326 <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002326:	2000      	movs	r0, #0
 8002328:	4770      	bx	lr
    return HAL_ERROR;
 800232a:	2001      	movs	r0, #1
}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40012c00 	.word	0x40012c00

08002334 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8002334:	2908      	cmp	r1, #8
 8002336:	d010      	beq.n	800235a <HAL_TIM_ReadCapturedValue+0x26>
 8002338:	d804      	bhi.n	8002344 <HAL_TIM_ReadCapturedValue+0x10>
 800233a:	b141      	cbz	r1, 800234e <HAL_TIM_ReadCapturedValue+0x1a>
 800233c:	2904      	cmp	r1, #4
 800233e:	d009      	beq.n	8002354 <HAL_TIM_ReadCapturedValue+0x20>
 8002340:	2000      	movs	r0, #0
 8002342:	4770      	bx	lr
 8002344:	290c      	cmp	r1, #12
 8002346:	d1fb      	bne.n	8002340 <HAL_TIM_ReadCapturedValue+0xc>
      tmpreg =   htim->Instance->CCR4;
 8002348:	6803      	ldr	r3, [r0, #0]
 800234a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800234c:	4770      	bx	lr
      tmpreg =  htim->Instance->CCR1;
 800234e:	6803      	ldr	r3, [r0, #0]
 8002350:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 8002352:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8002354:	6803      	ldr	r3, [r0, #0]
 8002356:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 8002358:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 800235a:	6803      	ldr	r3, [r0, #0]
 800235c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 800235e:	4770      	bx	lr

08002360 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8002360:	4770      	bx	lr

08002362 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8002362:	4770      	bx	lr

08002364 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8002364:	4770      	bx	lr

08002366 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8002366:	6803      	ldr	r3, [r0, #0]
{
 8002368:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800236a:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800236c:	691e      	ldr	r6, [r3, #16]
{
 800236e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002370:	07b1      	lsls	r1, r6, #30
 8002372:	d50d      	bpl.n	8002390 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002374:	07aa      	lsls	r2, r5, #30
 8002376:	d50b      	bpl.n	8002390 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002378:	f06f 0202 	mvn.w	r2, #2
 800237c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800237e:	2201      	movs	r2, #1
 8002380:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	079b      	lsls	r3, r3, #30
 8002386:	d069      	beq.n	800245c <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 8002388:	f001 faac 	bl	80038e4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238c:	2300      	movs	r3, #0
 800238e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002390:	0771      	lsls	r1, r6, #29
 8002392:	d510      	bpl.n	80023b6 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002394:	076a      	lsls	r2, r5, #29
 8002396:	d50e      	bpl.n	80023b6 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002398:	f06f 0204 	mvn.w	r2, #4
 800239c:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 800239e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023a2:	2202      	movs	r2, #2
 80023a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80023ac:	d05c      	beq.n	8002468 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	f001 fa99 	bl	80038e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b2:	2300      	movs	r3, #0
 80023b4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023b6:	0733      	lsls	r3, r6, #28
 80023b8:	d50f      	bpl.n	80023da <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023ba:	0728      	lsls	r0, r5, #28
 80023bc:	d50d      	bpl.n	80023da <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023be:	f06f 0208 	mvn.w	r2, #8
 80023c2:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 80023c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023c8:	2204      	movs	r2, #4
 80023ca:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	0799      	lsls	r1, r3, #30
 80023d0:	d050      	beq.n	8002474 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 80023d2:	f001 fa87 	bl	80038e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	2300      	movs	r3, #0
 80023d8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023da:	06f2      	lsls	r2, r6, #27
 80023dc:	d510      	bpl.n	8002400 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023de:	06eb      	lsls	r3, r5, #27
 80023e0:	d50e      	bpl.n	8002400 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023e2:	f06f 0210 	mvn.w	r2, #16
 80023e6:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 80023e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ec:	2208      	movs	r2, #8
 80023ee:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80023f6:	d043      	beq.n	8002480 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 80023f8:	f001 fa74 	bl	80038e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fc:	2300      	movs	r3, #0
 80023fe:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002400:	07f0      	lsls	r0, r6, #31
 8002402:	d508      	bpl.n	8002416 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002404:	07e9      	lsls	r1, r5, #31
 8002406:	d506      	bpl.n	8002416 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002408:	f06f 0201 	mvn.w	r2, #1
 800240c:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 800240e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002410:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002412:	f7fe fa8f 	bl	8000934 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002416:	0632      	lsls	r2, r6, #24
 8002418:	d508      	bpl.n	800242c <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800241a:	062b      	lsls	r3, r5, #24
 800241c:	d506      	bpl.n	800242c <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800241e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002422:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 8002424:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002426:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002428:	f000 fb35 	bl	8002a96 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800242c:	0670      	lsls	r0, r6, #25
 800242e:	d508      	bpl.n	8002442 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002430:	0669      	lsls	r1, r5, #25
 8002432:	d506      	bpl.n	8002442 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002434:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002438:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 800243a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800243c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800243e:	f7ff ff91 	bl	8002364 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002442:	06b2      	lsls	r2, r6, #26
 8002444:	d522      	bpl.n	800248c <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002446:	06ab      	lsls	r3, r5, #26
 8002448:	d520      	bpl.n	800248c <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800244a:	f06f 0220 	mvn.w	r2, #32
 800244e:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 8002450:	4620      	mov	r0, r4
}
 8002452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002456:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002458:	f000 bb1c 	b.w	8002a94 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800245c:	f7ff ff80 	bl	8002360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	4620      	mov	r0, r4
 8002462:	f7ff ff7e 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
 8002466:	e791      	b.n	800238c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002468:	f7ff ff7a 	bl	8002360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	4620      	mov	r0, r4
 800246e:	f7ff ff78 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
 8002472:	e79e      	b.n	80023b2 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002474:	f7ff ff74 	bl	8002360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	4620      	mov	r0, r4
 800247a:	f7ff ff72 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
 800247e:	e7aa      	b.n	80023d6 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002480:	f7ff ff6e 	bl	8002360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	4620      	mov	r0, r4
 8002486:	f7ff ff6c 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
 800248a:	e7b7      	b.n	80023fc <HAL_TIM_IRQHandler+0x96>
}
 800248c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002490 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002490:	4a1e      	ldr	r2, [pc, #120]	@ (800250c <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8002492:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002494:	4290      	cmp	r0, r2
 8002496:	d00a      	beq.n	80024ae <TIM_Base_SetConfig+0x1e>
 8002498:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800249c:	d007      	beq.n	80024ae <TIM_Base_SetConfig+0x1e>
 800249e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80024a2:	4290      	cmp	r0, r2
 80024a4:	d003      	beq.n	80024ae <TIM_Base_SetConfig+0x1e>
 80024a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80024aa:	4290      	cmp	r0, r2
 80024ac:	d115      	bne.n	80024da <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80024ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80024b4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024b6:	4a15      	ldr	r2, [pc, #84]	@ (800250c <TIM_Base_SetConfig+0x7c>)
 80024b8:	4290      	cmp	r0, r2
 80024ba:	d00a      	beq.n	80024d2 <TIM_Base_SetConfig+0x42>
 80024bc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80024c0:	d007      	beq.n	80024d2 <TIM_Base_SetConfig+0x42>
 80024c2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80024c6:	4290      	cmp	r0, r2
 80024c8:	d003      	beq.n	80024d2 <TIM_Base_SetConfig+0x42>
 80024ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80024ce:	4290      	cmp	r0, r2
 80024d0:	d103      	bne.n	80024da <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80024d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024da:	694a      	ldr	r2, [r1, #20]
 80024dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80024e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024e4:	688b      	ldr	r3, [r1, #8]
 80024e6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80024e8:	680b      	ldr	r3, [r1, #0]
 80024ea:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024ec:	4b07      	ldr	r3, [pc, #28]	@ (800250c <TIM_Base_SetConfig+0x7c>)
 80024ee:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80024f0:	bf04      	itt	eq
 80024f2:	690b      	ldreq	r3, [r1, #16]
 80024f4:	6303      	streq	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80024f6:	2301      	movs	r3, #1
 80024f8:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024fa:	6903      	ldr	r3, [r0, #16]
 80024fc:	07db      	lsls	r3, r3, #31
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024fe:	bf42      	ittt	mi
 8002500:	6903      	ldrmi	r3, [r0, #16]
 8002502:	f023 0301 	bicmi.w	r3, r3, #1
 8002506:	6103      	strmi	r3, [r0, #16]
}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40012c00 	.word	0x40012c00

08002510 <HAL_TIM_Base_Init>:
{
 8002510:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002512:	4604      	mov	r4, r0
 8002514:	b330      	cbz	r0, 8002564 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002516:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800251a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800251e:	b91b      	cbnz	r3, 8002528 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002520:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002524:	f7ff feda 	bl	80022dc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800252a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002530:	1d21      	adds	r1, r4, #4
 8002532:	f7ff ffad 	bl	8002490 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002536:	2301      	movs	r3, #1
  return HAL_OK;
 8002538:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800253a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800253e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002542:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002546:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800254a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800254e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002552:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002556:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800255a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800255e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8002562:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002564:	2001      	movs	r0, #1
 8002566:	e7fc      	b.n	8002562 <HAL_TIM_Base_Init+0x52>

08002568 <HAL_TIM_PWM_Init>:
{
 8002568:	b510      	push	{r4, lr}
  if (htim == NULL)
 800256a:	4604      	mov	r4, r0
 800256c:	b330      	cbz	r0, 80025bc <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800256e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002572:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002576:	b91b      	cbnz	r3, 8002580 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002578:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800257c:	f7fe fa84 	bl	8000a88 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002582:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002584:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002588:	1d21      	adds	r1, r4, #4
 800258a:	f7ff ff81 	bl	8002490 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800258e:	2301      	movs	r3, #1
  return HAL_OK;
 8002590:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002592:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002596:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800259a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800259e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80025a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80025aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80025b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80025b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80025ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025bc:	2001      	movs	r0, #1
 80025be:	e7fc      	b.n	80025ba <HAL_TIM_PWM_Init+0x52>

080025c0 <HAL_TIM_IC_Init>:
{
 80025c0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80025c2:	4604      	mov	r4, r0
 80025c4:	b330      	cbz	r0, 8002614 <HAL_TIM_IC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80025c6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80025ca:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80025ce:	b91b      	cbnz	r3, 80025d8 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80025d0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 80025d4:	f7fe fa76 	bl	8000ac4 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025da:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80025dc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e0:	1d21      	adds	r1, r4, #4
 80025e2:	f7ff ff55 	bl	8002490 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e6:	2301      	movs	r3, #1
  return HAL_OK;
 80025e8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ea:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ee:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80025f2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80025f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80025fa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002602:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002606:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800260a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800260e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8002612:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002614:	2001      	movs	r0, #1
 8002616:	e7fc      	b.n	8002612 <HAL_TIM_IC_Init+0x52>

08002618 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8002618:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800261a:	6a02      	ldr	r2, [r0, #32]
{
 800261c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800261e:	f022 0210 	bic.w	r2, r2, #16
 8002622:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002624:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002626:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002628:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800262a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800262e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002632:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002634:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002638:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800263c:	4d0b      	ldr	r5, [pc, #44]	@ (800266c <TIM_OC2_SetConfig+0x54>)
 800263e:	42a8      	cmp	r0, r5
 8002640:	d10d      	bne.n	800265e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002642:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002644:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002648:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800264c:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002650:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002654:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800265a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800265e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002660:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002662:	684a      	ldr	r2, [r1, #4]
 8002664:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002666:	6203      	str	r3, [r0, #32]
}
 8002668:	bd70      	pop	{r4, r5, r6, pc}
 800266a:	bf00      	nop
 800266c:	40012c00 	.word	0x40012c00

08002670 <HAL_TIM_PWM_ConfigChannel>:
{
 8002670:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002672:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8002676:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002678:	2b01      	cmp	r3, #1
 800267a:	d04f      	beq.n	800271c <HAL_TIM_PWM_ConfigChannel+0xac>
 800267c:	2001      	movs	r0, #1
  switch (Channel)
 800267e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002680:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 8002684:	d03a      	beq.n	80026fc <HAL_TIM_PWM_ConfigChannel+0x8c>
 8002686:	d806      	bhi.n	8002696 <HAL_TIM_PWM_ConfigChannel+0x26>
 8002688:	b1ba      	cbz	r2, 80026ba <HAL_TIM_PWM_ConfigChannel+0x4a>
 800268a:	2a04      	cmp	r2, #4
 800268c:	d026      	beq.n	80026dc <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_UNLOCK(htim);
 800268e:	2300      	movs	r3, #0
 8002690:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002694:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002696:	2a0c      	cmp	r2, #12
 8002698:	d1f9      	bne.n	800268e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800269a:	6820      	ldr	r0, [r4, #0]
 800269c:	f7ff fdfc 	bl	8002298 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026a0:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026a2:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026a8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026aa:	69c3      	ldr	r3, [r0, #28]
 80026ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026b0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026b2:	69c3      	ldr	r3, [r0, #28]
 80026b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80026b8:	e02e      	b.n	8002718 <HAL_TIM_PWM_ConfigChannel+0xa8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026ba:	6820      	ldr	r0, [r4, #0]
 80026bc:	f7ff fd9a 	bl	80021f4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c0:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026c2:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c4:	f043 0308 	orr.w	r3, r3, #8
 80026c8:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026ca:	6983      	ldr	r3, [r0, #24]
 80026cc:	f023 0304 	bic.w	r3, r3, #4
 80026d0:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026d2:	6983      	ldr	r3, [r0, #24]
 80026d4:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026d6:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80026d8:	2000      	movs	r0, #0
 80026da:	e7d8      	b.n	800268e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026dc:	6820      	ldr	r0, [r4, #0]
 80026de:	f7ff ff9b 	bl	8002618 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026e2:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026e4:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026ea:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026ec:	6983      	ldr	r3, [r0, #24]
 80026ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026f2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026f4:	6983      	ldr	r3, [r0, #24]
 80026f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80026fa:	e7ec      	b.n	80026d6 <HAL_TIM_PWM_ConfigChannel+0x66>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026fc:	6820      	ldr	r0, [r4, #0]
 80026fe:	f7ff fda1 	bl	8002244 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002702:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002704:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002706:	f043 0308 	orr.w	r3, r3, #8
 800270a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800270c:	69c3      	ldr	r3, [r0, #28]
 800270e:	f023 0304 	bic.w	r3, r3, #4
 8002712:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002714:	69c3      	ldr	r3, [r0, #28]
 8002716:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002718:	61c3      	str	r3, [r0, #28]
      break;
 800271a:	e7dd      	b.n	80026d8 <HAL_TIM_PWM_ConfigChannel+0x68>
  __HAL_LOCK(htim);
 800271c:	2002      	movs	r0, #2
 800271e:	e7b9      	b.n	8002694 <HAL_TIM_PWM_ConfigChannel+0x24>

08002720 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002720:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002722:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002724:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002726:	4e12      	ldr	r6, [pc, #72]	@ (8002770 <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002728:	f024 0401 	bic.w	r4, r4, #1
 800272c:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800272e:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8002730:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002732:	d019      	beq.n	8002768 <TIM_TI1_SetConfig+0x48>
 8002734:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002738:	d016      	beq.n	8002768 <TIM_TI1_SetConfig+0x48>
 800273a:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 800273e:	42b0      	cmp	r0, r6
 8002740:	d012      	beq.n	8002768 <TIM_TI1_SetConfig+0x48>
 8002742:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002746:	42b0      	cmp	r0, r6
 8002748:	d00e      	beq.n	8002768 <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800274a:	f044 0201 	orr.w	r2, r4, #1
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800274e:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002750:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002754:	b2db      	uxtb	r3, r3
 8002756:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002758:	f001 010a 	and.w	r1, r1, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800275c:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002760:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002762:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002764:	6201      	str	r1, [r0, #32]
}
 8002766:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002768:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800276c:	4322      	orrs	r2, r4
 800276e:	e7ee      	b.n	800274e <TIM_TI1_SetConfig+0x2e>
 8002770:	40012c00 	.word	0x40012c00

08002774 <HAL_TIM_IC_ConfigChannel>:
{
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002776:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800277a:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 800277c:	2b01      	cmp	r3, #1
{
 800277e:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 8002780:	f000 8088 	beq.w	8002894 <HAL_TIM_IC_ConfigChannel+0x120>
 8002784:	2001      	movs	r0, #1
 8002786:	f885 003c 	strb.w	r0, [r5, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 800278a:	b98a      	cbnz	r2, 80027b0 <HAL_TIM_IC_ConfigChannel+0x3c>
    TIM_TI1_SetConfig(htim->Instance,
 800278c:	6828      	ldr	r0, [r5, #0]
 800278e:	68cb      	ldr	r3, [r1, #12]
 8002790:	c906      	ldmia	r1, {r1, r2}
 8002792:	f7ff ffc5 	bl	8002720 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002796:	6983      	ldr	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002798:	68a2      	ldr	r2, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800279a:	f023 030c 	bic.w	r3, r3, #12
 800279e:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80027a0:	6983      	ldr	r3, [r0, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80027a6:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80027a8:	2300      	movs	r3, #0
 80027aa:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 80027ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80027b0:	2a04      	cmp	r2, #4
 80027b2:	d124      	bne.n	80027fe <HAL_TIM_IC_ConfigChannel+0x8a>
                      sConfig->ICSelection,
 80027b4:	e9d1 2700 	ldrd	r2, r7, [r1]
    TIM_TI2_SetConfig(htim->Instance,
 80027b8:	682b      	ldr	r3, [r5, #0]
                      sConfig->ICFilter);
 80027ba:	68c9      	ldr	r1, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027bc:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027be:	6a18      	ldr	r0, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80027c0:	0309      	lsls	r1, r1, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027c2:	f020 0010 	bic.w	r0, r0, #16
 80027c6:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027c8:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80027ca:	b289      	uxth	r1, r1
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80027cc:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80027d0:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027d4:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80027d8:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80027da:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80027dc:	f002 02a0 	and.w	r2, r2, #160	@ 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027e0:	f026 00a0 	bic.w	r0, r6, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80027e4:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027e6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80027e8:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80027ea:	699a      	ldr	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80027ec:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80027ee:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80027f2:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027fa:	619a      	str	r2, [r3, #24]
 80027fc:	e7d3      	b.n	80027a6 <HAL_TIM_IC_ConfigChannel+0x32>
  else if (Channel == TIM_CHANNEL_3)
 80027fe:	2a08      	cmp	r2, #8
 8002800:	d122      	bne.n	8002848 <HAL_TIM_IC_ConfigChannel+0xd4>
                      sConfig->ICSelection,
 8002802:	e9d1 2000 	ldrd	r2, r0, [r1]
    TIM_TI3_SetConfig(htim->Instance,
 8002806:	682b      	ldr	r3, [r5, #0]
                      sConfig->ICFilter);
 8002808:	68c9      	ldr	r1, [r1, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800280a:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800280c:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800280e:	0109      	lsls	r1, r1, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002810:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 8002814:	621f      	str	r7, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002816:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002818:	b2c9      	uxtb	r1, r1
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800281a:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 800281e:	4338      	orrs	r0, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002820:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002824:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002826:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002828:	f402 7200 	and.w	r2, r2, #512	@ 0x200
  tmpccer &= ~(TIM_CCER_CC3P);
 800282c:	f426 7000 	bic.w	r0, r6, #512	@ 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002830:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002832:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 8002834:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002836:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002838:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800283a:	f022 020c 	bic.w	r2, r2, #12
 800283e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	430a      	orrs	r2, r1
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002844:	61da      	str	r2, [r3, #28]
 8002846:	e7ae      	b.n	80027a6 <HAL_TIM_IC_ConfigChannel+0x32>
  else if (Channel == TIM_CHANNEL_4)
 8002848:	2a0c      	cmp	r2, #12
 800284a:	d1ad      	bne.n	80027a8 <HAL_TIM_IC_ConfigChannel+0x34>
                      sConfig->ICSelection,
 800284c:	e9d1 2700 	ldrd	r2, r7, [r1]
    TIM_TI4_SetConfig(htim->Instance,
 8002850:	682b      	ldr	r3, [r5, #0]
                      sConfig->ICFilter);
 8002852:	68c9      	ldr	r1, [r1, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002854:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002856:	6a18      	ldr	r0, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002858:	0309      	lsls	r1, r1, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800285a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800285e:	6218      	str	r0, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002860:	69d8      	ldr	r0, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002862:	b289      	uxth	r1, r1
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002864:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002868:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800286c:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002870:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002872:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002874:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
  tmpccer &= ~(TIM_CCER_CC4P);
 8002878:	f426 5000 	bic.w	r0, r6, #8192	@ 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800287c:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800287e:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002880:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002882:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002884:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002886:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800288a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002892:	e7d7      	b.n	8002844 <HAL_TIM_IC_ConfigChannel+0xd0>
  __HAL_LOCK(htim);
 8002894:	2002      	movs	r0, #2
 8002896:	e78a      	b.n	80027ae <HAL_TIM_IC_ConfigChannel+0x3a>

08002898 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002898:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800289a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800289c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800289e:	f001 011f 	and.w	r1, r1, #31
 80028a2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80028a4:	ea23 0304 	bic.w	r3, r3, r4
 80028a8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028aa:	6a03      	ldr	r3, [r0, #32]
 80028ac:	408a      	lsls	r2, r1
 80028ae:	431a      	orrs	r2, r3
 80028b0:	6202      	str	r2, [r0, #32]
}
 80028b2:	bd10      	pop	{r4, pc}

080028b4 <HAL_TIM_OC_Start>:
{
 80028b4:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028b6:	b929      	cbnz	r1, 80028c4 <HAL_TIM_OC_Start+0x10>
 80028b8:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d01d      	beq.n	80028fc <HAL_TIM_OC_Start+0x48>
    return HAL_ERROR;
 80028c0:	2001      	movs	r0, #1
 80028c2:	e02e      	b.n	8002922 <HAL_TIM_OC_Start+0x6e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028c4:	2904      	cmp	r1, #4
 80028c6:	d107      	bne.n	80028d8 <HAL_TIM_OC_Start+0x24>
 80028c8:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d1f7      	bne.n	80028c0 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028d0:	2302      	movs	r3, #2
 80028d2:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 80028d6:	e014      	b.n	8002902 <HAL_TIM_OC_Start+0x4e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028d8:	2908      	cmp	r1, #8
 80028da:	d107      	bne.n	80028ec <HAL_TIM_OC_Start+0x38>
 80028dc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d1ed      	bne.n	80028c0 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028e4:	2302      	movs	r3, #2
 80028e6:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80028ea:	e00a      	b.n	8002902 <HAL_TIM_OC_Start+0x4e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028ec:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d1e5      	bne.n	80028c0 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028f4:	2302      	movs	r3, #2
 80028f6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 80028fa:	e002      	b.n	8002902 <HAL_TIM_OC_Start+0x4e>
 80028fc:	2302      	movs	r3, #2
 80028fe:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002902:	6800      	ldr	r0, [r0, #0]
 8002904:	2201      	movs	r2, #1
 8002906:	f7ff ffc7 	bl	8002898 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800290a:	4b0f      	ldr	r3, [pc, #60]	@ (8002948 <HAL_TIM_OC_Start+0x94>)
 800290c:	4298      	cmp	r0, r3
 800290e:	d009      	beq.n	8002924 <HAL_TIM_OC_Start+0x70>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002910:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002914:	d10b      	bne.n	800292e <HAL_TIM_OC_Start+0x7a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002916:	6883      	ldr	r3, [r0, #8]
 8002918:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291c:	2b06      	cmp	r3, #6
 800291e:	d10d      	bne.n	800293c <HAL_TIM_OC_Start+0x88>
  return HAL_OK;
 8002920:	2000      	movs	r0, #0
}
 8002922:	bd08      	pop	{r3, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8002924:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800292a:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800292c:	e7f3      	b.n	8002916 <HAL_TIM_OC_Start+0x62>
 800292e:	4b07      	ldr	r3, [pc, #28]	@ (800294c <HAL_TIM_OC_Start+0x98>)
 8002930:	4298      	cmp	r0, r3
 8002932:	d0f0      	beq.n	8002916 <HAL_TIM_OC_Start+0x62>
 8002934:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002938:	4298      	cmp	r0, r3
 800293a:	d0ec      	beq.n	8002916 <HAL_TIM_OC_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 800293c:	6803      	ldr	r3, [r0, #0]
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6003      	str	r3, [r0, #0]
 8002944:	e7ec      	b.n	8002920 <HAL_TIM_OC_Start+0x6c>
 8002946:	bf00      	nop
 8002948:	40012c00 	.word	0x40012c00
 800294c:	40000400 	.word	0x40000400

08002950 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8002950:	f7ff bfb0 	b.w	80028b4 <HAL_TIM_OC_Start>

08002954 <HAL_TIM_IC_Start_IT>:
{
 8002954:	b508      	push	{r3, lr}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002956:	bb71      	cbnz	r1, 80029b6 <HAL_TIM_IC_Start_IT+0x62>
 8002958:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800295c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002960:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002962:	2a01      	cmp	r2, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002964:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002966:	d162      	bne.n	8002a2e <HAL_TIM_IC_Start_IT+0xda>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002968:	2b01      	cmp	r3, #1
 800296a:	d160      	bne.n	8002a2e <HAL_TIM_IC_Start_IT+0xda>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800296c:	2302      	movs	r3, #2
 800296e:	2900      	cmp	r1, #0
 8002970:	d137      	bne.n	80029e2 <HAL_TIM_IC_Start_IT+0x8e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002972:	6802      	ldr	r2, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002974:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002978:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800297c:	68d3      	ldr	r3, [r2, #12]
 800297e:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002982:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002984:	6800      	ldr	r0, [r0, #0]
 8002986:	2201      	movs	r2, #1
 8002988:	f7ff ff86 	bl	8002898 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298c:	4b29      	ldr	r3, [pc, #164]	@ (8002a34 <HAL_TIM_IC_Start_IT+0xe0>)
 800298e:	4298      	cmp	r0, r3
 8002990:	d00a      	beq.n	80029a8 <HAL_TIM_IC_Start_IT+0x54>
 8002992:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002996:	d007      	beq.n	80029a8 <HAL_TIM_IC_Start_IT+0x54>
 8002998:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 800299c:	4298      	cmp	r0, r3
 800299e:	d003      	beq.n	80029a8 <HAL_TIM_IC_Start_IT+0x54>
 80029a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029a4:	4298      	cmp	r0, r3
 80029a6:	d13d      	bne.n	8002a24 <HAL_TIM_IC_Start_IT+0xd0>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029a8:	6883      	ldr	r3, [r0, #8]
 80029aa:	f003 0307 	and.w	r3, r3, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d138      	bne.n	8002a24 <HAL_TIM_IC_Start_IT+0xd0>
{
 80029b2:	2000      	movs	r0, #0
}
 80029b4:	bd08      	pop	{r3, pc}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80029b6:	2904      	cmp	r1, #4
 80029b8:	d105      	bne.n	80029c6 <HAL_TIM_IC_Start_IT+0x72>
 80029ba:	f890 203f 	ldrb.w	r2, [r0, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029be:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80029c2:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029c4:	e7cd      	b.n	8002962 <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80029c6:	2908      	cmp	r1, #8
 80029c8:	bf0b      	itete	eq
 80029ca:	f890 2040 	ldrbeq.w	r2, [r0, #64]	@ 0x40
 80029ce:	f890 2041 	ldrbne.w	r2, [r0, #65]	@ 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029d2:	f890 3044 	ldrbeq.w	r3, [r0, #68]	@ 0x44
 80029d6:	f890 3045 	ldrbne.w	r3, [r0, #69]	@ 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80029da:	bf0c      	ite	eq
 80029dc:	b2d2      	uxtbeq	r2, r2
 80029de:	b2d2      	uxtbne	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029e0:	e7bf      	b.n	8002962 <HAL_TIM_IC_Start_IT+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029e2:	2904      	cmp	r1, #4
 80029e4:	d108      	bne.n	80029f8 <HAL_TIM_IC_Start_IT+0xa4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80029e6:	6802      	ldr	r2, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029e8:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ec:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80029f0:	68d3      	ldr	r3, [r2, #12]
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	e7c4      	b.n	8002982 <HAL_TIM_IC_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029f8:	2908      	cmp	r1, #8
 80029fa:	d108      	bne.n	8002a0e <HAL_TIM_IC_Start_IT+0xba>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80029fc:	6802      	ldr	r2, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029fe:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a02:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a06:	68d3      	ldr	r3, [r2, #12]
 8002a08:	f043 0308 	orr.w	r3, r3, #8
 8002a0c:	e7b9      	b.n	8002982 <HAL_TIM_IC_Start_IT+0x2e>
  switch (Channel)
 8002a0e:	290c      	cmp	r1, #12
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a10:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a14:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
  switch (Channel)
 8002a18:	d109      	bne.n	8002a2e <HAL_TIM_IC_Start_IT+0xda>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a1a:	6802      	ldr	r2, [r0, #0]
 8002a1c:	68d3      	ldr	r3, [r2, #12]
 8002a1e:	f043 0310 	orr.w	r3, r3, #16
 8002a22:	e7ae      	b.n	8002982 <HAL_TIM_IC_Start_IT+0x2e>
      __HAL_TIM_ENABLE(htim);
 8002a24:	6803      	ldr	r3, [r0, #0]
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6003      	str	r3, [r0, #0]
 8002a2c:	e7c1      	b.n	80029b2 <HAL_TIM_IC_Start_IT+0x5e>
{
 8002a2e:	2001      	movs	r0, #1
 8002a30:	e7c0      	b.n	80029b4 <HAL_TIM_IC_Start_IT+0x60>
 8002a32:	bf00      	nop
 8002a34:	40012c00 	.word	0x40012c00

08002a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a38:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a3a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8002a3e:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	f04f 0002 	mov.w	r0, #2
 8002a46:	d022      	beq.n	8002a8e <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a48:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4a:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002a4e:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a50:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a52:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a56:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8002a58:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a5a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5c:	4c0c      	ldr	r4, [pc, #48]	@ (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8002a5e:	42a3      	cmp	r3, r4
 8002a60:	d00a      	beq.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a66:	d007      	beq.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002a68:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8002a6c:	42a3      	cmp	r3, r4
 8002a6e:	d003      	beq.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002a70:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002a74:	42a3      	cmp	r3, r4
 8002a76:	d104      	bne.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a78:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a7a:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a7e:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a80:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a82:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002a84:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002a86:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002a8a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8002a8e:	bd30      	pop	{r4, r5, pc}
 8002a90:	40012c00 	.word	0x40012c00

08002a94 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8002a94:	4770      	bx	lr

08002a96 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8002a96:	4770      	bx	lr

08002a98 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a98:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9a:	f102 030c 	add.w	r3, r2, #12
 8002a9e:	e853 3f00 	ldrex	r3, [r3]
 8002aa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa6:	320c      	adds	r2, #12
 8002aa8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002aac:	6802      	ldr	r2, [r0, #0]
 8002aae:	2900      	cmp	r1, #0
 8002ab0:	d1f2      	bne.n	8002a98 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab2:	f102 0314 	add.w	r3, r2, #20
 8002ab6:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aba:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	f102 0c14 	add.w	ip, r2, #20
 8002ac2:	e84c 3100 	strex	r1, r3, [ip]
 8002ac6:	2900      	cmp	r1, #0
 8002ac8:	d1f3      	bne.n	8002ab2 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d10b      	bne.n	8002ae8 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad0:	f102 030c 	add.w	r3, r2, #12
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002adc:	f102 0c0c 	add.w	ip, r2, #12
 8002ae0:	e84c 3100 	strex	r1, r3, [ip]
 8002ae4:	2900      	cmp	r1, #0
 8002ae6:	d1f3      	bne.n	8002ad0 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aee:	2300      	movs	r3, #0
 8002af0:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002af2:	4770      	bx	lr

08002af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af4:	b510      	push	{r4, lr}
 8002af6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002af8:	6803      	ldr	r3, [r0, #0]
 8002afa:	68c1      	ldr	r1, [r0, #12]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002b02:	430a      	orrs	r2, r1
 8002b04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b06:	6882      	ldr	r2, [r0, #8]
 8002b08:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002b0a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b0c:	4302      	orrs	r2, r0
 8002b0e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002b10:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8002b14:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b18:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	69a1      	ldr	r1, [r4, #24]
 8002b22:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002b26:	430a      	orrs	r2, r1
 8002b28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b64 <UART_SetConfig+0x70>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d115      	bne.n	8002b5c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b30:	f7ff fab8 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b34:	2319      	movs	r3, #25
 8002b36:	4343      	muls	r3, r0
 8002b38:	6862      	ldr	r2, [r4, #4]
 8002b3a:	6820      	ldr	r0, [r4, #0]
 8002b3c:	0092      	lsls	r2, r2, #2
 8002b3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b42:	2264      	movs	r2, #100	@ 0x64
 8002b44:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b48:	fb02 3311 	mls	r3, r2, r1, r3
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	3332      	adds	r3, #50	@ 0x32
 8002b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b54:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002b58:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b5a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b5c:	f7ff fa92 	bl	8002084 <HAL_RCC_GetPCLK1Freq>
 8002b60:	e7e8      	b.n	8002b34 <UART_SetConfig+0x40>
 8002b62:	bf00      	nop
 8002b64:	40013800 	.word	0x40013800

08002b68 <HAL_UART_Init>:
{
 8002b68:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	b348      	cbz	r0, 8002bc2 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002b6e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002b72:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002b76:	b91b      	cbnz	r3, 8002b80 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002b78:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002b7c:	f7fe f81a 	bl	8000bb4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002b80:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8002b82:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002b84:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002b88:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002b8a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002b8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b90:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002b92:	f7ff ffaf 	bl	8002af4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b96:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b98:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ba8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bb0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002bb2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb4:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bb6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bbe:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002bc0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	e7fc      	b.n	8002bc0 <HAL_UART_Init+0x58>

08002bc6 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002bc6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d110      	bne.n	8002bf0 <HAL_UART_Transmit_IT+0x2a>
    if ((pData == NULL) || (Size == 0U))
 8002bce:	b189      	cbz	r1, 8002bf4 <HAL_UART_Transmit_IT+0x2e>
 8002bd0:	b182      	cbz	r2, 8002bf4 <HAL_UART_Transmit_IT+0x2e>
    huart->TxXferCount = Size;
 8002bd2:	84c2      	strh	r2, [r0, #38]	@ 0x26
    huart->TxXferSize = Size;
 8002bd4:	8482      	strh	r2, [r0, #36]	@ 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd6:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bd8:	2221      	movs	r2, #33	@ 0x21
    huart->pTxBuffPtr = pData;
 8002bda:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002bdc:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bde:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002be0:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002be4:	68ca      	ldr	r2, [r1, #12]
    return HAL_OK;
 8002be6:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002be8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bec:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8002bee:	4770      	bx	lr
    return HAL_BUSY;
 8002bf0:	2002      	movs	r0, #2
 8002bf2:	4770      	bx	lr
      return HAL_ERROR;
 8002bf4:	2001      	movs	r0, #1
}
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8002bf8:	4770      	bx	lr

08002bfa <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8002bfa:	4770      	bx	lr

08002bfc <UART_DMAAbortOnError>:
{
 8002bfc:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002bfe:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c00:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8002c02:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002c04:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8002c06:	f7ff fff8 	bl	8002bfa <HAL_UART_ErrorCallback>
}
 8002c0a:	bd08      	pop	{r3, pc}

08002c0c <HAL_UARTEx_RxEventCallback>:
}
 8002c0c:	4770      	bx	lr

08002c0e <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c0e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002c12:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c14:	2b22      	cmp	r3, #34	@ 0x22
 8002c16:	d142      	bne.n	8002c9e <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c18:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c1a:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c1c:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c20:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c22:	d13f      	bne.n	8002ca4 <UART_Receive_IT.isra.0+0x96>
 8002c24:	6901      	ldr	r1, [r0, #16]
 8002c26:	2900      	cmp	r1, #0
 8002c28:	d13f      	bne.n	8002caa <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c2a:	6852      	ldr	r2, [r2, #4]
 8002c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c30:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8002c34:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8002c36:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d12d      	bne.n	8002c9e <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c42:	6802      	ldr	r2, [r0, #0]
 8002c44:	68d1      	ldr	r1, [r2, #12]
 8002c46:	f021 0120 	bic.w	r1, r1, #32
 8002c4a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c4c:	68d1      	ldr	r1, [r2, #12]
 8002c4e:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8002c52:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c54:	6951      	ldr	r1, [r2, #20]
 8002c56:	f021 0101 	bic.w	r1, r1, #1
 8002c5a:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c62:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c64:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002c66:	2a01      	cmp	r2, #1
 8002c68:	6802      	ldr	r2, [r0, #0]
 8002c6a:	d128      	bne.n	8002cbe <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6e:	f102 030c 	add.w	r3, r2, #12
 8002c72:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c76:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	f102 0c0c 	add.w	ip, r2, #12
 8002c7e:	e84c 3100 	strex	r1, r3, [ip]
 8002c82:	2900      	cmp	r1, #0
 8002c84:	d1f3      	bne.n	8002c6e <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c86:	6813      	ldr	r3, [r2, #0]
 8002c88:	06db      	lsls	r3, r3, #27
 8002c8a:	d505      	bpl.n	8002c98 <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c8c:	9101      	str	r1, [sp, #4]
 8002c8e:	6813      	ldr	r3, [r2, #0]
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	6853      	ldr	r3, [r2, #4]
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c98:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8002c9a:	f7ff ffb7 	bl	8002c0c <HAL_UARTEx_RxEventCallback>
}
 8002c9e:	b003      	add	sp, #12
 8002ca0:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ca4:	b939      	cbnz	r1, 8002cb6 <UART_Receive_IT.isra.0+0xa8>
 8002ca6:	6901      	ldr	r1, [r0, #16]
 8002ca8:	b929      	cbnz	r1, 8002cb6 <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002caa:	6852      	ldr	r2, [r2, #4]
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8002cb0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	e7be      	b.n	8002c34 <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cb6:	6852      	ldr	r2, [r2, #4]
 8002cb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cbc:	e7f7      	b.n	8002cae <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8002cbe:	f000 fbab 	bl	8003418 <HAL_UART_RxCpltCallback>
 8002cc2:	e7ec      	b.n	8002c9e <UART_Receive_IT.isra.0+0x90>

08002cc4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cc4:	6803      	ldr	r3, [r0, #0]
{
 8002cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cc8:	681a      	ldr	r2, [r3, #0]
{
 8002cca:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002ccc:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cce:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cd0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002cd2:	d108      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cd4:	0696      	lsls	r6, r2, #26
 8002cd6:	d568      	bpl.n	8002daa <HAL_UART_IRQHandler+0xe6>
 8002cd8:	068d      	lsls	r5, r1, #26
 8002cda:	d566      	bpl.n	8002daa <HAL_UART_IRQHandler+0xe6>
}
 8002cdc:	b002      	add	sp, #8
 8002cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002ce2:	f7ff bf94 	b.w	8002c0e <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ce6:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cea:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 8002cee:	4305      	orrs	r5, r0
 8002cf0:	d05b      	beq.n	8002daa <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cf2:	07d6      	lsls	r6, r2, #31
 8002cf4:	d505      	bpl.n	8002d02 <HAL_UART_IRQHandler+0x3e>
 8002cf6:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cf8:	bf42      	ittt	mi
 8002cfa:	6c63      	ldrmi	r3, [r4, #68]	@ 0x44
 8002cfc:	f043 0301 	orrmi.w	r3, r3, #1
 8002d00:	6463      	strmi	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d02:	0753      	lsls	r3, r2, #29
 8002d04:	d504      	bpl.n	8002d10 <HAL_UART_IRQHandler+0x4c>
 8002d06:	b118      	cbz	r0, 8002d10 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d08:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
 8002d0e:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d10:	0796      	lsls	r6, r2, #30
 8002d12:	d504      	bpl.n	8002d1e <HAL_UART_IRQHandler+0x5a>
 8002d14:	b118      	cbz	r0, 8002d1e <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d16:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d1e:	0715      	lsls	r5, r2, #28
 8002d20:	d507      	bpl.n	8002d32 <HAL_UART_IRQHandler+0x6e>
 8002d22:	f001 0320 	and.w	r3, r1, #32
 8002d26:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d28:	bf1e      	ittt	ne
 8002d2a:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 8002d2c:	f043 0308 	orrne.w	r3, r3, #8
 8002d30:	6463      	strne	r3, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d32:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d032      	beq.n	8002d9e <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d38:	0692      	lsls	r2, r2, #26
 8002d3a:	d504      	bpl.n	8002d46 <HAL_UART_IRQHandler+0x82>
 8002d3c:	068b      	lsls	r3, r1, #26
 8002d3e:	d502      	bpl.n	8002d46 <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8002d40:	4620      	mov	r0, r4
 8002d42:	f7ff ff64 	bl	8002c0e <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d46:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8002d48:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4a:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d4c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d52:	f002 0208 	and.w	r2, r2, #8
 8002d56:	ea53 0502 	orrs.w	r5, r3, r2
 8002d5a:	d022      	beq.n	8002da2 <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8002d5c:	f7ff fe9c 	bl	8002a98 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d60:	6973      	ldr	r3, [r6, #20]
 8002d62:	065e      	lsls	r6, r3, #25
 8002d64:	d518      	bpl.n	8002d98 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d66:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d68:	f102 0314 	add.w	r3, r2, #20
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d74:	3214      	adds	r2, #20
 8002d76:	e842 3100 	strex	r1, r3, [r2]
 8002d7a:	2900      	cmp	r1, #0
 8002d7c:	d1f3      	bne.n	8002d66 <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8002d7e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002d80:	b150      	cbz	r0, 8002d98 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d82:	4b74      	ldr	r3, [pc, #464]	@ (8002f54 <HAL_UART_IRQHandler+0x290>)
 8002d84:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d86:	f7fe fdfb 	bl	8001980 <HAL_DMA_Abort_IT>
 8002d8a:	b140      	cbz	r0, 8002d9e <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d8c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002d8e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 8002d90:	b002      	add	sp, #8
 8002d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d96:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f7ff ff2e 	bl	8002bfa <HAL_UART_ErrorCallback>
}
 8002d9e:	b002      	add	sp, #8
 8002da0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002da2:	f7ff ff2a 	bl	8002bfa <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da6:	6465      	str	r5, [r4, #68]	@ 0x44
 8002da8:	e7f9      	b.n	8002d9e <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002daa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002dac:	2801      	cmp	r0, #1
 8002dae:	f040 8094 	bne.w	8002eda <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002db2:	06d5      	lsls	r5, r2, #27
 8002db4:	f140 8091 	bpl.w	8002eda <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002db8:	06c8      	lsls	r0, r1, #27
 8002dba:	f140 808e 	bpl.w	8002eda <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	9201      	str	r2, [sp, #4]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	9201      	str	r2, [sp, #4]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	9201      	str	r2, [sp, #4]
 8002dca:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	0652      	lsls	r2, r2, #25
 8002dd0:	d54d      	bpl.n	8002e6e <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dd2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002dd4:	680a      	ldr	r2, [r1, #0]
 8002dd6:	6852      	ldr	r2, [r2, #4]
 8002dd8:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8002dda:	2a00      	cmp	r2, #0
 8002ddc:	d0df      	beq.n	8002d9e <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dde:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 8002de0:	4290      	cmp	r0, r2
 8002de2:	d9dc      	bls.n	8002d9e <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8002de4:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002de6:	698a      	ldr	r2, [r1, #24]
 8002de8:	2a20      	cmp	r2, #32
 8002dea:	d036      	beq.n	8002e5a <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dec:	f103 020c 	add.w	r2, r3, #12
 8002df0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002df4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df8:	f103 000c 	add.w	r0, r3, #12
 8002dfc:	e840 2100 	strex	r1, r2, [r0]
 8002e00:	2900      	cmp	r1, #0
 8002e02:	d1f3      	bne.n	8002dec <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	f103 0214 	add.w	r2, r3, #20
 8002e08:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e10:	f103 0014 	add.w	r0, r3, #20
 8002e14:	e840 2100 	strex	r1, r2, [r0]
 8002e18:	2900      	cmp	r1, #0
 8002e1a:	d1f3      	bne.n	8002e04 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1c:	f103 0214 	add.w	r2, r3, #20
 8002e20:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e28:	f103 0014 	add.w	r0, r3, #20
 8002e2c:	e840 2100 	strex	r1, r2, [r0]
 8002e30:	2900      	cmp	r1, #0
 8002e32:	d1f3      	bne.n	8002e1c <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8002e34:	2220      	movs	r2, #32
 8002e36:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3a:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3c:	f103 020c 	add.w	r2, r3, #12
 8002e40:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e44:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e48:	f103 000c 	add.w	r0, r3, #12
 8002e4c:	e840 2100 	strex	r1, r2, [r0]
 8002e50:	2900      	cmp	r1, #0
 8002e52:	d1f3      	bne.n	8002e3c <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e54:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002e56:	f7fe fd73 	bl	8001940 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e5e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002e60:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002e62:	1ac9      	subs	r1, r1, r3
 8002e64:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e66:	4620      	mov	r0, r4
 8002e68:	f7ff fed0 	bl	8002c0c <HAL_UARTEx_RxEventCallback>
 8002e6c:	e797      	b.n	8002d9e <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e6e:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8002e70:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e72:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8002e74:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e76:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	d090      	beq.n	8002d9e <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e7c:	1a89      	subs	r1, r1, r2
 8002e7e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002e80:	2900      	cmp	r1, #0
 8002e82:	d08c      	beq.n	8002d9e <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e84:	f103 020c 	add.w	r2, r3, #12
 8002e88:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e8c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e90:	f103 050c 	add.w	r5, r3, #12
 8002e94:	e845 2000 	strex	r0, r2, [r5]
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	d1f3      	bne.n	8002e84 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9c:	f103 0214 	add.w	r2, r3, #20
 8002ea0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea8:	f103 0514 	add.w	r5, r3, #20
 8002eac:	e845 2000 	strex	r0, r2, [r5]
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	d1f3      	bne.n	8002e9c <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eba:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	f103 020c 	add.w	r2, r3, #12
 8002ec0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	f103 050c 	add.w	r5, r3, #12
 8002ecc:	e845 2000 	strex	r0, r2, [r5]
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	d1f3      	bne.n	8002ebc <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ed8:	e7c5      	b.n	8002e66 <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002eda:	0616      	lsls	r6, r2, #24
 8002edc:	d528      	bpl.n	8002f30 <HAL_UART_IRQHandler+0x26c>
 8002ede:	060d      	lsls	r5, r1, #24
 8002ee0:	d526      	bpl.n	8002f30 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ee2:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8002ee6:	2a21      	cmp	r2, #33	@ 0x21
 8002ee8:	f47f af59 	bne.w	8002d9e <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eec:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002eee:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef0:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8002ef4:	d117      	bne.n	8002f26 <HAL_UART_IRQHandler+0x262>
 8002ef6:	6921      	ldr	r1, [r4, #16]
 8002ef8:	b9a9      	cbnz	r1, 8002f26 <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002efa:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002efe:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002f02:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f04:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002f06:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002f08:	3a01      	subs	r2, #1
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8002f0e:	2a00      	cmp	r2, #0
 8002f10:	f47f af45 	bne.w	8002d9e <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f1a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f22:	60da      	str	r2, [r3, #12]
 8002f24:	e73b      	b.n	8002d9e <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f26:	1c51      	adds	r1, r2, #1
 8002f28:	6221      	str	r1, [r4, #32]
 8002f2a:	7812      	ldrb	r2, [r2, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	e7ea      	b.n	8002f06 <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f30:	0650      	lsls	r0, r2, #25
 8002f32:	f57f af34 	bpl.w	8002d9e <HAL_UART_IRQHandler+0xda>
 8002f36:	064a      	lsls	r2, r1, #25
 8002f38:	f57f af31 	bpl.w	8002d9e <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f3c:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002f3e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f44:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002f46:	2320      	movs	r3, #32
 8002f48:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8002f4c:	f7ff fe54 	bl	8002bf8 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8002f50:	e725      	b.n	8002d9e <HAL_UART_IRQHandler+0xda>
 8002f52:	bf00      	nop
 8002f54:	08002bfd 	.word	0x08002bfd

08002f58 <UART_Start_Receive_IT>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f58:	2300      	movs	r3, #0
  huart->RxXferCount = Size;
 8002f5a:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5c:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f5e:	2322      	movs	r3, #34	@ 0x22
  huart->RxXferSize = Size;
 8002f60:	8582      	strh	r2, [r0, #44]	@ 0x2c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f62:	6902      	ldr	r2, [r0, #16]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f64:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->pRxBuffPtr = pData;
 8002f68:	6281      	str	r1, [r0, #40]	@ 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f6a:	6803      	ldr	r3, [r0, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f6c:	b11a      	cbz	r2, 8002f76 <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f74:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f76:	695a      	ldr	r2, [r3, #20]
}
 8002f78:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	f042 0220 	orr.w	r2, r2, #32
 8002f86:	60da      	str	r2, [r3, #12]
}
 8002f88:	4770      	bx	lr

08002f8a <HAL_UART_Receive_IT>:
{
 8002f8a:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f8c:	f890 6042 	ldrb.w	r6, [r0, #66]	@ 0x42
 8002f90:	2e20      	cmp	r6, #32
 8002f92:	d106      	bne.n	8002fa2 <HAL_UART_Receive_IT+0x18>
    if ((pData == NULL) || (Size == 0U))
 8002f94:	b141      	cbz	r1, 8002fa8 <HAL_UART_Receive_IT+0x1e>
 8002f96:	b13a      	cbz	r2, 8002fa8 <HAL_UART_Receive_IT+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f98:	2400      	movs	r4, #0
 8002f9a:	6304      	str	r4, [r0, #48]	@ 0x30
}
 8002f9c:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f9e:	f7ff bfdb 	b.w	8002f58 <UART_Start_Receive_IT>
    return HAL_BUSY;
 8002fa2:	2002      	movs	r0, #2
}
 8002fa4:	bc70      	pop	{r4, r5, r6}
 8002fa6:	4770      	bx	lr
      return HAL_ERROR;
 8002fa8:	2001      	movs	r0, #1
 8002faa:	e7fb      	b.n	8002fa4 <HAL_UART_Receive_IT+0x1a>

08002fac <Bluetooth_Init>:
static void (*CommandCallback)(uint8_t) = NULL;
static uint8_t Received_Cmd;

void Bluetooth_Init(UART_HandleTypeDef *UART)
{
	BlueTooth_UART = UART;
 8002fac:	4b01      	ldr	r3, [pc, #4]	@ (8002fb4 <Bluetooth_Init+0x8>)
 8002fae:	6018      	str	r0, [r3, #0]
}
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	2000022c 	.word	0x2000022c

08002fb8 <Bluetooth_RegisterCallback>:

void Bluetooth_RegisterCallback(void (*Func)(uint8_t cmd))
{
	CommandCallback = Func;
 8002fb8:	4b01      	ldr	r3, [pc, #4]	@ (8002fc0 <Bluetooth_RegisterCallback+0x8>)
 8002fba:	6018      	str	r0, [r3, #0]
}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000228 	.word	0x20000228

08002fc4 <Bluetooth_StartReceive>:

void Bluetooth_StartReceive(void)
{
	HAL_UART_Receive_IT(BlueTooth_UART, &Received_Cmd, 1);
 8002fc4:	4b02      	ldr	r3, [pc, #8]	@ (8002fd0 <Bluetooth_StartReceive+0xc>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4902      	ldr	r1, [pc, #8]	@ (8002fd4 <Bluetooth_StartReceive+0x10>)
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	f7ff bfdd 	b.w	8002f8a <HAL_UART_Receive_IT>
 8002fd0:	2000022c 	.word	0x2000022c
 8002fd4:	20000224 	.word	0x20000224

08002fd8 <Bluetooth_IRQHandler>:
}

void Bluetooth_IRQHandler(void)
{
 8002fd8:	b508      	push	{r3, lr}
    if(CommandCallback != NULL)
 8002fda:	4b07      	ldr	r3, [pc, #28]	@ (8002ff8 <Bluetooth_IRQHandler+0x20>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	b113      	cbz	r3, 8002fe6 <Bluetooth_IRQHandler+0xe>
    {
    	CommandCallback(Received_Cmd);
 8002fe0:	4a06      	ldr	r2, [pc, #24]	@ (8002ffc <Bluetooth_IRQHandler+0x24>)
 8002fe2:	7810      	ldrb	r0, [r2, #0]
 8002fe4:	4798      	blx	r3
    }
    /* Restart the reception for the next byte */
    HAL_UART_Receive_IT(BlueTooth_UART, &Received_Cmd, 1);
 8002fe6:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <Bluetooth_IRQHandler+0x28>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	4903      	ldr	r1, [pc, #12]	@ (8002ffc <Bluetooth_IRQHandler+0x24>)
}
 8002fee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_UART_Receive_IT(BlueTooth_UART, &Received_Cmd, 1);
 8002ff2:	f7ff bfca 	b.w	8002f8a <HAL_UART_Receive_IT>
 8002ff6:	bf00      	nop
 8002ff8:	20000228 	.word	0x20000228
 8002ffc:	20000224 	.word	0x20000224
 8003000:	2000022c 	.word	0x2000022c

08003004 <LM35_Init>:
static ADC_HandleTypeDef *LM35_ADC = NULL;
static float Latest_Temperature = 0.0f;

void LM35_Init(ADC_HandleTypeDef *Copy_ADC)
{
	LM35_ADC = Copy_ADC;
 8003004:	4b01      	ldr	r3, [pc, #4]	@ (800300c <LM35_Init+0x8>)
 8003006:	6018      	str	r0, [r3, #0]
    HAL_ADC_Start_IT(LM35_ADC);  /* Start the first conversion */
 8003008:	f7fe b842 	b.w	8001090 <HAL_ADC_Start_IT>
 800300c:	20000234 	.word	0x20000234

08003010 <LM35_StartConversion>:
}

void LM35_StartConversion(void)
{
    if (LM35_ADC != NULL)
 8003010:	4b02      	ldr	r3, [pc, #8]	@ (800301c <LM35_StartConversion+0xc>)
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	b108      	cbz	r0, 800301a <LM35_StartConversion+0xa>
    {
        HAL_ADC_Start_IT(LM35_ADC);  /* Start ADC conversion in interrupt mode */
 8003016:	f7fe b83b 	b.w	8001090 <HAL_ADC_Start_IT>
    }
}
 800301a:	4770      	bx	lr
 800301c:	20000234 	.word	0x20000234

08003020 <LM35_ProcessADCValue>:

void LM35_ProcessADCValue(uint32_t ADC_Value)
{
 8003020:	b508      	push	{r3, lr}
    /** Convert ADC count to voltage **/
    float voltage = ((float)ADC_Value / ADC_MAX_COUNTS) * ADC_REFERENCE_VOLTAGE;
 8003022:	f7fd f94b 	bl	80002bc <__aeabi_ui2f>
 8003026:	4907      	ldr	r1, [pc, #28]	@ (8003044 <LM35_ProcessADCValue+0x24>)
 8003028:	f7fd fa54 	bl	80004d4 <__aeabi_fdiv>
 800302c:	4906      	ldr	r1, [pc, #24]	@ (8003048 <LM35_ProcessADCValue+0x28>)
 800302e:	f7fd f99d 	bl	800036c <__aeabi_fmul>
    /** Convert voltage to temperature: V / (V per °C) **/
    Latest_Temperature = (voltage * 1000.0f) / LM35_V_PER_DEGREE;
 8003032:	4906      	ldr	r1, [pc, #24]	@ (800304c <LM35_ProcessADCValue+0x2c>)
 8003034:	f7fd f99a 	bl	800036c <__aeabi_fmul>
 8003038:	4905      	ldr	r1, [pc, #20]	@ (8003050 <LM35_ProcessADCValue+0x30>)
 800303a:	f7fd fa4b 	bl	80004d4 <__aeabi_fdiv>
 800303e:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <LM35_ProcessADCValue+0x34>)
 8003040:	6018      	str	r0, [r3, #0]
}
 8003042:	bd08      	pop	{r3, pc}
 8003044:	457ff000 	.word	0x457ff000
 8003048:	40533333 	.word	0x40533333
 800304c:	447a0000 	.word	0x447a0000
 8003050:	41200000 	.word	0x41200000
 8003054:	20000230 	.word	0x20000230

08003058 <LM35_GetTemperature>:

float LM35_GetTemperature(void)
{
    return Latest_Temperature;  /* Return the last stored temperature */
}
 8003058:	4b01      	ldr	r3, [pc, #4]	@ (8003060 <LM35_GetTemperature+0x8>)
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000230 	.word	0x20000230

08003064 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003064:	b508      	push	{r3, lr}
    if (hadc->Instance == ADC1)
 8003066:	6802      	ldr	r2, [r0, #0]
 8003068:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <HAL_ADC_ConvCpltCallback+0x1c>)
 800306a:	429a      	cmp	r2, r3
 800306c:	d107      	bne.n	800307e <HAL_ADC_ConvCpltCallback+0x1a>
    {
        uint32_t ADC_val = HAL_ADC_GetValue(hadc);
 800306e:	f7fd fedf 	bl	8000e30 <HAL_ADC_GetValue>
        LM35_ProcessADCValue(ADC_val);            /** Process and update temperature **/
 8003072:	f7ff ffd5 	bl	8003020 <LM35_ProcessADCValue>
        LM35_StartConversion();                   /** Start new conversion **/
    }
}
 8003076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        LM35_StartConversion();                   /** Start new conversion **/
 800307a:	f7ff bfc9 	b.w	8003010 <LM35_StartConversion>
}
 800307e:	bd08      	pop	{r3, pc}
 8003080:	40012400 	.word	0x40012400

08003084 <Motor_SetSpeed>:
    Motor_Stop(Motor);
}

void Motor_SetSpeed(Motor_t *Motor, uint8_t speed_percent)
{
    if (speed_percent > 100)
 8003084:	2964      	cmp	r1, #100	@ 0x64
 8003086:	bf28      	it	cs
 8003088:	2164      	movcs	r1, #100	@ 0x64
    {
    	speed_percent = 100;
    }
    motor_speed = speed_percent;
 800308a:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <Motor_SetSpeed+0x34>)
 800308c:	7019      	strb	r1, [r3, #0]
    __HAL_TIM_SET_COMPARE(Motor->timer,Motor->pwm_channel,((motor_period * motor_speed) / 100));
 800308e:	e9d0 3200 	ldrd	r3, r2, [r0]
 8003092:	480a      	ldr	r0, [pc, #40]	@ (80030bc <Motor_SetSpeed+0x38>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6800      	ldr	r0, [r0, #0]
 8003098:	4341      	muls	r1, r0
 800309a:	2064      	movs	r0, #100	@ 0x64
 800309c:	fbb1 f1f0 	udiv	r1, r1, r0
 80030a0:	b90a      	cbnz	r2, 80030a6 <Motor_SetSpeed+0x22>
 80030a2:	6359      	str	r1, [r3, #52]	@ 0x34
 80030a4:	4770      	bx	lr
 80030a6:	2a04      	cmp	r2, #4
 80030a8:	d101      	bne.n	80030ae <Motor_SetSpeed+0x2a>
 80030aa:	6399      	str	r1, [r3, #56]	@ 0x38
 80030ac:	4770      	bx	lr
 80030ae:	2a08      	cmp	r2, #8
 80030b0:	bf0c      	ite	eq
 80030b2:	63d9      	streq	r1, [r3, #60]	@ 0x3c
 80030b4:	6419      	strne	r1, [r3, #64]	@ 0x40
}
 80030b6:	4770      	bx	lr
 80030b8:	20000238 	.word	0x20000238
 80030bc:	2000023c 	.word	0x2000023c

080030c0 <Motor_Forward>:

void Motor_Forward(Motor_t *Motor)
{
 80030c0:	b510      	push	{r4, lr}
 80030c2:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(Motor->in1_port, Motor->in1_pin, GPIO_PIN_SET);
 80030c4:	8981      	ldrh	r1, [r0, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	6880      	ldr	r0, [r0, #8]
 80030ca:	f7fe fd77 	bl	8001bbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Motor->in2_port, Motor->in2_pin, GPIO_PIN_RESET);
 80030ce:	8aa1      	ldrh	r1, [r4, #20]
 80030d0:	6920      	ldr	r0, [r4, #16]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f7fe fd72 	bl	8001bbc <HAL_GPIO_WritePin>
    Motor_SetSpeed(Motor, motor_speed);
 80030d8:	4b03      	ldr	r3, [pc, #12]	@ (80030e8 <Motor_Forward+0x28>)
 80030da:	4620      	mov	r0, r4
}
 80030dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Motor_SetSpeed(Motor, motor_speed);
 80030e0:	7819      	ldrb	r1, [r3, #0]
 80030e2:	f7ff bfcf 	b.w	8003084 <Motor_SetSpeed>
 80030e6:	bf00      	nop
 80030e8:	20000238 	.word	0x20000238

080030ec <Motor_Backward>:

void Motor_Backward(Motor_t *Motor)
{
 80030ec:	b510      	push	{r4, lr}
 80030ee:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(Motor->in1_port, Motor->in1_pin, GPIO_PIN_RESET);
 80030f0:	8981      	ldrh	r1, [r0, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	6880      	ldr	r0, [r0, #8]
 80030f6:	f7fe fd61 	bl	8001bbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Motor->in2_port, Motor->in2_pin, GPIO_PIN_SET);
 80030fa:	8aa1      	ldrh	r1, [r4, #20]
 80030fc:	6920      	ldr	r0, [r4, #16]
 80030fe:	2201      	movs	r2, #1
 8003100:	f7fe fd5c 	bl	8001bbc <HAL_GPIO_WritePin>
    Motor_SetSpeed(Motor, motor_speed);
 8003104:	4b03      	ldr	r3, [pc, #12]	@ (8003114 <Motor_Backward+0x28>)
 8003106:	4620      	mov	r0, r4
}
 8003108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Motor_SetSpeed(Motor, motor_speed);
 800310c:	7819      	ldrb	r1, [r3, #0]
 800310e:	f7ff bfb9 	b.w	8003084 <Motor_SetSpeed>
 8003112:	bf00      	nop
 8003114:	20000238 	.word	0x20000238

08003118 <Motor_Stop>:

void Motor_Stop(Motor_t *Motor)
{
 8003118:	b510      	push	{r4, lr}
 800311a:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(Motor->in1_port, Motor->in1_pin, GPIO_PIN_RESET);
 800311c:	8981      	ldrh	r1, [r0, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	6880      	ldr	r0, [r0, #8]
 8003122:	f7fe fd4b 	bl	8001bbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Motor->in2_port, Motor->in2_pin, GPIO_PIN_RESET);
 8003126:	2200      	movs	r2, #0
 8003128:	8aa1      	ldrh	r1, [r4, #20]
 800312a:	6920      	ldr	r0, [r4, #16]
 800312c:	f7fe fd46 	bl	8001bbc <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(Motor->timer, Motor->pwm_channel, 0);
 8003130:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	b90b      	cbnz	r3, 800313c <Motor_Stop+0x24>
 8003138:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800313a:	bd10      	pop	{r4, pc}
    __HAL_TIM_SET_COMPARE(Motor->timer, Motor->pwm_channel, 0);
 800313c:	2b04      	cmp	r3, #4
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	d101      	bne.n	8003148 <Motor_Stop+0x30>
 8003144:	6391      	str	r1, [r2, #56]	@ 0x38
 8003146:	e7f8      	b.n	800313a <Motor_Stop+0x22>
 8003148:	2b08      	cmp	r3, #8
 800314a:	bf0c      	ite	eq
 800314c:	63d1      	streq	r1, [r2, #60]	@ 0x3c
 800314e:	6411      	strne	r1, [r2, #64]	@ 0x40
}
 8003150:	e7f3      	b.n	800313a <Motor_Stop+0x22>
	...

08003154 <Motor_Init>:
{
 8003154:	b510      	push	{r4, lr}
 8003156:	4604      	mov	r4, r0
    motor_period = Motor->timer->Init.Period + 1;
 8003158:	6800      	ldr	r0, [r0, #0]
 800315a:	4a07      	ldr	r2, [pc, #28]	@ (8003178 <Motor_Init+0x24>)
 800315c:	68c3      	ldr	r3, [r0, #12]
    HAL_TIM_PWM_Start(Motor->timer, Motor->pwm_channel);
 800315e:	6861      	ldr	r1, [r4, #4]
    motor_period = Motor->timer->Init.Period + 1;
 8003160:	3301      	adds	r3, #1
 8003162:	6013      	str	r3, [r2, #0]
    motor_speed = 0;
 8003164:	2200      	movs	r2, #0
 8003166:	4b05      	ldr	r3, [pc, #20]	@ (800317c <Motor_Init+0x28>)
 8003168:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start(Motor->timer, Motor->pwm_channel);
 800316a:	f7ff fbf1 	bl	8002950 <HAL_TIM_PWM_Start>
    Motor_Stop(Motor);
 800316e:	4620      	mov	r0, r4
}
 8003170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Motor_Stop(Motor);
 8003174:	f7ff bfd0 	b.w	8003118 <Motor_Stop>
 8003178:	2000023c 	.word	0x2000023c
 800317c:	20000238 	.word	0x20000238

08003180 <Ultrasonic_Init>:
static uint32_t ICU_End = 0;
static uint8_t Capture_State = 0;
static float Last_Distance_Cm = 0.0f;

void Ultrasonic_Init(TIM_HandleTypeDef *Copy_UltrasonicTimer,GPIO_TypeDef *Copy_TrigPort, uint16_t Copy_TrigPin, uint32_t Copy_EchoChannel)
{
 8003180:	b410      	push	{r4}
	Ultrasonic_Timer = Copy_UltrasonicTimer;               /** Store handles **/
 8003182:	4c06      	ldr	r4, [pc, #24]	@ (800319c <Ultrasonic_Init+0x1c>)
 8003184:	6020      	str	r0, [r4, #0]
	Trig_Port = Copy_TrigPort;
 8003186:	4c06      	ldr	r4, [pc, #24]	@ (80031a0 <Ultrasonic_Init+0x20>)
 8003188:	6021      	str	r1, [r4, #0]
	Trig_Pin = Copy_TrigPin;
 800318a:	4906      	ldr	r1, [pc, #24]	@ (80031a4 <Ultrasonic_Init+0x24>)
	Echo_Channel = Copy_EchoChannel;

    /** Start input capture interrupt on rising edge **/
    HAL_TIM_IC_Start_IT(Ultrasonic_Timer, Echo_Channel);
}
 800318c:	bc10      	pop	{r4}
	Trig_Pin = Copy_TrigPin;
 800318e:	800a      	strh	r2, [r1, #0]
	Echo_Channel = Copy_EchoChannel;
 8003190:	4a05      	ldr	r2, [pc, #20]	@ (80031a8 <Ultrasonic_Init+0x28>)
    HAL_TIM_IC_Start_IT(Ultrasonic_Timer, Echo_Channel);
 8003192:	4619      	mov	r1, r3
	Echo_Channel = Copy_EchoChannel;
 8003194:	6013      	str	r3, [r2, #0]
    HAL_TIM_IC_Start_IT(Ultrasonic_Timer, Echo_Channel);
 8003196:	f7ff bbdd 	b.w	8002954 <HAL_TIM_IC_Start_IT>
 800319a:	bf00      	nop
 800319c:	20000258 	.word	0x20000258
 80031a0:	20000254 	.word	0x20000254
 80031a4:	20000250 	.word	0x20000250
 80031a8:	2000024c 	.word	0x2000024c

080031ac <Ultrasonic_Trigger>:

void Ultrasonic_Trigger(void)
{
 80031ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    /** Send 10us pulse on TRIG **/
    HAL_GPIO_WritePin(Trig_Port, Trig_Pin, GPIO_PIN_SET);
 80031ae:	4d0c      	ldr	r5, [pc, #48]	@ (80031e0 <Ultrasonic_Trigger+0x34>)
 80031b0:	4c0c      	ldr	r4, [pc, #48]	@ (80031e4 <Ultrasonic_Trigger+0x38>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	8829      	ldrh	r1, [r5, #0]
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	f7fe fd00 	bl	8001bbc <HAL_GPIO_WritePin>
    for (volatile uint32_t i = 0; i < 1600; i++);   /* ~10us delay at 16MHz CPU */
 80031bc:	2300      	movs	r3, #0
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	9b01      	ldr	r3, [sp, #4]
 80031c2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80031c6:	d307      	bcc.n	80031d8 <Ultrasonic_Trigger+0x2c>
    HAL_GPIO_WritePin(Trig_Port, Trig_Pin, GPIO_PIN_RESET);
 80031c8:	2200      	movs	r2, #0
 80031ca:	8829      	ldrh	r1, [r5, #0]
 80031cc:	6820      	ldr	r0, [r4, #0]
}
 80031ce:	b003      	add	sp, #12
 80031d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_GPIO_WritePin(Trig_Port, Trig_Pin, GPIO_PIN_RESET);
 80031d4:	f7fe bcf2 	b.w	8001bbc <HAL_GPIO_WritePin>
    for (volatile uint32_t i = 0; i < 1600; i++);   /* ~10us delay at 16MHz CPU */
 80031d8:	9b01      	ldr	r3, [sp, #4]
 80031da:	3301      	adds	r3, #1
 80031dc:	e7ef      	b.n	80031be <Ultrasonic_Trigger+0x12>
 80031de:	bf00      	nop
 80031e0:	20000250 	.word	0x20000250
 80031e4:	20000254 	.word	0x20000254

080031e8 <Ultrasonic_CaptureCallback>:

void Ultrasonic_CaptureCallback(TIM_HandleTypeDef *Copy_UltrasonicTimer)
{
	if (Copy_UltrasonicTimer == Ultrasonic_Timer)
 80031e8:	4b3e      	ldr	r3, [pc, #248]	@ (80032e4 <Ultrasonic_CaptureCallback+0xfc>)
{
 80031ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (Copy_UltrasonicTimer == Ultrasonic_Timer)
 80031ee:	681c      	ldr	r4, [r3, #0]
{
 80031f0:	4605      	mov	r5, r0
	if (Copy_UltrasonicTimer == Ultrasonic_Timer)
 80031f2:	4284      	cmp	r4, r0
 80031f4:	d115      	bne.n	8003222 <Ultrasonic_CaptureCallback+0x3a>
	{
		/** Read captured value **/
		uint32_t val = HAL_TIM_ReadCapturedValue(Copy_UltrasonicTimer, Echo_Channel);
 80031f6:	4f3c      	ldr	r7, [pc, #240]	@ (80032e8 <Ultrasonic_CaptureCallback+0x100>)
		if (Capture_State == 0)
 80031f8:	4e3c      	ldr	r6, [pc, #240]	@ (80032ec <Ultrasonic_CaptureCallback+0x104>)
		uint32_t val = HAL_TIM_ReadCapturedValue(Copy_UltrasonicTimer, Echo_Channel);
 80031fa:	6839      	ldr	r1, [r7, #0]
 80031fc:	f7ff f89a 	bl	8002334 <HAL_TIM_ReadCapturedValue>
		if (Capture_State == 0)
 8003200:	7832      	ldrb	r2, [r6, #0]
 8003202:	4b3b      	ldr	r3, [pc, #236]	@ (80032f0 <Ultrasonic_CaptureCallback+0x108>)
 8003204:	bb52      	cbnz	r2, 800325c <Ultrasonic_CaptureCallback+0x74>
		{
			ICU_Start = val; /** Rising edge: record start **/
			/** Switch to capture falling edge **/
			__HAL_TIM_SET_CAPTUREPOLARITY(Copy_UltrasonicTimer, Echo_Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003206:	683a      	ldr	r2, [r7, #0]
			ICU_Start = val; /** Rising edge: record start **/
 8003208:	6018      	str	r0, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(Copy_UltrasonicTimer, Echo_Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	b95a      	cbnz	r2, 8003226 <Ultrasonic_CaptureCallback+0x3e>
 800320e:	6a1a      	ldr	r2, [r3, #32]
 8003210:	f022 020a 	bic.w	r2, r2, #10
 8003214:	621a      	str	r2, [r3, #32]
 8003216:	6a1a      	ldr	r2, [r3, #32]
 8003218:	f042 0202 	orr.w	r2, r2, #2
 800321c:	621a      	str	r2, [r3, #32]
			Capture_State = 1;
 800321e:	2301      	movs	r3, #1
			float time_us = ((float) diff * (Copy_UltrasonicTimer->Init.Prescaler + 1)) / (HAL_RCC_GetPCLK1Freq() / 1000000.0f);
			/** Distance in cm = time_us * speed / 2 **/
			Last_Distance_Cm = (time_us * ULTRASONIC_SPEED_CM_US) / 2.0f;
			/** Reset for next measurement **/
			__HAL_TIM_SET_CAPTUREPOLARITY(Copy_UltrasonicTimer, Echo_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
			Capture_State = 0;
 8003220:	7033      	strb	r3, [r6, #0]
		}
	}
}
 8003222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			__HAL_TIM_SET_CAPTUREPOLARITY(Copy_UltrasonicTimer, Echo_Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003226:	2a04      	cmp	r2, #4
 8003228:	d107      	bne.n	800323a <Ultrasonic_CaptureCallback+0x52>
 800322a:	6a1a      	ldr	r2, [r3, #32]
 800322c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003230:	621a      	str	r2, [r3, #32]
 8003232:	6a1a      	ldr	r2, [r3, #32]
 8003234:	f042 0220 	orr.w	r2, r2, #32
 8003238:	e7f0      	b.n	800321c <Ultrasonic_CaptureCallback+0x34>
 800323a:	2a08      	cmp	r2, #8
 800323c:	6a1a      	ldr	r2, [r3, #32]
 800323e:	bf0b      	itete	eq
 8003240:	f422 7200 	biceq.w	r2, r2, #512	@ 0x200
 8003244:	f422 5200 	bicne.w	r2, r2, #8192	@ 0x2000
 8003248:	621a      	streq	r2, [r3, #32]
 800324a:	621a      	strne	r2, [r3, #32]
 800324c:	bf0b      	itete	eq
 800324e:	6a1a      	ldreq	r2, [r3, #32]
 8003250:	6a1a      	ldrne	r2, [r3, #32]
 8003252:	f442 7200 	orreq.w	r2, r2, #512	@ 0x200
 8003256:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 800325a:	e7df      	b.n	800321c <Ultrasonic_CaptureCallback+0x34>
			uint32_t diff = (ICU_End >= ICU_Start) ? (ICU_End - ICU_Start) :
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4283      	cmp	r3, r0
 8003260:	bf83      	ittte	hi
 8003262:	68ea      	ldrhi	r2, [r5, #12]
 8003264:	f1c3 0301 	rsbhi	r3, r3, #1
 8003268:	189b      	addhi	r3, r3, r2
 800326a:	1ac4      	subls	r4, r0, r3
 800326c:	bf88      	it	hi
 800326e:	181c      	addhi	r4, r3, r0
			float time_us = ((float) diff * (Copy_UltrasonicTimer->Init.Prescaler + 1)) / (HAL_RCC_GetPCLK1Freq() / 1000000.0f);
 8003270:	6868      	ldr	r0, [r5, #4]
 8003272:	3001      	adds	r0, #1
 8003274:	f7fd f822 	bl	80002bc <__aeabi_ui2f>
 8003278:	4680      	mov	r8, r0
 800327a:	4620      	mov	r0, r4
 800327c:	f7fd f81e 	bl	80002bc <__aeabi_ui2f>
 8003280:	4601      	mov	r1, r0
 8003282:	4640      	mov	r0, r8
 8003284:	f7fd f872 	bl	800036c <__aeabi_fmul>
 8003288:	4604      	mov	r4, r0
 800328a:	f7fe fefb 	bl	8002084 <HAL_RCC_GetPCLK1Freq>
 800328e:	f7fd f815 	bl	80002bc <__aeabi_ui2f>
 8003292:	4918      	ldr	r1, [pc, #96]	@ (80032f4 <Ultrasonic_CaptureCallback+0x10c>)
 8003294:	f7fd f91e 	bl	80004d4 <__aeabi_fdiv>
 8003298:	4601      	mov	r1, r0
 800329a:	4620      	mov	r0, r4
 800329c:	f7fd f91a 	bl	80004d4 <__aeabi_fdiv>
			Last_Distance_Cm = (time_us * ULTRASONIC_SPEED_CM_US) / 2.0f;
 80032a0:	4915      	ldr	r1, [pc, #84]	@ (80032f8 <Ultrasonic_CaptureCallback+0x110>)
 80032a2:	f7fd f863 	bl	800036c <__aeabi_fmul>
 80032a6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80032aa:	f7fd f85f 	bl	800036c <__aeabi_fmul>
 80032ae:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <Ultrasonic_CaptureCallback+0x114>)
			__HAL_TIM_SET_CAPTUREPOLARITY(Copy_UltrasonicTimer, Echo_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80032b0:	683a      	ldr	r2, [r7, #0]
			Last_Distance_Cm = (time_us * ULTRASONIC_SPEED_CM_US) / 2.0f;
 80032b2:	6018      	str	r0, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(Copy_UltrasonicTimer, Echo_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	b93a      	cbnz	r2, 80032c8 <Ultrasonic_CaptureCallback+0xe0>
 80032b8:	6a1a      	ldr	r2, [r3, #32]
 80032ba:	f022 020a 	bic.w	r2, r2, #10
 80032be:	621a      	str	r2, [r3, #32]
 80032c0:	6a1a      	ldr	r2, [r3, #32]
 80032c2:	621a      	str	r2, [r3, #32]
			Capture_State = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	e7ab      	b.n	8003220 <Ultrasonic_CaptureCallback+0x38>
			__HAL_TIM_SET_CAPTUREPOLARITY(Copy_UltrasonicTimer, Echo_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80032c8:	2a04      	cmp	r2, #4
 80032ca:	d103      	bne.n	80032d4 <Ultrasonic_CaptureCallback+0xec>
 80032cc:	6a1a      	ldr	r2, [r3, #32]
 80032ce:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80032d2:	e7f4      	b.n	80032be <Ultrasonic_CaptureCallback+0xd6>
 80032d4:	2a08      	cmp	r2, #8
 80032d6:	6a1a      	ldr	r2, [r3, #32]
 80032d8:	bf0c      	ite	eq
 80032da:	f422 7200 	biceq.w	r2, r2, #512	@ 0x200
 80032de:	f422 5200 	bicne.w	r2, r2, #8192	@ 0x2000
 80032e2:	e7ec      	b.n	80032be <Ultrasonic_CaptureCallback+0xd6>
 80032e4:	20000258 	.word	0x20000258
 80032e8:	2000024c 	.word	0x2000024c
 80032ec:	20000244 	.word	0x20000244
 80032f0:	20000248 	.word	0x20000248
 80032f4:	49742400 	.word	0x49742400
 80032f8:	3d0c7e28 	.word	0x3d0c7e28
 80032fc:	20000240 	.word	0x20000240

08003300 <Ultrasonic_GetDistance>:

float Ultrasonic_GetDistance(void)
{
    return Last_Distance_Cm;
}
 8003300:	4b01      	ldr	r3, [pc, #4]	@ (8003308 <Ultrasonic_GetDistance+0x8>)
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000240 	.word	0x20000240

0800330c <StartBluetoothTask>:
 *         Blocks on xBluetoothQueue, translates each byte into a MotorCommand,
 *         then sends it to the motor control task via xMotorCommandQueue.
 * @param  pvParameters  Not used
 */
static void StartBluetoothTask(void *pvParameters)
{
 800330c:	b507      	push	{r0, r1, r2, lr}
    uint8_t cmd;
    MotorCommand_t motorCmd;

    /* Initialize the Bluetooth driver with UART handle */
    Bluetooth_Init(&huart1);
 800330e:	4820      	ldr	r0, [pc, #128]	@ (8003390 <StartBluetoothTask+0x84>)
 8003310:	f7ff fe4c 	bl	8002fac <Bluetooth_Init>
    /* Register ISR callback to enqueue incoming bytes */
    Bluetooth_RegisterCallback(BluetoothISR_Callback);
 8003314:	481f      	ldr	r0, [pc, #124]	@ (8003394 <StartBluetoothTask+0x88>)
 8003316:	f7ff fe4f 	bl	8002fb8 <Bluetooth_RegisterCallback>
    /* Start interrupt-driven reception */
    Bluetooth_StartReceive();
 800331a:	f7ff fe53 	bl	8002fc4 <Bluetooth_StartReceive>

    for (;;)
    {
        /* Wait indefinitely for next byte from ISR */
        if (xQueueReceive(xBluetoothQueue, &cmd, portMAX_DELAY) == pdTRUE)
 800331e:	4d1e      	ldr	r5, [pc, #120]	@ (8003398 <StartBluetoothTask+0x8c>)
				/* Unknown command: ignore */
				continue;
			}

            /* Send the assembled motor command to the motor control task */
            xQueueSend(xMotorCommandQueue, &motorCmd, portMAX_DELAY);
 8003320:	4c1e      	ldr	r4, [pc, #120]	@ (800339c <StartBluetoothTask+0x90>)
        if (xQueueReceive(xBluetoothQueue, &cmd, portMAX_DELAY) == pdTRUE)
 8003322:	f04f 32ff 	mov.w	r2, #4294967295
 8003326:	6828      	ldr	r0, [r5, #0]
 8003328:	f10d 0103 	add.w	r1, sp, #3
 800332c:	f000 fdaa 	bl	8003e84 <xQueueReceive>
 8003330:	2801      	cmp	r0, #1
 8003332:	d1f6      	bne.n	8003322 <StartBluetoothTask+0x16>
			switch (cmd)
 8003334:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003338:	2b4c      	cmp	r3, #76	@ 0x4c
 800333a:	d024      	beq.n	8003386 <StartBluetoothTask+0x7a>
 800333c:	d819      	bhi.n	8003372 <StartBluetoothTask+0x66>
 800333e:	2b42      	cmp	r3, #66	@ 0x42
 8003340:	d01d      	beq.n	800337e <StartBluetoothTask+0x72>
 8003342:	d811      	bhi.n	8003368 <StartBluetoothTask+0x5c>
 8003344:	f1a3 0231 	sub.w	r2, r3, #49	@ 0x31
 8003348:	2a08      	cmp	r2, #8
 800334a:	d8ea      	bhi.n	8003322 <StartBluetoothTask+0x16>
				motorCmd.speed = (cmd - '0') * 10; /* Translate ASCII command into MotorCommand_t */
 800334c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	3320      	adds	r3, #32
 8003354:	f88d 3005 	strb.w	r3, [sp, #5]
            xQueueSend(xMotorCommandQueue, &motorCmd, portMAX_DELAY);
 8003358:	2300      	movs	r3, #0
 800335a:	f04f 32ff 	mov.w	r2, #4294967295
 800335e:	6820      	ldr	r0, [r4, #0]
 8003360:	a901      	add	r1, sp, #4
 8003362:	f000 fc11 	bl	8003b88 <xQueueGenericSend>
 8003366:	e7dc      	b.n	8003322 <StartBluetoothTask+0x16>
			switch (cmd)
 8003368:	2b46      	cmp	r3, #70	@ 0x46
 800336a:	d1da      	bne.n	8003322 <StartBluetoothTask+0x16>
				motorCmd.direction = MOTOR_DIR_FORWARD;
 800336c:	f88d 0004 	strb.w	r0, [sp, #4]
				break;
 8003370:	e7f2      	b.n	8003358 <StartBluetoothTask+0x4c>
			switch (cmd)
 8003372:	2b52      	cmp	r3, #82	@ 0x52
 8003374:	d009      	beq.n	800338a <StartBluetoothTask+0x7e>
 8003376:	2b59      	cmp	r3, #89	@ 0x59
 8003378:	d1d3      	bne.n	8003322 <StartBluetoothTask+0x16>
				motorCmd.direction = MOTOR_DIR_STOP;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <StartBluetoothTask+0x74>
				motorCmd.direction = MOTOR_DIR_BACKWARD;
 800337e:	2302      	movs	r3, #2
				motorCmd.direction = MOTOR_DIR_STOP;
 8003380:	f88d 3004 	strb.w	r3, [sp, #4]
				break;
 8003384:	e7e8      	b.n	8003358 <StartBluetoothTask+0x4c>
				motorCmd.direction = MOTOR_DIR_LEFT;
 8003386:	2303      	movs	r3, #3
 8003388:	e7fa      	b.n	8003380 <StartBluetoothTask+0x74>
				motorCmd.direction = MOTOR_DIR_RIGHT;
 800338a:	2304      	movs	r3, #4
 800338c:	e7f8      	b.n	8003380 <StartBluetoothTask+0x74>
 800338e:	bf00      	nop
 8003390:	200000a8 	.word	0x200000a8
 8003394:	080033a1 	.word	0x080033a1
 8003398:	20000260 	.word	0x20000260
 800339c:	2000026c 	.word	0x2000026c

080033a0 <BluetoothISR_Callback>:
{
 80033a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    BaseType_t xWoken = pdFALSE;
 80033a2:	2300      	movs	r3, #0
{
 80033a4:	f88d 0007 	strb.w	r0, [sp, #7]
    xQueueSendFromISR(xBluetoothQueue, &cmd, &xWoken);
 80033a8:	480b      	ldr	r0, [pc, #44]	@ (80033d8 <BluetoothISR_Callback+0x38>)
 80033aa:	aa03      	add	r2, sp, #12
 80033ac:	6800      	ldr	r0, [r0, #0]
 80033ae:	f10d 0107 	add.w	r1, sp, #7
    BaseType_t xWoken = pdFALSE;
 80033b2:	9303      	str	r3, [sp, #12]
    xQueueSendFromISR(xBluetoothQueue, &cmd, &xWoken);
 80033b4:	f000 fc9a 	bl	8003cec <xQueueGenericSendFromISR>
    portYIELD_FROM_ISR(xWoken);
 80033b8:	9b03      	ldr	r3, [sp, #12]
 80033ba:	b14b      	cbz	r3, 80033d0 <BluetoothISR_Callback+0x30>
 80033bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80033c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	f3bf 8f6f 	isb	sy
}
 80033d0:	b005      	add	sp, #20
 80033d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80033d6:	bf00      	nop
 80033d8:	20000260 	.word	0x20000260

080033dc <InitBluetoothTask>:
/**
 * @brief  Creates the Bluetooth processing task and its queue.
 *         Must be called before starting the scheduler.
 */
void InitBluetoothTask(void)
{
 80033dc:	b507      	push	{r0, r1, r2, lr}
    /* Create queue for raw Bluetooth bytes (length = 10) */
    xBluetoothQueue = xQueueCreate(10, sizeof(uint8_t));
 80033de:	2200      	movs	r2, #0
 80033e0:	2101      	movs	r1, #1
 80033e2:	200a      	movs	r0, #10
 80033e4:	f000 fba6 	bl	8003b34 <xQueueGenericCreate>
 80033e8:	4b07      	ldr	r3, [pc, #28]	@ (8003408 <InitBluetoothTask+0x2c>)

    /* Create the Bluetooth task at medium priority */
    xTaskCreate(
 80033ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
    xBluetoothQueue = xQueueCreate(10, sizeof(uint8_t));
 80033ee:	6018      	str	r0, [r3, #0]
    xTaskCreate(
 80033f0:	4b06      	ldr	r3, [pc, #24]	@ (800340c <InitBluetoothTask+0x30>)
 80033f2:	4907      	ldr	r1, [pc, #28]	@ (8003410 <InitBluetoothTask+0x34>)
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	2302      	movs	r3, #2
 80033f8:	4806      	ldr	r0, [pc, #24]	@ (8003414 <InitBluetoothTask+0x38>)
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2300      	movs	r3, #0
 80033fe:	f000 ff75 	bl	80042ec <xTaskCreate>
        256,                     /* Stack size in words */
        NULL,                    /* No parameters */
        tskIDLE_PRIORITY + 2,    /* Medium priority */
        &xBluetoothTaskHandle    /* Task handle */
    );
}
 8003402:	b003      	add	sp, #12
 8003404:	f85d fb04 	ldr.w	pc, [sp], #4
 8003408:	20000260 	.word	0x20000260
 800340c:	2000025c 	.word	0x2000025c
 8003410:	08005536 	.word	0x08005536
 8003414:	0800330d 	.word	0x0800330d

08003418 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART1)
 8003418:	6803      	ldr	r3, [r0, #0]
 800341a:	4a05      	ldr	r2, [pc, #20]	@ (8003430 <HAL_UART_RxCpltCallback+0x18>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d101      	bne.n	8003424 <HAL_UART_RxCpltCallback+0xc>
    {
        Bluetooth_IRQHandler();
 8003420:	f7ff bdda 	b.w	8002fd8 <Bluetooth_IRQHandler>
    }
    else if (huart->Instance == USART2)
 8003424:	4a03      	ldr	r2, [pc, #12]	@ (8003434 <HAL_UART_RxCpltCallback+0x1c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d101      	bne.n	800342e <HAL_UART_RxCpltCallback+0x16>
    {
    	Motor_IRQHandler();
 800342a:	f000 b98f 	b.w	800374c <Motor_IRQHandler>
    }
}
 800342e:	4770      	bx	lr
 8003430:	40013800 	.word	0x40013800
 8003434:	40004400 	.word	0x40004400

08003438 <StartCANReceiveTask>:
/**
 * @brief  FreeRTOS task to process incoming CAN Rx messages.
 *         Dispatches motor commands to the motor queue.
 */
static void StartCANReceiveTask(void *pvParameters)
{
 8003438:	b500      	push	{lr}
    MotorCommand_t cmd;

    for (;;)
    {
        /* Wait indefinitely for next CAN Rx message */
        if (xQueueReceive(xCanRxQueue, &msg, portMAX_DELAY) == pdTRUE)
 800343a:	4d0d      	ldr	r5, [pc, #52]	@ (8003470 <StartCANReceiveTask+0x38>)
                case MOTOR_CMD_ID:
                    /** Extract direction and speed **/
                    cmd.direction = msg.data[0];
                    cmd.speed     = msg.data[1];
                    /* Forward to motor control queue */
                    xQueueSend(xMotorCommandQueue, &cmd, 0);
 800343c:	4c0d      	ldr	r4, [pc, #52]	@ (8003474 <StartCANReceiveTask+0x3c>)
{
 800343e:	b08b      	sub	sp, #44	@ 0x2c
        if (xQueueReceive(xCanRxQueue, &msg, portMAX_DELAY) == pdTRUE)
 8003440:	f04f 32ff 	mov.w	r2, #4294967295
 8003444:	6828      	ldr	r0, [r5, #0]
 8003446:	a901      	add	r1, sp, #4
 8003448:	f000 fd1c 	bl	8003e84 <xQueueReceive>
 800344c:	2801      	cmp	r0, #1
 800344e:	d1f7      	bne.n	8003440 <StartCANReceiveTask+0x8>
            switch (msg.header.StdId)
 8003450:	9b01      	ldr	r3, [sp, #4]
 8003452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003456:	d1f3      	bne.n	8003440 <StartCANReceiveTask+0x8>
                    cmd.direction = msg.data[0];
 8003458:	f8bd 3020 	ldrh.w	r3, [sp, #32]
                    xQueueSend(xMotorCommandQueue, &cmd, 0);
 800345c:	4669      	mov	r1, sp
                    cmd.direction = msg.data[0];
 800345e:	f8ad 3000 	strh.w	r3, [sp]
                    xQueueSend(xMotorCommandQueue, &cmd, 0);
 8003462:	2300      	movs	r3, #0
 8003464:	6820      	ldr	r0, [r4, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	f000 fb8e 	bl	8003b88 <xQueueGenericSend>
                    break;
 800346c:	e7e8      	b.n	8003440 <StartCANReceiveTask+0x8>
 800346e:	bf00      	nop
 8003470:	20000264 	.word	0x20000264
 8003474:	2000026c 	.word	0x2000026c

08003478 <InitCANReceiveTask>:
/**
 * @brief  Initializes the CAN Rx queue and task.
 *         Call this before vTaskStartScheduler().
 */
void InitCANReceiveTask(void)
{
 8003478:	b507      	push	{r0, r1, r2, lr}
    /* Create queue to hold up to 10 CAN Rx messages */
    xCanRxQueue = xQueueCreate(10, sizeof(CanRxMessage_t));
 800347a:	2200      	movs	r2, #0
 800347c:	2124      	movs	r1, #36	@ 0x24
 800347e:	200a      	movs	r0, #10
 8003480:	f000 fb58 	bl	8003b34 <xQueueGenericCreate>
 8003484:	4b08      	ldr	r3, [pc, #32]	@ (80034a8 <InitCANReceiveTask+0x30>)

    /* Enable CAN RX FIFO 0 message pending interrupt */
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003486:	2102      	movs	r1, #2
    xCanRxQueue = xQueueCreate(10, sizeof(CanRxMessage_t));
 8003488:	6018      	str	r0, [r3, #0]
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800348a:	4808      	ldr	r0, [pc, #32]	@ (80034ac <InitCANReceiveTask+0x34>)
 800348c:	f7fe f8e6 	bl	800165c <HAL_CAN_ActivateNotification>

    /* Create CAN receive task at high priority */
    xTaskCreate(
 8003490:	2300      	movs	r3, #0
 8003492:	2203      	movs	r2, #3
 8003494:	4906      	ldr	r1, [pc, #24]	@ (80034b0 <InitCANReceiveTask+0x38>)
 8003496:	e9cd 2300 	strd	r2, r3, [sp]
 800349a:	4806      	ldr	r0, [pc, #24]	@ (80034b4 <InitCANReceiveTask+0x3c>)
 800349c:	2280      	movs	r2, #128	@ 0x80
 800349e:	f000 ff25 	bl	80042ec <xTaskCreate>
        128,                         /* Stack depth in words */
        NULL,                        /* No parameters */
        tskIDLE_PRIORITY + 3,        /* High priority */
        NULL                         /* No task handle required */
    );
}
 80034a2:	b003      	add	sp, #12
 80034a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80034a8:	20000264 	.word	0x20000264
 80034ac:	20000180 	.word	0x20000180
 80034b0:	08005540 	.word	0x08005540
 80034b4:	08003439 	.word	0x08003439

080034b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
 * @brief  HAL callback for CAN RX FIFO 0 message pending.
 *         Reads Rx message and enqueues to xCanRxQueue.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80034b8:	b510      	push	{r4, lr}
    CanRxMessage_t msg;
    BaseType_t xWoken = pdFALSE;
 80034ba:	2400      	movs	r4, #0
{
 80034bc:	b08a      	sub	sp, #40	@ 0x28

    /* Retrieve CAN message from FIFO0 */
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &msg.header, msg.data);
 80034be:	4621      	mov	r1, r4
 80034c0:	ab08      	add	r3, sp, #32
 80034c2:	aa01      	add	r2, sp, #4
    BaseType_t xWoken = pdFALSE;
 80034c4:	9400      	str	r4, [sp, #0]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &msg.header, msg.data);
 80034c6:	f7fe f84d 	bl	8001564 <HAL_CAN_GetRxMessage>

    /* Enqueue received message to CAN Rx queue */
    xQueueSendFromISR(xCanRxQueue, &msg, &xWoken);
 80034ca:	480a      	ldr	r0, [pc, #40]	@ (80034f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80034cc:	4623      	mov	r3, r4
 80034ce:	466a      	mov	r2, sp
 80034d0:	6800      	ldr	r0, [r0, #0]
 80034d2:	a901      	add	r1, sp, #4
 80034d4:	f000 fc0a 	bl	8003cec <xQueueGenericSendFromISR>
    portYIELD_FROM_ISR(xWoken);
 80034d8:	9b00      	ldr	r3, [sp, #0]
 80034da:	b14b      	cbz	r3, 80034f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 80034dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80034e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	f3bf 8f6f 	isb	sy
}
 80034f0:	b00a      	add	sp, #40	@ 0x28
 80034f2:	bd10      	pop	{r4, pc}
 80034f4:	20000264 	.word	0x20000264

080034f8 <StartCANTransmitTask>:
/**
 * @brief  Task that dequeues CAN messages and transmits them on the bus.
 * @param  pvParameters  Not used
 */
static void StartCANTransmitTask(void *pvParameters)
{
 80034f8:	b500      	push	{lr}
    uint32_t txMailbox;

    for (;;)
    {
        /** Wait indefinitely for next CAN message **/
        if (xQueueReceive(xCanTxQueue, &msg, portMAX_DELAY) == pdTRUE)
 80034fa:	4d0d      	ldr	r5, [pc, #52]	@ (8003530 <StartCANTransmitTask+0x38>)
            txHeader.IDE   = CAN_ID_STD;        /** Standard frame **/
            txHeader.RTR   = CAN_RTR_DATA;      /** Data frame **/
            txHeader.DLC   = msg.DLC;           /** Payload length **/

            /** Attempt to add message to Tx mailbox **/
            HAL_CAN_AddTxMessage(&hcan, &txHeader, msg.Data, &txMailbox);
 80034fc:	4c0d      	ldr	r4, [pc, #52]	@ (8003534 <StartCANTransmitTask+0x3c>)
{
 80034fe:	b08d      	sub	sp, #52	@ 0x34
        if (xQueueReceive(xCanTxQueue, &msg, portMAX_DELAY) == pdTRUE)
 8003500:	f04f 32ff 	mov.w	r2, #4294967295
 8003504:	6828      	ldr	r0, [r5, #0]
 8003506:	a902      	add	r1, sp, #8
 8003508:	f000 fcbc 	bl	8003e84 <xQueueReceive>
 800350c:	2801      	cmp	r0, #1
 800350e:	d1f7      	bne.n	8003500 <StartCANTransmitTask+0x8>
            txHeader.StdId = msg.StdId;         /** Standard ID **/
 8003510:	9b02      	ldr	r3, [sp, #8]
            HAL_CAN_AddTxMessage(&hcan, &txHeader, msg.Data, &txMailbox);
 8003512:	4620      	mov	r0, r4
            txHeader.StdId = msg.StdId;         /** Standard ID **/
 8003514:	9306      	str	r3, [sp, #24]
            txHeader.IDE   = CAN_ID_STD;        /** Standard frame **/
 8003516:	2300      	movs	r3, #0
            txHeader.RTR   = CAN_RTR_DATA;      /** Data frame **/
 8003518:	e9cd 3308 	strd	r3, r3, [sp, #32]
            txHeader.DLC   = msg.DLC;           /** Payload length **/
 800351c:	f89d 300c 	ldrb.w	r3, [sp, #12]
            HAL_CAN_AddTxMessage(&hcan, &txHeader, msg.Data, &txMailbox);
 8003520:	f10d 020d 	add.w	r2, sp, #13
            txHeader.DLC   = msg.DLC;           /** Payload length **/
 8003524:	930a      	str	r3, [sp, #40]	@ 0x28
            HAL_CAN_AddTxMessage(&hcan, &txHeader, msg.Data, &txMailbox);
 8003526:	a906      	add	r1, sp, #24
 8003528:	ab01      	add	r3, sp, #4
 800352a:	f7fd ffd2 	bl	80014d2 <HAL_CAN_AddTxMessage>
 800352e:	e7e7      	b.n	8003500 <StartCANTransmitTask+0x8>
 8003530:	20000268 	.word	0x20000268
 8003534:	20000180 	.word	0x20000180

08003538 <InitCANTransmitTask>:
/**
 * @brief  Initializes the CAN transmit queue and task.
 *         Call before vTaskStartScheduler().
 */
void InitCANTransmitTask(void)
{
 8003538:	b507      	push	{r0, r1, r2, lr}
    /** Create queue for CAN messages (up to 20 messages) **/
    xCanTxQueue = xQueueCreate(20, sizeof(CanMessage_t));
 800353a:	2200      	movs	r2, #0
 800353c:	2110      	movs	r1, #16
 800353e:	2014      	movs	r0, #20
 8003540:	f000 faf8 	bl	8003b34 <xQueueGenericCreate>
 8003544:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <InitCANTransmitTask+0x28>)

    /** Create the CAN transmit task at high priority **/
    xTaskCreate(
 8003546:	2203      	movs	r2, #3
    xCanTxQueue = xQueueCreate(20, sizeof(CanMessage_t));
 8003548:	6018      	str	r0, [r3, #0]
    xTaskCreate(
 800354a:	2300      	movs	r3, #0
 800354c:	4905      	ldr	r1, [pc, #20]	@ (8003564 <InitCANTransmitTask+0x2c>)
 800354e:	e9cd 2300 	strd	r2, r3, [sp]
 8003552:	4805      	ldr	r0, [pc, #20]	@ (8003568 <InitCANTransmitTask+0x30>)
 8003554:	2280      	movs	r2, #128	@ 0x80
 8003556:	f000 fec9 	bl	80042ec <xTaskCreate>
        128,                         /** Stack depth in words **/
        NULL,                        /** No parameters **/
        tskIDLE_PRIORITY + 3,        /** High priority **/
        NULL                         /** No task handle needed **/
    );
}
 800355a:	b003      	add	sp, #12
 800355c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003560:	20000268 	.word	0x20000268
 8003564:	08005546 	.word	0x08005546
 8003568:	080034f9 	.word	0x080034f9

0800356c <StartMotorTask>:
/**
 * @brief  Motor control task entry.
 *         Blocks on xMotorCommandQueue, then executes direction+speed.
 */
static void StartMotorTask(void *pvParameters)
{
 800356c:	b507      	push	{r0, r1, r2, lr}
    MotorCommand_t cmd;

    /** Initialize both motors before entering loop **/
    Motor_Init(&motor_left);
 800356e:	4823      	ldr	r0, [pc, #140]	@ (80035fc <StartMotorTask+0x90>)
 8003570:	f7ff fdf0 	bl	8003154 <Motor_Init>
    Motor_Init(&motor_right);
 8003574:	4822      	ldr	r0, [pc, #136]	@ (8003600 <StartMotorTask+0x94>)
 8003576:	f7ff fded 	bl	8003154 <Motor_Init>

    for (;;)
    {
        /** Wait indefinitely for next command **/
        if (xQueueReceive(xMotorCommandQueue, &cmd, portMAX_DELAY) == pdTRUE)
 800357a:	4e22      	ldr	r6, [pc, #136]	@ (8003604 <StartMotorTask+0x98>)
                    Motor_Forward(&motor_left);
                    Motor_Backward(&motor_right);
                    break;

                case MOTOR_DIR_STOP:
                    Motor_Stop(&motor_left);
 800357c:	4d1f      	ldr	r5, [pc, #124]	@ (80035fc <StartMotorTask+0x90>)
                    Motor_Stop(&motor_right);
 800357e:	4c20      	ldr	r4, [pc, #128]	@ (8003600 <StartMotorTask+0x94>)
        if (xQueueReceive(xMotorCommandQueue, &cmd, portMAX_DELAY) == pdTRUE)
 8003580:	f04f 32ff 	mov.w	r2, #4294967295
 8003584:	6830      	ldr	r0, [r6, #0]
 8003586:	a901      	add	r1, sp, #4
 8003588:	f000 fc7c 	bl	8003e84 <xQueueReceive>
 800358c:	2801      	cmp	r0, #1
 800358e:	d1f7      	bne.n	8003580 <StartMotorTask+0x14>
            switch (cmd.direction)
 8003590:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003594:	2b04      	cmp	r3, #4
 8003596:	d80a      	bhi.n	80035ae <StartMotorTask+0x42>
 8003598:	e8df f003 	tbb	[pc, r3]
 800359c:	211a0329 	.word	0x211a0329
 80035a0:	25          	.byte	0x25
 80035a1:	00          	.byte	0x00
                    Motor_Forward(&motor_left);
 80035a2:	4628      	mov	r0, r5
 80035a4:	f7ff fd8c 	bl	80030c0 <Motor_Forward>
                    Motor_Forward(&motor_right);
 80035a8:	4620      	mov	r0, r4
 80035aa:	f7ff fd89 	bl	80030c0 <Motor_Forward>
                default:

            }

            /** Apply the same speed to both motors **/
            Motor_SetSpeed(&motor_left,  cmd.speed);
 80035ae:	4628      	mov	r0, r5
 80035b0:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80035b4:	f7ff fd66 	bl	8003084 <Motor_SetSpeed>
            Motor_SetSpeed(&motor_right, cmd.speed);
 80035b8:	4620      	mov	r0, r4
 80035ba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80035be:	f7ff fd61 	bl	8003084 <Motor_SetSpeed>


            SendSensorFrame(SPEED_ID,(uint16_t)cmd.speed);
 80035c2:	f240 4001 	movw	r0, #1025	@ 0x401
 80035c6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80035ca:	f000 f92b 	bl	8003824 <SendSensorFrame>
 80035ce:	e7d7      	b.n	8003580 <StartMotorTask+0x14>
                    Motor_Backward(&motor_left);
 80035d0:	4628      	mov	r0, r5
 80035d2:	f7ff fd8b 	bl	80030ec <Motor_Backward>
                    Motor_Backward(&motor_right);
 80035d6:	4620      	mov	r0, r4
 80035d8:	f7ff fd88 	bl	80030ec <Motor_Backward>
                    break;
 80035dc:	e7e7      	b.n	80035ae <StartMotorTask+0x42>
                    Motor_Backward(&motor_left);
 80035de:	4628      	mov	r0, r5
 80035e0:	f7ff fd84 	bl	80030ec <Motor_Backward>
 80035e4:	e7e0      	b.n	80035a8 <StartMotorTask+0x3c>
                    Motor_Forward(&motor_left);
 80035e6:	4628      	mov	r0, r5
 80035e8:	f7ff fd6a 	bl	80030c0 <Motor_Forward>
 80035ec:	e7f3      	b.n	80035d6 <StartMotorTask+0x6a>
                    Motor_Stop(&motor_left);
 80035ee:	4628      	mov	r0, r5
 80035f0:	f7ff fd92 	bl	8003118 <Motor_Stop>
                    Motor_Stop(&motor_right);
 80035f4:	4620      	mov	r0, r4
 80035f6:	f7ff fd8f 	bl	8003118 <Motor_Stop>
                    break;
 80035fa:	e7d8      	b.n	80035ae <StartMotorTask+0x42>
 80035fc:	20000024 	.word	0x20000024
 8003600:	2000000c 	.word	0x2000000c
 8003604:	2000026c 	.word	0x2000026c

08003608 <InitMotorTask>:
/**
 * @brief  Creates motor command queue and starts the motor task.
 *         Call this before vTaskStartScheduler().
 */
void InitMotorTask(void)
{
 8003608:	b507      	push	{r0, r1, r2, lr}
    /** Create a queue to hold up to 10 MotorCommand_t items **/
    xMotorCommandQueue = xQueueCreate(10, sizeof(MotorCommand_t));
 800360a:	2200      	movs	r2, #0
 800360c:	2102      	movs	r1, #2
 800360e:	200a      	movs	r0, #10
 8003610:	f000 fa90 	bl	8003b34 <xQueueGenericCreate>
 8003614:	4b07      	ldr	r3, [pc, #28]	@ (8003634 <InitMotorTask+0x2c>)

    /** Create the motor control task at high priority **/
    xTaskCreate(
 8003616:	2204      	movs	r2, #4
    xMotorCommandQueue = xQueueCreate(10, sizeof(MotorCommand_t));
 8003618:	6018      	str	r0, [r3, #0]
    xTaskCreate(
 800361a:	2300      	movs	r3, #0
 800361c:	4906      	ldr	r1, [pc, #24]	@ (8003638 <InitMotorTask+0x30>)
 800361e:	e9cd 2300 	strd	r2, r3, [sp]
 8003622:	4806      	ldr	r0, [pc, #24]	@ (800363c <InitMotorTask+0x34>)
 8003624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003628:	f000 fe60 	bl	80042ec <xTaskCreate>
        256,                       /** Stack size in words **/
        NULL,                      /** No pvParameters **/
        tskIDLE_PRIORITY + 4,      /** High priority **/
        NULL                       /** No task handle needed **/
    );
}
 800362c:	b003      	add	sp, #12
 800362e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003632:	bf00      	nop
 8003634:	2000026c 	.word	0x2000026c
 8003638:	0800554c 	.word	0x0800554c
 800363c:	0800356d 	.word	0x0800356d

08003640 <FreeRTOS_Init>:

#include "TaskHandle.h"

/* Initialize FreeRTOS queues and tasks */
void FreeRTOS_Init(void)
{
 8003640:	b508      	push	{r3, lr}
	  InitMotorTask();
 8003642:	f7ff ffe1 	bl	8003608 <InitMotorTask>
	  InitBluetoothTask();
 8003646:	f7ff fec9 	bl	80033dc <InitBluetoothTask>
	  InitUltrasonicTask();
 800364a:	f000 f929 	bl	80038a0 <InitUltrasonicTask>
	  InitTemperatureSensorTask();
 800364e:	f000 f825 	bl	800369c <InitTemperatureSensorTask>
	  InitCANTransmitTask();
 8003652:	f7ff ff71 	bl	8003538 <InitCANTransmitTask>
	  InitCANReceiveTask();
 8003656:	f7ff ff0f 	bl	8003478 <InitCANReceiveTask>
	  InitUARTReceiveTask();
 800365a:	f000 f853 	bl	8003704 <InitUARTReceiveTask>
	  InitUARTTransmitTask();
}
 800365e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  InitUARTTransmitTask();
 8003662:	f000 b8af 	b.w	80037c4 <InitUARTTransmitTask>

08003666 <Start_Scheduler>:

void Start_Scheduler(void)
{
    /* Start FreeRTOS scheduler */
    vTaskStartScheduler();
 8003666:	f000 bf29 	b.w	80044bc <vTaskStartScheduler>
	...

0800366c <StartTemperatureSensorTask>:
/**
 * @brief  Task to read temperature from LM35 and enqueue CAN message.
 * @param  pvParameters  Not used
 */
static void StartTemperatureSensorTask(void *pvParameters)
{
 800366c:	b510      	push	{r4, lr}
    CanMessage_t msg;
    uint16_t tempInt;

    /** Initialize the temperature sensor driver (starts ADC) **/
    LM35_Init(&hadc1);
 800366e:	4809      	ldr	r0, [pc, #36]	@ (8003694 <StartTemperatureSensorTask+0x28>)
 8003670:	f7ff fcc8 	bl	8003004 <LM35_Init>
    {
        /** Wait for next measurement cycle **/
        vTaskDelay(pdMS_TO_TICKS(TEMPERATURE_SENSOR_PERIOD_MS));

        /** Read latest temperature value **/
        Temperature = LM35_GetTemperature();
 8003674:	4c08      	ldr	r4, [pc, #32]	@ (8003698 <StartTemperatureSensorTask+0x2c>)
        vTaskDelay(pdMS_TO_TICKS(TEMPERATURE_SENSOR_PERIOD_MS));
 8003676:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800367a:	f001 f8c7 	bl	800480c <vTaskDelay>
        Temperature = LM35_GetTemperature();
 800367e:	f7ff fceb 	bl	8003058 <LM35_GetTemperature>
 8003682:	6020      	str	r0, [r4, #0]
        tempInt     = (uint16_t)Temperature;
 8003684:	f7fc ffc2 	bl	800060c <__aeabi_f2uiz>
        for (int i = 2; i < 8; i++) { msg.Data[i] = 0U; }

        /** Enqueue for CAN transmission **/
       // xQueueSend(xCanTxQueue, &msg, portMAX_DELAY);

        SendSensorFrame(SENSOR_TEMP_ID,tempInt);
 8003688:	b281      	uxth	r1, r0
 800368a:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800368e:	f000 f8c9 	bl	8003824 <SendSensorFrame>
    for (;;)
 8003692:	e7f0      	b.n	8003676 <StartTemperatureSensorTask+0xa>
 8003694:	200001a8 	.word	0x200001a8
 8003698:	20000270 	.word	0x20000270

0800369c <InitTemperatureSensorTask>:
/**
 * @brief  Create the temperature sensor task.
 *         Call this before vTaskStartScheduler().
 */
void InitTemperatureSensorTask(void)
{
 800369c:	b507      	push	{r0, r1, r2, lr}
    xTaskCreate(
 800369e:	2300      	movs	r3, #0
 80036a0:	2202      	movs	r2, #2
 80036a2:	4905      	ldr	r1, [pc, #20]	@ (80036b8 <InitTemperatureSensorTask+0x1c>)
 80036a4:	e9cd 2300 	strd	r2, r3, [sp]
 80036a8:	4804      	ldr	r0, [pc, #16]	@ (80036bc <InitTemperatureSensorTask+0x20>)
 80036aa:	2280      	movs	r2, #128	@ 0x80
 80036ac:	f000 fe1e 	bl	80042ec <xTaskCreate>
        128,                                 /** Stack depth in words **/
        NULL,                                /** No parameters **/
        tskIDLE_PRIORITY + 2,                /** Medium priority **/
        NULL                                 /** No handle required **/
    );
}
 80036b0:	b003      	add	sp, #12
 80036b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80036b6:	bf00      	nop
 80036b8:	08005556 	.word	0x08005556
 80036bc:	0800366d 	.word	0x0800366d

080036c0 <StartUARTReceiveTask>:
 * @param  pvParameters  Not used
 */
static void StartUARTReceiveTask(void *pvParameters)
{
	MotorCommand_t cmd;
	uint8_t Msg[4] ={0};
 80036c0:	2300      	movs	r3, #0
{
 80036c2:	b537      	push	{r0, r1, r2, r4, r5, lr}


    for (;;)
    {
        /** Wait for a UART sensor message (4 bytes) **/
        if (xQueueReceive(xUartQueue, Msg, portMAX_DELAY) == pdTRUE)
 80036c4:	4d0d      	ldr	r5, [pc, #52]	@ (80036fc <StartUARTReceiveTask+0x3c>)
            case MOTOR_CMD_ID:
            	/** Extract direction and speed **/
            	cmd.direction = Msg[2];
                cmd.speed     = Msg[3];
                /* Forward to motor control queue */
                xQueueSend(xMotorCommandQueue, &cmd, 0);
 80036c6:	4c0e      	ldr	r4, [pc, #56]	@ (8003700 <StartUARTReceiveTask+0x40>)
	uint8_t Msg[4] ={0};
 80036c8:	9301      	str	r3, [sp, #4]
        if (xQueueReceive(xUartQueue, Msg, portMAX_DELAY) == pdTRUE)
 80036ca:	f04f 32ff 	mov.w	r2, #4294967295
 80036ce:	6828      	ldr	r0, [r5, #0]
 80036d0:	a901      	add	r1, sp, #4
 80036d2:	f000 fbd7 	bl	8003e84 <xQueueReceive>
 80036d6:	2801      	cmp	r0, #1
 80036d8:	d1f7      	bne.n	80036ca <StartUARTReceiveTask+0xa>
            switch (sensorId)
 80036da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80036de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e2:	d1f2      	bne.n	80036ca <StartUARTReceiveTask+0xa>
            	cmd.direction = Msg[2];
 80036e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
                xQueueSend(xMotorCommandQueue, &cmd, 0);
 80036e8:	4669      	mov	r1, sp
            	cmd.direction = Msg[2];
 80036ea:	f8ad 3000 	strh.w	r3, [sp]
                xQueueSend(xMotorCommandQueue, &cmd, 0);
 80036ee:	2300      	movs	r3, #0
 80036f0:	6820      	ldr	r0, [r4, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f000 fa48 	bl	8003b88 <xQueueGenericSend>
                break;
 80036f8:	e7e7      	b.n	80036ca <StartUARTReceiveTask+0xa>
 80036fa:	bf00      	nop
 80036fc:	20000278 	.word	0x20000278
 8003700:	2000026c 	.word	0x2000026c

08003704 <InitUARTReceiveTask>:
/**
 * @brief  Initializes the UART receive queue and task.
 *         Must be called before vTaskStartScheduler().
 */
void InitUARTReceiveTask(void)
{
 8003704:	b507      	push	{r0, r1, r2, lr}
    /** Create queue to hold up to 20 UART Rx messages **/
	xUartQueue = xQueueCreate(20, 4);
 8003706:	2200      	movs	r2, #0
 8003708:	2104      	movs	r1, #4
 800370a:	2014      	movs	r0, #20
 800370c:	f000 fa12 	bl	8003b34 <xQueueGenericCreate>
 8003710:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <InitUARTReceiveTask+0x34>)

    /** Activate UART RX interrupt notifications **/
    HAL_UART_Receive_IT(&huart2, RXMsg, 4);
 8003712:	2204      	movs	r2, #4
	xUartQueue = xQueueCreate(20, 4);
 8003714:	6018      	str	r0, [r3, #0]
    HAL_UART_Receive_IT(&huart2, RXMsg, 4);
 8003716:	4909      	ldr	r1, [pc, #36]	@ (800373c <InitUARTReceiveTask+0x38>)
 8003718:	4809      	ldr	r0, [pc, #36]	@ (8003740 <InitUARTReceiveTask+0x3c>)
 800371a:	f7ff fc36 	bl	8002f8a <HAL_UART_Receive_IT>

    /** Create the CAN receive task at high priority **/
    xTaskCreate(
 800371e:	2300      	movs	r3, #0
 8003720:	2203      	movs	r2, #3
 8003722:	4908      	ldr	r1, [pc, #32]	@ (8003744 <InitUARTReceiveTask+0x40>)
 8003724:	e9cd 2300 	strd	r2, r3, [sp]
 8003728:	4807      	ldr	r0, [pc, #28]	@ (8003748 <InitUARTReceiveTask+0x44>)
 800372a:	2280      	movs	r2, #128	@ 0x80
 800372c:	f000 fdde 	bl	80042ec <xTaskCreate>
        128,                        /** Stack size in words **/
        NULL,                       /** No parameters **/
        tskIDLE_PRIORITY + 3,       /** High priority **/
        NULL                        /** No task handle required **/
    );
}
 8003730:	b003      	add	sp, #12
 8003732:	f85d fb04 	ldr.w	pc, [sp], #4
 8003736:	bf00      	nop
 8003738:	20000278 	.word	0x20000278
 800373c:	20000274 	.word	0x20000274
 8003740:	20000060 	.word	0x20000060
 8003744:	08005561 	.word	0x08005561
 8003748:	080036c1 	.word	0x080036c1

0800374c <Motor_IRQHandler>:

void Motor_IRQHandler(void)
{
    BaseType_t xWoken = pdFALSE;
 800374c:	2300      	movs	r3, #0
{
 800374e:	b507      	push	{r0, r1, r2, lr}

    /** Enqueue for deferred processing in task context **/
    xQueueSendFromISR(xUartQueue, RXMsg, &xWoken);
 8003750:	480d      	ldr	r0, [pc, #52]	@ (8003788 <Motor_IRQHandler+0x3c>)
 8003752:	490e      	ldr	r1, [pc, #56]	@ (800378c <Motor_IRQHandler+0x40>)
 8003754:	aa01      	add	r2, sp, #4
 8003756:	6800      	ldr	r0, [r0, #0]
    BaseType_t xWoken = pdFALSE;
 8003758:	9301      	str	r3, [sp, #4]
    xQueueSendFromISR(xUartQueue, RXMsg, &xWoken);
 800375a:	f000 fac7 	bl	8003cec <xQueueGenericSendFromISR>

    /* Restart UART receive interrupt */
    HAL_UART_Receive_IT(&huart2, RXMsg, 4);
 800375e:	2204      	movs	r2, #4
 8003760:	490a      	ldr	r1, [pc, #40]	@ (800378c <Motor_IRQHandler+0x40>)
 8003762:	480b      	ldr	r0, [pc, #44]	@ (8003790 <Motor_IRQHandler+0x44>)
 8003764:	f7ff fc11 	bl	8002f8a <HAL_UART_Receive_IT>

    portYIELD_FROM_ISR(xWoken);
 8003768:	9b01      	ldr	r3, [sp, #4]
 800376a:	b14b      	cbz	r3, 8003780 <Motor_IRQHandler+0x34>
 800376c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003774:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	f3bf 8f6f 	isb	sy
}
 8003780:	b003      	add	sp, #12
 8003782:	f85d fb04 	ldr.w	pc, [sp], #4
 8003786:	bf00      	nop
 8003788:	20000278 	.word	0x20000278
 800378c:	20000274 	.word	0x20000274
 8003790:	20000060 	.word	0x20000060

08003794 <StartUARTTransmitTask>:
 * @brief  TX Task: waits for a Frame_t from the queue and sends it via UART.
 * @param  pvParameters  Not used
 */
static void StartUARTTransmitTask(void *pvParameters)
{
	uint8_t frame[4] = {0};
 8003794:	2300      	movs	r3, #0
{
 8003796:	b507      	push	{r0, r1, r2, lr}

    for (;;)
    {
        /** Wait indefinitely for next UARTTXFrame **/
        if (xQueueReceive(xUARTTxQueue, frame, portMAX_DELAY) == pdTRUE)
 8003798:	4d08      	ldr	r5, [pc, #32]	@ (80037bc <StartUARTTransmitTask+0x28>)
        {
            /** Transmit the 4-byte UARTTXFrame over UART **/
            HAL_UART_Transmit_IT(&huart2, frame, 4);
 800379a:	4c09      	ldr	r4, [pc, #36]	@ (80037c0 <StartUARTTransmitTask+0x2c>)
	uint8_t frame[4] = {0};
 800379c:	9301      	str	r3, [sp, #4]
        if (xQueueReceive(xUARTTxQueue, frame, portMAX_DELAY) == pdTRUE)
 800379e:	f04f 32ff 	mov.w	r2, #4294967295
 80037a2:	6828      	ldr	r0, [r5, #0]
 80037a4:	a901      	add	r1, sp, #4
 80037a6:	f000 fb6d 	bl	8003e84 <xQueueReceive>
 80037aa:	2801      	cmp	r0, #1
 80037ac:	d1f7      	bne.n	800379e <StartUARTTransmitTask+0xa>
            HAL_UART_Transmit_IT(&huart2, frame, 4);
 80037ae:	2204      	movs	r2, #4
 80037b0:	4620      	mov	r0, r4
 80037b2:	eb0d 0102 	add.w	r1, sp, r2
 80037b6:	f7ff fa06 	bl	8002bc6 <HAL_UART_Transmit_IT>
 80037ba:	e7f0      	b.n	800379e <StartUARTTransmitTask+0xa>
 80037bc:	2000027c 	.word	0x2000027c
 80037c0:	20000060 	.word	0x20000060

080037c4 <InitUARTTransmitTask>:
/**
 * @brief  Initialize TX interface: create queue and start vTxTask.
 *         Call this after UART init and before scheduler start.
 */
void InitUARTTransmitTask(void)
{
 80037c4:	b507      	push	{r0, r1, r2, lr}
    /** Create a queue to hold up to 10 frames **/
    xUARTTxQueue = xQueueCreate(10, 4);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2104      	movs	r1, #4
 80037ca:	200a      	movs	r0, #10
 80037cc:	f000 f9b2 	bl	8003b34 <xQueueGenericCreate>
 80037d0:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <InitUARTTransmitTask+0x54>)
 80037d2:	6018      	str	r0, [r3, #0]
    configASSERT(xUARTTxQueue != NULL);
 80037d4:	b940      	cbnz	r0, 80037e8 <InitUARTTransmitTask+0x24>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	e7fe      	b.n	80037e6 <InitUARTTransmitTask+0x22>

    /** Create the TX task **/
    BaseType_t res = xTaskCreate(
 80037e8:	2201      	movs	r2, #1
 80037ea:	2300      	movs	r3, #0
 80037ec:	490b      	ldr	r1, [pc, #44]	@ (800381c <InitUARTTransmitTask+0x58>)
 80037ee:	e9cd 2300 	strd	r2, r3, [sp]
 80037f2:	480b      	ldr	r0, [pc, #44]	@ (8003820 <InitUARTTransmitTask+0x5c>)
 80037f4:	2280      	movs	r2, #128	@ 0x80
 80037f6:	f000 fd79 	bl	80042ec <xTaskCreate>
        128,                   /* Stack size in words */
        NULL,                  /* pvParameters not used */
        tskIDLE_PRIORITY + 1,  /* Priority */
        NULL                   /* Task handle not needed */
    );
    configASSERT(res == pdPASS);
 80037fa:	2801      	cmp	r0, #1
 80037fc:	d008      	beq.n	8003810 <InitUARTTransmitTask+0x4c>
 80037fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	e7fe      	b.n	800380e <InitUARTTransmitTask+0x4a>
}
 8003810:	b003      	add	sp, #12
 8003812:	f85d fb04 	ldr.w	pc, [sp], #4
 8003816:	bf00      	nop
 8003818:	2000027c 	.word	0x2000027c
 800381c:	0800556d 	.word	0x0800556d
 8003820:	08003795 	.word	0x08003795

08003824 <SendSensorFrame>:

    UARTTXFrame[0] = (uint8_t)(id & 0xFF);
    UARTTXFrame[1] = (uint8_t)((id >> 8) & 0xFF);
    UARTTXFrame[2] = (uint8_t)(value & 0xFF);
    UARTTXFrame[3] = (uint8_t)((value >> 8) & 0xFF);
    xQueueSend(xUARTTxQueue, UARTTXFrame, 0);
 8003824:	2300      	movs	r3, #0
{
 8003826:	b507      	push	{r0, r1, r2, lr}
    UARTTXFrame[0] = (uint8_t)(id & 0xFF);
 8003828:	f8ad 0004 	strh.w	r0, [sp, #4]
    xQueueSend(xUARTTxQueue, UARTTXFrame, 0);
 800382c:	4805      	ldr	r0, [pc, #20]	@ (8003844 <SendSensorFrame+0x20>)
    UARTTXFrame[2] = (uint8_t)(value & 0xFF);
 800382e:	f8ad 1006 	strh.w	r1, [sp, #6]
    xQueueSend(xUARTTxQueue, UARTTXFrame, 0);
 8003832:	461a      	mov	r2, r3
 8003834:	a901      	add	r1, sp, #4
 8003836:	6800      	ldr	r0, [r0, #0]
 8003838:	f000 f9a6 	bl	8003b88 <xQueueGenericSend>
}
 800383c:	b003      	add	sp, #12
 800383e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003842:	bf00      	nop
 8003844:	2000027c 	.word	0x2000027c

08003848 <StartUltrasonicTask>:
 * @brief  Ultrasonic measurement task.
 *         Triggers the sensor, waits for capture, reads distance,
 *         then enqueues a CAN message for transmission.
 */
static void StartUltrasonicTask(void *pvParameters)
{
 8003848:	b538      	push	{r3, r4, r5, lr}
    /** Prepare CAN header once **/
    msg.StdId = SENSOR_DIST_ID;
    msg.DLC   = 2;

    /** Initialize ultrasonic driver hardware **/
    Ultrasonic_Init(&htim3, TRIG_PORT, TRIG_PIN, TIM_CHANNEL_1);
 800384a:	2220      	movs	r2, #32
 800384c:	2300      	movs	r3, #0
 800384e:	4910      	ldr	r1, [pc, #64]	@ (8003890 <StartUltrasonicTask+0x48>)
 8003850:	4810      	ldr	r0, [pc, #64]	@ (8003894 <StartUltrasonicTask+0x4c>)
 8003852:	f7ff fc95 	bl	8003180 <Ultrasonic_Init>

        /** Send 10µs pulse to trigger measurement **/
        Ultrasonic_Trigger();

        /** Wait for capture complete or timeout **/
        if (xSemaphoreTake(xUltrasonicSem, pdMS_TO_TICKS(ULTRASONIC_TIMEOUT_MS)) == pdTRUE)
 8003856:	4c10      	ldr	r4, [pc, #64]	@ (8003898 <StartUltrasonicTask+0x50>)
        {
            Distance = Ultrasonic_GetDistance();
 8003858:	4d10      	ldr	r5, [pc, #64]	@ (800389c <StartUltrasonicTask+0x54>)
        vTaskDelay(pdMS_TO_TICKS(ULTRASONIC_PERIOD_MS));
 800385a:	2064      	movs	r0, #100	@ 0x64
 800385c:	f000 ffd6 	bl	800480c <vTaskDelay>
        Ultrasonic_Trigger();
 8003860:	f7ff fca4 	bl	80031ac <Ultrasonic_Trigger>
        if (xSemaphoreTake(xUltrasonicSem, pdMS_TO_TICKS(ULTRASONIC_TIMEOUT_MS)) == pdTRUE)
 8003864:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003868:	6820      	ldr	r0, [r4, #0]
 800386a:	f000 fba9 	bl	8003fc0 <xQueueSemaphoreTake>
 800386e:	2801      	cmp	r0, #1
 8003870:	d10a      	bne.n	8003888 <StartUltrasonicTask+0x40>
            Distance = Ultrasonic_GetDistance();
 8003872:	f7ff fd45 	bl	8003300 <Ultrasonic_GetDistance>
 8003876:	6028      	str	r0, [r5, #0]
            distInt = (uint16_t)Distance;
 8003878:	f7fc fec8 	bl	800060c <__aeabi_f2uiz>
 800387c:	b281      	uxth	r1, r0
        }

        /** Enqueue CAN message for transmission **/
        //xQueueSend(xCanTxQueue, &msg, portMAX_DELAY);

        SendSensorFrame(SENSOR_DIST_ID,distInt);
 800387e:	f240 3001 	movw	r0, #769	@ 0x301
 8003882:	f7ff ffcf 	bl	8003824 <SendSensorFrame>
        vTaskDelay(pdMS_TO_TICKS(ULTRASONIC_PERIOD_MS));
 8003886:	e7e8      	b.n	800385a <StartUltrasonicTask+0x12>
            distInt = 0xFFFFU;
 8003888:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800388c:	e7f7      	b.n	800387e <StartUltrasonicTask+0x36>
 800388e:	bf00      	nop
 8003890:	40010c00 	.word	0x40010c00
 8003894:	200000f0 	.word	0x200000f0
 8003898:	20000284 	.word	0x20000284
 800389c:	20000280 	.word	0x20000280

080038a0 <InitUltrasonicTask>:
/**
 * @brief  Creates the ultrasonic task and semaphore.
 *         Call this before vTaskStartScheduler().
 */
void InitUltrasonicTask(void)
{
 80038a0:	b507      	push	{r0, r1, r2, lr}
    /** Create binary semaphore for echo capture **/
    xUltrasonicSem = xSemaphoreCreateBinary();
 80038a2:	2203      	movs	r2, #3
 80038a4:	2100      	movs	r1, #0
 80038a6:	2001      	movs	r0, #1
 80038a8:	f000 f944 	bl	8003b34 <xQueueGenericCreate>
 80038ac:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <InitUltrasonicTask+0x34>)

    /** Start input capture interrupt (rising edge) **/
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80038ae:	2100      	movs	r1, #0
    xUltrasonicSem = xSemaphoreCreateBinary();
 80038b0:	6018      	str	r0, [r3, #0]
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80038b2:	4809      	ldr	r0, [pc, #36]	@ (80038d8 <InitUltrasonicTask+0x38>)
 80038b4:	f7ff f84e 	bl	8002954 <HAL_TIM_IC_Start_IT>

    /** Create the ultrasonic task at medium priority **/
    xTaskCreate(
 80038b8:	2300      	movs	r3, #0
 80038ba:	2202      	movs	r2, #2
 80038bc:	4907      	ldr	r1, [pc, #28]	@ (80038dc <InitUltrasonicTask+0x3c>)
 80038be:	e9cd 2300 	strd	r2, r3, [sp]
 80038c2:	4807      	ldr	r0, [pc, #28]	@ (80038e0 <InitUltrasonicTask+0x40>)
 80038c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038c8:	f000 fd10 	bl	80042ec <xTaskCreate>
        256,                       /** Stack depth (words) **/
        NULL,                      /** No parameters **/
        tskIDLE_PRIORITY + 2,      /** Medium priority **/
        NULL                       /** No task handle needed **/
    );
}
 80038cc:	b003      	add	sp, #12
 80038ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80038d2:	bf00      	nop
 80038d4:	20000284 	.word	0x20000284
 80038d8:	200000f0 	.word	0x200000f0
 80038dc:	08005574 	.word	0x08005574
 80038e0:	08003849 	.word	0x08003849

080038e4 <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief  HAL TIM Input Capture callback.
 *         Calls driver to process edges, then gives semaphore to task.
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b507      	push	{r0, r1, r2, lr}
    /** Process rising/falling edge and compute distance **/
    Ultrasonic_CaptureCallback(htim);
 80038e6:	f7ff fc7f 	bl	80031e8 <Ultrasonic_CaptureCallback>

    /** Notify task that measurement is ready **/
    BaseType_t xWoken = pdFALSE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	9301      	str	r3, [sp, #4]
    if (xUltrasonicSem != NULL)
 80038ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <HAL_TIM_IC_CaptureCallback+0x34>)
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	b170      	cbz	r0, 8003912 <HAL_TIM_IC_CaptureCallback+0x2e>
    {
        xSemaphoreGiveFromISR(xUltrasonicSem, &xWoken);
 80038f4:	a901      	add	r1, sp, #4
 80038f6:	f000 fa65 	bl	8003dc4 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xWoken);
 80038fa:	9b01      	ldr	r3, [sp, #4]
 80038fc:	b14b      	cbz	r3, 8003912 <HAL_TIM_IC_CaptureCallback+0x2e>
 80038fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003906:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	f3bf 8f6f 	isb	sy
    }
}
 8003912:	b003      	add	sp, #12
 8003914:	f85d fb04 	ldr.w	pc, [sp], #4
 8003918:	20000284 	.word	0x20000284

0800391c <vListInitialise>:

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003920:	f100 0308 	add.w	r3, r0, #8

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003924:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003928:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800392a:	6103      	str	r3, [r0, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003930:	4770      	bx	lr

08003932 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003932:	2300      	movs	r3, #0
 8003934:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003936:	4770      	bx	lr

08003938 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003938:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800393a:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800393c:	1c63      	adds	r3, r4, #1
 800393e:	d10a      	bne.n	8003956 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003940:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003946:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003948:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 800394a:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 800394c:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 800394e:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 8003950:	3301      	adds	r3, #1
 8003952:	6003      	str	r3, [r0, #0]
}
 8003954:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003956:	f100 0208 	add.w	r2, r0, #8
 800395a:	4613      	mov	r3, r2
 800395c:	6852      	ldr	r2, [r2, #4]
 800395e:	6815      	ldr	r5, [r2, #0]
 8003960:	42a5      	cmp	r5, r4
 8003962:	d9fa      	bls.n	800395a <vListInsert+0x22>
 8003964:	e7ed      	b.n	8003942 <vListInsert+0xa>

08003966 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003966:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003968:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800396c:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800396e:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003970:	6859      	ldr	r1, [r3, #4]
 8003972:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003974:	bf08      	it	eq
 8003976:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003978:	2200      	movs	r2, #0
 800397a:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	3a01      	subs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003982:	6818      	ldr	r0, [r3, #0]
}
 8003984:	4770      	bx	lr

08003986 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003986:	b510      	push	{r4, lr}
 8003988:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800398a:	f001 fb83 	bl	8005094 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800398e:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8003990:	f001 fba0 	bl	80050d4 <vPortExitCritical>

    return xReturn;
}
 8003994:	fab4 f084 	clz	r0, r4
 8003998:	0940      	lsrs	r0, r0, #5
 800399a:	bd10      	pop	{r4, pc}

0800399c <prvCopyDataToQueue>:
{
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	4616      	mov	r6, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039a0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 80039a2:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039a4:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039a6:	b942      	cbnz	r2, 80039ba <prvCopyDataToQueue+0x1e>
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039a8:	6806      	ldr	r6, [r0, #0]
 80039aa:	b99e      	cbnz	r6, 80039d4 <prvCopyDataToQueue+0x38>
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039ac:	6880      	ldr	r0, [r0, #8]
 80039ae:	f001 f8e7 	bl	8004b80 <xTaskPriorityDisinherit>
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039b2:	60a6      	str	r6, [r4, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039b4:	3501      	adds	r5, #1
 80039b6:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
 80039ba:	b96e      	cbnz	r6, 80039d8 <prvCopyDataToQueue+0x3c>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039bc:	6840      	ldr	r0, [r0, #4]
 80039be:	f001 fd8b 	bl	80054d8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039c2:	6863      	ldr	r3, [r4, #4]
 80039c4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80039c6:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039c8:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039ca:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039cc:	4293      	cmp	r3, r2
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80039ce:	bf24      	itt	cs
 80039d0:	6823      	ldrcs	r3, [r4, #0]
 80039d2:	6063      	strcs	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
 80039d4:	2000      	movs	r0, #0
 80039d6:	e7ed      	b.n	80039b4 <prvCopyDataToQueue+0x18>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80039d8:	68c0      	ldr	r0, [r0, #12]
 80039da:	f001 fd7d 	bl	80054d8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039de:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80039e0:	68e3      	ldr	r3, [r4, #12]
 80039e2:	4251      	negs	r1, r2
 80039e4:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039e6:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039e8:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039ea:	4293      	cmp	r3, r2
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039ec:	bf3e      	ittt	cc
 80039ee:	68a3      	ldrcc	r3, [r4, #8]
 80039f0:	185b      	addcc	r3, r3, r1
 80039f2:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 80039f4:	2e02      	cmp	r6, #2
 80039f6:	d1ed      	bne.n	80039d4 <prvCopyDataToQueue+0x38>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039f8:	b10d      	cbz	r5, 80039fe <prvCopyDataToQueue+0x62>
                --uxMessagesWaiting;
 80039fa:	3d01      	subs	r5, #1
 80039fc:	e7ea      	b.n	80039d4 <prvCopyDataToQueue+0x38>
    BaseType_t xReturn = pdFALSE;
 80039fe:	4628      	mov	r0, r5
 8003a00:	e7d8      	b.n	80039b4 <prvCopyDataToQueue+0x18>

08003a02 <prvCopyDataFromQueue>:
{
 8003a02:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8003a06:	4608      	mov	r0, r1
 8003a08:	b410      	push	{r4}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a0a:	b162      	cbz	r2, 8003a26 <prvCopyDataFromQueue+0x24>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a0c:	68dc      	ldr	r4, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a0e:	6899      	ldr	r1, [r3, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a10:	4414      	add	r4, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a12:	428c      	cmp	r4, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a14:	bf28      	it	cs
 8003a16:	6819      	ldrcs	r1, [r3, #0]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a18:	60dc      	str	r4, [r3, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a1a:	bf28      	it	cs
 8003a1c:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a1e:	68d9      	ldr	r1, [r3, #12]
}
 8003a20:	bc10      	pop	{r4}
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a22:	f001 bd59 	b.w	80054d8 <memcpy>
}
 8003a26:	bc10      	pop	{r4}
 8003a28:	4770      	bx	lr

08003a2a <prvUnlockQueue>:
{
 8003a2a:	b570      	push	{r4, r5, r6, lr}
 8003a2c:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8003a2e:	f001 fb31 	bl	8005094 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8003a32:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a36:	f104 0624 	add.w	r6, r4, #36	@ 0x24
        int8_t cTxLock = pxQueue->cTxLock;
 8003a3a:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a3c:	2d00      	cmp	r5, #0
 8003a3e:	dc14      	bgt.n	8003a6a <prvUnlockQueue+0x40>
        pxQueue->cTxLock = queueUNLOCKED;
 8003a40:	23ff      	movs	r3, #255	@ 0xff
 8003a42:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8003a46:	f001 fb45 	bl	80050d4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8003a4a:	f001 fb23 	bl	8005094 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8003a4e:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a52:	f104 0610 	add.w	r6, r4, #16
        int8_t cRxLock = pxQueue->cRxLock;
 8003a56:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a58:	2d00      	cmp	r5, #0
 8003a5a:	dc12      	bgt.n	8003a82 <prvUnlockQueue+0x58>
        pxQueue->cRxLock = queueUNLOCKED;
 8003a5c:	23ff      	movs	r3, #255	@ 0xff
 8003a5e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8003a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 8003a66:	f001 bb35 	b.w	80050d4 <vPortExitCritical>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0e7      	beq.n	8003a40 <prvUnlockQueue+0x16>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a70:	4630      	mov	r0, r6
 8003a72:	f000 ff71 	bl	8004958 <xTaskRemoveFromEventList>
 8003a76:	b108      	cbz	r0, 8003a7c <prvUnlockQueue+0x52>
                        vTaskMissedYield();
 8003a78:	f001 f81c 	bl	8004ab4 <vTaskMissedYield>
            --cTxLock;
 8003a7c:	3d01      	subs	r5, #1
 8003a7e:	b26d      	sxtb	r5, r5
 8003a80:	e7dc      	b.n	8003a3c <prvUnlockQueue+0x12>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a82:	6923      	ldr	r3, [r4, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0e9      	beq.n	8003a5c <prvUnlockQueue+0x32>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a88:	4630      	mov	r0, r6
 8003a8a:	f000 ff65 	bl	8004958 <xTaskRemoveFromEventList>
 8003a8e:	b108      	cbz	r0, 8003a94 <prvUnlockQueue+0x6a>
                    vTaskMissedYield();
 8003a90:	f001 f810 	bl	8004ab4 <vTaskMissedYield>
                --cRxLock;
 8003a94:	3d01      	subs	r5, #1
 8003a96:	b26d      	sxtb	r5, r5
 8003a98:	e7de      	b.n	8003a58 <prvUnlockQueue+0x2e>

08003a9a <xQueueGenericReset>:
{
 8003a9a:	b570      	push	{r4, r5, r6, lr}
 8003a9c:	460e      	mov	r6, r1
    configASSERT( pxQueue );
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	b940      	cbnz	r0, 8003ab4 <xQueueGenericReset+0x1a>
 8003aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	e7fe      	b.n	8003ab2 <xQueueGenericReset+0x18>
        ( pxQueue->uxLength >= 1U ) &&
 8003ab4:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8003ab6:	b3a5      	cbz	r5, 8003b22 <xQueueGenericReset+0x88>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003ab8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003aba:	fba3 3505 	umull	r3, r5, r3, r5
 8003abe:	bb85      	cbnz	r5, 8003b22 <xQueueGenericReset+0x88>
        taskENTER_CRITICAL();
 8003ac0:	f001 fae8 	bl	8005094 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ac4:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8003ac8:	434b      	muls	r3, r1
 8003aca:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003acc:	63a5      	str	r5, [r4, #56]	@ 0x38
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ace:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ad0:	1a5b      	subs	r3, r3, r1
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ad2:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ad4:	441a      	add	r2, r3
            pxQueue->cRxLock = queueUNLOCKED;
 8003ad6:	23ff      	movs	r3, #255	@ 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ad8:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 8003ada:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ade:	60e2      	str	r2, [r4, #12]
            pxQueue->cTxLock = queueUNLOCKED;
 8003ae0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
            if( xNewQueue == pdFALSE )
 8003ae4:	b9a6      	cbnz	r6, 8003b10 <xQueueGenericReset+0x76>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ae6:	6923      	ldr	r3, [r4, #16]
 8003ae8:	b173      	cbz	r3, 8003b08 <xQueueGenericReset+0x6e>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aea:	f104 0010 	add.w	r0, r4, #16
 8003aee:	f000 ff33 	bl	8004958 <xTaskRemoveFromEventList>
 8003af2:	b148      	cbz	r0, 8003b08 <xQueueGenericReset+0x6e>
                        queueYIELD_IF_USING_PREEMPTION();
 8003af4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003afc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8003b08:	f001 fae4 	bl	80050d4 <vPortExitCritical>
}
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b10:	f104 0010 	add.w	r0, r4, #16
 8003b14:	f7ff ff02 	bl	800391c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b18:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003b1c:	f7ff fefe 	bl	800391c <vListInitialise>
 8003b20:	e7f2      	b.n	8003b08 <xQueueGenericReset+0x6e>
 8003b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
    configASSERT( xReturn != pdFAIL );
 8003b32:	e7fe      	b.n	8003b32 <xQueueGenericReset+0x98>

08003b34 <xQueueGenericCreate>:
    {
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	460d      	mov	r5, r1
 8003b38:	4617      	mov	r7, r2
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	b1d8      	cbz	r0, 8003b76 <xQueueGenericCreate+0x42>
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003b3e:	fba1 2300 	umull	r2, r3, r1, r0
 8003b42:	b9c3      	cbnz	r3, 8003b76 <xQueueGenericCreate+0x42>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003b44:	4348      	muls	r0, r1
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003b46:	f110 0f51 	cmn.w	r0, #81	@ 0x51
 8003b4a:	d814      	bhi.n	8003b76 <xQueueGenericCreate+0x42>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b4c:	3050      	adds	r0, #80	@ 0x50
 8003b4e:	f001 fbcd 	bl	80052ec <pvPortMalloc>
            if( pxNewQueue != NULL )
 8003b52:	4604      	mov	r4, r0
 8003b54:	b158      	cbz	r0, 8003b6e <xQueueGenericCreate+0x3a>
    if( uxItemSize == ( UBaseType_t ) 0 )
 8003b56:	b165      	cbz	r5, 8003b72 <xQueueGenericCreate+0x3e>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b58:	f100 0350 	add.w	r3, r0, #80	@ 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4620      	mov	r0, r4
    pxNewQueue->uxItemSize = uxItemSize;
 8003b60:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8003b64:	6023      	str	r3, [r4, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b66:	f7ff ff98 	bl	8003a9a <xQueueGenericReset>
        pxNewQueue->ucQueueType = ucQueueType;
 8003b6a:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
    }
 8003b6e:	4620      	mov	r0, r4
 8003b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b72:	4603      	mov	r3, r0
 8003b74:	e7f2      	b.n	8003b5c <xQueueGenericCreate+0x28>
 8003b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 8003b86:	e7fe      	b.n	8003b86 <xQueueGenericCreate+0x52>

08003b88 <xQueueGenericSend>:
{
 8003b88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003b8c:	460f      	mov	r7, r1
 8003b8e:	461e      	mov	r6, r3
    configASSERT( pxQueue );
 8003b90:	4604      	mov	r4, r0
{
 8003b92:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 8003b94:	b940      	cbnz	r0, 8003ba8 <xQueueGenericSend+0x20>
 8003b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	e7fe      	b.n	8003ba6 <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ba8:	b951      	cbnz	r1, 8003bc0 <xQueueGenericSend+0x38>
 8003baa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003bac:	b143      	cbz	r3, 8003bc0 <xQueueGenericSend+0x38>
 8003bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	e7fe      	b.n	8003bbe <xQueueGenericSend+0x36>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bc0:	2e02      	cmp	r6, #2
 8003bc2:	d10b      	bne.n	8003bdc <xQueueGenericSend+0x54>
 8003bc4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d008      	beq.n	8003bdc <xQueueGenericSend+0x54>
 8003bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	e7fe      	b.n	8003bda <xQueueGenericSend+0x52>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bdc:	f000 ff70 	bl	8004ac0 <xTaskGetSchedulerState>
 8003be0:	4605      	mov	r5, r0
 8003be2:	b330      	cbz	r0, 8003c32 <xQueueGenericSend+0xaa>
 8003be4:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
 8003be6:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
 8003bea:	f001 fa53 	bl	8005094 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bee:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003bf0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d301      	bcc.n	8003bfa <xQueueGenericSend+0x72>
 8003bf6:	2e02      	cmp	r6, #2
 8003bf8:	d127      	bne.n	8003c4a <xQueueGenericSend+0xc2>
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bfa:	4632      	mov	r2, r6
 8003bfc:	4639      	mov	r1, r7
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f7ff fecc 	bl	800399c <prvCopyDataToQueue>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c04:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003c06:	b11b      	cbz	r3, 8003c10 <xQueueGenericSend+0x88>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c08:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003c0c:	f000 fea4 	bl	8004958 <xTaskRemoveFromEventList>
                    else if( xYieldRequired != pdFALSE )
 8003c10:	b148      	cbz	r0, 8003c26 <xQueueGenericSend+0x9e>
                        queueYIELD_IF_USING_PREEMPTION();
 8003c12:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8003c26:	f001 fa55 	bl	80050d4 <vPortExitCritical>
                return pdPASS;
 8003c2a:	2001      	movs	r0, #1
}
 8003c2c:	b004      	add	sp, #16
 8003c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c32:	9b01      	ldr	r3, [sp, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0d6      	beq.n	8003be6 <xQueueGenericSend+0x5e>
 8003c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	e7fe      	b.n	8003c48 <xQueueGenericSend+0xc0>
                if( xTicksToWait == ( TickType_t ) 0 )
 8003c4a:	9b01      	ldr	r3, [sp, #4]
 8003c4c:	b91b      	cbnz	r3, 8003c56 <xQueueGenericSend+0xce>
                    taskEXIT_CRITICAL();
 8003c4e:	f001 fa41 	bl	80050d4 <vPortExitCritical>
                    return errQUEUE_FULL;
 8003c52:	2000      	movs	r0, #0
 8003c54:	e7ea      	b.n	8003c2c <xQueueGenericSend+0xa4>
                else if( xEntryTimeSet == pdFALSE )
 8003c56:	b915      	cbnz	r5, 8003c5e <xQueueGenericSend+0xd6>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003c58:	a802      	add	r0, sp, #8
 8003c5a:	f000 fee3 	bl	8004a24 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8003c5e:	f001 fa39 	bl	80050d4 <vPortExitCritical>
        vTaskSuspendAll();
 8003c62:	f000 fc6b 	bl	800453c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003c66:	f001 fa15 	bl	8005094 <vPortEnterCritical>
 8003c6a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003c6e:	2bff      	cmp	r3, #255	@ 0xff
 8003c70:	bf08      	it	eq
 8003c72:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8003c76:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003c7a:	2bff      	cmp	r3, #255	@ 0xff
 8003c7c:	bf08      	it	eq
 8003c7e:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8003c82:	f001 fa27 	bl	80050d4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c86:	a901      	add	r1, sp, #4
 8003c88:	a802      	add	r0, sp, #8
 8003c8a:	f000 fed7 	bl	8004a3c <xTaskCheckForTimeOut>
 8003c8e:	bb38      	cbnz	r0, 8003ce0 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003c90:	f001 fa00 	bl	8005094 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c94:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003c96:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d10e      	bne.n	8003cba <xQueueGenericSend+0x132>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8003c9c:	f001 fa1a 	bl	80050d4 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ca0:	9901      	ldr	r1, [sp, #4]
 8003ca2:	f104 0010 	add.w	r0, r4, #16
 8003ca6:	f000 fe0f 	bl	80048c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003caa:	4620      	mov	r0, r4
 8003cac:	f7ff febd 	bl	8003a2a <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8003cb0:	f000 fd0e 	bl	80046d0 <xTaskResumeAll>
 8003cb4:	b148      	cbz	r0, 8003cca <xQueueGenericSend+0x142>
 8003cb6:	2501      	movs	r5, #1
 8003cb8:	e797      	b.n	8003bea <xQueueGenericSend+0x62>
    taskEXIT_CRITICAL();
 8003cba:	f001 fa0b 	bl	80050d4 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f7ff feb3 	bl	8003a2a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003cc4:	f000 fd04 	bl	80046d0 <xTaskResumeAll>
 8003cc8:	e7f5      	b.n	8003cb6 <xQueueGenericSend+0x12e>
                    portYIELD_WITHIN_API();
 8003cca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cd2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	e7ea      	b.n	8003cb6 <xQueueGenericSend+0x12e>
            prvUnlockQueue( pxQueue );
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f7ff fea2 	bl	8003a2a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003ce6:	f000 fcf3 	bl	80046d0 <xTaskResumeAll>
            return errQUEUE_FULL;
 8003cea:	e7b2      	b.n	8003c52 <xQueueGenericSend+0xca>

08003cec <xQueueGenericSendFromISR>:
{
 8003cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cf0:	4689      	mov	r9, r1
 8003cf2:	4617      	mov	r7, r2
 8003cf4:	461e      	mov	r6, r3
    configASSERT( pxQueue );
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	b940      	cbnz	r0, 8003d0c <xQueueGenericSendFromISR+0x20>
 8003cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	e7fe      	b.n	8003d0a <xQueueGenericSendFromISR+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d0c:	b951      	cbnz	r1, 8003d24 <xQueueGenericSendFromISR+0x38>
 8003d0e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003d10:	b143      	cbz	r3, 8003d24 <xQueueGenericSendFromISR+0x38>
 8003d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	e7fe      	b.n	8003d22 <xQueueGenericSendFromISR+0x36>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d24:	2e02      	cmp	r6, #2
 8003d26:	d10b      	bne.n	8003d40 <xQueueGenericSendFromISR+0x54>
 8003d28:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d008      	beq.n	8003d40 <xQueueGenericSendFromISR+0x54>
 8003d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	e7fe      	b.n	8003d3e <xQueueGenericSendFromISR+0x52>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d40:	f001 fa80 	bl	8005244 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003d44:	f3ef 8811 	mrs	r8, BASEPRI
 8003d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d58:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003d5a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d301      	bcc.n	8003d64 <xQueueGenericSendFromISR+0x78>
 8003d60:	2e02      	cmp	r6, #2
 8003d62:	d12d      	bne.n	8003dc0 <xQueueGenericSendFromISR+0xd4>
            const int8_t cTxLock = pxQueue->cTxLock;
 8003d64:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d68:	4632      	mov	r2, r6
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	4620      	mov	r0, r4
            const int8_t cTxLock = pxQueue->cTxLock;
 8003d6e:	b26d      	sxtb	r5, r5
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d70:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d72:	f7ff fe13 	bl	800399c <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 8003d76:	1c6b      	adds	r3, r5, #1
 8003d78:	d10e      	bne.n	8003d98 <xQueueGenericSendFromISR+0xac>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d7a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d7c:	b13b      	cbz	r3, 8003d8e <xQueueGenericSendFromISR+0xa2>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d7e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003d82:	f000 fde9 	bl	8004958 <xTaskRemoveFromEventList>
 8003d86:	b110      	cbz	r0, 8003d8e <xQueueGenericSendFromISR+0xa2>
                            if( pxHigherPriorityTaskWoken != NULL )
 8003d88:	b10f      	cbz	r7, 8003d8e <xQueueGenericSendFromISR+0xa2>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	603b      	str	r3, [r7, #0]
            xReturn = pdPASS;
 8003d8e:	2001      	movs	r0, #1
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003d90:	f388 8811 	msr	BASEPRI, r8
}
 8003d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8003d98:	f000 fbde 	bl	8004558 <uxTaskGetNumberOfTasks>
 8003d9c:	4285      	cmp	r5, r0
 8003d9e:	d2f6      	bcs.n	8003d8e <xQueueGenericSendFromISR+0xa2>
 8003da0:	2d7f      	cmp	r5, #127	@ 0x7f
 8003da2:	d108      	bne.n	8003db6 <xQueueGenericSendFromISR+0xca>
        __asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	e7fe      	b.n	8003db4 <xQueueGenericSendFromISR+0xc8>
 8003db6:	3501      	adds	r5, #1
 8003db8:	b26d      	sxtb	r5, r5
 8003dba:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8003dbe:	e7e6      	b.n	8003d8e <xQueueGenericSendFromISR+0xa2>
            xReturn = errQUEUE_FULL;
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	e7e5      	b.n	8003d90 <xQueueGenericSendFromISR+0xa4>

08003dc4 <xQueueGiveFromISR>:
{
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	460e      	mov	r6, r1
    configASSERT( pxQueue );
 8003dc8:	4604      	mov	r4, r0
 8003dca:	b940      	cbnz	r0, 8003dde <xQueueGiveFromISR+0x1a>
 8003dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	e7fe      	b.n	8003ddc <xQueueGiveFromISR+0x18>
    configASSERT( pxQueue->uxItemSize == 0 );
 8003dde:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003de0:	b143      	cbz	r3, 8003df4 <xQueueGiveFromISR+0x30>
 8003de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	e7fe      	b.n	8003df2 <xQueueGiveFromISR+0x2e>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003df4:	6803      	ldr	r3, [r0, #0]
 8003df6:	b953      	cbnz	r3, 8003e0e <xQueueGiveFromISR+0x4a>
 8003df8:	6883      	ldr	r3, [r0, #8]
 8003dfa:	b143      	cbz	r3, 8003e0e <xQueueGiveFromISR+0x4a>
 8003dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	e7fe      	b.n	8003e0c <xQueueGiveFromISR+0x48>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e0e:	f001 fa19 	bl	8005244 <vPortValidateInterruptPriority>
        __asm volatile
 8003e12:	f3ef 8711 	mrs	r7, BASEPRI
 8003e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e26:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if( uxMessagesWaiting < pxQueue->uxLength )
 8003e28:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d928      	bls.n	8003e80 <xQueueGiveFromISR+0xbc>
            const int8_t cTxLock = pxQueue->cTxLock;
 8003e2e:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e32:	3301      	adds	r3, #1
            if( cTxLock == queueUNLOCKED )
 8003e34:	2aff      	cmp	r2, #255	@ 0xff
            const int8_t cTxLock = pxQueue->cTxLock;
 8003e36:	b255      	sxtb	r5, r2
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e38:	63a3      	str	r3, [r4, #56]	@ 0x38
            if( cTxLock == queueUNLOCKED )
 8003e3a:	d10d      	bne.n	8003e58 <xQueueGiveFromISR+0x94>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e3c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003e3e:	b13b      	cbz	r3, 8003e50 <xQueueGiveFromISR+0x8c>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e40:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003e44:	f000 fd88 	bl	8004958 <xTaskRemoveFromEventList>
 8003e48:	b110      	cbz	r0, 8003e50 <xQueueGiveFromISR+0x8c>
                            if( pxHigherPriorityTaskWoken != NULL )
 8003e4a:	b10e      	cbz	r6, 8003e50 <xQueueGiveFromISR+0x8c>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	6033      	str	r3, [r6, #0]
            xReturn = pdPASS;
 8003e50:	2001      	movs	r0, #1
        __asm volatile
 8003e52:	f387 8811 	msr	BASEPRI, r7
}
 8003e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8003e58:	f000 fb7e 	bl	8004558 <uxTaskGetNumberOfTasks>
 8003e5c:	4285      	cmp	r5, r0
 8003e5e:	d2f7      	bcs.n	8003e50 <xQueueGiveFromISR+0x8c>
 8003e60:	2d7f      	cmp	r5, #127	@ 0x7f
 8003e62:	d108      	bne.n	8003e76 <xQueueGiveFromISR+0xb2>
        __asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	e7fe      	b.n	8003e74 <xQueueGiveFromISR+0xb0>
 8003e76:	3501      	adds	r5, #1
 8003e78:	b26d      	sxtb	r5, r5
 8003e7a:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8003e7e:	e7e7      	b.n	8003e50 <xQueueGiveFromISR+0x8c>
            xReturn = errQUEUE_FULL;
 8003e80:	2000      	movs	r0, #0
 8003e82:	e7e6      	b.n	8003e52 <xQueueGiveFromISR+0x8e>

08003e84 <xQueueReceive>:
{
 8003e84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003e88:	460e      	mov	r6, r1
    configASSERT( ( pxQueue ) );
 8003e8a:	4604      	mov	r4, r0
{
 8003e8c:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 8003e8e:	b940      	cbnz	r0, 8003ea2 <xQueueReceive+0x1e>
 8003e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	e7fe      	b.n	8003ea0 <xQueueReceive+0x1c>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ea2:	b951      	cbnz	r1, 8003eba <xQueueReceive+0x36>
 8003ea4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003ea6:	b143      	cbz	r3, 8003eba <xQueueReceive+0x36>
 8003ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	e7fe      	b.n	8003eb8 <xQueueReceive+0x34>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eba:	f000 fe01 	bl	8004ac0 <xTaskGetSchedulerState>
 8003ebe:	4605      	mov	r5, r0
 8003ec0:	b318      	cbz	r0, 8003f0a <xQueueReceive+0x86>
 8003ec2:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
 8003ec4:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
 8003ec8:	f001 f8e4 	bl	8005094 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ecc:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ece:	b347      	cbz	r7, 8003f22 <xQueueReceive+0x9e>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ed0:	4631      	mov	r1, r6
 8003ed2:	4620      	mov	r0, r4
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ed4:	3f01      	subs	r7, #1
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ed6:	f7ff fd94 	bl	8003a02 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003eda:	63a7      	str	r7, [r4, #56]	@ 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003edc:	6923      	ldr	r3, [r4, #16]
 8003ede:	b173      	cbz	r3, 8003efe <xQueueReceive+0x7a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee0:	f104 0010 	add.w	r0, r4, #16
 8003ee4:	f000 fd38 	bl	8004958 <xTaskRemoveFromEventList>
 8003ee8:	b148      	cbz	r0, 8003efe <xQueueReceive+0x7a>
                        queueYIELD_IF_USING_PREEMPTION();
 8003eea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ef2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8003efe:	f001 f8e9 	bl	80050d4 <vPortExitCritical>
                return pdPASS;
 8003f02:	2001      	movs	r0, #1
}
 8003f04:	b004      	add	sp, #16
 8003f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f0a:	9b01      	ldr	r3, [sp, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0d9      	beq.n	8003ec4 <xQueueReceive+0x40>
 8003f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	e7fe      	b.n	8003f20 <xQueueReceive+0x9c>
                if( xTicksToWait == ( TickType_t ) 0 )
 8003f22:	9b01      	ldr	r3, [sp, #4]
 8003f24:	b91b      	cbnz	r3, 8003f2e <xQueueReceive+0xaa>
                    taskEXIT_CRITICAL();
 8003f26:	f001 f8d5 	bl	80050d4 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	e7ea      	b.n	8003f04 <xQueueReceive+0x80>
                else if( xEntryTimeSet == pdFALSE )
 8003f2e:	b915      	cbnz	r5, 8003f36 <xQueueReceive+0xb2>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003f30:	a802      	add	r0, sp, #8
 8003f32:	f000 fd77 	bl	8004a24 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8003f36:	f001 f8cd 	bl	80050d4 <vPortExitCritical>
        vTaskSuspendAll();
 8003f3a:	f000 faff 	bl	800453c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003f3e:	f001 f8a9 	bl	8005094 <vPortEnterCritical>
 8003f42:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003f46:	2bff      	cmp	r3, #255	@ 0xff
 8003f48:	bf08      	it	eq
 8003f4a:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8003f4e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003f52:	2bff      	cmp	r3, #255	@ 0xff
 8003f54:	bf08      	it	eq
 8003f56:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8003f5a:	f001 f8bb 	bl	80050d4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f5e:	a901      	add	r1, sp, #4
 8003f60:	a802      	add	r0, sp, #8
 8003f62:	f000 fd6b 	bl	8004a3c <xTaskCheckForTimeOut>
 8003f66:	bb00      	cbnz	r0, 8003faa <xQueueReceive+0x126>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f68:	4620      	mov	r0, r4
 8003f6a:	f7ff fd0c 	bl	8003986 <prvIsQueueEmpty>
 8003f6e:	b1b0      	cbz	r0, 8003f9e <xQueueReceive+0x11a>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f70:	9901      	ldr	r1, [sp, #4]
 8003f72:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003f76:	f000 fca7 	bl	80048c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	f7ff fd55 	bl	8003a2a <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8003f80:	f000 fba6 	bl	80046d0 <xTaskResumeAll>
 8003f84:	b948      	cbnz	r0, 8003f9a <xQueueReceive+0x116>
                    portYIELD_WITHIN_API();
 8003f86:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	2501      	movs	r5, #1
 8003f9c:	e794      	b.n	8003ec8 <xQueueReceive+0x44>
                prvUnlockQueue( pxQueue );
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	f7ff fd43 	bl	8003a2a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003fa4:	f000 fb94 	bl	80046d0 <xTaskResumeAll>
 8003fa8:	e7f7      	b.n	8003f9a <xQueueReceive+0x116>
            prvUnlockQueue( pxQueue );
 8003faa:	4620      	mov	r0, r4
 8003fac:	f7ff fd3d 	bl	8003a2a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003fb0:	f000 fb8e 	bl	80046d0 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	f7ff fce6 	bl	8003986 <prvIsQueueEmpty>
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d0ed      	beq.n	8003f9a <xQueueReceive+0x116>
 8003fbe:	e7b4      	b.n	8003f2a <xQueueReceive+0xa6>

08003fc0 <xQueueSemaphoreTake>:
{
 8003fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc2:	b085      	sub	sp, #20
    configASSERT( ( pxQueue ) );
 8003fc4:	4604      	mov	r4, r0
{
 8003fc6:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
 8003fc8:	b940      	cbnz	r0, 8003fdc <xQueueSemaphoreTake+0x1c>
 8003fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	e7fe      	b.n	8003fda <xQueueSemaphoreTake+0x1a>
    configASSERT( pxQueue->uxItemSize == 0 );
 8003fdc:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8003fde:	b145      	cbz	r5, 8003ff2 <xQueueSemaphoreTake+0x32>
 8003fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	e7fe      	b.n	8003ff0 <xQueueSemaphoreTake+0x30>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ff2:	f000 fd65 	bl	8004ac0 <xTaskGetSchedulerState>
 8003ff6:	4606      	mov	r6, r0
 8003ff8:	b320      	cbz	r0, 8004044 <xQueueSemaphoreTake+0x84>
 8003ffa:	462e      	mov	r6, r5
        prvLockQueue( pxQueue );
 8003ffc:	2700      	movs	r7, #0
        taskENTER_CRITICAL();
 8003ffe:	f001 f849 	bl	8005094 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004002:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004004:	b353      	cbz	r3, 800405c <xQueueSemaphoreTake+0x9c>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004006:	3b01      	subs	r3, #1
 8004008:	63a3      	str	r3, [r4, #56]	@ 0x38
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	b913      	cbnz	r3, 8004014 <xQueueSemaphoreTake+0x54>
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800400e:	f000 fe63 	bl	8004cd8 <pvTaskIncrementMutexHeldCount>
 8004012:	60a0      	str	r0, [r4, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	b173      	cbz	r3, 8004036 <xQueueSemaphoreTake+0x76>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004018:	f104 0010 	add.w	r0, r4, #16
 800401c:	f000 fc9c 	bl	8004958 <xTaskRemoveFromEventList>
 8004020:	b148      	cbz	r0, 8004036 <xQueueSemaphoreTake+0x76>
                        queueYIELD_IF_USING_PREEMPTION();
 8004022:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800402a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8004036:	f001 f84d 	bl	80050d4 <vPortExitCritical>
                return pdPASS;
 800403a:	2001      	movs	r0, #1
}
 800403c:	b005      	add	sp, #20
 800403e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004040:	4635      	mov	r5, r6
 8004042:	e7db      	b.n	8003ffc <xQueueSemaphoreTake+0x3c>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004044:	9b01      	ldr	r3, [sp, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0fa      	beq.n	8004040 <xQueueSemaphoreTake+0x80>
 800404a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	e7fe      	b.n	800405a <xQueueSemaphoreTake+0x9a>
                if( xTicksToWait == ( TickType_t ) 0 )
 800405c:	9b01      	ldr	r3, [sp, #4]
 800405e:	b91b      	cbnz	r3, 8004068 <xQueueSemaphoreTake+0xa8>
                        taskEXIT_CRITICAL();
 8004060:	f001 f838 	bl	80050d4 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8004064:	2000      	movs	r0, #0
 8004066:	e7e9      	b.n	800403c <xQueueSemaphoreTake+0x7c>
                else if( xEntryTimeSet == pdFALSE )
 8004068:	b916      	cbnz	r6, 8004070 <xQueueSemaphoreTake+0xb0>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800406a:	a802      	add	r0, sp, #8
 800406c:	f000 fcda 	bl	8004a24 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8004070:	f001 f830 	bl	80050d4 <vPortExitCritical>
        vTaskSuspendAll();
 8004074:	f000 fa62 	bl	800453c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004078:	f001 f80c 	bl	8005094 <vPortEnterCritical>
 800407c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004080:	2bff      	cmp	r3, #255	@ 0xff
 8004082:	bf08      	it	eq
 8004084:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8004088:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800408c:	2bff      	cmp	r3, #255	@ 0xff
 800408e:	bf08      	it	eq
 8004090:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 8004094:	f001 f81e 	bl	80050d4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004098:	a901      	add	r1, sp, #4
 800409a:	a802      	add	r0, sp, #8
 800409c:	f000 fcce 	bl	8004a3c <xTaskCheckForTimeOut>
 80040a0:	bb50      	cbnz	r0, 80040f8 <xQueueSemaphoreTake+0x138>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040a2:	4620      	mov	r0, r4
 80040a4:	f7ff fc6f 	bl	8003986 <prvIsQueueEmpty>
 80040a8:	b300      	cbz	r0, 80040ec <xQueueSemaphoreTake+0x12c>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	b93b      	cbnz	r3, 80040be <xQueueSemaphoreTake+0xfe>
                        taskENTER_CRITICAL();
 80040ae:	f000 fff1 	bl	8005094 <vPortEnterCritical>
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040b2:	68a0      	ldr	r0, [r4, #8]
 80040b4:	f000 fd14 	bl	8004ae0 <xTaskPriorityInherit>
 80040b8:	4605      	mov	r5, r0
                        taskEXIT_CRITICAL();
 80040ba:	f001 f80b 	bl	80050d4 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040be:	9901      	ldr	r1, [sp, #4]
 80040c0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80040c4:	f000 fc00 	bl	80048c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80040c8:	4620      	mov	r0, r4
 80040ca:	f7ff fcae 	bl	8003a2a <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80040ce:	f000 faff 	bl	80046d0 <xTaskResumeAll>
 80040d2:	b948      	cbnz	r0, 80040e8 <xQueueSemaphoreTake+0x128>
                    portYIELD_WITHIN_API();
 80040d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80040d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	2601      	movs	r6, #1
 80040ea:	e788      	b.n	8003ffe <xQueueSemaphoreTake+0x3e>
                prvUnlockQueue( pxQueue );
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff fc9c 	bl	8003a2a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80040f2:	f000 faed 	bl	80046d0 <xTaskResumeAll>
 80040f6:	e7f7      	b.n	80040e8 <xQueueSemaphoreTake+0x128>
            prvUnlockQueue( pxQueue );
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7ff fc96 	bl	8003a2a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80040fe:	f000 fae7 	bl	80046d0 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004102:	4620      	mov	r0, r4
 8004104:	f7ff fc3f 	bl	8003986 <prvIsQueueEmpty>
 8004108:	2800      	cmp	r0, #0
 800410a:	d0ed      	beq.n	80040e8 <xQueueSemaphoreTake+0x128>
                    if( xInheritanceOccurred != pdFALSE )
 800410c:	2d00      	cmp	r5, #0
 800410e:	d0a9      	beq.n	8004064 <xQueueSemaphoreTake+0xa4>
                        taskENTER_CRITICAL();
 8004110:	f000 ffc0 	bl	8005094 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004114:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004116:	b119      	cbz	r1, 8004120 <xQueueSemaphoreTake+0x160>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004118:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800411a:	6819      	ldr	r1, [r3, #0]
 800411c:	f1c1 0106 	rsb	r1, r1, #6
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004120:	68a0      	ldr	r0, [r4, #8]
 8004122:	f000 fd7f 	bl	8004c24 <vTaskPriorityDisinheritAfterTimeout>
 8004126:	e79b      	b.n	8004060 <xQueueSemaphoreTake+0xa0>

08004128 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004128:	b570      	push	{r4, r5, r6, lr}
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;

        configASSERT( xQueue );
 800412a:	b940      	cbnz	r0, 800413e <vQueueAddToRegistry+0x16>
 800412c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	e7fe      	b.n	800413c <vQueueAddToRegistry+0x14>

        if( pcQueueName != NULL )
 800413e:	b1b9      	cbz	r1, 8004170 <vQueueAddToRegistry+0x48>
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	4a0c      	ldr	r2, [pc, #48]	@ (8004174 <vQueueAddToRegistry+0x4c>)
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004144:	461c      	mov	r4, r3
 8004146:	4615      	mov	r5, r2
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004148:	6856      	ldr	r6, [r2, #4]
 800414a:	4286      	cmp	r6, r0
 800414c:	d104      	bne.n	8004158 <vQueueAddToRegistry+0x30>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800414e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3

        if( pxEntryToWrite != NULL )
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
            pxEntryToWrite->xHandle = xQueue;
 8004152:	e9c3 1000 	strd	r1, r0, [r3]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004156:	e00b      	b.n	8004170 <vQueueAddToRegistry+0x48>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004158:	b91b      	cbnz	r3, 8004162 <vQueueAddToRegistry+0x3a>
 800415a:	6816      	ldr	r6, [r2, #0]
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800415c:	2e00      	cmp	r6, #0
 800415e:	bf08      	it	eq
 8004160:	4613      	moveq	r3, r2
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004162:	3401      	adds	r4, #1
 8004164:	2c04      	cmp	r4, #4
 8004166:	f102 0208 	add.w	r2, r2, #8
 800416a:	d1ed      	bne.n	8004148 <vQueueAddToRegistry+0x20>
        if( pxEntryToWrite != NULL )
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f0      	bne.n	8004152 <vQueueAddToRegistry+0x2a>
    }
 8004170:	bd70      	pop	{r4, r5, r6, pc}
 8004172:	bf00      	nop
 8004174:	20000288 	.word	0x20000288

08004178 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	4604      	mov	r4, r0
 800417c:	460d      	mov	r5, r1
 800417e:	4616      	mov	r6, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004180:	f000 ff88 	bl	8005094 <vPortEnterCritical>
 8004184:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004188:	2bff      	cmp	r3, #255	@ 0xff
 800418a:	bf04      	itt	eq
 800418c:	2300      	moveq	r3, #0
 800418e:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8004192:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004196:	2bff      	cmp	r3, #255	@ 0xff
 8004198:	bf04      	itt	eq
 800419a:	2300      	moveq	r3, #0
 800419c:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 80041a0:	f000 ff98 	bl	80050d4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80041a6:	b92b      	cbnz	r3, 80041b4 <vQueueWaitForMessageRestricted+0x3c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041a8:	4632      	mov	r2, r6
 80041aa:	4629      	mov	r1, r5
 80041ac:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80041b0:	f000 fba4 	bl	80048fc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80041b4:	4620      	mov	r0, r4
    }
 80041b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvUnlockQueue( pxQueue );
 80041ba:	f7ff bc36 	b.w	8003a2a <prvUnlockQueue>
	...

080041c0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80041c2:	4b20      	ldr	r3, [pc, #128]	@ (8004244 <prvAddCurrentTaskToDelayedList+0x84>)
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041c4:	4c20      	ldr	r4, [pc, #128]	@ (8004248 <prvAddCurrentTaskToDelayedList+0x88>)
{
 80041c6:	4606      	mov	r6, r0
    const TickType_t xConstTickCount = xTickCount;
 80041c8:	681d      	ldr	r5, [r3, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041ca:	6820      	ldr	r0, [r4, #0]
{
 80041cc:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041ce:	3004      	adds	r0, #4
 80041d0:	f7ff fbc9 	bl	8003966 <uxListRemove>
 80041d4:	b940      	cbnz	r0, 80041e8 <prvAddCurrentTaskToDelayedList+0x28>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80041d6:	6822      	ldr	r2, [r4, #0]
 80041d8:	491c      	ldr	r1, [pc, #112]	@ (800424c <prvAddCurrentTaskToDelayedList+0x8c>)
 80041da:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80041dc:	2201      	movs	r2, #1
 80041de:	680b      	ldr	r3, [r1, #0]
 80041e0:	4082      	lsls	r2, r0
 80041e2:	ea23 0302 	bic.w	r3, r3, r2
 80041e6:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041e8:	1c73      	adds	r3, r6, #1
 80041ea:	d113      	bne.n	8004214 <prvAddCurrentTaskToDelayedList+0x54>
 80041ec:	b197      	cbz	r7, 8004214 <prvAddCurrentTaskToDelayedList+0x54>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041ee:	4b18      	ldr	r3, [pc, #96]	@ (8004250 <prvAddCurrentTaskToDelayedList+0x90>)
 80041f0:	6821      	ldr	r1, [r4, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	608a      	str	r2, [r1, #8]
 80041f6:	6890      	ldr	r0, [r2, #8]
 80041f8:	6821      	ldr	r1, [r4, #0]
 80041fa:	60c8      	str	r0, [r1, #12]
 80041fc:	6821      	ldr	r1, [r4, #0]
 80041fe:	3104      	adds	r1, #4
 8004200:	6041      	str	r1, [r0, #4]
 8004202:	6821      	ldr	r1, [r4, #0]
 8004204:	3104      	adds	r1, #4
 8004206:	6091      	str	r1, [r2, #8]
 8004208:	6822      	ldr	r2, [r4, #0]
 800420a:	6153      	str	r3, [r2, #20]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	3201      	adds	r2, #1
 8004210:	601a      	str	r2, [r3, #0]

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	19ad      	adds	r5, r5, r6
 8004218:	605d      	str	r5, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800421a:	d307      	bcc.n	800422c <prvAddCurrentTaskToDelayedList+0x6c>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800421c:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <prvAddCurrentTaskToDelayedList+0x94>)
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	6821      	ldr	r1, [r4, #0]
}
 8004222:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004226:	3104      	adds	r1, #4
 8004228:	f7ff bb86 	b.w	8003938 <vListInsert>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800422c:	4b0a      	ldr	r3, [pc, #40]	@ (8004258 <prvAddCurrentTaskToDelayedList+0x98>)
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	6821      	ldr	r1, [r4, #0]
 8004232:	3104      	adds	r1, #4
 8004234:	f7ff fb80 	bl	8003938 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004238:	4b08      	ldr	r3, [pc, #32]	@ (800425c <prvAddCurrentTaskToDelayedList+0x9c>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	42aa      	cmp	r2, r5
                    xNextTaskUnblockTime = xTimeToWake;
 800423e:	bf88      	it	hi
 8004240:	601d      	strhi	r5, [r3, #0]
}
 8004242:	e7e6      	b.n	8004212 <prvAddCurrentTaskToDelayedList+0x52>
 8004244:	200002cc 	.word	0x200002cc
 8004248:	200003bc 	.word	0x200003bc
 800424c:	200002c8 	.word	0x200002c8
 8004250:	200002d4 	.word	0x200002d4
 8004254:	20000314 	.word	0x20000314
 8004258:	20000318 	.word	0x20000318
 800425c:	200002b0 	.word	0x200002b0

08004260 <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004260:	4a06      	ldr	r2, [pc, #24]	@ (800427c <prvResetNextTaskUnblockTime+0x1c>)
 8004262:	6813      	ldr	r3, [r2, #0]
 8004264:	6819      	ldr	r1, [r3, #0]
 8004266:	4b06      	ldr	r3, [pc, #24]	@ (8004280 <prvResetNextTaskUnblockTime+0x20>)
 8004268:	b919      	cbnz	r1, 8004272 <prvResetNextTaskUnblockTime+0x12>
        xNextTaskUnblockTime = portMAX_DELAY;
 800426a:	f04f 32ff 	mov.w	r2, #4294967295
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800426e:	601a      	str	r2, [r3, #0]
}
 8004270:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	68d2      	ldr	r2, [r2, #12]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	e7f9      	b.n	800426e <prvResetNextTaskUnblockTime+0xe>
 800427a:	bf00      	nop
 800427c:	20000318 	.word	0x20000318
 8004280:	200002b0 	.word	0x200002b0

08004284 <prvIdleTask>:
{
 8004284:	b580      	push	{r7, lr}
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004286:	4c15      	ldr	r4, [pc, #84]	@ (80042dc <prvIdleTask+0x58>)
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004288:	4f15      	ldr	r7, [pc, #84]	@ (80042e0 <prvIdleTask+0x5c>)
                --uxCurrentNumberOfTasks;
 800428a:	4e16      	ldr	r6, [pc, #88]	@ (80042e4 <prvIdleTask+0x60>)
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	b973      	cbnz	r3, 80042ae <prvIdleTask+0x2a>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004290:	4b15      	ldr	r3, [pc, #84]	@ (80042e8 <prvIdleTask+0x64>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d9f8      	bls.n	800428a <prvIdleTask+0x6>
                taskYIELD();
 8004298:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800429c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	e7ed      	b.n	800428a <prvIdleTask+0x6>
            taskENTER_CRITICAL();
 80042ae:	f000 fef1 	bl	8005094 <vPortEnterCritical>
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	68dd      	ldr	r5, [r3, #12]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b6:	1d28      	adds	r0, r5, #4
 80042b8:	f7ff fb55 	bl	8003966 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80042bc:	6833      	ldr	r3, [r6, #0]
 80042be:	3b01      	subs	r3, #1
 80042c0:	6033      	str	r3, [r6, #0]
                --uxDeletedTasksWaitingCleanUp;
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	6023      	str	r3, [r4, #0]
            taskEXIT_CRITICAL();
 80042c8:	f000 ff04 	bl	80050d4 <vPortExitCritical>
            vPortFreeStack( pxTCB->pxStack );
 80042cc:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80042ce:	f001 f89d 	bl	800540c <vPortFree>
            vPortFree( pxTCB );
 80042d2:	4628      	mov	r0, r5
 80042d4:	f001 f89a 	bl	800540c <vPortFree>
    }
 80042d8:	e7d8      	b.n	800428c <prvIdleTask+0x8>
 80042da:	bf00      	nop
 80042dc:	200002e8 	.word	0x200002e8
 80042e0:	200002ec 	.word	0x200002ec
 80042e4:	200002d0 	.word	0x200002d0
 80042e8:	20000344 	.word	0x20000344

080042ec <xTaskCreate>:
    {
 80042ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042f0:	0095      	lsls	r5, r2, #2
    {
 80042f2:	4681      	mov	r9, r0
 80042f4:	e9dd 8b0a 	ldrd	r8, fp, [sp, #40]	@ 0x28
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042f8:	4628      	mov	r0, r5
    {
 80042fa:	460e      	mov	r6, r1
 80042fc:	469a      	mov	sl, r3
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042fe:	f000 fff5 	bl	80052ec <pvPortMalloc>
            if( pxStack != NULL )
 8004302:	4607      	mov	r7, r0
 8004304:	b918      	cbnz	r0, 800430e <xTaskCreate+0x22>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004306:	f04f 30ff 	mov.w	r0, #4294967295
    }
 800430a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800430e:	2058      	movs	r0, #88	@ 0x58
 8004310:	f000 ffec 	bl	80052ec <pvPortMalloc>
                if( pxNewTCB != NULL )
 8004314:	4604      	mov	r4, r0
 8004316:	2800      	cmp	r0, #0
 8004318:	f000 80b2 	beq.w	8004480 <xTaskCreate+0x194>
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800431c:	2258      	movs	r2, #88	@ 0x58
 800431e:	2100      	movs	r1, #0
 8004320:	f001 f8ae 	bl	8005480 <memset>
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004324:	4638      	mov	r0, r7
                    pxNewTCB->pxStack = pxStack;
 8004326:	6327      	str	r7, [r4, #48]	@ 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004328:	462a      	mov	r2, r5
 800432a:	21a5      	movs	r1, #165	@ 0xa5
 800432c:	f001 f8a8 	bl	8005480 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004330:	6b27      	ldr	r7, [r4, #48]	@ 0x30
    if( pcName != NULL )
 8004332:	b16e      	cbz	r6, 8004350 <xTaskCreate+0x64>
 8004334:	1e73      	subs	r3, r6, #1
 8004336:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800433a:	3609      	adds	r6, #9
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800433c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004340:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
 8004344:	b109      	cbz	r1, 800434a <xTaskCreate+0x5e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004346:	42b3      	cmp	r3, r6
 8004348:	d1f8      	bne.n	800433c <xTaskCreate+0x50>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800434a:	2300      	movs	r3, #0
 800434c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004350:	f1b8 0f05 	cmp.w	r8, #5
 8004354:	d908      	bls.n	8004368 <xTaskCreate+0x7c>
 8004356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	e7fe      	b.n	8004366 <xTaskCreate+0x7a>
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004368:	1d26      	adds	r6, r4, #4
 800436a:	4630      	mov	r0, r6
    pxNewTCB->uxPriority = uxPriority;
 800436c:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 8004370:	f8c4 8048 	str.w	r8, [r4, #72]	@ 0x48
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004374:	f7ff fadd 	bl	8003932 <vListInitialiseItem>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004378:	3d04      	subs	r5, #4
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800437a:	f104 0018 	add.w	r0, r4, #24
 800437e:	f7ff fad8 	bl	8003932 <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004382:	f1c8 0306 	rsb	r3, r8, #6
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004386:	1978      	adds	r0, r7, r5
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004388:	4652      	mov	r2, sl
 800438a:	4649      	mov	r1, r9
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800438c:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800438e:	61a3      	str	r3, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004390:	6264      	str	r4, [r4, #36]	@ 0x24
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004392:	f020 0007 	bic.w	r0, r0, #7
 8004396:	f000 fe55 	bl	8005044 <pxPortInitialiseStack>
 800439a:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 800439c:	f1bb 0f00 	cmp.w	fp, #0
 80043a0:	d001      	beq.n	80043a6 <xTaskCreate+0xba>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043a2:	f8cb 4000 	str.w	r4, [fp]
    taskENTER_CRITICAL();
 80043a6:	f000 fe75 	bl	8005094 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 80043aa:	4b37      	ldr	r3, [pc, #220]	@ (8004488 <xTaskCreate+0x19c>)
        if( pxCurrentTCB == NULL )
 80043ac:	4f37      	ldr	r7, [pc, #220]	@ (800448c <xTaskCreate+0x1a0>)
        uxCurrentNumberOfTasks++;
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8004490 <xTaskCreate+0x1a4>
 80043b4:	3201      	adds	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
        if( pxCurrentTCB == NULL )
 80043b8:	683d      	ldr	r5, [r7, #0]
 80043ba:	2d00      	cmp	r5, #0
 80043bc:	d155      	bne.n	800446a <xTaskCreate+0x17e>
            pxCurrentTCB = pxNewTCB;
 80043be:	603c      	str	r4, [r7, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d11f      	bne.n	8004406 <xTaskCreate+0x11a>
 80043c6:	46c1      	mov	r9, r8
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043c8:	4648      	mov	r0, r9
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043ca:	3501      	adds	r5, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043cc:	f7ff faa6 	bl	800391c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043d0:	2d06      	cmp	r5, #6
 80043d2:	f109 0914 	add.w	r9, r9, #20
 80043d6:	d1f7      	bne.n	80043c8 <xTaskCreate+0xdc>
    vListInitialise( &xDelayedTaskList1 );
 80043d8:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 8004494 <xTaskCreate+0x1a8>
    vListInitialise( &xDelayedTaskList2 );
 80043dc:	4d2e      	ldr	r5, [pc, #184]	@ (8004498 <xTaskCreate+0x1ac>)
    vListInitialise( &xDelayedTaskList1 );
 80043de:	4648      	mov	r0, r9
 80043e0:	f7ff fa9c 	bl	800391c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80043e4:	4628      	mov	r0, r5
 80043e6:	f7ff fa99 	bl	800391c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80043ea:	482c      	ldr	r0, [pc, #176]	@ (800449c <xTaskCreate+0x1b0>)
 80043ec:	f7ff fa96 	bl	800391c <vListInitialise>
        vListInitialise( &xTasksWaitingTermination );
 80043f0:	482b      	ldr	r0, [pc, #172]	@ (80044a0 <xTaskCreate+0x1b4>)
 80043f2:	f7ff fa93 	bl	800391c <vListInitialise>
        vListInitialise( &xSuspendedTaskList );
 80043f6:	482b      	ldr	r0, [pc, #172]	@ (80044a4 <xTaskCreate+0x1b8>)
 80043f8:	f7ff fa90 	bl	800391c <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 80043fc:	4b2a      	ldr	r3, [pc, #168]	@ (80044a8 <xTaskCreate+0x1bc>)
 80043fe:	f8c3 9000 	str.w	r9, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004402:	4b2a      	ldr	r3, [pc, #168]	@ (80044ac <xTaskCreate+0x1c0>)
 8004404:	601d      	str	r5, [r3, #0]
        uxTaskNumber++;
 8004406:	4a2a      	ldr	r2, [pc, #168]	@ (80044b0 <xTaskCreate+0x1c4>)
        prvAddTaskToReadyList( pxNewTCB );
 8004408:	492a      	ldr	r1, [pc, #168]	@ (80044b4 <xTaskCreate+0x1c8>)
        uxTaskNumber++;
 800440a:	6813      	ldr	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 800440c:	6808      	ldr	r0, [r1, #0]
        uxTaskNumber++;
 800440e:	3301      	adds	r3, #1
 8004410:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8004412:	2201      	movs	r2, #1
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004414:	6423      	str	r3, [r4, #64]	@ 0x40
        prvAddTaskToReadyList( pxNewTCB );
 8004416:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004418:	409a      	lsls	r2, r3
 800441a:	4302      	orrs	r2, r0
 800441c:	600a      	str	r2, [r1, #0]
 800441e:	2214      	movs	r2, #20
 8004420:	4353      	muls	r3, r2
 8004422:	eb08 0103 	add.w	r1, r8, r3
 8004426:	684a      	ldr	r2, [r1, #4]
 8004428:	6890      	ldr	r0, [r2, #8]
 800442a:	60a2      	str	r2, [r4, #8]
 800442c:	60e0      	str	r0, [r4, #12]
 800442e:	6046      	str	r6, [r0, #4]
 8004430:	6096      	str	r6, [r2, #8]
 8004432:	f858 2003 	ldr.w	r2, [r8, r3]
 8004436:	6161      	str	r1, [r4, #20]
 8004438:	3201      	adds	r2, #1
 800443a:	f848 2003 	str.w	r2, [r8, r3]
    taskEXIT_CRITICAL();
 800443e:	f000 fe49 	bl	80050d4 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8004442:	4b1d      	ldr	r3, [pc, #116]	@ (80044b8 <xTaskCreate+0x1cc>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	b173      	cbz	r3, 8004466 <xTaskCreate+0x17a>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800444c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800444e:	429a      	cmp	r2, r3
 8004450:	d209      	bcs.n	8004466 <xTaskCreate+0x17a>
            taskYIELD_IF_USING_PREEMPTION();
 8004452:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800445a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	f3bf 8f6f 	isb	sy
            xReturn = pdPASS;
 8004466:	2001      	movs	r0, #1
        return xReturn;
 8004468:	e74f      	b.n	800430a <xTaskCreate+0x1e>
            if( xSchedulerRunning == pdFALSE )
 800446a:	4b13      	ldr	r3, [pc, #76]	@ (80044b8 <xTaskCreate+0x1cc>)
 800446c:	681a      	ldr	r2, [r3, #0]
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800446e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            if( xSchedulerRunning == pdFALSE )
 8004470:	2a00      	cmp	r2, #0
 8004472:	d1c8      	bne.n	8004406 <xTaskCreate+0x11a>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004478:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
 800447a:	bf98      	it	ls
 800447c:	603c      	strls	r4, [r7, #0]
 800447e:	e7c2      	b.n	8004406 <xTaskCreate+0x11a>
                    vPortFreeStack( pxStack );
 8004480:	4638      	mov	r0, r7
 8004482:	f000 ffc3 	bl	800540c <vPortFree>
        if( pxNewTCB != NULL )
 8004486:	e73e      	b.n	8004306 <xTaskCreate+0x1a>
 8004488:	200002d0 	.word	0x200002d0
 800448c:	200003bc 	.word	0x200003bc
 8004490:	20000344 	.word	0x20000344
 8004494:	20000330 	.word	0x20000330
 8004498:	2000031c 	.word	0x2000031c
 800449c:	20000300 	.word	0x20000300
 80044a0:	200002ec 	.word	0x200002ec
 80044a4:	200002d4 	.word	0x200002d4
 80044a8:	20000318 	.word	0x20000318
 80044ac:	20000314 	.word	0x20000314
 80044b0:	200002b4 	.word	0x200002b4
 80044b4:	200002c8 	.word	0x200002c8
 80044b8:	200002c4 	.word	0x200002c4

080044bc <vTaskStartScheduler>:
{
 80044bc:	b513      	push	{r0, r1, r4, lr}
        xReturn = xTaskCreate( prvIdleTask,
 80044be:	2400      	movs	r4, #0
 80044c0:	4b17      	ldr	r3, [pc, #92]	@ (8004520 <vTaskStartScheduler+0x64>)
 80044c2:	2264      	movs	r2, #100	@ 0x64
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	4917      	ldr	r1, [pc, #92]	@ (8004524 <vTaskStartScheduler+0x68>)
 80044c8:	4623      	mov	r3, r4
 80044ca:	4817      	ldr	r0, [pc, #92]	@ (8004528 <vTaskStartScheduler+0x6c>)
 80044cc:	9400      	str	r4, [sp, #0]
 80044ce:	f7ff ff0d 	bl	80042ec <xTaskCreate>
        if( xReturn == pdPASS )
 80044d2:	2801      	cmp	r0, #1
 80044d4:	d119      	bne.n	800450a <vTaskStartScheduler+0x4e>
            xReturn = xTimerCreateTimerTask();
 80044d6:	f000 fd5f 	bl	8004f98 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 80044da:	2801      	cmp	r0, #1
 80044dc:	d115      	bne.n	800450a <vTaskStartScheduler+0x4e>
 80044de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 80044ee:	f04f 32ff 	mov.w	r2, #4294967295
 80044f2:	4b0e      	ldr	r3, [pc, #56]	@ (800452c <vTaskStartScheduler+0x70>)
 80044f4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80044f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004530 <vTaskStartScheduler+0x74>)
 80044f8:	6018      	str	r0, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004534 <vTaskStartScheduler+0x78>)
 80044fc:	601c      	str	r4, [r3, #0]
        xPortStartScheduler();
 80044fe:	f000 fe49 	bl	8005194 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 8004502:	4b0d      	ldr	r3, [pc, #52]	@ (8004538 <vTaskStartScheduler+0x7c>)
 8004504:	681b      	ldr	r3, [r3, #0]
}
 8004506:	b002      	add	sp, #8
 8004508:	bd10      	pop	{r4, pc}
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800450a:	3001      	adds	r0, #1
 800450c:	d1f9      	bne.n	8004502 <vTaskStartScheduler+0x46>
 800450e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	e7fe      	b.n	800451e <vTaskStartScheduler+0x62>
 8004520:	200002ac 	.word	0x200002ac
 8004524:	0800557f 	.word	0x0800557f
 8004528:	08004285 	.word	0x08004285
 800452c:	200002b0 	.word	0x200002b0
 8004530:	200002c4 	.word	0x200002c4
 8004534:	200002cc 	.word	0x200002cc
 8004538:	2000003c 	.word	0x2000003c

0800453c <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 800453c:	4a02      	ldr	r2, [pc, #8]	@ (8004548 <vTaskSuspendAll+0xc>)
 800453e:	6813      	ldr	r3, [r2, #0]
 8004540:	3301      	adds	r3, #1
 8004542:	6013      	str	r3, [r2, #0]
}
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	200002a8 	.word	0x200002a8

0800454c <xTaskGetTickCount>:
        xTicks = xTickCount;
 800454c:	4b01      	ldr	r3, [pc, #4]	@ (8004554 <xTaskGetTickCount+0x8>)
 800454e:	6818      	ldr	r0, [r3, #0]
}
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	200002cc 	.word	0x200002cc

08004558 <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
 8004558:	4b01      	ldr	r3, [pc, #4]	@ (8004560 <uxTaskGetNumberOfTasks+0x8>)
 800455a:	6818      	ldr	r0, [r3, #0]
}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	200002d0 	.word	0x200002d0

08004564 <xTaskIncrementTick>:
{
 8004564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004568:	4b4e      	ldr	r3, [pc, #312]	@ (80046a4 <xTaskIncrementTick+0x140>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	f040 8092 	bne.w	8004696 <xTaskIncrementTick+0x132>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004572:	4b4d      	ldr	r3, [pc, #308]	@ (80046a8 <xTaskIncrementTick+0x144>)
 8004574:	681c      	ldr	r4, [r3, #0]
 8004576:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8004578:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800457a:	b9bc      	cbnz	r4, 80045ac <xTaskIncrementTick+0x48>
            taskSWITCH_DELAYED_LISTS();
 800457c:	4b4b      	ldr	r3, [pc, #300]	@ (80046ac <xTaskIncrementTick+0x148>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	b142      	cbz	r2, 8004596 <xTaskIncrementTick+0x32>
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	e7fe      	b.n	8004594 <xTaskIncrementTick+0x30>
 8004596:	4a46      	ldr	r2, [pc, #280]	@ (80046b0 <xTaskIncrementTick+0x14c>)
 8004598:	6819      	ldr	r1, [r3, #0]
 800459a:	6810      	ldr	r0, [r2, #0]
 800459c:	6018      	str	r0, [r3, #0]
 800459e:	6011      	str	r1, [r2, #0]
 80045a0:	4a44      	ldr	r2, [pc, #272]	@ (80046b4 <xTaskIncrementTick+0x150>)
 80045a2:	6813      	ldr	r3, [r2, #0]
 80045a4:	3301      	adds	r3, #1
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	f7ff fe5a 	bl	8004260 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 80045ac:	f8df c108 	ldr.w	ip, [pc, #264]	@ 80046b8 <xTaskIncrementTick+0x154>
    BaseType_t xSwitchRequired = pdFALSE;
 80045b0:	2000      	movs	r0, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
 80045b2:	f8dc 3000 	ldr.w	r3, [ip]
 80045b6:	4a41      	ldr	r2, [pc, #260]	@ (80046bc <xTaskIncrementTick+0x158>)
 80045b8:	429c      	cmp	r4, r3
 80045ba:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 80046c0 <xTaskIncrementTick+0x15c>
 80045be:	d20f      	bcs.n	80045e0 <xTaskIncrementTick+0x7c>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045c0:	2114      	movs	r1, #20
 80045c2:	f8d9 3000 	ldr.w	r3, [r9]
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	434b      	muls	r3, r1
 80045ca:	58d3      	ldr	r3, [r2, r3]
                xSwitchRequired = pdTRUE;
 80045cc:	2b02      	cmp	r3, #2
            if( xYieldPending != pdFALSE )
 80045ce:	4b3d      	ldr	r3, [pc, #244]	@ (80046c4 <xTaskIncrementTick+0x160>)
                xSwitchRequired = pdTRUE;
 80045d0:	bf28      	it	cs
 80045d2:	2001      	movcs	r0, #1
            if( xYieldPending != pdFALSE )
 80045d4:	681b      	ldr	r3, [r3, #0]
                xSwitchRequired = pdTRUE;
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bf18      	it	ne
 80045da:	2001      	movne	r0, #1
}
 80045dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045e0:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 80046ac <xTaskIncrementTick+0x148>
                    prvAddTaskToReadyList( pxTCB );
 80045e4:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 80046c8 <xTaskIncrementTick+0x164>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045e8:	f8d8 3000 	ldr.w	r3, [r8]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	b923      	cbnz	r3, 80045fa <xTaskIncrementTick+0x96>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f0:	f04f 33ff 	mov.w	r3, #4294967295
 80045f4:	f8cc 3000 	str.w	r3, [ip]
                    break;
 80045f8:	e7e2      	b.n	80045c0 <xTaskIncrementTick+0x5c>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fa:	f8d8 3000 	ldr.w	r3, [r8]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004602:	6859      	ldr	r1, [r3, #4]
                    if( xConstTickCount < xItemValue )
 8004604:	428c      	cmp	r4, r1
 8004606:	d202      	bcs.n	800460e <xTaskIncrementTick+0xaa>
                        xNextTaskUnblockTime = xItemValue;
 8004608:	f8cc 1000 	str.w	r1, [ip]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800460c:	e7d8      	b.n	80045c0 <xTaskIncrementTick+0x5c>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800460e:	695d      	ldr	r5, [r3, #20]
 8004610:	e9d3 1602 	ldrd	r1, r6, [r3, #8]
 8004614:	608e      	str	r6, [r1, #8]
 8004616:	6071      	str	r1, [r6, #4]
 8004618:	6869      	ldr	r1, [r5, #4]
 800461a:	1d1f      	adds	r7, r3, #4
 800461c:	42b9      	cmp	r1, r7
 800461e:	f04f 0100 	mov.w	r1, #0
 8004622:	bf08      	it	eq
 8004624:	606e      	streq	r6, [r5, #4]
 8004626:	6159      	str	r1, [r3, #20]
 8004628:	6829      	ldr	r1, [r5, #0]
 800462a:	3901      	subs	r1, #1
 800462c:	6029      	str	r1, [r5, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800462e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8004630:	b17d      	cbz	r5, 8004652 <xTaskIncrementTick+0xee>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004632:	e9d3 1607 	ldrd	r1, r6, [r3, #28]
 8004636:	608e      	str	r6, [r1, #8]
 8004638:	6071      	str	r1, [r6, #4]
 800463a:	6869      	ldr	r1, [r5, #4]
 800463c:	f103 0a18 	add.w	sl, r3, #24
 8004640:	4551      	cmp	r1, sl
 8004642:	f04f 0100 	mov.w	r1, #0
 8004646:	bf08      	it	eq
 8004648:	606e      	streq	r6, [r5, #4]
 800464a:	6299      	str	r1, [r3, #40]	@ 0x28
 800464c:	6829      	ldr	r1, [r5, #0]
 800464e:	3901      	subs	r1, #1
 8004650:	6029      	str	r1, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004652:	2501      	movs	r5, #1
 8004654:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004656:	f8de 6000 	ldr.w	r6, [lr]
 800465a:	408d      	lsls	r5, r1
 800465c:	4335      	orrs	r5, r6
 800465e:	f8ce 5000 	str.w	r5, [lr]
 8004662:	2514      	movs	r5, #20
 8004664:	434d      	muls	r5, r1
 8004666:	eb02 0a05 	add.w	sl, r2, r5
 800466a:	f8da 6004 	ldr.w	r6, [sl, #4]
 800466e:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8004672:	609e      	str	r6, [r3, #8]
 8004674:	f8c3 b00c 	str.w	fp, [r3, #12]
 8004678:	f8cb 7004 	str.w	r7, [fp, #4]
 800467c:	60b7      	str	r7, [r6, #8]
 800467e:	f8c3 a014 	str.w	sl, [r3, #20]
 8004682:	5953      	ldr	r3, [r2, r5]
 8004684:	3301      	adds	r3, #1
 8004686:	5153      	str	r3, [r2, r5]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004688:	f8d9 3000 	ldr.w	r3, [r9]
 800468c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            xSwitchRequired = pdTRUE;
 800468e:	4299      	cmp	r1, r3
 8004690:	bf88      	it	hi
 8004692:	2001      	movhi	r0, #1
 8004694:	e7a8      	b.n	80045e8 <xTaskIncrementTick+0x84>
        ++xPendedTicks;
 8004696:	4a0d      	ldr	r2, [pc, #52]	@ (80046cc <xTaskIncrementTick+0x168>)
    BaseType_t xSwitchRequired = pdFALSE;
 8004698:	2000      	movs	r0, #0
        ++xPendedTicks;
 800469a:	6813      	ldr	r3, [r2, #0]
 800469c:	3301      	adds	r3, #1
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	e79c      	b.n	80045dc <xTaskIncrementTick+0x78>
 80046a2:	bf00      	nop
 80046a4:	200002a8 	.word	0x200002a8
 80046a8:	200002cc 	.word	0x200002cc
 80046ac:	20000318 	.word	0x20000318
 80046b0:	20000314 	.word	0x20000314
 80046b4:	200002b8 	.word	0x200002b8
 80046b8:	200002b0 	.word	0x200002b0
 80046bc:	20000344 	.word	0x20000344
 80046c0:	200003bc 	.word	0x200003bc
 80046c4:	200002bc 	.word	0x200002bc
 80046c8:	200002c8 	.word	0x200002c8
 80046cc:	200002c0 	.word	0x200002c0

080046d0 <xTaskResumeAll>:
{
 80046d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    configASSERT( uxSchedulerSuspended );
 80046d4:	4c45      	ldr	r4, [pc, #276]	@ (80047ec <xTaskResumeAll+0x11c>)
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	b943      	cbnz	r3, 80046ec <xTaskResumeAll+0x1c>
 80046da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	e7fe      	b.n	80046ea <xTaskResumeAll+0x1a>
    taskENTER_CRITICAL();
 80046ec:	f000 fcd2 	bl	8005094 <vPortEnterCritical>
        --uxSchedulerSuspended;
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	6023      	str	r3, [r4, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	b12b      	cbz	r3, 8004706 <xTaskResumeAll+0x36>
    BaseType_t xAlreadyYielded = pdFALSE;
 80046fa:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 80046fc:	f000 fcea 	bl	80050d4 <vPortExitCritical>
}
 8004700:	4620      	mov	r0, r4
 8004702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004706:	4a3a      	ldr	r2, [pc, #232]	@ (80047f0 <xTaskResumeAll+0x120>)
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	2a00      	cmp	r2, #0
 800470c:	d0f5      	beq.n	80046fa <xTaskResumeAll+0x2a>
                    prvAddTaskToReadyList( pxTCB );
 800470e:	f04f 0c01 	mov.w	ip, #1
 8004712:	f04f 0e14 	mov.w	lr, #20
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004716:	4e37      	ldr	r6, [pc, #220]	@ (80047f4 <xTaskResumeAll+0x124>)
                    prvAddTaskToReadyList( pxTCB );
 8004718:	4f37      	ldr	r7, [pc, #220]	@ (80047f8 <xTaskResumeAll+0x128>)
 800471a:	4a38      	ldr	r2, [pc, #224]	@ (80047fc <xTaskResumeAll+0x12c>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800471c:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8004800 <xTaskResumeAll+0x130>
                        xYieldPending = pdTRUE;
 8004720:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 8004804 <xTaskResumeAll+0x134>
 8004724:	e03f      	b.n	80047a6 <xTaskResumeAll+0xd6>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004726:	68f3      	ldr	r3, [r6, #12]
 8004728:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800472a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800472c:	e9d3 1407 	ldrd	r1, r4, [r3, #28]
 8004730:	608c      	str	r4, [r1, #8]
 8004732:	6061      	str	r1, [r4, #4]
 8004734:	6841      	ldr	r1, [r0, #4]
 8004736:	f103 0518 	add.w	r5, r3, #24
 800473a:	42a9      	cmp	r1, r5
 800473c:	f04f 0100 	mov.w	r1, #0
 8004740:	bf08      	it	eq
 8004742:	6044      	streq	r4, [r0, #4]
 8004744:	6299      	str	r1, [r3, #40]	@ 0x28
 8004746:	6801      	ldr	r1, [r0, #0]
 8004748:	3901      	subs	r1, #1
 800474a:	6001      	str	r1, [r0, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800474c:	6958      	ldr	r0, [r3, #20]
 800474e:	e9d3 1402 	ldrd	r1, r4, [r3, #8]
 8004752:	608c      	str	r4, [r1, #8]
 8004754:	6061      	str	r1, [r4, #4]
 8004756:	6841      	ldr	r1, [r0, #4]
 8004758:	1d1d      	adds	r5, r3, #4
 800475a:	42a9      	cmp	r1, r5
 800475c:	6801      	ldr	r1, [r0, #0]
 800475e:	bf08      	it	eq
 8004760:	6044      	streq	r4, [r0, #4]
 8004762:	3901      	subs	r1, #1
 8004764:	6001      	str	r1, [r0, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004766:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004768:	683c      	ldr	r4, [r7, #0]
 800476a:	fa0c f001 	lsl.w	r0, ip, r1
 800476e:	4320      	orrs	r0, r4
 8004770:	6038      	str	r0, [r7, #0]
 8004772:	fb0e f001 	mul.w	r0, lr, r1
 8004776:	eb02 0a00 	add.w	sl, r2, r0
 800477a:	f8da 4004 	ldr.w	r4, [sl, #4]
 800477e:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8004782:	609c      	str	r4, [r3, #8]
 8004784:	f8c3 b00c 	str.w	fp, [r3, #12]
 8004788:	f8cb 5004 	str.w	r5, [fp, #4]
 800478c:	60a5      	str	r5, [r4, #8]
 800478e:	5814      	ldr	r4, [r2, r0]
 8004790:	f8c3 a014 	str.w	sl, [r3, #20]
 8004794:	3401      	adds	r4, #1
 8004796:	5014      	str	r4, [r2, r0]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004798:	f8d8 0000 	ldr.w	r0, [r8]
 800479c:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800479e:	4281      	cmp	r1, r0
 80047a0:	d301      	bcc.n	80047a6 <xTaskResumeAll+0xd6>
                        xYieldPending = pdTRUE;
 80047a2:	f8c9 c000 	str.w	ip, [r9]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047a6:	6831      	ldr	r1, [r6, #0]
 80047a8:	2900      	cmp	r1, #0
 80047aa:	d1bc      	bne.n	8004726 <xTaskResumeAll+0x56>
                if( pxTCB != NULL )
 80047ac:	b10b      	cbz	r3, 80047b2 <xTaskResumeAll+0xe2>
                    prvResetNextTaskUnblockTime();
 80047ae:	f7ff fd57 	bl	8004260 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047b2:	4d15      	ldr	r5, [pc, #84]	@ (8004808 <xTaskResumeAll+0x138>)
 80047b4:	682c      	ldr	r4, [r5, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
 80047b6:	b144      	cbz	r4, 80047ca <xTaskResumeAll+0xfa>
                                xYieldPending = pdTRUE;
 80047b8:	2701      	movs	r7, #1
 80047ba:	4e12      	ldr	r6, [pc, #72]	@ (8004804 <xTaskResumeAll+0x134>)
                            if( xTaskIncrementTick() != pdFALSE )
 80047bc:	f7ff fed2 	bl	8004564 <xTaskIncrementTick>
 80047c0:	b100      	cbz	r0, 80047c4 <xTaskResumeAll+0xf4>
                                xYieldPending = pdTRUE;
 80047c2:	6037      	str	r7, [r6, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80047c4:	3c01      	subs	r4, #1
 80047c6:	d1f9      	bne.n	80047bc <xTaskResumeAll+0xec>
                        xPendedTicks = 0;
 80047c8:	602c      	str	r4, [r5, #0]
                if( xYieldPending != pdFALSE )
 80047ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004804 <xTaskResumeAll+0x134>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d093      	beq.n	80046fa <xTaskResumeAll+0x2a>
                    taskYIELD_IF_USING_PREEMPTION();
 80047d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80047d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047da:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	f3bf 8f6f 	isb	sy
                        xAlreadyYielded = pdTRUE;
 80047e6:	2401      	movs	r4, #1
 80047e8:	e788      	b.n	80046fc <xTaskResumeAll+0x2c>
 80047ea:	bf00      	nop
 80047ec:	200002a8 	.word	0x200002a8
 80047f0:	200002d0 	.word	0x200002d0
 80047f4:	20000300 	.word	0x20000300
 80047f8:	200002c8 	.word	0x200002c8
 80047fc:	20000344 	.word	0x20000344
 8004800:	200003bc 	.word	0x200003bc
 8004804:	200002bc 	.word	0x200002bc
 8004808:	200002c0 	.word	0x200002c0

0800480c <vTaskDelay>:
    {
 800480c:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 800480e:	b950      	cbnz	r0, 8004826 <vTaskDelay+0x1a>
            portYIELD_WITHIN_API();
 8004810:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004818:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	f3bf 8f6f 	isb	sy
    }
 8004824:	bd08      	pop	{r3, pc}
            configASSERT( uxSchedulerSuspended == 0 );
 8004826:	4b0a      	ldr	r3, [pc, #40]	@ (8004850 <vTaskDelay+0x44>)
 8004828:	6819      	ldr	r1, [r3, #0]
 800482a:	b141      	cbz	r1, 800483e <vTaskDelay+0x32>
 800482c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	e7fe      	b.n	800483c <vTaskDelay+0x30>
            vTaskSuspendAll();
 800483e:	f7ff fe7d 	bl	800453c <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004842:	f7ff fcbd 	bl	80041c0 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 8004846:	f7ff ff43 	bl	80046d0 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 800484a:	2800      	cmp	r0, #0
 800484c:	d0e0      	beq.n	8004810 <vTaskDelay+0x4>
 800484e:	e7e9      	b.n	8004824 <vTaskDelay+0x18>
 8004850:	200002a8 	.word	0x200002a8

08004854 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004854:	4b17      	ldr	r3, [pc, #92]	@ (80048b4 <vTaskSwitchContext+0x60>)
{
 8004856:	b510      	push	{r4, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4b17      	ldr	r3, [pc, #92]	@ (80048b8 <vTaskSwitchContext+0x64>)
 800485c:	b112      	cbz	r2, 8004864 <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
 800485e:	2201      	movs	r2, #1
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004860:	601a      	str	r2, [r3, #0]
}
 8004862:	bd10      	pop	{r4, pc}
        xYieldPending = pdFALSE;
 8004864:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004866:	4b15      	ldr	r3, [pc, #84]	@ (80048bc <vTaskSwitchContext+0x68>)
 8004868:	681a      	ldr	r2, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800486a:	fab2 f282 	clz	r2, r2
 800486e:	2314      	movs	r3, #20
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	f1c2 021f 	rsb	r2, r2, #31
 8004876:	4353      	muls	r3, r2
 8004878:	4911      	ldr	r1, [pc, #68]	@ (80048c0 <vTaskSwitchContext+0x6c>)
 800487a:	58cc      	ldr	r4, [r1, r3]
 800487c:	18c8      	adds	r0, r1, r3
 800487e:	b944      	cbnz	r4, 8004892 <vTaskSwitchContext+0x3e>
        __asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	e7fe      	b.n	8004890 <vTaskSwitchContext+0x3c>
 8004892:	6844      	ldr	r4, [r0, #4]
 8004894:	3308      	adds	r3, #8
 8004896:	6864      	ldr	r4, [r4, #4]
 8004898:	440b      	add	r3, r1
 800489a:	429c      	cmp	r4, r3
 800489c:	bf08      	it	eq
 800489e:	6863      	ldreq	r3, [r4, #4]
 80048a0:	6044      	str	r4, [r0, #4]
 80048a2:	bf08      	it	eq
 80048a4:	6043      	streq	r3, [r0, #4]
 80048a6:	2314      	movs	r3, #20
 80048a8:	fb03 1102 	mla	r1, r3, r2, r1
 80048ac:	684b      	ldr	r3, [r1, #4]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	4b04      	ldr	r3, [pc, #16]	@ (80048c4 <vTaskSwitchContext+0x70>)
 80048b2:	e7d5      	b.n	8004860 <vTaskSwitchContext+0xc>
 80048b4:	200002a8 	.word	0x200002a8
 80048b8:	200002bc 	.word	0x200002bc
 80048bc:	200002c8 	.word	0x200002c8
 80048c0:	20000344 	.word	0x20000344
 80048c4:	200003bc 	.word	0x200003bc

080048c8 <vTaskPlaceOnEventList>:
{
 80048c8:	b510      	push	{r4, lr}
 80048ca:	460c      	mov	r4, r1
    configASSERT( pxEventList );
 80048cc:	b940      	cbnz	r0, 80048e0 <vTaskPlaceOnEventList+0x18>
 80048ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	e7fe      	b.n	80048de <vTaskPlaceOnEventList+0x16>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048e0:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <vTaskPlaceOnEventList+0x30>)
 80048e2:	6819      	ldr	r1, [r3, #0]
 80048e4:	3118      	adds	r1, #24
 80048e6:	f7ff f827 	bl	8003938 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048ea:	4620      	mov	r0, r4
}
 80048ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048f0:	2101      	movs	r1, #1
 80048f2:	f7ff bc65 	b.w	80041c0 <prvAddCurrentTaskToDelayedList>
 80048f6:	bf00      	nop
 80048f8:	200003bc 	.word	0x200003bc

080048fc <vTaskPlaceOnEventListRestricted>:
    {
 80048fc:	b470      	push	{r4, r5, r6}
 80048fe:	460c      	mov	r4, r1
 8004900:	4611      	mov	r1, r2
        configASSERT( pxEventList );
 8004902:	b940      	cbnz	r0, 8004916 <vTaskPlaceOnEventListRestricted+0x1a>
 8004904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	e7fe      	b.n	8004914 <vTaskPlaceOnEventListRestricted+0x18>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004916:	4b0f      	ldr	r3, [pc, #60]	@ (8004954 <vTaskPlaceOnEventListRestricted+0x58>)
 8004918:	6842      	ldr	r2, [r0, #4]
 800491a:	681d      	ldr	r5, [r3, #0]
 800491c:	6896      	ldr	r6, [r2, #8]
 800491e:	61ea      	str	r2, [r5, #28]
 8004920:	681d      	ldr	r5, [r3, #0]
            xTicksToWait = portMAX_DELAY;
 8004922:	2900      	cmp	r1, #0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004924:	622e      	str	r6, [r5, #32]
 8004926:	681d      	ldr	r5, [r3, #0]
 8004928:	f105 0518 	add.w	r5, r5, #24
 800492c:	6075      	str	r5, [r6, #4]
 800492e:	681d      	ldr	r5, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f105 0518 	add.w	r5, r5, #24
 8004936:	6095      	str	r5, [r2, #8]
 8004938:	6298      	str	r0, [r3, #40]	@ 0x28
 800493a:	6803      	ldr	r3, [r0, #0]
 800493c:	f103 0301 	add.w	r3, r3, #1
 8004940:	6003      	str	r3, [r0, #0]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004942:	bf08      	it	eq
 8004944:	4620      	moveq	r0, r4
    }
 8004946:	bc70      	pop	{r4, r5, r6}
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004948:	bf18      	it	ne
 800494a:	f04f 30ff 	movne.w	r0, #4294967295
 800494e:	f7ff bc37 	b.w	80041c0 <prvAddCurrentTaskToDelayedList>
 8004952:	bf00      	nop
 8004954:	200003bc 	.word	0x200003bc

08004958 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004958:	68c3      	ldr	r3, [r0, #12]
{
 800495a:	b5f0      	push	{r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800495c:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
 800495e:	b943      	cbnz	r3, 8004972 <xTaskRemoveFromEventList+0x1a>
 8004960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	e7fe      	b.n	8004970 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004972:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004974:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 8004978:	6081      	str	r1, [r0, #8]
 800497a:	6048      	str	r0, [r1, #4]
 800497c:	6850      	ldr	r0, [r2, #4]
 800497e:	f103 0418 	add.w	r4, r3, #24
 8004982:	42a0      	cmp	r0, r4
 8004984:	bf08      	it	eq
 8004986:	6051      	streq	r1, [r2, #4]
 8004988:	2100      	movs	r1, #0
 800498a:	6299      	str	r1, [r3, #40]	@ 0x28
 800498c:	6811      	ldr	r1, [r2, #0]
 800498e:	3901      	subs	r1, #1
 8004990:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004992:	4a1e      	ldr	r2, [pc, #120]	@ (8004a0c <xTaskRemoveFromEventList+0xb4>)
 8004994:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	2a00      	cmp	r2, #0
 800499a:	d12a      	bne.n	80049f2 <xTaskRemoveFromEventList+0x9a>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800499c:	e9d3 4002 	ldrd	r4, r0, [r3, #8]
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	60a0      	str	r0, [r4, #8]
 80049a4:	6044      	str	r4, [r0, #4]
 80049a6:	6854      	ldr	r4, [r2, #4]
 80049a8:	1d1d      	adds	r5, r3, #4
 80049aa:	42ac      	cmp	r4, r5
 80049ac:	bf08      	it	eq
 80049ae:	6050      	streq	r0, [r2, #4]
 80049b0:	6810      	ldr	r0, [r2, #0]
 80049b2:	3801      	subs	r0, #1
 80049b4:	6010      	str	r0, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80049b6:	2201      	movs	r2, #1
 80049b8:	4815      	ldr	r0, [pc, #84]	@ (8004a10 <xTaskRemoveFromEventList+0xb8>)
 80049ba:	408a      	lsls	r2, r1
 80049bc:	6804      	ldr	r4, [r0, #0]
 80049be:	4322      	orrs	r2, r4
 80049c0:	6002      	str	r2, [r0, #0]
 80049c2:	2214      	movs	r2, #20
 80049c4:	434a      	muls	r2, r1
 80049c6:	4813      	ldr	r0, [pc, #76]	@ (8004a14 <xTaskRemoveFromEventList+0xbc>)
 80049c8:	1886      	adds	r6, r0, r2
 80049ca:	6874      	ldr	r4, [r6, #4]
 80049cc:	68a7      	ldr	r7, [r4, #8]
 80049ce:	609c      	str	r4, [r3, #8]
 80049d0:	60df      	str	r7, [r3, #12]
 80049d2:	607d      	str	r5, [r7, #4]
 80049d4:	60a5      	str	r5, [r4, #8]
 80049d6:	615e      	str	r6, [r3, #20]
 80049d8:	5883      	ldr	r3, [r0, r2]
 80049da:	3301      	adds	r3, #1
 80049dc:	5083      	str	r3, [r0, r2]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049de:	4b0e      	ldr	r3, [pc, #56]	@ (8004a18 <xTaskRemoveFromEventList+0xc0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e4:	4299      	cmp	r1, r3
        xYieldPending = pdTRUE;
 80049e6:	bf85      	ittet	hi
 80049e8:	2001      	movhi	r0, #1
 80049ea:	4b0c      	ldrhi	r3, [pc, #48]	@ (8004a1c <xTaskRemoveFromEventList+0xc4>)
        xReturn = pdFALSE;
 80049ec:	2000      	movls	r0, #0
        xYieldPending = pdTRUE;
 80049ee:	6018      	strhi	r0, [r3, #0]
}
 80049f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049f2:	4a0b      	ldr	r2, [pc, #44]	@ (8004a20 <xTaskRemoveFromEventList+0xc8>)
 80049f4:	6850      	ldr	r0, [r2, #4]
 80049f6:	6885      	ldr	r5, [r0, #8]
 80049f8:	61d8      	str	r0, [r3, #28]
 80049fa:	621d      	str	r5, [r3, #32]
 80049fc:	606c      	str	r4, [r5, #4]
 80049fe:	6084      	str	r4, [r0, #8]
 8004a00:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a02:	6813      	ldr	r3, [r2, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	e7e9      	b.n	80049de <xTaskRemoveFromEventList+0x86>
 8004a0a:	bf00      	nop
 8004a0c:	200002a8 	.word	0x200002a8
 8004a10:	200002c8 	.word	0x200002c8
 8004a14:	20000344 	.word	0x20000344
 8004a18:	200003bc 	.word	0x200003bc
 8004a1c:	200002bc 	.word	0x200002bc
 8004a20:	20000300 	.word	0x20000300

08004a24 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a24:	4b03      	ldr	r3, [pc, #12]	@ (8004a34 <vTaskInternalSetTimeOutState+0x10>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004a2a:	4b03      	ldr	r3, [pc, #12]	@ (8004a38 <vTaskInternalSetTimeOutState+0x14>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6043      	str	r3, [r0, #4]
}
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	200002b8 	.word	0x200002b8
 8004a38:	200002cc 	.word	0x200002cc

08004a3c <xTaskCheckForTimeOut>:
{
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	460d      	mov	r5, r1
    configASSERT( pxTimeOut );
 8004a40:	4604      	mov	r4, r0
 8004a42:	b940      	cbnz	r0, 8004a56 <xTaskCheckForTimeOut+0x1a>
 8004a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	e7fe      	b.n	8004a54 <xTaskCheckForTimeOut+0x18>
    configASSERT( pxTicksToWait );
 8004a56:	b941      	cbnz	r1, 8004a6a <xTaskCheckForTimeOut+0x2e>
 8004a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	e7fe      	b.n	8004a68 <xTaskCheckForTimeOut+0x2c>
    taskENTER_CRITICAL();
 8004a6a:	f000 fb13 	bl	8005094 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 8004a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004aac <xTaskCheckForTimeOut+0x70>)
 8004a70:	6819      	ldr	r1, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 8004a72:	682b      	ldr	r3, [r5, #0]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	d017      	beq.n	8004aa8 <xTaskCheckForTimeOut+0x6c>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a78:	480d      	ldr	r0, [pc, #52]	@ (8004ab0 <xTaskCheckForTimeOut+0x74>)
 8004a7a:	6826      	ldr	r6, [r4, #0]
 8004a7c:	6800      	ldr	r0, [r0, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a7e:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a80:	4286      	cmp	r6, r0
 8004a82:	d008      	beq.n	8004a96 <xTaskCheckForTimeOut+0x5a>
 8004a84:	428a      	cmp	r2, r1
 8004a86:	d806      	bhi.n	8004a96 <xTaskCheckForTimeOut+0x5a>
            *pxTicksToWait = ( TickType_t ) 0;
 8004a88:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 8004a8a:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 8004a8c:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 8004a8e:	f000 fb21 	bl	80050d4 <vPortExitCritical>
}
 8004a92:	4620      	mov	r0, r4
 8004a94:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a96:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a98:	4283      	cmp	r3, r0
 8004a9a:	d9f5      	bls.n	8004a88 <xTaskCheckForTimeOut+0x4c>
            *pxTicksToWait -= xElapsedTime;
 8004a9c:	1a5b      	subs	r3, r3, r1
 8004a9e:	4413      	add	r3, r2
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004aa0:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
 8004aa2:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004aa4:	f7ff ffbe 	bl	8004a24 <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
 8004aa8:	2400      	movs	r4, #0
 8004aaa:	e7f0      	b.n	8004a8e <xTaskCheckForTimeOut+0x52>
 8004aac:	200002cc 	.word	0x200002cc
 8004ab0:	200002b8 	.word	0x200002b8

08004ab4 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	4b01      	ldr	r3, [pc, #4]	@ (8004abc <vTaskMissedYield+0x8>)
 8004ab8:	601a      	str	r2, [r3, #0]
}
 8004aba:	4770      	bx	lr
 8004abc:	200002bc 	.word	0x200002bc

08004ac0 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 8004ac0:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <xTaskGetSchedulerState+0x18>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	b133      	cbz	r3, 8004ad4 <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ac6:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <xTaskGetSchedulerState+0x1c>)
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	fab0 f080 	clz	r0, r0
 8004ace:	0940      	lsrs	r0, r0, #5
 8004ad0:	0040      	lsls	r0, r0, #1
 8004ad2:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004ad4:	2001      	movs	r0, #1
    }
 8004ad6:	4770      	bx	lr
 8004ad8:	200002c4 	.word	0x200002c4
 8004adc:	200002a8 	.word	0x200002a8

08004ae0 <xTaskPriorityInherit>:
    {
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d037      	beq.n	8004b58 <xTaskPriorityInherit+0x78>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004ae8:	4d22      	ldr	r5, [pc, #136]	@ (8004b74 <xTaskPriorityInherit+0x94>)
 8004aea:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004aec:	682a      	ldr	r2, [r5, #0]
 8004aee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d236      	bcs.n	8004b62 <xTaskPriorityInherit+0x82>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004af4:	6982      	ldr	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004af6:	4e20      	ldr	r6, [pc, #128]	@ (8004b78 <xTaskPriorityInherit+0x98>)
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004af8:	2a00      	cmp	r2, #0
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004afa:	bfa1      	itttt	ge
 8004afc:	682a      	ldrge	r2, [r5, #0]
 8004afe:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 8004b00:	f1c2 0206 	rsbge	r2, r2, #6
 8004b04:	6182      	strge	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b06:	2214      	movs	r2, #20
 8004b08:	fb02 6303 	mla	r3, r2, r3, r6
 8004b0c:	6942      	ldr	r2, [r0, #20]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d123      	bne.n	8004b5a <xTaskPriorityInherit+0x7a>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b12:	1d07      	adds	r7, r0, #4
 8004b14:	4638      	mov	r0, r7
 8004b16:	f7fe ff26 	bl	8003966 <uxListRemove>
 8004b1a:	4918      	ldr	r1, [pc, #96]	@ (8004b7c <xTaskPriorityInherit+0x9c>)
 8004b1c:	b930      	cbnz	r0, 8004b2c <xTaskPriorityInherit+0x4c>
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004b1e:	2201      	movs	r2, #1
 8004b20:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004b22:	680b      	ldr	r3, [r1, #0]
 8004b24:	4082      	lsls	r2, r0
 8004b26:	ea23 0302 	bic.w	r3, r3, r2
 8004b2a:	600b      	str	r3, [r1, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b2c:	2201      	movs	r2, #1
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b2e:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b30:	6808      	ldr	r0, [r1, #0]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b34:	409a      	lsls	r2, r3
 8004b36:	4302      	orrs	r2, r0
 8004b38:	600a      	str	r2, [r1, #0]
 8004b3a:	2214      	movs	r2, #20
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b3e:	4353      	muls	r3, r2
 8004b40:	18f1      	adds	r1, r6, r3
 8004b42:	684a      	ldr	r2, [r1, #4]
 8004b44:	6890      	ldr	r0, [r2, #8]
 8004b46:	60a2      	str	r2, [r4, #8]
 8004b48:	60e0      	str	r0, [r4, #12]
 8004b4a:	6047      	str	r7, [r0, #4]
 8004b4c:	6097      	str	r7, [r2, #8]
 8004b4e:	58f2      	ldr	r2, [r6, r3]
 8004b50:	6161      	str	r1, [r4, #20]
 8004b52:	3201      	adds	r2, #1
 8004b54:	50f2      	str	r2, [r6, r3]
                xReturn = pdTRUE;
 8004b56:	2001      	movs	r0, #1
    }
 8004b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b5a:	682b      	ldr	r3, [r5, #0]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8004b60:	e7f9      	b.n	8004b56 <xTaskPriorityInherit+0x76>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004b62:	682b      	ldr	r3, [r5, #0]
 8004b64:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8004b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b68:	4298      	cmp	r0, r3
 8004b6a:	bf2c      	ite	cs
 8004b6c:	2000      	movcs	r0, #0
 8004b6e:	2001      	movcc	r0, #1
 8004b70:	e7f2      	b.n	8004b58 <xTaskPriorityInherit+0x78>
 8004b72:	bf00      	nop
 8004b74:	200003bc 	.word	0x200003bc
 8004b78:	20000344 	.word	0x20000344
 8004b7c:	200002c8 	.word	0x200002c8

08004b80 <xTaskPriorityDisinherit>:
    {
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 8004b82:	4604      	mov	r4, r0
 8004b84:	b908      	cbnz	r0, 8004b8a <xTaskPriorityDisinherit+0xa>
        BaseType_t xReturn = pdFALSE;
 8004b86:	2000      	movs	r0, #0
    }
 8004b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            configASSERT( pxTCB == pxCurrentTCB );
 8004b8a:	4b23      	ldr	r3, [pc, #140]	@ (8004c18 <xTaskPriorityDisinherit+0x98>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4283      	cmp	r3, r0
 8004b90:	d008      	beq.n	8004ba4 <xTaskPriorityDisinherit+0x24>
 8004b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	e7fe      	b.n	8004ba2 <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba6:	b943      	cbnz	r3, 8004bba <xTaskPriorityDisinherit+0x3a>
 8004ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	e7fe      	b.n	8004bb8 <xTaskPriorityDisinherit+0x38>
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bba:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004bbc:	6c82      	ldr	r2, [r0, #72]	@ 0x48
            ( pxTCB->uxMutexesHeld )--;
 8004bbe:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bc0:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 8004bc2:	64c3      	str	r3, [r0, #76]	@ 0x4c
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bc4:	d0df      	beq.n	8004b86 <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1dd      	bne.n	8004b86 <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bca:	1d05      	adds	r5, r0, #4
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f7fe feca 	bl	8003966 <uxListRemove>
 8004bd2:	4a12      	ldr	r2, [pc, #72]	@ (8004c1c <xTaskPriorityDisinherit+0x9c>)
 8004bd4:	b930      	cbnz	r0, 8004be4 <xTaskPriorityDisinherit+0x64>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	4081      	lsls	r1, r0
 8004bde:	ea23 0301 	bic.w	r3, r3, r1
 8004be2:	6013      	str	r3, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004be4:	2001      	movs	r0, #1
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004be6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
                    prvAddTaskToReadyList( pxTCB );
 8004be8:	6816      	ldr	r6, [r2, #0]
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bea:	f1c3 0106 	rsb	r1, r3, #6
 8004bee:	61a1      	str	r1, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004bf0:	fa00 f103 	lsl.w	r1, r0, r3
 8004bf4:	4331      	orrs	r1, r6
 8004bf6:	6011      	str	r1, [r2, #0]
 8004bf8:	2114      	movs	r1, #20
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bfa:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxTCB );
 8004bfc:	434b      	muls	r3, r1
 8004bfe:	4a08      	ldr	r2, [pc, #32]	@ (8004c20 <xTaskPriorityDisinherit+0xa0>)
 8004c00:	18d6      	adds	r6, r2, r3
 8004c02:	6871      	ldr	r1, [r6, #4]
 8004c04:	688f      	ldr	r7, [r1, #8]
 8004c06:	60a1      	str	r1, [r4, #8]
 8004c08:	60e7      	str	r7, [r4, #12]
 8004c0a:	607d      	str	r5, [r7, #4]
 8004c0c:	608d      	str	r5, [r1, #8]
 8004c0e:	58d1      	ldr	r1, [r2, r3]
 8004c10:	6166      	str	r6, [r4, #20]
 8004c12:	4401      	add	r1, r0
 8004c14:	50d1      	str	r1, [r2, r3]
        return xReturn;
 8004c16:	e7b7      	b.n	8004b88 <xTaskPriorityDisinherit+0x8>
 8004c18:	200003bc 	.word	0x200003bc
 8004c1c:	200002c8 	.word	0x200002c8
 8004c20:	20000344 	.word	0x20000344

08004c24 <vTaskPriorityDisinheritAfterTimeout>:
    {
 8004c24:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
 8004c26:	4604      	mov	r4, r0
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	d04e      	beq.n	8004cca <vTaskPriorityDisinheritAfterTimeout+0xa6>
            configASSERT( pxTCB->uxMutexesHeld );
 8004c2c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8004c2e:	b942      	cbnz	r2, 8004c42 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8004c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	e7fe      	b.n	8004c40 <vTaskPriorityDisinheritAfterTimeout+0x1c>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004c42:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8004c44:	4299      	cmp	r1, r3
 8004c46:	bf38      	it	cc
 8004c48:	4619      	movcc	r1, r3
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004c4a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004c4c:	428b      	cmp	r3, r1
 8004c4e:	d03c      	beq.n	8004cca <vTaskPriorityDisinheritAfterTimeout+0xa6>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004c50:	2a01      	cmp	r2, #1
 8004c52:	d13a      	bne.n	8004cca <vTaskPriorityDisinheritAfterTimeout+0xa6>
                    configASSERT( pxTCB != pxCurrentTCB );
 8004c54:	4a1d      	ldr	r2, [pc, #116]	@ (8004ccc <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	4282      	cmp	r2, r0
 8004c5a:	d108      	bne.n	8004c6e <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8004c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	e7fe      	b.n	8004c6c <vTaskPriorityDisinheritAfterTimeout+0x48>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c6e:	6982      	ldr	r2, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c70:	4d17      	ldr	r5, [pc, #92]	@ (8004cd0 <vTaskPriorityDisinheritAfterTimeout+0xac>)
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c72:	2a00      	cmp	r2, #0
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c74:	f04f 0214 	mov.w	r2, #20
 8004c78:	fb02 5303 	mla	r3, r2, r3, r5
 8004c7c:	6942      	ldr	r2, [r0, #20]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004c7e:	62c1      	str	r1, [r0, #44]	@ 0x2c
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c80:	bfa4      	itt	ge
 8004c82:	f1c1 0106 	rsbge	r1, r1, #6
 8004c86:	6181      	strge	r1, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d11e      	bne.n	8004cca <vTaskPriorityDisinheritAfterTimeout+0xa6>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c8c:	1d06      	adds	r6, r0, #4
 8004c8e:	4630      	mov	r0, r6
 8004c90:	f7fe fe69 	bl	8003966 <uxListRemove>
 8004c94:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004c96:	490f      	ldr	r1, [pc, #60]	@ (8004cd4 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8004c98:	b928      	cbnz	r0, 8004ca6 <vTaskPriorityDisinheritAfterTimeout+0x82>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	680a      	ldr	r2, [r1, #0]
 8004c9e:	4098      	lsls	r0, r3
 8004ca0:	ea22 0200 	bic.w	r2, r2, r0
 8004ca4:	600a      	str	r2, [r1, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	6808      	ldr	r0, [r1, #0]
 8004caa:	409a      	lsls	r2, r3
 8004cac:	4302      	orrs	r2, r0
 8004cae:	600a      	str	r2, [r1, #0]
 8004cb0:	2214      	movs	r2, #20
 8004cb2:	4353      	muls	r3, r2
 8004cb4:	18e9      	adds	r1, r5, r3
 8004cb6:	684a      	ldr	r2, [r1, #4]
 8004cb8:	6890      	ldr	r0, [r2, #8]
 8004cba:	60a2      	str	r2, [r4, #8]
 8004cbc:	60e0      	str	r0, [r4, #12]
 8004cbe:	6046      	str	r6, [r0, #4]
 8004cc0:	6096      	str	r6, [r2, #8]
 8004cc2:	58ea      	ldr	r2, [r5, r3]
 8004cc4:	6161      	str	r1, [r4, #20]
 8004cc6:	3201      	adds	r2, #1
 8004cc8:	50ea      	str	r2, [r5, r3]
    }
 8004cca:	bd70      	pop	{r4, r5, r6, pc}
 8004ccc:	200003bc 	.word	0x200003bc
 8004cd0:	20000344 	.word	0x20000344
 8004cd4:	200002c8 	.word	0x200002c8

08004cd8 <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
 8004cd8:	4b04      	ldr	r3, [pc, #16]	@ (8004cec <pvTaskIncrementMutexHeldCount+0x14>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	b11a      	cbz	r2, 8004ce6 <pvTaskIncrementMutexHeldCount+0xe>
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8004ce2:	3201      	adds	r2, #1
 8004ce4:	64ca      	str	r2, [r1, #76]	@ 0x4c
        return pxCurrentTCB;
 8004ce6:	6818      	ldr	r0, [r3, #0]
    }
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	200003bc 	.word	0x200003bc

08004cf0 <prvInsertTimerInActiveList>:
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

        if( xNextExpiryTime <= xTimeNow )
 8004cf0:	4291      	cmp	r1, r2
    {
 8004cf2:	b508      	push	{r3, lr}
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cf4:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cf6:	6100      	str	r0, [r0, #16]
        if( xNextExpiryTime <= xTimeNow )
 8004cf8:	d80a      	bhi.n	8004d10 <prvInsertTimerInActiveList+0x20>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfa:	1ad2      	subs	r2, r2, r3
 8004cfc:	6983      	ldr	r3, [r0, #24]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d20d      	bcs.n	8004d1e <prvInsertTimerInActiveList+0x2e>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d02:	4b08      	ldr	r3, [pc, #32]	@ (8004d24 <prvInsertTimerInActiveList+0x34>)
 8004d04:	1d01      	adds	r1, r0, #4
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	f7fe fe16 	bl	8003938 <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 8004d0c:	2000      	movs	r0, #0
            }
        }

        return xProcessTimerNow;
    }
 8004d0e:	bd08      	pop	{r3, pc}
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d201      	bcs.n	8004d18 <prvInsertTimerInActiveList+0x28>
 8004d14:	4299      	cmp	r1, r3
 8004d16:	d202      	bcs.n	8004d1e <prvInsertTimerInActiveList+0x2e>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d18:	4b03      	ldr	r3, [pc, #12]	@ (8004d28 <prvInsertTimerInActiveList+0x38>)
 8004d1a:	1d01      	adds	r1, r0, #4
 8004d1c:	e7f3      	b.n	8004d06 <prvInsertTimerInActiveList+0x16>
                xProcessTimerNow = pdTRUE;
 8004d1e:	2001      	movs	r0, #1
        return xProcessTimerNow;
 8004d20:	e7f5      	b.n	8004d0e <prvInsertTimerInActiveList+0x1e>
 8004d22:	bf00      	nop
 8004d24:	200003cc 	.word	0x200003cc
 8004d28:	200003d0 	.word	0x200003d0

08004d2c <prvReloadTimer>:
    {
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	4604      	mov	r4, r0
 8004d30:	460d      	mov	r5, r1
 8004d32:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004d34:	69a1      	ldr	r1, [r4, #24]
 8004d36:	462b      	mov	r3, r5
 8004d38:	4632      	mov	r2, r6
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	4429      	add	r1, r5
 8004d3e:	f7ff ffd7 	bl	8004cf0 <prvInsertTimerInActiveList>
 8004d42:	b900      	cbnz	r0, 8004d46 <prvReloadTimer+0x1a>
    }
 8004d44:	bd70      	pop	{r4, r5, r6, pc}
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004d46:	69a3      	ldr	r3, [r4, #24]
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d48:	4620      	mov	r0, r4
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004d4a:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d4c:	6a23      	ldr	r3, [r4, #32]
 8004d4e:	4798      	blx	r3
 8004d50:	e7f0      	b.n	8004d34 <prvReloadTimer+0x8>
	...

08004d54 <prvProcessExpiredTimer>:
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d54:	4b0e      	ldr	r3, [pc, #56]	@ (8004d90 <prvProcessExpiredTimer+0x3c>)
    {
 8004d56:	b570      	push	{r4, r5, r6, lr}
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d58:	681b      	ldr	r3, [r3, #0]
    {
 8004d5a:	4605      	mov	r5, r0
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d5c:	68db      	ldr	r3, [r3, #12]
    {
 8004d5e:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d60:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d62:	1d20      	adds	r0, r4, #4
 8004d64:	f7fe fdff 	bl	8003966 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d68:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8004d6c:	075a      	lsls	r2, r3, #29
 8004d6e:	d509      	bpl.n	8004d84 <prvProcessExpiredTimer+0x30>
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004d70:	4632      	mov	r2, r6
 8004d72:	4629      	mov	r1, r5
 8004d74:	4620      	mov	r0, r4
 8004d76:	f7ff ffd9 	bl	8004d2c <prvReloadTimer>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	6a23      	ldr	r3, [r4, #32]
    }
 8004d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d82:	4718      	bx	r3
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8004d8c:	e7f5      	b.n	8004d7a <prvProcessExpiredTimer+0x26>
 8004d8e:	bf00      	nop
 8004d90:	200003d0 	.word	0x200003d0

08004d94 <prvSampleTimeNow>:
    {
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
 8004d98:	f7ff fbd8 	bl	800454c <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 8004d9c:	4e0d      	ldr	r6, [pc, #52]	@ (8004dd4 <prvSampleTimeNow+0x40>)
        xTimeNow = xTaskGetTickCount();
 8004d9e:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
 8004da0:	6833      	ldr	r3, [r6, #0]
 8004da2:	4283      	cmp	r3, r0
 8004da4:	d909      	bls.n	8004dba <prvSampleTimeNow+0x26>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004da6:	4f0c      	ldr	r7, [pc, #48]	@ (8004dd8 <prvSampleTimeNow+0x44>)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	b952      	cbnz	r2, 8004dc4 <prvSampleTimeNow+0x30>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
 8004dae:	4a0b      	ldr	r2, [pc, #44]	@ (8004ddc <prvSampleTimeNow+0x48>)
 8004db0:	6811      	ldr	r1, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004db2:	6013      	str	r3, [r2, #0]
        pxCurrentTimerList = pxOverflowTimerList;
 8004db4:	6039      	str	r1, [r7, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <prvSampleTimeNow+0x28>
 8004dba:	2300      	movs	r3, #0
    }
 8004dbc:	4620      	mov	r0, r4
            *pxTimerListsWereSwitched = pdTRUE;
 8004dbe:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
 8004dc0:	6034      	str	r4, [r6, #0]
    }
 8004dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dc4:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004dc6:	f04f 31ff 	mov.w	r1, #4294967295
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	f7ff ffc2 	bl	8004d54 <prvProcessExpiredTimer>
 8004dd0:	e7ea      	b.n	8004da8 <prvSampleTimeNow+0x14>
 8004dd2:	bf00      	nop
 8004dd4:	200003c0 	.word	0x200003c0
 8004dd8:	200003d0 	.word	0x200003d0
 8004ddc:	200003cc 	.word	0x200003cc

08004de0 <prvTimerTask>:
    {
 8004de0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004de4:	4f53      	ldr	r7, [pc, #332]	@ (8004f34 <prvTimerTask+0x154>)
 8004de6:	4e54      	ldr	r6, [pc, #336]	@ (8004f38 <prvTimerTask+0x158>)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f8d3 8000 	ldr.w	r8, [r3]
 8004dee:	f1b8 0f00 	cmp.w	r8, #0
 8004df2:	d034      	beq.n	8004e5e <prvTimerTask+0x7e>
 8004df4:	2400      	movs	r4, #0
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f8d3 8000 	ldr.w	r8, [r3]
        vTaskSuspendAll();
 8004dfc:	f7ff fb9e 	bl	800453c <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e00:	a801      	add	r0, sp, #4
 8004e02:	f7ff ffc7 	bl	8004d94 <prvSampleTimeNow>
            if( xTimerListsWereSwitched == pdFALSE )
 8004e06:	9b01      	ldr	r3, [sp, #4]
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e08:	4605      	mov	r5, r0
            if( xTimerListsWereSwitched == pdFALSE )
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d144      	bne.n	8004e98 <prvTimerTask+0xb8>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e0e:	bb44      	cbnz	r4, 8004e62 <prvTimerTask+0x82>
 8004e10:	4540      	cmp	r0, r8
 8004e12:	d32c      	bcc.n	8004e6e <prvTimerTask+0x8e>
                    ( void ) xTaskResumeAll();
 8004e14:	f7ff fc5c 	bl	80046d0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e18:	4629      	mov	r1, r5
 8004e1a:	4640      	mov	r0, r8
 8004e1c:	f7ff ff9a 	bl	8004d54 <prvProcessExpiredTimer>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e20:	2200      	movs	r2, #0
 8004e22:	6830      	ldr	r0, [r6, #0]
 8004e24:	a901      	add	r1, sp, #4
 8004e26:	f7ff f82d 	bl	8003e84 <xQueueReceive>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d0dc      	beq.n	8004de8 <prvTimerTask+0x8>
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e2e:	9b01      	ldr	r3, [sp, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	dbf5      	blt.n	8004e20 <prvTimerTask+0x40>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e34:	9c03      	ldr	r4, [sp, #12]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e36:	6963      	ldr	r3, [r4, #20]
 8004e38:	b113      	cbz	r3, 8004e40 <prvTimerTask+0x60>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e3a:	1d20      	adds	r0, r4, #4
 8004e3c:	f7fe fd93 	bl	8003966 <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e40:	4668      	mov	r0, sp
 8004e42:	f7ff ffa7 	bl	8004d94 <prvSampleTimeNow>
                switch( xMessage.xMessageID )
 8004e46:	9b01      	ldr	r3, [sp, #4]
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e48:	4605      	mov	r5, r0
                switch( xMessage.xMessageID )
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d8e7      	bhi.n	8004e20 <prvTimerTask+0x40>
 8004e50:	e8df f003 	tbb	[pc, r3]
 8004e54:	4f482525 	.word	0x4f482525
 8004e58:	48252568 	.word	0x48252568
 8004e5c:	4f          	.byte	0x4f
 8004e5d:	00          	.byte	0x00
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e5e:	2401      	movs	r4, #1
 8004e60:	e7cc      	b.n	8004dfc <prvTimerTask+0x1c>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e62:	4b36      	ldr	r3, [pc, #216]	@ (8004f3c <prvTimerTask+0x15c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681c      	ldr	r4, [r3, #0]
 8004e68:	fab4 f484 	clz	r4, r4
 8004e6c:	0964      	lsrs	r4, r4, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e6e:	4622      	mov	r2, r4
 8004e70:	6830      	ldr	r0, [r6, #0]
 8004e72:	eba8 0105 	sub.w	r1, r8, r5
 8004e76:	f7ff f97f 	bl	8004178 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004e7a:	f7ff fc29 	bl	80046d0 <xTaskResumeAll>
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	d1ce      	bne.n	8004e20 <prvTimerTask+0x40>
                        portYIELD_WITHIN_API();
 8004e82:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	e7c3      	b.n	8004e20 <prvTimerTask+0x40>
                ( void ) xTaskResumeAll();
 8004e98:	f7ff fc1a 	bl	80046d0 <xTaskResumeAll>
    }
 8004e9c:	e7c0      	b.n	8004e20 <prvTimerTask+0x40>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e9e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ea2:	69a1      	ldr	r1, [r4, #24]
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004eac:	9b02      	ldr	r3, [sp, #8]
 8004eae:	4602      	mov	r2, r0
 8004eb0:	4419      	add	r1, r3
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f7ff ff1c 	bl	8004cf0 <prvInsertTimerInActiveList>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d0b1      	beq.n	8004e20 <prvTimerTask+0x40>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ebc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8004ec0:	0759      	lsls	r1, r3, #29
 8004ec2:	d50a      	bpl.n	8004eda <prvTimerTask+0xfa>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004ec4:	69a3      	ldr	r3, [r4, #24]
 8004ec6:	9902      	ldr	r1, [sp, #8]
 8004ec8:	462a      	mov	r2, r5
 8004eca:	4620      	mov	r0, r4
 8004ecc:	4419      	add	r1, r3
 8004ece:	f7ff ff2d 	bl	8004d2c <prvReloadTimer>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	6a23      	ldr	r3, [r4, #32]
 8004ed6:	4798      	blx	r3
 8004ed8:	e7a2      	b.n	8004e20 <prvTimerTask+0x40>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004eda:	f023 0301 	bic.w	r3, r3, #1
 8004ede:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8004ee2:	e7f6      	b.n	8004ed2 <prvTimerTask+0xf2>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ee4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8004ef0:	e796      	b.n	8004e20 <prvTimerTask+0x40>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ef2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004efe:	9902      	ldr	r1, [sp, #8]
 8004f00:	61a1      	str	r1, [r4, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f02:	b941      	cbnz	r1, 8004f16 <prvTimerTask+0x136>
 8004f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	e7fe      	b.n	8004f14 <prvTimerTask+0x134>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f16:	4603      	mov	r3, r0
 8004f18:	4602      	mov	r2, r0
 8004f1a:	4401      	add	r1, r0
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f7ff fee7 	bl	8004cf0 <prvInsertTimerInActiveList>
                        break;
 8004f22:	e77d      	b.n	8004e20 <prvTimerTask+0x40>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f24:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8004f28:	079a      	lsls	r2, r3, #30
 8004f2a:	d4dd      	bmi.n	8004ee8 <prvTimerTask+0x108>
                                vPortFree( pxTimer );
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f000 fa6d 	bl	800540c <vPortFree>
 8004f32:	e775      	b.n	8004e20 <prvTimerTask+0x40>
 8004f34:	200003d0 	.word	0x200003d0
 8004f38:	200003c8 	.word	0x200003c8
 8004f3c:	200003cc 	.word	0x200003cc

08004f40 <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
 8004f42:	4c0f      	ldr	r4, [pc, #60]	@ (8004f80 <prvCheckForValidListAndQueue+0x40>)
        taskENTER_CRITICAL();
 8004f44:	f000 f8a6 	bl	8005094 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 8004f48:	6825      	ldr	r5, [r4, #0]
 8004f4a:	b9ad      	cbnz	r5, 8004f78 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8004f4c:	4f0d      	ldr	r7, [pc, #52]	@ (8004f84 <prvCheckForValidListAndQueue+0x44>)
                vListInitialise( &xActiveTimerList2 );
 8004f4e:	4e0e      	ldr	r6, [pc, #56]	@ (8004f88 <prvCheckForValidListAndQueue+0x48>)
                vListInitialise( &xActiveTimerList1 );
 8004f50:	4638      	mov	r0, r7
 8004f52:	f7fe fce3 	bl	800391c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004f56:	4630      	mov	r0, r6
 8004f58:	f7fe fce0 	bl	800391c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f8c <prvCheckForValidListAndQueue+0x4c>)

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004f5e:	462a      	mov	r2, r5
                pxCurrentTimerList = &xActiveTimerList1;
 8004f60:	601f      	str	r7, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004f62:	4b0b      	ldr	r3, [pc, #44]	@ (8004f90 <prvCheckForValidListAndQueue+0x50>)
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004f64:	210c      	movs	r1, #12
 8004f66:	2008      	movs	r0, #8
                pxOverflowTimerList = &xActiveTimerList2;
 8004f68:	601e      	str	r6, [r3, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004f6a:	f7fe fde3 	bl	8003b34 <xQueueGenericCreate>
 8004f6e:	6020      	str	r0, [r4, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004f70:	b110      	cbz	r0, 8004f78 <prvCheckForValidListAndQueue+0x38>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f72:	4908      	ldr	r1, [pc, #32]	@ (8004f94 <prvCheckForValidListAndQueue+0x54>)
 8004f74:	f7ff f8d8 	bl	8004128 <vQueueAddToRegistry>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    }
 8004f78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        taskEXIT_CRITICAL();
 8004f7c:	f000 b8aa 	b.w	80050d4 <vPortExitCritical>
 8004f80:	200003c8 	.word	0x200003c8
 8004f84:	200003e8 	.word	0x200003e8
 8004f88:	200003d4 	.word	0x200003d4
 8004f8c:	200003d0 	.word	0x200003d0
 8004f90:	200003cc 	.word	0x200003cc
 8004f94:	08005584 	.word	0x08005584

08004f98 <xTimerCreateTimerTask>:
    {
 8004f98:	b507      	push	{r0, r1, r2, lr}
        prvCheckForValidListAndQueue();
 8004f9a:	f7ff ffd1 	bl	8004f40 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd4 <xTimerCreateTimerTask+0x3c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	b943      	cbnz	r3, 8004fb6 <xTimerCreateTimerTask+0x1e>
 8004fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
        configASSERT( xReturn );
 8004fb4:	e7fe      	b.n	8004fb4 <xTimerCreateTimerTask+0x1c>
                xReturn = xTaskCreate( prvTimerTask,
 8004fb6:	4b08      	ldr	r3, [pc, #32]	@ (8004fd8 <xTimerCreateTimerTask+0x40>)
 8004fb8:	22c8      	movs	r2, #200	@ 0xc8
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	4907      	ldr	r1, [pc, #28]	@ (8004fdc <xTimerCreateTimerTask+0x44>)
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	4807      	ldr	r0, [pc, #28]	@ (8004fe0 <xTimerCreateTimerTask+0x48>)
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f7ff f991 	bl	80042ec <xTaskCreate>
        configASSERT( xReturn );
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d0ea      	beq.n	8004fa4 <xTimerCreateTimerTask+0xc>
    }
 8004fce:	b003      	add	sp, #12
 8004fd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fd4:	200003c8 	.word	0x200003c8
 8004fd8:	200003c4 	.word	0x200003c4
 8004fdc:	08005589 	.word	0x08005589
 8004fe0:	08004de1 	.word	0x08004de1

08004fe4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8004fe4:	4806      	ldr	r0, [pc, #24]	@ (8005000 <prvPortStartFirstTask+0x1c>)
 8004fe6:	6800      	ldr	r0, [r0, #0]
 8004fe8:	6800      	ldr	r0, [r0, #0]
 8004fea:	f380 8808 	msr	MSP, r0
 8004fee:	b662      	cpsie	i
 8004ff0:	b661      	cpsie	f
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	df00      	svc	0
 8004ffc:	bf00      	nop
 8004ffe:	0000      	.short	0x0000
 8005000:	e000ed08 	.word	0xe000ed08

08005004 <prvTaskExitError>:
    volatile uint32_t ulDummy = 0UL;
 8005004:	2300      	movs	r3, #0
{
 8005006:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0UL;
 8005008:	9301      	str	r3, [sp, #4]
    configASSERT( uxCriticalNesting == ~0UL );
 800500a:	4b0d      	ldr	r3, [pc, #52]	@ (8005040 <prvTaskExitError+0x3c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3301      	adds	r3, #1
 8005010:	d008      	beq.n	8005024 <prvTaskExitError+0x20>
 8005012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	e7fe      	b.n	8005022 <prvTaskExitError+0x1e>
 8005024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
    while( ulDummy == 0 )
 8005034:	9b01      	ldr	r3, [sp, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0fc      	beq.n	8005034 <prvTaskExitError+0x30>
}
 800503a:	b002      	add	sp, #8
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20000040 	.word	0x20000040

08005044 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005044:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005048:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800504c:	4b05      	ldr	r3, [pc, #20]	@ (8005064 <pxPortInitialiseStack+0x20>)
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800504e:	f021 0101 	bic.w	r1, r1, #1
 8005052:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005056:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800505a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800505e:	3840      	subs	r0, #64	@ 0x40
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	08005005 	.word	0x08005005
	...

08005070 <SVC_Handler>:
    __asm volatile (
 8005070:	4b07      	ldr	r3, [pc, #28]	@ (8005090 <pxCurrentTCBConst2>)
 8005072:	6819      	ldr	r1, [r3, #0]
 8005074:	6808      	ldr	r0, [r1, #0]
 8005076:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800507a:	f380 8809 	msr	PSP, r0
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f04f 0000 	mov.w	r0, #0
 8005086:	f380 8811 	msr	BASEPRI, r0
 800508a:	f04e 0e0d 	orr.w	lr, lr, #13
 800508e:	4770      	bx	lr

08005090 <pxCurrentTCBConst2>:
 8005090:	200003bc 	.word	0x200003bc

08005094 <vPortEnterCritical>:
 8005094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80050a4:	4a0a      	ldr	r2, [pc, #40]	@ (80050d0 <vPortEnterCritical+0x3c>)
 80050a6:	6813      	ldr	r3, [r2, #0]
 80050a8:	3301      	adds	r3, #1
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80050aa:	2b01      	cmp	r3, #1
    uxCriticalNesting++;
 80050ac:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
 80050ae:	d10e      	bne.n	80050ce <vPortEnterCritical+0x3a>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80050b4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	b143      	cbz	r3, 80050ce <vPortEnterCritical+0x3a>
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	e7fe      	b.n	80050cc <vPortEnterCritical+0x38>
    }
}
 80050ce:	4770      	bx	lr
 80050d0:	20000040 	.word	0x20000040

080050d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    configASSERT( uxCriticalNesting );
 80050d4:	4a08      	ldr	r2, [pc, #32]	@ (80050f8 <vPortExitCritical+0x24>)
 80050d6:	6813      	ldr	r3, [r2, #0]
 80050d8:	b943      	cbnz	r3, 80050ec <vPortExitCritical+0x18>
 80050da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	e7fe      	b.n	80050ea <vPortExitCritical+0x16>
    uxCriticalNesting--;
 80050ec:	3b01      	subs	r3, #1
 80050ee:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80050f0:	b90b      	cbnz	r3, 80050f6 <vPortExitCritical+0x22>
        __asm volatile
 80050f2:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80050f6:	4770      	bx	lr
 80050f8:	20000040 	.word	0x20000040
 80050fc:	00000000 	.word	0x00000000

08005100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005100:	f3ef 8009 	mrs	r0, PSP
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	4b0d      	ldr	r3, [pc, #52]	@ (8005140 <pxCurrentTCBConst>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005110:	6010      	str	r0, [r2, #0]
 8005112:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005116:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800511a:	f380 8811 	msr	BASEPRI, r0
 800511e:	f7ff fb99 	bl	8004854 <vTaskSwitchContext>
 8005122:	f04f 0000 	mov.w	r0, #0
 8005126:	f380 8811 	msr	BASEPRI, r0
 800512a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	6808      	ldr	r0, [r1, #0]
 8005132:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005136:	f380 8809 	msr	PSP, r0
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	4770      	bx	lr

08005140 <pxCurrentTCBConst>:
 8005140:	200003bc 	.word	0x200003bc

08005144 <SysTick_Handler>:
    );
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005144:	b508      	push	{r3, lr}
        __asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005156:	f7ff fa05 	bl	8004564 <xTaskIncrementTick>
 800515a:	b128      	cbz	r0, 8005168 <SysTick_Handler+0x24>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800515c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005160:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005164:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
        __asm volatile
 8005168:	2300      	movs	r3, #0
 800516a:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800516e:	bd08      	pop	{r3, pc}

08005170 <vPortSetupTimerInterrupt>:
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005170:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8005174:	2300      	movs	r3, #0
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005176:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800517a:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800517c:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800517e:	4b04      	ldr	r3, [pc, #16]	@ (8005190 <vPortSetupTimerInterrupt+0x20>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	fbb3 f3f1 	udiv	r3, r3, r1
 8005186:	3b01      	subs	r3, #1
 8005188:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800518a:	2307      	movs	r3, #7
 800518c:	6113      	str	r3, [r2, #16]
}
 800518e:	4770      	bx	lr
 8005190:	20000000 	.word	0x20000000

08005194 <xPortStartScheduler>:
{
 8005194:	b513      	push	{r0, r1, r4, lr}
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005196:	4b27      	ldr	r3, [pc, #156]	@ (8005234 <xPortStartScheduler+0xa0>)
 8005198:	781a      	ldrb	r2, [r3, #0]
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	9201      	str	r2, [sp, #4]
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800519e:	22ff      	movs	r2, #255	@ 0xff
 80051a0:	701a      	strb	r2, [r3, #0]
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051a2:	781b      	ldrb	r3, [r3, #0]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051a4:	4a24      	ldr	r2, [pc, #144]	@ (8005238 <xPortStartScheduler+0xa4>)
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f88d 3003 	strb.w	r3, [sp, #3]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80051b0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80051b4:	7013      	strb	r3, [r2, #0]
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051b6:	2307      	movs	r3, #7
 80051b8:	4a20      	ldr	r2, [pc, #128]	@ (800523c <xPortStartScheduler+0xa8>)
 80051ba:	6013      	str	r3, [r2, #0]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051bc:	f89d 1003 	ldrb.w	r1, [sp, #3]
            ulMaxPRIGROUPValue--;
 80051c0:	6813      	ldr	r3, [r2, #0]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051c2:	0609      	lsls	r1, r1, #24
 80051c4:	d40a      	bmi.n	80051dc <xPortStartScheduler+0x48>
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d011      	beq.n	80051ee <xPortStartScheduler+0x5a>
        __asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	e7fe      	b.n	80051da <xPortStartScheduler+0x46>
            ulMaxPRIGROUPValue--;
 80051dc:	3b01      	subs	r3, #1
 80051de:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	f88d 3003 	strb.w	r3, [sp, #3]
 80051ec:	e7e6      	b.n	80051bc <xPortStartScheduler+0x28>
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80051f2:	6013      	str	r3, [r2, #0]
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80051f4:	9b01      	ldr	r3, [sp, #4]
 80051f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005234 <xPortStartScheduler+0xa0>)
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80051fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    uxCriticalNesting = 0;
 8005200:	2400      	movs	r4, #0
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005202:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8005206:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800520a:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800520e:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8005212:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 8005216:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
    vPortSetupTimerInterrupt();
 800521a:	f7ff ffa9 	bl	8005170 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 800521e:	4b08      	ldr	r3, [pc, #32]	@ (8005240 <xPortStartScheduler+0xac>)
 8005220:	601c      	str	r4, [r3, #0]
    prvPortStartFirstTask();
 8005222:	f7ff fedf 	bl	8004fe4 <prvPortStartFirstTask>
    vTaskSwitchContext();
 8005226:	f7ff fb15 	bl	8004854 <vTaskSwitchContext>
}
 800522a:	4620      	mov	r0, r4
    prvTaskExitError();
 800522c:	f7ff feea 	bl	8005004 <prvTaskExitError>
}
 8005230:	b002      	add	sp, #8
 8005232:	bd10      	pop	{r4, pc}
 8005234:	e000e400 	.word	0xe000e400
 8005238:	20000400 	.word	0x20000400
 800523c:	200003fc 	.word	0x200003fc
 8005240:	20000040 	.word	0x20000040

08005244 <vPortValidateInterruptPriority>:
    {
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005244:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005248:	2b0f      	cmp	r3, #15
 800524a:	d90e      	bls.n	800526a <vPortValidateInterruptPriority+0x26>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800524c:	4a11      	ldr	r2, [pc, #68]	@ (8005294 <vPortValidateInterruptPriority+0x50>)
 800524e:	5c9b      	ldrb	r3, [r3, r2]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005250:	4a11      	ldr	r2, [pc, #68]	@ (8005298 <vPortValidateInterruptPriority+0x54>)
 8005252:	7812      	ldrb	r2, [r2, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d908      	bls.n	800526a <vPortValidateInterruptPriority+0x26>
 8005258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	e7fe      	b.n	8005268 <vPortValidateInterruptPriority+0x24>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800526a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800526e:	4a0b      	ldr	r2, [pc, #44]	@ (800529c <vPortValidateInterruptPriority+0x58>)
 8005270:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8005274:	6812      	ldr	r2, [r2, #0]
 8005276:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800527a:	4293      	cmp	r3, r2
 800527c:	d908      	bls.n	8005290 <vPortValidateInterruptPriority+0x4c>
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	e7fe      	b.n	800528e <vPortValidateInterruptPriority+0x4a>
    }
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	e000e3f0 	.word	0xe000e3f0
 8005298:	20000400 	.word	0x20000400
 800529c:	200003fc 	.word	0x200003fc

080052a0 <prvInsertBlockIntoFreeList>:
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80052a0:	b510      	push	{r4, lr}
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052a2:	4b10      	ldr	r3, [pc, #64]	@ (80052e4 <prvInsertBlockIntoFreeList+0x44>)
 80052a4:	461a      	mov	r2, r3
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4283      	cmp	r3, r0
 80052aa:	d3fb      	bcc.n	80052a4 <prvInsertBlockIntoFreeList+0x4>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052ac:	6854      	ldr	r4, [r2, #4]
 80052ae:	1911      	adds	r1, r2, r4
 80052b0:	4288      	cmp	r0, r1
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052b2:	bf01      	itttt	eq
 80052b4:	6841      	ldreq	r1, [r0, #4]
 80052b6:	4610      	moveq	r0, r2
 80052b8:	1909      	addeq	r1, r1, r4
 80052ba:	6051      	streq	r1, [r2, #4]

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052bc:	6844      	ldr	r4, [r0, #4]
 80052be:	1901      	adds	r1, r0, r4
 80052c0:	428b      	cmp	r3, r1
 80052c2:	d10c      	bne.n	80052de <prvInsertBlockIntoFreeList+0x3e>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80052c4:	4908      	ldr	r1, [pc, #32]	@ (80052e8 <prvInsertBlockIntoFreeList+0x48>)
 80052c6:	6809      	ldr	r1, [r1, #0]
 80052c8:	428b      	cmp	r3, r1
 80052ca:	d003      	beq.n	80052d4 <prvInsertBlockIntoFreeList+0x34>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052cc:	6859      	ldr	r1, [r3, #4]
 80052ce:	4421      	add	r1, r4
 80052d0:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052d2:	6819      	ldr	r1, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80052d4:	4290      	cmp	r0, r2
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052d6:	6001      	str	r1, [r0, #0]
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052d8:	bf18      	it	ne
 80052da:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80052dc:	bd10      	pop	{r4, pc}
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052de:	4619      	mov	r1, r3
 80052e0:	e7f8      	b.n	80052d4 <prvInsertBlockIntoFreeList+0x34>
 80052e2:	bf00      	nop
 80052e4:	20000418 	.word	0x20000418
 80052e8:	20000414 	.word	0x20000414

080052ec <pvPortMalloc>:
{
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	4604      	mov	r4, r0
    vTaskSuspendAll();
 80052f0:	f7ff f924 	bl	800453c <vTaskSuspendAll>
        if( pxEnd == NULL )
 80052f4:	493f      	ldr	r1, [pc, #252]	@ (80053f4 <pvPortMalloc+0x108>)
 80052f6:	680b      	ldr	r3, [r1, #0]
 80052f8:	b9f3      	cbnz	r3, 8005338 <pvPortMalloc+0x4c>
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80052fa:	4a3f      	ldr	r2, [pc, #252]	@ (80053f8 <pvPortMalloc+0x10c>)
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052fc:	4d3f      	ldr	r5, [pc, #252]	@ (80053fc <pvPortMalloc+0x110>)
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052fe:	0750      	lsls	r0, r2, #29
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005300:	bf1f      	itttt	ne
 8005302:	1dd0      	addne	r0, r2, #7
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005304:	f020 0007 	bicne.w	r0, r0, #7
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005308:	f502 5220 	addne.w	r2, r2, #10240	@ 0x2800
 800530c:	1a13      	subne	r3, r2, r0
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800530e:	bf0c      	ite	eq
 8005310:	f44f 5320 	moveq.w	r3, #10240	@ 0x2800
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005314:	4602      	movne	r2, r0
    xStart.xBlockSize = ( size_t ) 0;
 8005316:	2000      	movs	r0, #0
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8005318:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
 800531a:	3b08      	subs	r3, #8
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800531c:	f023 0307 	bic.w	r3, r3, #7
    xStart.xBlockSize = ( size_t ) 0;
 8005320:	6068      	str	r0, [r5, #4]
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005322:	602a      	str	r2, [r5, #0]
    pxEnd->pxNextFreeBlock = NULL;
 8005324:	e9c3 0000 	strd	r0, r0, [r3]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005328:	1a98      	subs	r0, r3, r2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800532a:	e9c2 3000 	strd	r3, r0, [r2]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800532e:	600b      	str	r3, [r1, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005330:	4b33      	ldr	r3, [pc, #204]	@ (8005400 <pvPortMalloc+0x114>)
 8005332:	6018      	str	r0, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005334:	4b33      	ldr	r3, [pc, #204]	@ (8005404 <pvPortMalloc+0x118>)
 8005336:	6018      	str	r0, [r3, #0]
        if( xWantedSize > 0 )
 8005338:	2c00      	cmp	r4, #0
 800533a:	d04a      	beq.n	80053d2 <pvPortMalloc+0xe6>
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800533c:	f004 0307 	and.w	r3, r4, #7
            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005340:	f1a3 0211 	sub.w	r2, r3, #17
 8005344:	42a2      	cmp	r2, r4
 8005346:	d351      	bcc.n	80053ec <pvPortMalloc+0x100>
 8005348:	f104 0e10 	add.w	lr, r4, #16
                xWantedSize += xAdditionalRequiredSize;
 800534c:	ebae 0c03 	sub.w	ip, lr, r3
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005350:	f1bc 0f00 	cmp.w	ip, #0
 8005354:	dd4a      	ble.n	80053ec <pvPortMalloc+0x100>
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005356:	4f2b      	ldr	r7, [pc, #172]	@ (8005404 <pvPortMalloc+0x118>)
 8005358:	683e      	ldr	r6, [r7, #0]
 800535a:	4566      	cmp	r6, ip
 800535c:	d346      	bcc.n	80053ec <pvPortMalloc+0x100>
                pxBlock = xStart.pxNextFreeBlock;
 800535e:	4a27      	ldr	r2, [pc, #156]	@ (80053fc <pvPortMalloc+0x110>)
 8005360:	6815      	ldr	r5, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005362:	6868      	ldr	r0, [r5, #4]
 8005364:	4560      	cmp	r0, ip
 8005366:	d201      	bcs.n	800536c <pvPortMalloc+0x80>
 8005368:	682c      	ldr	r4, [r5, #0]
 800536a:	b9bc      	cbnz	r4, 800539c <pvPortMalloc+0xb0>
                if( pxBlock != pxEnd )
 800536c:	6809      	ldr	r1, [r1, #0]
 800536e:	42a9      	cmp	r1, r5
 8005370:	d03c      	beq.n	80053ec <pvPortMalloc+0x100>
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005372:	eba3 030e 	sub.w	r3, r3, lr
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005376:	6829      	ldr	r1, [r5, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005378:	4403      	add	r3, r0
 800537a:	2b10      	cmp	r3, #16
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800537c:	6814      	ldr	r4, [r2, #0]
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800537e:	6011      	str	r1, [r2, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005380:	d914      	bls.n	80053ac <pvPortMalloc+0xc0>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005382:	eb05 000c 	add.w	r0, r5, ip
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005386:	0742      	lsls	r2, r0, #29
 8005388:	d00b      	beq.n	80053a2 <pvPortMalloc+0xb6>
 800538a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	e7fe      	b.n	800539a <pvPortMalloc+0xae>
 800539c:	462a      	mov	r2, r5
 800539e:	4625      	mov	r5, r4
 80053a0:	e7df      	b.n	8005362 <pvPortMalloc+0x76>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053a2:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80053a4:	f8c5 c004 	str.w	ip, [r5, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053a8:	f7ff ff7a 	bl	80052a0 <prvInsertBlockIntoFreeList>
                    pxBlock->pxNextFreeBlock = NULL;
 80053ac:	2300      	movs	r3, #0
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053ae:	686a      	ldr	r2, [r5, #4]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053b0:	4913      	ldr	r1, [pc, #76]	@ (8005400 <pvPortMalloc+0x114>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053b2:	1ab6      	subs	r6, r6, r2
                    heapALLOCATE_BLOCK( pxBlock );
 80053b4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80053b8:	606a      	str	r2, [r5, #4]
                    xNumberOfSuccessfulAllocations++;
 80053ba:	4a13      	ldr	r2, [pc, #76]	@ (8005408 <pvPortMalloc+0x11c>)
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053bc:	6808      	ldr	r0, [r1, #0]
                    pxBlock->pxNextFreeBlock = NULL;
 80053be:	602b      	str	r3, [r5, #0]
                    xNumberOfSuccessfulAllocations++;
 80053c0:	6813      	ldr	r3, [r2, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053c2:	4286      	cmp	r6, r0
                    xNumberOfSuccessfulAllocations++;
 80053c4:	f103 0301 	add.w	r3, r3, #1
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053c8:	603e      	str	r6, [r7, #0]
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053ca:	bf38      	it	cc
 80053cc:	600e      	strcc	r6, [r1, #0]
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053ce:	3408      	adds	r4, #8
                    xNumberOfSuccessfulAllocations++;
 80053d0:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
 80053d2:	f7ff f97d 	bl	80046d0 <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d6:	0763      	lsls	r3, r4, #29
 80053d8:	d00a      	beq.n	80053f0 <pvPortMalloc+0x104>
 80053da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	e7fe      	b.n	80053ea <pvPortMalloc+0xfe>
    void * pvReturn = NULL;
 80053ec:	2400      	movs	r4, #0
 80053ee:	e7f0      	b.n	80053d2 <pvPortMalloc+0xe6>
}
 80053f0:	4620      	mov	r0, r4
 80053f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f4:	20000414 	.word	0x20000414
 80053f8:	20000420 	.word	0x20000420
 80053fc:	20000418 	.word	0x20000418
 8005400:	2000040c 	.word	0x2000040c
 8005404:	20000410 	.word	0x20000410
 8005408:	20000408 	.word	0x20000408

0800540c <vPortFree>:
{
 800540c:	b510      	push	{r4, lr}
    if( pv != NULL )
 800540e:	4604      	mov	r4, r0
 8005410:	b380      	cbz	r0, 8005474 <vPortFree+0x68>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005412:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	db08      	blt.n	800542c <vPortFree+0x20>
 800541a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	e7fe      	b.n	800542a <vPortFree+0x1e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800542c:	f850 2c08 	ldr.w	r2, [r0, #-8]
 8005430:	b142      	cbz	r2, 8005444 <vPortFree+0x38>
 8005432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	e7fe      	b.n	8005442 <vPortFree+0x36>
                heapFREE_BLOCK( pxLink );
 8005444:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005448:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 800544c:	f7ff f876 	bl	800453c <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005450:	4a09      	ldr	r2, [pc, #36]	@ (8005478 <vPortFree+0x6c>)
 8005452:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005456:	6811      	ldr	r1, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005458:	f1a4 0008 	sub.w	r0, r4, #8
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800545c:	440b      	add	r3, r1
 800545e:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005460:	f7ff ff1e 	bl	80052a0 <prvInsertBlockIntoFreeList>
}
 8005464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                    xNumberOfSuccessfulFrees++;
 8005468:	4a04      	ldr	r2, [pc, #16]	@ (800547c <vPortFree+0x70>)
 800546a:	6813      	ldr	r3, [r2, #0]
 800546c:	3301      	adds	r3, #1
 800546e:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 8005470:	f7ff b92e 	b.w	80046d0 <xTaskResumeAll>
}
 8005474:	bd10      	pop	{r4, pc}
 8005476:	bf00      	nop
 8005478:	20000410 	.word	0x20000410
 800547c:	20000404 	.word	0x20000404

08005480 <memset>:
 8005480:	4603      	mov	r3, r0
 8005482:	4402      	add	r2, r0
 8005484:	4293      	cmp	r3, r2
 8005486:	d100      	bne.n	800548a <memset+0xa>
 8005488:	4770      	bx	lr
 800548a:	f803 1b01 	strb.w	r1, [r3], #1
 800548e:	e7f9      	b.n	8005484 <memset+0x4>

08005490 <__libc_init_array>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	2600      	movs	r6, #0
 8005494:	4d0c      	ldr	r5, [pc, #48]	@ (80054c8 <__libc_init_array+0x38>)
 8005496:	4c0d      	ldr	r4, [pc, #52]	@ (80054cc <__libc_init_array+0x3c>)
 8005498:	1b64      	subs	r4, r4, r5
 800549a:	10a4      	asrs	r4, r4, #2
 800549c:	42a6      	cmp	r6, r4
 800549e:	d109      	bne.n	80054b4 <__libc_init_array+0x24>
 80054a0:	f000 f828 	bl	80054f4 <_init>
 80054a4:	2600      	movs	r6, #0
 80054a6:	4d0a      	ldr	r5, [pc, #40]	@ (80054d0 <__libc_init_array+0x40>)
 80054a8:	4c0a      	ldr	r4, [pc, #40]	@ (80054d4 <__libc_init_array+0x44>)
 80054aa:	1b64      	subs	r4, r4, r5
 80054ac:	10a4      	asrs	r4, r4, #2
 80054ae:	42a6      	cmp	r6, r4
 80054b0:	d105      	bne.n	80054be <__libc_init_array+0x2e>
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b8:	4798      	blx	r3
 80054ba:	3601      	adds	r6, #1
 80054bc:	e7ee      	b.n	800549c <__libc_init_array+0xc>
 80054be:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c2:	4798      	blx	r3
 80054c4:	3601      	adds	r6, #1
 80054c6:	e7f2      	b.n	80054ae <__libc_init_array+0x1e>
 80054c8:	08005594 	.word	0x08005594
 80054cc:	08005594 	.word	0x08005594
 80054d0:	08005594 	.word	0x08005594
 80054d4:	08005598 	.word	0x08005598

080054d8 <memcpy>:
 80054d8:	440a      	add	r2, r1
 80054da:	4291      	cmp	r1, r2
 80054dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80054e0:	d100      	bne.n	80054e4 <memcpy+0xc>
 80054e2:	4770      	bx	lr
 80054e4:	b510      	push	{r4, lr}
 80054e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054ea:	4291      	cmp	r1, r2
 80054ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054f0:	d1f9      	bne.n	80054e6 <memcpy+0xe>
 80054f2:	bd10      	pop	{r4, pc}

080054f4 <_init>:
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f6:	bf00      	nop
 80054f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fa:	bc08      	pop	{r3}
 80054fc:	469e      	mov	lr, r3
 80054fe:	4770      	bx	lr

08005500 <_fini>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr
